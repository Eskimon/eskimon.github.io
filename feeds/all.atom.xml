<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Le blog d'Eskimon</title><link href="https://eskimon.fr/" rel="alternate"></link><link href="https://eskimon.fr/feeds/all.atom.xml" rel="self"></link><id>https://eskimon.fr/</id><updated>2020-07-30T12:12:00+02:00</updated><entry><title>Découverte du Grove Beginner Kit de SeeedStudio</title><link href="https://eskimon.fr/decouverte-du-grove-beginner-kit-de-seeedstudio" rel="alternate"></link><published>2020-07-30T12:12:00+02:00</published><updated>2020-07-30T12:12:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2020-07-30:/decouverte-du-grove-beginner-kit-de-seeedstudio</id><summary type="html">&lt;p&gt;
 Connaissez-vous la marque SeeedStudio ? Ou peut-être connaissez-vous les modules "Grove" qui sont assez répandu dans le monde du bricolage et de l’apprentissage autour d’Arduino. Leur principale force étant qu’ils sont tous connectables avec un format de connecteur unifié pour rendre leur ecosysteme le plus simpe possible d …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Connaissez-vous la marque SeeedStudio ? Ou peut-être connaissez-vous les modules "Grove" qui sont assez répandu dans le monde du bricolage et de l’apprentissage autour d’Arduino. Leur principale force étant qu’ils sont tous connectables avec un format de connecteur unifié pour rendre leur ecosysteme le plus simpe possible d’utilisation. Depuis leur naissance en 2008, ils ont ainsi développé une gamme de près 300 modules Grove tout en commercialisant aussi des produits plus classiques du monde des bidouilleurs comme des RaspberryPi, des consommables pour imprimante 3D ou encore un service de réalisation de PCB. Si vous les chercher, ils sont ici :
 &lt;a href="https://www.seeedstudio.com"&gt;
  seeedstudio.com
 &lt;/a&gt;
 !
&lt;/p&gt;
&lt;p&gt;
 Dans cet article, je vais vous présenter et donner mon avis sur leur nouveau produit de cet été 2020 : le
 &lt;a href="https://www.seeedstudio.com/Grove-Beginner-Kit-for-Arduino-p-4549.html"&gt;
  Grove Beginner Kit
 &lt;/a&gt;
 !
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Cet article a été écrit avec une carte offerte par Seeed. Bien que le produit m’ait été envoyé par la boutique SeeedStudio pour vous le faire découvrir, je n’ai eu aucun compte à rendre lors de l’écriture de cet article et l’avis présenté ici n’engage donc que moi.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="présentation"&gt;
 &lt;a aria-hidden="true" href="#présentation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Présentation
&lt;/h3&gt;
&lt;p&gt;
 Comme son nom l’indique, cette nouvelle carte est destinée aux
 &lt;em&gt;
  beginners
 &lt;/em&gt;
 , les débutants. Pourquoi ? Tout simplement parce qu’il regroupe des composants variés
 &lt;em&gt;
  directement cablé
 &lt;/em&gt;
 , sans avoir à prendre le risque de se tromper dans les branchements. Comme expliqué dans l’intro, c’est d’ailleurs là la marque de fabrique de SeeedStudio : des composants facile à brancher avec un connecteur unifié entre les cartes pour ne pas avoir à se prendre la tête avec des fils qui partent dans tout les sens.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Le Grove Beginner Kit" src="./images/uploaded/decouverte-du-grove-beginner-kit-de-seeedstudio/Grove2.png"/&gt;
 &lt;figcaption&gt;
  Le Grove Beginner Kit
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Sur cette carte on retrouve donc au centre le coeur de la bête qui est basé sur un traditionnel Atmega 328 qui anime les cartes Arduino habituelles. Ce module principal regroupe aussi 12 connecteurs "Grove" qui permettent de brancher d’autres modules sur les broches mentionnées sur chaque connecteur. Tout autour, on retrouve les modules Grove suivants :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;strong&gt;
   LED
  &lt;/strong&gt;
  (Classique pour débuter)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   Buzzer
  &lt;/strong&gt;
  pour faire des mélodies
 &lt;/li&gt;
 &lt;li&gt;
  Un afficheur
  &lt;strong&gt;
   OLED
  &lt;/strong&gt;
  monochrome de 0.96 pouces (2.5cm), résolution de 128x64
 &lt;/li&gt;
 &lt;li&gt;
  Un
  &lt;strong&gt;
   bouton
  &lt;/strong&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Un
  &lt;strong&gt;
   potentiomètre rotatif
  &lt;/strong&gt;
  (10 kOhms)
 &lt;/li&gt;
 &lt;li&gt;
  Un
  &lt;strong&gt;
   capteur de lumière
  &lt;/strong&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Un
  &lt;strong&gt;
   capteur de bruit
  &lt;/strong&gt;
  (petit micro)
 &lt;/li&gt;
 &lt;li&gt;
  Un capteur de
  &lt;strong&gt;
   température et d’humitidité
  &lt;/strong&gt;
  (DHT11)
 &lt;/li&gt;
 &lt;li&gt;
  Un capteur de
  &lt;strong&gt;
   pression atmospherique
  &lt;/strong&gt;
  (DPS310, 300–1200 hPa)
 &lt;/li&gt;
 &lt;li&gt;
  Un
  &lt;strong&gt;
   accélèromètre
  &lt;/strong&gt;
  (LIS3DHTR)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Comme d’habitude, chaque module possède son connecteur Grove pour facilement le relier. Mais là où Seeed a été très malin c’est que chaque module est déjà relié directement via le PCB à la carte électronique principale. Du coup, aucun câble à connecter, tout est déjà disponible par défaut sans rien avoir à faire. Et si jamais vous voulez mettre un module dans un boîtier ou autre, ils sont tous détachables en cassant la carte électronique sur les découpes prévues à cet effet. Futé !
&lt;/p&gt;
&lt;p&gt;
 Enfin, ces modules sont assez complémentaires pour pas mal de bricolage. Par exemple, l’accélèromètre et le baromètre sont souvent utilisé ensemble dans les drones, pour détecter l’inclinaison et l’altitude de ce dernier. Avec le module OLED, vous avez un affichage pour faire une petite station météo en utilisant le capteur de température et d’humidité et celui de lumière par exemple.
&lt;/p&gt;
&lt;p&gt;
 Détail tout con mais que j’adore, une règle de 0 à 15cm est imprimée en haut du PCB (et idem en pouces sur l’autre face). Ca ne sert pas à grand chose mais c’est le genre de petite attention que j’aime beaucoup ! Aussi, la carte dans son ensemble est posé sur des petits entretoises en plastique et est utilisable dès le déballage, directement dans le carton pour être facile à ranger ensuite. Encore une fois, malin ! Enfin, dans chacun des côtés de la boîte on trouve un câble USB (un peu court) et des câbles pour connecteur Grove.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Le Grove Beginner Kit dans sa jolie boîte" src="./images/uploaded/decouverte-du-grove-beginner-kit-de-seeedstudio/Grove.png"/&gt;
 &lt;figcaption&gt;
  Le Grove Beginner Kit dans sa jolie boîte
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="mon-avis"&gt;
 &lt;a aria-hidden="true" href="#mon-avis"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Mon avis
&lt;/h3&gt;
&lt;p&gt;
 Je connaissais surtout la marque Seeed par ces modules Grove qui ont l’originalité de nous simplifier les branchements. Je dois dire que j’ai été pas mal surpris par la qualité de leur ecosysteme. Tout d’abord, le produit est propre. Les cartes sont claires, chacune possède une inscription sur le vernis pour rappeler quelle est sa version (dans le cas où il existe une gamme du même module comme pour l’accélèromètre par exemple) et l’idée de créer des modules détachables est plutôt originale.
&lt;/p&gt;
&lt;p&gt;
 Tant qu’à parler de la marque Seeed, petit aparté sur leur boutique. Très bon point, les pages des modules possèdents toutes ou presque un lien vers la datasheet du composant concerné et des fichiers du branchement électronique ainsi qu’une page de Wiki pour expliquer comment l’utiliser. C’est très pro de leur part, j’aime beaucoup. Par contre gros point négatif : elle est entièrement en anglais et les seuls devises acceptées pour le paiement sont le Dollars et le Yen. Un peu dommage pour nous autre européen.
&lt;/p&gt;
&lt;p&gt;
 Evidemment ce genre de kit ne conviendra pas à tout le monde. Si vous savez déjà ce que vous voulez faire alors préférez acheter directement les modules qui vous conviennent. Mais dans le cas où vous souhaitez découvrir de nouveaux horizons sur Arduino avec des modules tout fait, ce
 &lt;a href="https://www.seeedstudio.com/Grove-Beginner-Kit-for-Arduino-p-4549.html"&gt;
  kit Grove Beginner
 &lt;/a&gt;
 est plutôt un bon point de départ pour un prix contenu de 20 euros (En parlant prix, j’ai cherché chaque produit sur leur site et au final ces derniers sont en général entre 3 et 5€ pièce si vous les achetiez séparemment, donc une belle économie ici si vous voulez un "panier garni" de modules Arduino
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 ). Certes vous ne retrouverez pas un paquet de résistances et de leds qui trainent, mais si vous voulez vous pencher sur la programmation plutôt que l’électronique alors dans ce cas c’est une piste très intéressante !
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/_S-Mewc56KE" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Présentation du Grove Beginner Kit par SeeedStudio
 &lt;/figcaption&gt;
&lt;/figure&gt;</content><category term="arduino"></category><category term="seeedstudio"></category><category term="kit"></category></entry><entry><title>Utiliser un smartphone comme caméra de streaming</title><link href="https://eskimon.fr/tuto-utiliser-un-smartphone-comme-cam%C3%A9ra-de-streaming" rel="alternate"></link><published>2020-01-28T12:00:00+01:00</published><updated>2020-01-28T12:00:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2020-01-28:/tuto-utiliser-un-smartphone-comme-caméra-de-streaming</id><summary type="html">&lt;p&gt;
 Récemment, je me suis amusé à faire quelques
 &lt;em&gt;
  lives
 &lt;/em&gt;
 sur Twitch (coucou
 &lt;a href="https://eskimon.fr"&gt;
  https://eskimon.fr
 &lt;/a&gt;
 ) mais je n’avais pas envie de faire trop d’investissement dans du matériel. Du coup, en tant que webcam j’ai voulu réussir à utiliser mon téléphone comme caméra à intégrer dans mes streams …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Récemment, je me suis amusé à faire quelques
 &lt;em&gt;
  lives
 &lt;/em&gt;
 sur Twitch (coucou
 &lt;a href="https://eskimon.fr"&gt;
  https://eskimon.fr
 &lt;/a&gt;
 ) mais je n’avais pas envie de faire trop d’investissement dans du matériel. Du coup, en tant que webcam j’ai voulu réussir à utiliser mon téléphone comme caméra à intégrer dans mes streams. Voici comment j’ai fait avec un "vieux" OnePlus One (Android 5 ou 6) à l’écran cassé qui trainait dans un tiroir…
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#du-côté-du-smartphone-android"&gt;
    Du côté du smartphone (Android)
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#présentation"&gt;
     Présentation
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#configuration"&gt;
     Configuration
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#utilisation"&gt;
     Utilisation
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#utilisation-avec-obs"&gt;
    Utilisation avec OBS
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#vérification-dans-un-navigateur"&gt;
     Vérification dans un navigateur
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#intégration-de-la-vidéo-dans-obs"&gt;
     Intégration de la vidéo dans OBS
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="du-côté-du-smartphone-android"&gt;
 &lt;a aria-hidden="true" href="#du-côté-du-smartphone-android"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Du côté du smartphone (Android)
&lt;/h3&gt;
&lt;h4 id="présentation"&gt;
 &lt;a aria-hidden="true" href="#présentation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Présentation
&lt;/h4&gt;
&lt;p&gt;
 Tout d’abord, intéressons-nous à "Comment transformer son téléphone en caméra".
&lt;/p&gt;
&lt;p&gt;
 Pour cela, j’utilise l’application "
 &lt;a href="https://play.google.com/store/apps/details?id=com.pas.webcam"&gt;
  IP Webcam
 &lt;/a&gt;
 ". Cette dernière permet d’utiliser votre téléphone comme caméra IP. C’est à dire qu’elle prendra la vidéo du capteur photo (avant ou arrière) de votre appareil pour ensuite l’envoyer dans un flux réseau. Nous récupérerons alors ce dernier dans un [élément] navigateur (mais nous y reviendrons dans la partie suivante).
&lt;/p&gt;
&lt;h4 id="configuration"&gt;
 &lt;a aria-hidden="true" href="#configuration"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Configuration
&lt;/h4&gt;
&lt;p&gt;
 Une fois l’application installée, parametrons-là.
&lt;/p&gt;
&lt;p&gt;
 Tout d’abord, allons voir la rubrique "Préférences vidéo". Dans cette dernière, vous pouvez régler le capteur qui sera utilisé par défaut dans l’option "Main Camera". Un peu plus bas, vous pourrez choisir la résolution qui sera mise en oeuvre lorsque l’application fonctionne. Attention, plus la résolution est élevée et plus la charge réseau sera importante. Etant donnée que le flux vidéo passera sur votre réseau wifi, faites attention que ce dernier soit assez véloce pour ne pas impacter les performances en termes de débit de votre ordinateur.
&lt;/p&gt;
&lt;p&gt;
 Ensuite, ce sera le paramètre "Qualité" qui va nous intéresser. Je vous conseille de le régler à 40. Plus ce paramètre sera haut, moins l’image sera compressée mais une fois de plus le débit nécessaire pour envoyer l’image sera plus élevé.
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Comme dit plusieurs fois, plus la qualitée/résolution sera élevée et plus le débit wifi nécessaire sera élevé aussi. Si le wifi (montant depuis votre téléphone ou descendant vers votre ordinateur) n’est pas suffisant, la vidéo souffrira de
   &lt;em&gt;
    stuttering
   &lt;/em&gt;
   (petit freeze) et de lag désagréable pour vos viewers.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Selon votre cas d’utilisation, il pourra être utile de modifier l’option "Orientation de la vidéo" et "Retourner" pour afficher l’image dans le bon sens. Mais nous verrons ca quand nous inétgrerons la vidéo.
&lt;/p&gt;
&lt;p&gt;
 Je vous laisse modifier les options restantes dans ce menu à votre guise, elle porte plutôt bien leur nom.
&lt;/p&gt;
&lt;h4 id="utilisation"&gt;
 &lt;a aria-hidden="true" href="#utilisation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utilisation
&lt;/h4&gt;
&lt;p&gt;
 Maintenant que l’application est bien configurée, nous allons pouvoir l’utiliser !
&lt;/p&gt;
&lt;p&gt;
 Pour cela, dans le menu principale allez tout en bas et cliquez sur "Démarrez le serveur". L’affichage doit alors basculer vers la vue de votre caméra avec quelques informations supplémentaires. Voici un exemple :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="IP Webcam en fonctionnement" src="./images/uploaded/tuto-utiliser-un-smartphone-comme-caméra-de-streaming/ip-webcam-en-fonctionnement.jpg"/&gt;
 &lt;figcaption&gt;
  IP Webcam en fonctionnement
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Dans cet exemple, on voit en bas, encadré en rouge, l’adresse IP (et le port) de notre "webcam". Notez les dans un coin, ça va nous servir dans quelques minutes…
&lt;/p&gt;
&lt;h3 id="utilisation-avec-obs"&gt;
 &lt;a aria-hidden="true" href="#utilisation-avec-obs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utilisation avec OBS
&lt;/h3&gt;
&lt;h4 id="vérification-dans-un-navigateur"&gt;
 &lt;a aria-hidden="true" href="#vérification-dans-un-navigateur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Vérification dans un navigateur
&lt;/h4&gt;
&lt;p&gt;
 Maintenant que notre téléphone émet un flux vidéo sur notre réseau interne, il est temps de s’en servir !
&lt;/p&gt;
&lt;p&gt;
 Dans un premier temps, nous allons vérifier que ce dernier nous convient en allant le voir dans un navigateur.
&lt;/p&gt;
&lt;p&gt;
 Pour cela, ouvrez votre navigateur internet favori et rendez-vous à l’adresse que vous venez de noter. Sur ma capture d’écran c’était
 &lt;a href="http://192.168.1.111:8080"&gt;
  http://192.168.1.111:8080
 &lt;/a&gt;
 . Attention à ne pas mettre de
 &lt;em&gt;
  s
 &lt;/em&gt;
 à
 &lt;em&gt;
  http
 &lt;/em&gt;
 et à bien préciser le port (ici 8080). Vous devriez arriver sur une page ressemblant à ceci :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Page web proposée par IP Webcam" src="./images/uploaded/tuto-utiliser-un-smartphone-comme-caméra-de-streaming/page-web-proposee-par-ip-webcam.png"/&gt;
 &lt;figcaption&gt;
  Page web proposée par IP Webcam
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Sur cette dernière, vous pouvez afficher la vidéo transmise grâce au bouton "Navigateur". Promenez-vous sur les options si cette dernière vous intéresse.
&lt;/p&gt;
&lt;p&gt;
 Si vous avez bien une vidéo qui apparait ici, alors tout est OK pour passer à la suite, vous pouvez fermer cet onglet il ne nous servira plus à rien.
&lt;/p&gt;
&lt;h4 id="intégration-de-la-vidéo-dans-obs"&gt;
 &lt;a aria-hidden="true" href="#intégration-de-la-vidéo-dans-obs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Intégration de la vidéo dans OBS
&lt;/h4&gt;
&lt;p&gt;
 Dans votre logiticiel de diffusion (OBS Studio, StreamLabs OBS etc) il va maintenant falloir ajouter une source de type "Navigateur" (ou
 &lt;em&gt;
  Browser
 &lt;/em&gt;
 ) dans la scène qui vous intéresse.
&lt;/p&gt;
&lt;p&gt;
 Une fois cela fait, paramètrer cette scène pour que l’URL de cette dernière point sur l’adresse que nous avons trouvé sur l’application. Enfin,
 &lt;strong&gt;
  étape la plus importante
 &lt;/strong&gt;
 , ajoutez
 &lt;code&gt;
  /video
 &lt;/code&gt;
 à la fin !
&lt;/p&gt;
&lt;p&gt;
 Par exemple, pour moi cela donnera
 &lt;code&gt;
  http://192.168.1.111:8080/video
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Si l’image n’apparait pas, cliquez sur "Rafraîchir le cache de la page" (
 &lt;em&gt;
  Refresh browser cache
 &lt;/em&gt;
 ou
 &lt;em&gt;
  Reload page
 &lt;/em&gt;
 ). Il ne reste plus qu’à peaufiner les détails en règlant la résolution et en ajustant la position de votre nouvelle webcam et vous êtes prêt à diffuser votre plus beau souvenir au monde entier !
&lt;/p&gt;</content><category term="tuto"></category><category term="streaming"></category><category term="android"></category></entry><entry><title>Passer son serveur à l'httpS</title><link href="https://eskimon.fr/utiliser-un-certificat-ssl-lets-encrypt" rel="alternate"></link><published>2019-07-08T10:15:00+02:00</published><updated>2019-07-08T10:15:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2019-07-08:/utiliser-un-certificat-ssl-lets-encrypt</id><summary type="html">&lt;p&gt;
 Dans ce petit tutoriel, nous allons voir comment installer un certificat SSL gratuit fourni par Let’s Encrypt pour protéger le trafic http de notre serveur.
À la fin de ce tutoriel, tout le trafic http sera automatiquement forcé vers du http
 &lt;strong&gt;
  S
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;a href="#pré-requis"&gt;
   Pré-requis
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#installation-de-certbot"&gt;
   Installation de certbot
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#création-du-certificat"&gt;
   Création du …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;
 Dans ce petit tutoriel, nous allons voir comment installer un certificat SSL gratuit fourni par Let’s Encrypt pour protéger le trafic http de notre serveur.
À la fin de ce tutoriel, tout le trafic http sera automatiquement forcé vers du http
 &lt;strong&gt;
  S
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;a href="#pré-requis"&gt;
   Pré-requis
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#installation-de-certbot"&gt;
   Installation de certbot
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#création-du-certificat"&gt;
   Création du certificat
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#mise-à-jour-de-la-configuration"&gt;
   Mise à jour de la configuration
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#renouvellement-automatique-du-certificat"&gt;
   Renouvellement automatique du certificat
  &lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pré-requis"&gt;
 &lt;a aria-hidden="true" href="#pré-requis"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Pré-requis
&lt;/h3&gt;
&lt;p&gt;
 Pour réaliser ce tutoriel, je vais me baser sur un serveur utilisant l’OS
 &lt;strong&gt;
  Ubuntu Server 18.04
 &lt;/strong&gt;
 . Le serveur web utilisé sera nginx et proposer une configuration minimal pour un site Django de la forme suivante :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-console"&gt;server {
    listen 80;
    server_name eskimon.fr;

    location / {
        proxy_pass http://localhost:8000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Le domaine visé par le certificat sera donc
 &lt;strong&gt;
  eskimon.fr
 &lt;/strong&gt;
 et nginx se contente juste de rediriger le trafic arrivant sur le port 80 vers un service fonctionnant sur localhost au port 8000. Je pars du principe que ce fichier de configuration est sauvegardé selon les recommandations de nginx dans le fichier
 &lt;code&gt;
  /etc/nginx/sites-available/eskimon.fr
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Voilà pour les présentations !
&lt;/p&gt;
&lt;h3 id="installation-de-certbot"&gt;
 &lt;a aria-hidden="true" href="#installation-de-certbot"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Installation de certbot
&lt;/h3&gt;
&lt;p&gt;
 Pour installer le certificat, nous allons commencer par installer un petit outil fourni par Let’s Encrypt et qui se nomme
 &lt;code&gt;
  certbot
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-console"&gt;sudo wget https://dl.eff.org/certbot-auto -O /usr/sbin/certbot-auto
sudo chmod a+x /usr/sbin/certbot-auto
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 À la première ligne, on récupère le logiciel sur le site de l’
 &lt;abbr title="Electronic Frontier Foundation"&gt;
  EFF
 &lt;/abbr&gt;
 en le sauvegardant dans le dossier
 &lt;code&gt;
  /usr/sbin/
 &lt;/code&gt;
 . Ensuite, on donne la possibilité d’execution au logiciel. Et c’est tout !
&lt;/p&gt;
&lt;h3 id="création-du-certificat"&gt;
 &lt;a aria-hidden="true" href="#création-du-certificat"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Création du certificat
&lt;/h3&gt;
&lt;p&gt;
 Maintenant que tout est en place, il ne reste plus qu’à génerer le fameux certificat ! Pour cela, rien de plus simple, une seule commande à lancer :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-console"&gt;sudo certbot-auto certonly --nginx -d eskimon.fr
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Il est possible que certaines dépendances systèmes soient manquantes, dans ce cas certbot les installera sans rien vous demander.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Durant l’installation, certbot vous demander un email (pour recevoir des alertes si vous oubliez de renouveler le certificat (ce qui n’arrivera pas d’après la section suivante)) ainsi que d’accepter les conditions d’utilisations de Let’s Encrypt. Enfin, il demandera aussi si vous souhaitez partager votre email avec l’
 &lt;abbr title="Electronic Frontier Foundation"&gt;
  EFF
 &lt;/abbr&gt;
 pour recevoir des informations de leur part.
&lt;/p&gt;
&lt;p&gt;
 Une fois fini, la procédure devrait afficher un message similaire à celui-ci :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-console"&gt;Obtaining a new certificate
Performing the following challenges:
http-01 challenge for eskimon.fr
Waiting for verification...
Cleaning up challenges

IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/eskimon.fr/fullchain.pem
   Your key file has been saved at:
   /etc/letsencrypt/live/eskimon.fr/privkey.pem
   Your cert will expire on 2019-10-06. To obtain a new or tweaked
   version of this certificate in the future, simply run certbot-auto
   again. To non-interactively renew *all* of your certificates, run
   "certbot-auto renew"
 - Your account credentials have been saved in your Certbot
   configuration directory at /etc/letsencrypt. You should make a
   secure backup of this folder now. This configuration directory will
   also contain certificates and private keys obtained by Certbot so
   making regular backups of this folder is ideal.
 - If you like Certbot, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 On apprend ainsi que les données du certificat sont dans le dossier
 &lt;code&gt;
  /etc/letsencrypt/live/eskimon.fr/
 &lt;/code&gt;
 . Allons voir !
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-tap"&gt;$ sudo ls -la /etc/letsencrypt/live/eskimon.fr/
total 12
drwxr-xr-x&lt;span class="hljs-number"&gt; 2 &lt;/span&gt;root root&lt;span class="hljs-number"&gt; 4096 &lt;/span&gt;Jul &lt;span class="hljs-number"&gt; 8 &lt;/span&gt;10:32 .
drwx------&lt;span class="hljs-number"&gt; 3 &lt;/span&gt;root root&lt;span class="hljs-number"&gt; 4096 &lt;/span&gt;Jul &lt;span class="hljs-number"&gt; 8 &lt;/span&gt;10:32 ..
-rw-r--r--&lt;span class="hljs-number"&gt; 1 &lt;/span&gt;root root &lt;span class="hljs-number"&gt; 692 &lt;/span&gt;Jul &lt;span class="hljs-number"&gt; 8 &lt;/span&gt;10:32 README
lrwxrwxrwx&lt;span class="hljs-number"&gt; 1 &lt;/span&gt;root root  &lt;span class="hljs-number"&gt; 39 &lt;/span&gt;Jul &lt;span class="hljs-number"&gt; 8 &lt;/span&gt;10:32 cert.pem -&amp;gt; ../../archive/eskimon.fr/cert1.pem
lrwxrwxrwx&lt;span class="hljs-number"&gt; 1 &lt;/span&gt;root root  &lt;span class="hljs-number"&gt; 40 &lt;/span&gt;Jul &lt;span class="hljs-number"&gt; 8 &lt;/span&gt;10:32 chain.pem -&amp;gt; ../../archive/eskimon.fr/chain1.pem
lrwxrwxrwx&lt;span class="hljs-number"&gt; 1 &lt;/span&gt;root root  &lt;span class="hljs-number"&gt; 44 &lt;/span&gt;Jul &lt;span class="hljs-number"&gt; 8 &lt;/span&gt;10:32 fullchain.pem -&amp;gt; ../../archive/eskimon.fr/fullchain1.pem
lrwxrwxrwx&lt;span class="hljs-number"&gt; 1 &lt;/span&gt;root root  &lt;span class="hljs-number"&gt; 42 &lt;/span&gt;Jul &lt;span class="hljs-number"&gt; 8 &lt;/span&gt;10:32 privkey.pem -&amp;gt; ../../archive/eskimon.fr/privkey1.pem
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id="mise-à-jour-de-la-configuration"&gt;
 &lt;a aria-hidden="true" href="#mise-à-jour-de-la-configuration"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Mise à jour de la configuration
&lt;/h3&gt;
&lt;p&gt;
 Maintenant que le certificat est obtenu, il ne reste plus qu’à mettre à jour la configuration nginx pour le prendre en compte.
&lt;/p&gt;
&lt;p&gt;
 Pour cela, allez éditer le fichier
 &lt;code&gt;
  /etc/nginx/sites-available/eskimon.fr
 &lt;/code&gt;
 et faites en sorte d’avoir une configuration similaire à la suivante :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-console"&gt;server {
    listen 80;
    server_name eskimon.fr;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name eskimon.fr;
    ssl_certificate /etc/letsencrypt/live/eskimon.fr/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/eskimon.fr/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/eskimon.fr/fullchain.pem;

    location / {
        proxy_pass http://localhost:8000/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Concretement, il s’agit de rajouter un bloc
 &lt;code&gt;
  server
 &lt;/code&gt;
 qui va gérer la partie SSL et de modifier le bloc concernant la partie http standard pour forcer la redirection du trafic vers le bloc http
 &lt;strong&gt;
  S
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Il ne reste plus qu’à recharger nginx pour constater les changements
 &lt;code&gt;
  sudo service nginx reload
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;h3 id="renouvellement-automatique-du-certificat"&gt;
 &lt;a aria-hidden="true" href="#renouvellement-automatique-du-certificat"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Renouvellement automatique du certificat
&lt;/h3&gt;
&lt;p&gt;
 Maintenant que le certificat est en place, il ne nous reste plus qu’à activer une tâche de renouvellement automatique du certificat.
&lt;/p&gt;
&lt;p&gt;
 En effet, les certificats Let’s Encrypt ne sont valides que 90 jours. Il faut donc les renouveler. Plutôt que de le faire à la main, nous allons activer une tâche CRON pour faire une vérification automatique de la validité et du renouvellement.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-stata"&gt;sudo crontab -&lt;span class="hljs-built_in"&gt;e&lt;/span&gt;
# Ajouter &lt;span class="hljs-keyword"&gt;la&lt;/span&gt; ligne suivant à &lt;span class="hljs-keyword"&gt;la&lt;/span&gt; fin du fichier
0 2 * * * sudo /usr/sbin/certbot-auto -q renew
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Et voilà, vos sites web peuvent maintenant recevoir du trafic chiffré en toute simplicité !
&lt;/p&gt;</content><category term="web"></category><category term="tuto"></category><category term="infra"></category></entry><entry><title>Sécuriser son serveur avec UFW</title><link href="https://eskimon.fr/securiser-son-serveur-avec-ufw" rel="alternate"></link><published>2019-07-08T10:00:00+02:00</published><updated>2019-07-08T10:00:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2019-07-08:/securiser-son-serveur-avec-ufw</id><summary type="html">&lt;p&gt;
 Sur un serveur, afin d’éviter de se faire attaquer de tout bord, il est utile de bloquer tout (ou presque) les ports entrants de la machine. Ainsi, la surface d’attaque devient bien plus restreinte. Nous laisserons ainsi passer uniquement le trafic pour le SSH ainsi que pour le …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Sur un serveur, afin d’éviter de se faire attaquer de tout bord, il est utile de bloquer tout (ou presque) les ports entrants de la machine. Ainsi, la surface d’attaque devient bien plus restreinte. Nous laisserons ainsi passer uniquement le trafic pour le SSH ainsi que pour le http(s).
&lt;/p&gt;
&lt;p&gt;
 Pour cela, un logiciel bien connu des administrateurs systèmes est
 &lt;code&gt;
  iptables
 &lt;/code&gt;
 . Mais ce dernier a aussi la réputation d’être un peu pénible à utiliser. Nous allons donc utiliser
 &lt;strong&gt;
  ufw
 &lt;/strong&gt;
 (
 &lt;em&gt;
  Uncomplicated FireWall
 &lt;/em&gt;
 ) qui permet de gérer de manière plus simple les règles de parefeu. Nous allons alors interagir avec ufw et ce dernier s’occupera de dompter iptables.
&lt;/p&gt;
&lt;p&gt;
 Pour l’installer, un simple
 &lt;code&gt;
  apt install ufw
 &lt;/code&gt;
 fera l’affaire.
&lt;/p&gt;
&lt;p&gt;
 Ensuite, nous allons l’activer via la commande
 &lt;code&gt;
  ufw enable
 &lt;/code&gt;
 . Dorénavant, ufw démarrera au lancement du système et appliquera les règles que nous allons définir. Si vous voulez couper temporairement ou définitivement ufw, la commande antagoniste est évidemment
 &lt;code&gt;
  ufw disable
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   A tout moment vous pouvez voir l’état de ufw ainsi que les règles actuellement appliquées via la commande
   &lt;code&gt;
    ufw status verbose
   &lt;/code&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Maintenant que notre pare-feu est en marche, donnons lui des consignes. Plusieurs moyens s’offrent à nous. Nous pouvons spécifier à la main le protocole (udp/tcp), les ports et les ips à filtrer. Ou plus simplement juste dire à ufw "merci de laisser passer/interdire le trafic" concernant ce service. Les services en questions étant visible dans le fichier
 &lt;code&gt;
  /etc/services
 &lt;/code&gt;
 . C’est là stratégie que nous allons adopter.
&lt;/p&gt;
&lt;p&gt;
 Laissons donc passer le trafic pour le ssh et le http(s).
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-console"&gt;:# ufw allow ssh
:# ufw allow http
:# ufw allow https
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 A chaque fois, ufw vous préviendra que la règle a bien été ajoutée.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Ajout de règles dans ufw" src="/media/galleries/7758/f0b0aaf1-531b-41bf-ac8b-a0bcac5164ca.png"/&gt;
 &lt;figcaption&gt;
  Ajout de règles dans ufw
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ce tutoriel voulant aller à l’essentiel, ufw n’est pas traité dans toutes sa profondeur. Pour en savoir plus (blocage d’ip etc) vous pouvez lire la très bonne page à l’adresse :
   &lt;a href="https://doc.ubuntu-fr.org/ufw"&gt;
    https://doc.ubuntu-fr.org/ufw
   &lt;/a&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="en-résumé"&gt;
 &lt;a aria-hidden="true" href="#en-résumé"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 En résumé
&lt;/h4&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-console"&gt;ufw enable
ufw allow ssh
ufw allow http
ufw allow https
ufw status verbose
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><category term="web"></category><category term="tuto"></category><category term="infra"></category></entry><entry><title>How to embed a Tinkercad simulator</title><link href="https://eskimon.fr/how-to-embed-a-tinkercad-simulator" rel="alternate"></link><published>2019-06-10T12:20:00+02:00</published><updated>2019-06-10T12:20:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2019-06-10:/how-to-embed-a-tinkercad-simulator</id><summary type="html">&lt;p&gt;
 If you are lookink to add some electronics simulation to your webpage, Tinkercad online tool is a good way to go.
There Arduino (and other electronics) is decent enough, good looking and easy to use.
&lt;/p&gt;
&lt;p&gt;
 Now if you want to share your designs with your website visitors, here are the …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 If you are lookink to add some electronics simulation to your webpage, Tinkercad online tool is a good way to go.
There Arduino (and other electronics) is decent enough, good looking and easy to use.
&lt;/p&gt;
&lt;p&gt;
 Now if you want to share your designs with your website visitors, here are the 2 easy steps to follow to do so.
&lt;/p&gt;
&lt;p&gt;
 First, in your Tinkercad dashboard, find the circuit you want to share.
On the top right of the thumbnail, you should see a small cog icon. Click on it and select "Properties…".
Then, change the
 &lt;em&gt;
  Privacy
 &lt;/em&gt;
 setting to
 &lt;em&gt;
  Public
 &lt;/em&gt;
 to make it available and save.
&lt;/p&gt;
&lt;p&gt;
 Now, click on the thumbnail to edit the design. A popup dialog should open like this:
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Exemple circuit" src="/images/tinkercad-circuit.png"/&gt;
 &lt;figcaption&gt;
  Exemple circuit
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Then, locate the "embed" button, as circled in the previous screenshot.
Another dialog should open with some html code.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Embedding code snipped" src="/images/tinkercad-code.png"/&gt;
 &lt;figcaption&gt;
  Embedding code snipped
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Now copy this code on whatever page you need and you should be good to go. Now your visitors will be able to enjoy your design directly on your webpages, like this:
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/3NbcDdiiH1v" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Have fun!
&lt;/p&gt;</content><category term="tinkercad"></category><category term="tuto"></category></entry><entry><title>Comment partager un simulateur tinkercad</title><link href="https://eskimon.fr/comment-partager-un-simulateur-tinkercad" rel="alternate"></link><published>2019-06-10T12:19:00+02:00</published><updated>2019-06-10T12:19:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2019-06-10:/comment-partager-un-simulateur-tinkercad</id><summary type="html">&lt;p&gt;
 Voici un petit article pour vous expliquer comment facilement partager un circuit électronique réalisé sous Tinkercad.
Vous pourrez ainsi embarqué directement la simulation dans vos pages web pour laisser vos utilisateurs jouer avec comme l’exemple ci-dessous :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/3NbcDdiiH1v" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="explications"&gt;
 &lt;a aria-hidden="true" href="#explications"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Explications
&lt;/h3&gt;
&lt;p&gt;
 Tout d’abord, allez sur Tinkercad et repérez le schéma qui vous …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Voici un petit article pour vous expliquer comment facilement partager un circuit électronique réalisé sous Tinkercad.
Vous pourrez ainsi embarqué directement la simulation dans vos pages web pour laisser vos utilisateurs jouer avec comme l’exemple ci-dessous :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/3NbcDdiiH1v" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="explications"&gt;
 &lt;a aria-hidden="true" href="#explications"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Explications
&lt;/h3&gt;
&lt;p&gt;
 Tout d’abord, allez sur Tinkercad et repérez le schéma qui vous intéresse.
&lt;/p&gt;
&lt;p&gt;
 La première chose à faire sera de le mettre disponible publiquement. Pour cela cliquez sur la petite roue cranté en haut à droite en surbrillance
sur la miniature du schéma, puis cliquez sur "Properties". Ensuite, dans la partie "Privacy" il vous faudra sélectionner l’option "Public" puis sauvegarder les changements.
&lt;/p&gt;
&lt;p&gt;
 Ensuite, cliquer sur la miniature du circuit.
Vous devriez alors avoir une page qui s’ouvre en popup. Sur cette dernière, trouver le bouton
 &lt;code&gt;
  embed
 &lt;/code&gt;
 comme visible sur la capture d’écran ci-dessous :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Page d'un circuit électronique" src="/images/tinkercad-circuit.png"/&gt;
 &lt;figcaption&gt;
  Page d'un circuit électronique
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Cliquer sur ce bouton, une autre boîte de dialogue doit s’ouvrir et vous propose un code HTML. Copiez-le, mettez-le où bon vous semble sur vos propre page web et en avant !
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Code pour embarquer le simulateur" src="/images/tinkercad-code.png"/&gt;
 &lt;figcaption&gt;
  Code pour embarquer le simulateur
 &lt;/figcaption&gt;
&lt;/figure&gt;</content><category term="tinkercad"></category><category term="simulateur"></category><category term="astuce"></category><category term="tuto"></category></entry><entry><title>OBS, faire une bordure animée simplement (sans logiciel d'édition vidéo)</title><link href="https://eskimon.fr/obs-faire-une-bordure-animee-simplement" rel="alternate"></link><published>2019-06-10T12:19:00+02:00</published><updated>2019-06-10T12:19:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2019-06-10:/obs-faire-une-bordure-animee-simplement</id><summary type="html">&lt;p&gt;
 Dans cet article je vais vous expliquer comment faire une animation de facecam (ou de n’importe quelle source vidéo) sans avoir besoin de générer un fichier vidéo au préalable.
Le rendu sera super configurable en éditant simplement quelques éléments (couleurs, vitesse…)
&lt;/p&gt;
&lt;p&gt;
 Si vous préférez les explications en vidéo, voici …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Dans cet article je vais vous expliquer comment faire une animation de facecam (ou de n’importe quelle source vidéo) sans avoir besoin de générer un fichier vidéo au préalable.
Le rendu sera super configurable en éditant simplement quelques éléments (couleurs, vitesse…)
&lt;/p&gt;
&lt;p&gt;
 Si vous préférez les explications en vidéo, voici un tuto vidéo qui reprends tout ca :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/BL8dOHkUtNQ" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="comment-faire"&gt;
 &lt;a aria-hidden="true" href="#comment-faire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Comment faire…
&lt;/h3&gt;
&lt;p&gt;
 La première chose à faire est de trouver les dimensions de la source vidéo que vous souhaitez entourer. Pour ma part j’ai choisi de le faire sur ma webcam.
Faites un clic droit dur la source vidéo, allez dans le menu "Transformation" et cliquez sur "Editer la transformation…".
Dans la fenêtre qui apparait, notez les dimensions dans la catégorie "taille".
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt='La popup "Editer la transformation"' src="./images/uploaded/obs-how-to-make-animated-border-without-video-editor/edit-transform.png"/&gt;
 &lt;figcaption&gt;
  La popup "Editer la transformation"
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Maintenant, la seule chose à faire est d’ajouter une source de type "Navigateur" et éditer ses propriétés avec les données suivantes :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;strong&gt;
   URL
  &lt;/strong&gt;
  :
  &lt;code&gt;
   data:text/html, &amp;lt;div&amp;gt;&amp;lt;p&amp;gt;
  &lt;/code&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   Largeur et hauteur
  &lt;/strong&gt;
  : La largeur et la hauteur de la source à entourer +
  &lt;em&gt;
   l’épaisseur
  &lt;/em&gt;
  de la bordure que vous souhaitez. Par exemple, pour une webcam de 800*600 pixels et une bordure de 20 pixels écrivez 840 et 640 (20 pixels de chaque côté donnent un total de 40 pixels en plus).
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   CSS personnalisé
  &lt;/strong&gt;
  :
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-css"&gt;&lt;span class="hljs-selector-pseudo"&gt;:root&lt;/span&gt; {
  --color-1: rgba(255,0,0,1);
  --color-2: rgba(0,0,255,1);
  &lt;span class="hljs-attribute"&gt;--speed&lt;/span&gt;: &lt;span class="hljs-number"&gt;5s&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;--radius&lt;/span&gt;: &lt;span class="hljs-number"&gt;10px&lt;/span&gt;;
}

* {
  &lt;span class="hljs-attribute"&gt;margin&lt;/span&gt;: &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;padding&lt;/span&gt;: &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
}

&lt;span class="hljs-selector-tag"&gt;body&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;width&lt;/span&gt;: &lt;span class="hljs-number"&gt;100vw&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;height&lt;/span&gt;: &lt;span class="hljs-number"&gt;100vh&lt;/span&gt;;
}

&lt;span class="hljs-selector-tag"&gt;div&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;position&lt;/span&gt;: relative;
  &lt;span class="hljs-attribute"&gt;width&lt;/span&gt;: &lt;span class="hljs-number"&gt;100%&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;height&lt;/span&gt;: &lt;span class="hljs-number"&gt;100%&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;border-radius&lt;/span&gt;: &lt;span class="hljs-built_in"&gt;var&lt;/span&gt;(--radius);
  &lt;span class="hljs-attribute"&gt;overflow&lt;/span&gt;: hidden;
}

&lt;span class="hljs-selector-tag"&gt;p&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;position&lt;/span&gt;: absolute;
  &lt;span class="hljs-attribute"&gt;top&lt;/span&gt;: -&lt;span class="hljs-number"&gt;50%&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;left&lt;/span&gt;: -&lt;span class="hljs-number"&gt;50%&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;content&lt;/span&gt;: &lt;span class="hljs-string"&gt;''&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;width&lt;/span&gt;: &lt;span class="hljs-number"&gt;200%&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;height&lt;/span&gt;: &lt;span class="hljs-number"&gt;200%&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;background&lt;/span&gt;: &lt;span class="hljs-built_in"&gt;linear-gradient&lt;/span&gt;(var(--color-1) &lt;span class="hljs-number"&gt;40%&lt;/span&gt;, &lt;span class="hljs-built_in"&gt;var&lt;/span&gt;(--color-2) &lt;span class="hljs-number"&gt;60%&lt;/span&gt;);
  &lt;span class="hljs-attribute"&gt;animation&lt;/span&gt;: rotation &lt;span class="hljs-built_in"&gt;var&lt;/span&gt;(--speed) linear infinite;
}

@&lt;span class="hljs-keyword"&gt;keyframes&lt;/span&gt; rotation {
  0% { &lt;span class="hljs-attribute"&gt;transform&lt;/span&gt;: &lt;span class="hljs-built_in"&gt;rotate&lt;/span&gt;(0deg); }
  100%{ &lt;span class="hljs-attribute"&gt;transform&lt;/span&gt;: &lt;span class="hljs-built_in"&gt;rotate&lt;/span&gt;(360deg); }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 In this box, the first lines are variables that you can adjust. Simply change the value to the one you want!
Dans cet élément, vous pouvez ajuster les premières lignes pour adapter à vos goûts !
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   gradient-color-1
  &lt;/code&gt;
  et
  &lt;code&gt;
   gradient-color-2
  &lt;/code&gt;
  sont les couleurs du dégradé qui va tourner ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   speed
  &lt;/code&gt;
  est la vitesse de rotation de l’animations ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   radius
  &lt;/code&gt;
  est l’arrondi des angles. 0 pour un angle droit, 20px ou n’importe quelle valeur qui vous convient pour des angles arrondi.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Enfin, il ne reste plus qu’à bouger cette nouvelle source
 &lt;strong&gt;
  derrière
 &lt;/strong&gt;
 la vidéo à détourer et vous devriez avoir votre résultat !
&lt;/p&gt;
&lt;p&gt;
 Amusez-vous bien !
&lt;/p&gt;</content><category term="obs"></category><category term="slobs"></category><category term="streaming"></category><category term="tuto"></category></entry><entry><title>How to make an animated facecam border (no video editing required)</title><link href="https://eskimon.fr/obs-how-to-make-animated-border-without-video-editor" rel="alternate"></link><published>2019-06-10T12:19:00+02:00</published><updated>2019-06-10T12:19:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2019-06-10:/obs-how-to-make-animated-border-without-video-editor</id><summary type="html">&lt;p&gt;
 In this note, I’ll show you how to do an animated facecam border (or any visual source) without any video editing software needed.
The end result will be enteriely customisable with simply two clicks (speed, colors, border radius…).
&lt;/p&gt;
&lt;p&gt;
 If you want a detail video explanation or some demo, I …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 In this note, I’ll show you how to do an animated facecam border (or any visual source) without any video editing software needed.
The end result will be enteriely customisable with simply two clicks (speed, colors, border radius…).
&lt;/p&gt;
&lt;p&gt;
 If you want a detail video explanation or some demo, I’ve prepared a video for you:
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/l7G5cSodbi8" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="how-to"&gt;
 &lt;a aria-hidden="true" href="#how-to"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 How-to
&lt;/h3&gt;
&lt;p&gt;
 First, find the dimensions of the source you want to border. In my case I’ll do it on my facecam. Right click on the source, go to the
 &lt;code&gt;
  Transform
 &lt;/code&gt;
 menu and click
 &lt;code&gt;
  Edit transform...
 &lt;/code&gt;
 . In the popup that appear, write down the size of the source. In my case, size is 565px width and 818px height (my format is not standard as I crop my facecam to better fit my background).
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt='The "Edit Transform" windows' src="./images/uploaded/obs-how-to-make-animated-border-without-video-editor/edit-transform.png"/&gt;
 &lt;figcaption&gt;
  The "Edit Transform" windows
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Now all you need to do is to add a browser source to the scene where is your facecam (or the source you want the animated border on) and tweak its content with the following data:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;strong&gt;
   URL
  &lt;/strong&gt;
  :
  &lt;code&gt;
   data:text/html, &amp;lt;div&amp;gt;&amp;lt;p&amp;gt;
  &lt;/code&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   Width and Height
  &lt;/strong&gt;
  : The width and height of your source + the size of the border wanted. For example if your facecam is 800*600 and you want a border size of 20 pixels, write 840 and 640 (20 pixels on each size equals 40 extra pixels).
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   Custom CSS
  &lt;/strong&gt;
  :
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-css"&gt;&lt;span class="hljs-selector-pseudo"&gt;:root&lt;/span&gt; {
  --color-1: rgba(255,0,0,1);
  --color-2: rgba(0,0,255,1);
  &lt;span class="hljs-attribute"&gt;--speed&lt;/span&gt;: &lt;span class="hljs-number"&gt;5s&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;--radius&lt;/span&gt;: &lt;span class="hljs-number"&gt;10px&lt;/span&gt;;
}

* {
  &lt;span class="hljs-attribute"&gt;margin&lt;/span&gt;: &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;padding&lt;/span&gt;: &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
}

&lt;span class="hljs-selector-tag"&gt;body&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;width&lt;/span&gt;: &lt;span class="hljs-number"&gt;100vw&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;height&lt;/span&gt;: &lt;span class="hljs-number"&gt;100vh&lt;/span&gt;;
}

&lt;span class="hljs-selector-tag"&gt;div&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;position&lt;/span&gt;: relative;
  &lt;span class="hljs-attribute"&gt;width&lt;/span&gt;: &lt;span class="hljs-number"&gt;100%&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;height&lt;/span&gt;: &lt;span class="hljs-number"&gt;100%&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;border-radius&lt;/span&gt;: &lt;span class="hljs-built_in"&gt;var&lt;/span&gt;(--radius);
  &lt;span class="hljs-attribute"&gt;overflow&lt;/span&gt;: hidden;
}

&lt;span class="hljs-selector-tag"&gt;p&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;position&lt;/span&gt;: absolute;
  &lt;span class="hljs-attribute"&gt;top&lt;/span&gt;: -&lt;span class="hljs-number"&gt;50%&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;left&lt;/span&gt;: -&lt;span class="hljs-number"&gt;50%&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;content&lt;/span&gt;: &lt;span class="hljs-string"&gt;''&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;width&lt;/span&gt;: &lt;span class="hljs-number"&gt;200%&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;height&lt;/span&gt;: &lt;span class="hljs-number"&gt;200%&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;background&lt;/span&gt;: &lt;span class="hljs-built_in"&gt;linear-gradient&lt;/span&gt;(var(--color-1) &lt;span class="hljs-number"&gt;40%&lt;/span&gt;, &lt;span class="hljs-built_in"&gt;var&lt;/span&gt;(--color-2) &lt;span class="hljs-number"&gt;60%&lt;/span&gt;);
  &lt;span class="hljs-attribute"&gt;animation&lt;/span&gt;: rotation &lt;span class="hljs-built_in"&gt;var&lt;/span&gt;(--speed) linear infinite;
}

@&lt;span class="hljs-keyword"&gt;keyframes&lt;/span&gt; rotation {
  0% { &lt;span class="hljs-attribute"&gt;transform&lt;/span&gt;: &lt;span class="hljs-built_in"&gt;rotate&lt;/span&gt;(0deg); }
  100%{ &lt;span class="hljs-attribute"&gt;transform&lt;/span&gt;: &lt;span class="hljs-built_in"&gt;rotate&lt;/span&gt;(360deg); }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 In this box, the first lines are variables that you can adjust. Simply change the value to the one you want!
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   gradient-color-1
  &lt;/code&gt;
  and
  &lt;code&gt;
   gradient-color-2
  &lt;/code&gt;
  are the color of the gradient that will be rotating
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   speed
  &lt;/code&gt;
  is the speed in seconds for a full revolution
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   radius
  &lt;/code&gt;
  is the border corner radius (0 for sharp angle).
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Last but not least, just move this
 &lt;em&gt;
  behind
 &lt;/em&gt;
 your camera and you should see the result!
&lt;/p&gt;
&lt;p&gt;
 Have fun!
&lt;/p&gt;</content><category term="obs"></category><category term="slobs"></category><category term="streaming"></category><category term="tuto"></category></entry><entry><title>Faire un bot Discord simple avec les webhooks</title><link href="https://eskimon.fr/faire-un-bot-discord-simple-avec-les-webhooks" rel="alternate"></link><published>2019-06-09T14:45:00+02:00</published><updated>2019-06-09T14:45:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2019-06-09:/faire-un-bot-discord-simple-avec-les-webhooks</id><summary type="html">&lt;p&gt;
 Si vous vous promenez sur les réseaux de discussions de Discord, vous avez sûrement remarqué que ces derniers sont peuplés de bots qui postent des informations diverses et variées.
&lt;/p&gt;
&lt;p&gt;
 Récemment, Zeste de Savoir a aussi eu le droit à
 &lt;a href="https://zestedesavoir.com/forums/sujet/12123/discord-zeste-de-savoir/"&gt;
  son propre serveur Discord non-officiel
 &lt;/a&gt;
 . C’était l’occasion rêvée de …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Si vous vous promenez sur les réseaux de discussions de Discord, vous avez sûrement remarqué que ces derniers sont peuplés de bots qui postent des informations diverses et variées.
&lt;/p&gt;
&lt;p&gt;
 Récemment, Zeste de Savoir a aussi eu le droit à
 &lt;a href="https://zestedesavoir.com/forums/sujet/12123/discord-zeste-de-savoir/"&gt;
  son propre serveur Discord non-officiel
 &lt;/a&gt;
 . C’était l’occasion rêvée de voir naître un tutoriel qui parle des bots.
&lt;/p&gt;
&lt;p&gt;
 Ce petit tutoriel va donc vous permettre de créer un petit bot simple qui se contentera de poster un message dont le contenu sera personnalisable à loisir. C’est tout. Pour le réaliser, tout sera écrit en python 3
 &lt;em&gt;
  vanilla
 &lt;/em&gt;
 , donc sans aucune bibliothèque tierce. Nous allons ici voir l’utilisation des
 &lt;em&gt;
  webhooks
 &lt;/em&gt;
 dans le cadre de Discord, mais cette technique marche évidemment avec plein d’autres services qui le permettent (comme
 &lt;a href="https://ifttt.com/maker_webhooks"&gt;
  IFTTT
 &lt;/a&gt;
 par exemple).
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Le bot que nous allons créer ne sera pas très évolué. Il sera uniquement en mesure de poster des messages mais ne pourra pas lire le contenu des canaux de communication. En effet tout cela est limité par la technique utilisée ici, les
   &lt;strong&gt;
    &lt;em&gt;
     webhooks
    &lt;/em&gt;
   &lt;/strong&gt;
   Discord.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#la-technique-des-webhooks"&gt;
    La technique des webhooks
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#présentation"&gt;
     Présentation
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#obtenir-lurl-du-webhook"&gt;
     Obtenir l’URL du webhook
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#Émettons-des-messages"&gt;
    Émettons des messages
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#envoyer-un-message-simple"&gt;
     Envoyer un message simple
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#envoyer-des-messages-plus-«riches»"&gt;
     Envoyer des messages plus « riches »
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="la-technique-des-webhooks"&gt;
 &lt;a aria-hidden="true" href="#la-technique-des-webhooks"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La technique des webhooks
&lt;/h3&gt;
&lt;h4 id="présentation"&gt;
 &lt;a aria-hidden="true" href="#présentation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Présentation
&lt;/h4&gt;
&lt;p&gt;
 Comme dit dans l’introduction, ce tutoriel repose sur l’utilisation des
 &lt;em&gt;
  webhooks
 &lt;/em&gt;
 pour assurer la communication entre notre bot et Discord.
&lt;/p&gt;
&lt;p&gt;
 Mais un
 &lt;em&gt;
  webhook
 &lt;/em&gt;
 qu’est-ce que c’est ?
&lt;/p&gt;
&lt;p&gt;
 D’après
 &lt;a href="https://en.wikipedia.org/wiki/Webhook"&gt;
  wikipédia
 &lt;/a&gt;
 (en anglais), un
 &lt;em&gt;
  webhook
 &lt;/em&gt;
 est une méthode pour manipuler le comportement d’une page via l’utilisation d’une « fonction de rappel » (
 &lt;em&gt;
  callback
 &lt;/em&gt;
 ). Plus concrètement ici, un
 &lt;em&gt;
  webhook
 &lt;/em&gt;
 nous permet de poster un contenu (« manipuler une page ») via l’envoi d’un message (notre fonction de rappel).
&lt;/p&gt;
&lt;p&gt;
 De manière très simple, la situation se présente ainsi :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Discord nous fournit une URL reliée à un salon ;
 &lt;/li&gt;
 &lt;li&gt;
  Notre bot fera une requête
  &lt;code&gt;
   POST
  &lt;/code&gt;
  sur cette URL avec le message à poster ;
 &lt;/li&gt;
 &lt;li&gt;
  Discord affichera alors le message.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Très concrètement, la seule chose à faire sera donc de faire une requête
 &lt;code&gt;
  POST
 &lt;/code&gt;
 sur une URL précise.
 &lt;em&gt;
  Easy
 &lt;/em&gt;
 !
 &lt;img alt=":soleil:" class="smiley" src="./static/smileys/soleil.png"/&gt;
&lt;/p&gt;
&lt;h4 id="obtenir-lurl-du-webhook"&gt;
 &lt;a aria-hidden="true" href="#obtenir-lurl-du-webhook"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Obtenir l’URL du webhook
&lt;/h4&gt;
&lt;p&gt;
 Pour commencer, il va tout d’abord falloir obtenir notre URL de communication ! Pour cela, cliquez sur le nom de votre serveur puis allez sur l’option « Paramètres du serveur ». Sur la capture ci-dessous le nom du serveur est entouré.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Emplacement des paramètres du serveur" src="./images/uploaded/faire-un-bot-discord-simple-avec-les-webhooks/emplacement-des-parametres-du-serveur.png"/&gt;
 &lt;figcaption&gt;
  Emplacement des paramètres du serveur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Une fois cela fait, sélectionnez l’option «
 &lt;em&gt;
  Webhook
 &lt;/em&gt;
 » à gauche puis cliquez sur « Créer un
 &lt;em&gt;
  webhook
 &lt;/em&gt;
 ».
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="L'option Webhook" src="./images/uploaded/faire-un-bot-discord-simple-avec-les-webhooks/loption-webhook.png"/&gt;
 &lt;figcaption&gt;
  L'option Webhook
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Enfin, donnez un petit nom et une bouille sympathique à votre bot puis assignez-le au canal de discussion qui vous convient :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Création d'un bot" src="./images/uploaded/faire-un-bot-discord-simple-avec-les-webhooks/creation-dun-bot.png"/&gt;
 &lt;figcaption&gt;
  Création d'un bot
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Dernière chose, copiez l’adresse fournie en bas quelque part, ce sera celle qui nous servira justement à communiquer !
&lt;/p&gt;
&lt;p&gt;
 Et voilà, tout est prêt du côté de Discord, place au code maintenant !
&lt;/p&gt;
&lt;h3 id="Émettons-des-messages"&gt;
 &lt;a aria-hidden="true" href="#Émettons-des-messages"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Émettons des messages
&lt;/h3&gt;
&lt;p&gt;
 Passons maintenant à la partie amusante, l’émission de messages depuis notre bot vers le canal Discord.
&lt;/p&gt;
&lt;p&gt;
 Comme dit plus tôt, l’objectif sera de simplement faire une requête
 &lt;code&gt;
  POST
 &lt;/code&gt;
 vers l’URL que nous venons d’obtenir. Pour générer cette dernière, nous allons donc utiliser la bibliothèque
 &lt;code&gt;
  request
 &lt;/code&gt;
 incluse nativement dans python :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;&lt;span class="hljs-keyword"&gt;from&lt;/span&gt; urllib &lt;span class="hljs-keyword"&gt;import&lt;/span&gt; request
&lt;span class="hljs-keyword"&gt;from&lt;/span&gt; urllib.error &lt;span class="hljs-keyword"&gt;import&lt;/span&gt; HTTPError
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 (J’en profite aussi pour importer les exceptions que cette dernière peut générer)
&lt;/p&gt;
&lt;p&gt;
 Maintenant, il va falloir faire un message. Mais pas n’importe comment ! En effet, il faut prendre en compte ce que nous raconte
 &lt;a href="https://discordapp.com/developers/docs/resources/webhook#execute-webhook"&gt;
  la documentation de Discord au sujet des
  &lt;em&gt;
   webhooks
  &lt;/em&gt;
 &lt;/a&gt;
 . Ainsi, on apprend que le message doit contenir un
 &lt;em&gt;
  payload
 &lt;/em&gt;
 &lt;strong&gt;
  json
 &lt;/strong&gt;
 avec au choix :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Un champ
  &lt;code&gt;
   content
  &lt;/code&gt;
  qui représente un simple message pouvant faire jusqu’à 2000 caractères ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   OU
  &lt;/strong&gt;
  un champ
  &lt;code&gt;
   embeds
  &lt;/code&gt;
  contenant une liste d’objets
  &lt;a href="https://discordapp.com/developers/docs/resources/channel#embed-object"&gt;
   &lt;code&gt;
    embed
   &lt;/code&gt;
  &lt;/a&gt;
  ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   OU
  &lt;/strong&gt;
  un champ
  &lt;code&gt;
   file
  &lt;/code&gt;
  qui contiendra un fichier à envoyer (la
  &lt;em&gt;
   payload
  &lt;/em&gt;
  devra alors être au format
  &lt;code&gt;
   multipart/form-data
  &lt;/code&gt;
  avec un champ
  &lt;code&gt;
   payload_json
  &lt;/code&gt;
  ).
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Je vais uniquement parler des 2 premiers cas, le troisième étant plus particulier et tout de même simple une fois le principe compris.
&lt;/p&gt;
&lt;h4 id="envoyer-un-message-simple"&gt;
 &lt;a aria-hidden="true" href="#envoyer-un-message-simple"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Envoyer un message simple
&lt;/h4&gt;
&lt;p&gt;
 Nous allons commencer par envoyer un message tout simple qui ressemblera au suivant :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Un message tout simple" src="./images/uploaded/faire-un-bot-discord-simple-avec-les-webhooks/un-message-tout-simple.png"/&gt;
 &lt;figcaption&gt;
  Un message tout simple
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Pour cela, on commence par créer notre dictionnaire qui sera notre futur objet json. On fait donc un simple dictionnaire python avec une seule clé :
 &lt;code&gt;
  content
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;payload = {
    &lt;span class="hljs-string"&gt;'content'&lt;/span&gt;: &lt;span class="hljs-string"&gt;"Salut les z'agrumes ! Ça zeste ?"&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Maintenant, il s’agit de fournir cela proprement à
 &lt;code&gt;
  request
 &lt;/code&gt;
 pour pouvoir l’émettre.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;&lt;span class="hljs-comment"&gt;## À remplacer par celle que vous avez obtenu précédemment&lt;/span&gt;
WEBHOOK_URL = &lt;span class="hljs-string"&gt;'https://discordapp.com/api/webhooks/xxx/yyy'&lt;/span&gt;

req = request.Request(url=WEBHOOK_URL,
                      data=json.dumps(payload).encode(&lt;span class="hljs-string"&gt;'utf-8'&lt;/span&gt;),
                      method=&lt;span class="hljs-string"&gt;'POST'&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous remarquez que notre
 &lt;em&gt;
  payload
 &lt;/em&gt;
 va être transformé en chaîne de caractères via la fonction
 &lt;code&gt;
  dumps
 &lt;/code&gt;
 de la librairie standard
 &lt;code&gt;
  json
 &lt;/code&gt;
 , puis encodé en chaîne de type
 &lt;code&gt;
  utf-8
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Il ne reste plus qu’à envoyer tout cela !
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;response = request.urlopen(req)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Et constater avec effroi que cela n’a pas marché !
 &lt;img alt=":colere:" class="smiley" src="./static/smileys/angry.gif"/&gt;
 Horreur et frustration !
&lt;/p&gt;
&lt;p&gt;
 En fait, il nous manque deux choses dans les
 &lt;em&gt;
  headers
 &lt;/em&gt;
 de notre requête.
&lt;/p&gt;
&lt;p&gt;
 Premièrement, il faut préciser que nous envoyons bien du json en rajoutant le header
 &lt;code&gt;
  'Content-Type': 'application/json'
 &lt;/code&gt;
 .
 &lt;br/&gt;
 Ensuite, les serveurs Discord n’aiment pas trop les requêtes fournies par la librairie python. On va donc se faire passer pour un navigateur web en précisant un
 &lt;em&gt;
  user-agent
 &lt;/em&gt;
 ,
 &lt;code&gt;
  'user-agent': 'Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11'
 &lt;/code&gt;
 . On met tout cela dans un dictionnaire, puis on rajoute l’option
 &lt;code&gt;
  headers
 &lt;/code&gt;
 dans notre requête.
&lt;/p&gt;
&lt;p&gt;
 Voici le code complet :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;&lt;span class="hljs-comment"&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; json
&lt;span class="hljs-keyword"&gt;from&lt;/span&gt; urllib &lt;span class="hljs-keyword"&gt;import&lt;/span&gt; request
&lt;span class="hljs-keyword"&gt;from&lt;/span&gt; urllib.error &lt;span class="hljs-keyword"&gt;import&lt;/span&gt; HTTPError


WEBHOOK_URL = &lt;span class="hljs-string"&gt;'https://discordapp.com/api/webhooks/xxx/yyy'&lt;/span&gt;

&lt;span class="hljs-comment"&gt;## La payload&lt;/span&gt;
payload = {
    &lt;span class="hljs-string"&gt;'content'&lt;/span&gt;: &lt;span class="hljs-string"&gt;"Salut les z'agrumes ! Ça zeste ?"&lt;/span&gt;
}

&lt;span class="hljs-comment"&gt;## Les paramètres d'en-tête de la requête&lt;/span&gt;
headers = {
    &lt;span class="hljs-string"&gt;'Content-Type'&lt;/span&gt;: &lt;span class="hljs-string"&gt;'application/json'&lt;/span&gt;,
    &lt;span class="hljs-string"&gt;'user-agent'&lt;/span&gt;: &lt;span class="hljs-string"&gt;'Mozilla/5.0 (X11; U; Linux i686) Gecko/20071127 Firefox/2.0.0.11'&lt;/span&gt;
}

&lt;span class="hljs-comment"&gt;## Enfin on construit notre requête&lt;/span&gt;
req = request.Request(url=WEBHOOK_URL,
                      data=json.dumps(payload).encode(&lt;span class="hljs-string"&gt;'utf-8'&lt;/span&gt;),
                      headers=headers,
                      method=&lt;span class="hljs-string"&gt;'POST'&lt;/span&gt;)

&lt;span class="hljs-comment"&gt;## Puis on l'émet !&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;try&lt;/span&gt;:
    response = request.urlopen(req)
    print(response.status)
    print(response.reason)
    print(response.headers)
&lt;span class="hljs-keyword"&gt;except&lt;/span&gt; HTTPError &lt;span class="hljs-keyword"&gt;as&lt;/span&gt; e:
    print(&lt;span class="hljs-string"&gt;'ERROR'&lt;/span&gt;)
    print(e.reason)
    print(e.hdrs)
    print(e.file.read())
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-heading"&gt;
  Le saviez-vous ?
 &lt;/div&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Discord permet une mise en forme des messages avec une partie de la
   &lt;a href="https://support.discordapp.com/hc/fr/articles/210298617-Bases-de-la-mise-en-forme-de-texte-Markdown-mise-en-forme-du-chat-gras-italique-souligné-"&gt;
    syntaxe Markdown
   &lt;/a&gt;
   . Cette mise en forme est aussi supportée dans les messages faits par des bots !
  &lt;/p&gt;
  &lt;figure&gt;
   &lt;img alt="Un message tout simple, mais mis en forme !" src="./images/uploaded/faire-un-bot-discord-simple-avec-les-webhooks/un-message-tout-simple-mais-mis-en-forme.png"/&gt;
   &lt;figcaption&gt;
    Un message tout simple, mais mis en forme !
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="envoyer-des-messages-plus-«riches»"&gt;
 &lt;a aria-hidden="true" href="#envoyer-des-messages-plus-«riches»"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Envoyer des messages plus « riches »
&lt;/h4&gt;
&lt;p&gt;
 Les
 &lt;em&gt;
  webhooks
 &lt;/em&gt;
 Discord nous permettent aussi de mettre en œuvre des messages plus complexes grâce au format
 &lt;em&gt;
  embed
 &lt;/em&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Ce format permet de poster des messages possédant un titre, un corps et même plus encore ! Voyez plutôt :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Un contenu un peu plus riche" src="./images/uploaded/faire-un-bot-discord-simple-avec-les-webhooks/un-contenu-un-peu-plus-riche.png"/&gt;
 &lt;figcaption&gt;
  Un contenu un peu plus riche
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Pour réussir ce tour de force, tout repose sur ce
 &lt;a href="https://discordapp.com/developers/docs/resources/channel#embed-object"&gt;
  morceau de la documentation
 &lt;/a&gt;
 . Concrètement, plusieurs champs sont disponibles pour construire un objet et tous sont facultatifs. Afin de ne pas faire une longue liste à la Prévert, voici plutôt un exemple ayant permis l’illustration précédente :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;payload = {
    &lt;span class="hljs-string"&gt;'content'&lt;/span&gt;: &lt;span class="hljs-string"&gt;"Salut les z'agrumes ! Ça zeste ?"&lt;/span&gt;,
    &lt;span class="hljs-string"&gt;'embeds'&lt;/span&gt;: [
        {
            &lt;span class="hljs-string"&gt;'title'&lt;/span&gt;: &lt;span class="hljs-string"&gt;'Un exemple de super titre'&lt;/span&gt;,  &lt;span class="hljs-comment"&gt;# Le titre de la carte&lt;/span&gt;
            &lt;span class="hljs-string"&gt;'description'&lt;/span&gt;: &lt;span class="hljs-string"&gt;'Ici, le corps du texte...'&lt;/span&gt;,  &lt;span class="hljs-comment"&gt;# Le corps de la carte&lt;/span&gt;
            &lt;span class="hljs-string"&gt;'url'&lt;/span&gt;: &lt;span class="hljs-string"&gt;'https://zestedesavoir.com/on-peut-aussi-mettre-une-url'&lt;/span&gt;,  &lt;span class="hljs-comment"&gt;# Si vous voulez faire un lien&lt;/span&gt;
            &lt;span class="hljs-string"&gt;'timestamp'&lt;/span&gt;: &lt;span class="hljs-string"&gt;'2019-02-28T13:42:00'&lt;/span&gt;,  &lt;span class="hljs-comment"&gt;# Si vous voulez horodater le contenu&lt;/span&gt;
            &lt;span class="hljs-string"&gt;'author'&lt;/span&gt;: {&lt;span class="hljs-string"&gt;'name'&lt;/span&gt;: &lt;span class="hljs-string"&gt;'Eskimon'&lt;/span&gt;},  &lt;span class="hljs-comment"&gt;# Pourquoi pas mettre des auteurs ?&lt;/span&gt;
        },
    ]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Mais ce n’est pas tout ! Si vous avez consulté la documentation, vous avez dû voir que l’on peut aussi poster des vidéos, des images, etc. et même changer un peu le style de la « carte ». Bref, c’est un format assez versatile qui peut vite s’avérer pratique pour mettre en œuvre des contenus plus riches.
&lt;/p&gt;
&lt;p&gt;
 Et voilà, notre petit bot peut maintenant être complété pour faire de plus en plus de choses !
&lt;/p&gt;
&lt;p&gt;
 Si vous voulez mettre en pratique tout cela, un canal dédié à vos entraînements est disponible sur
 &lt;a href="https://discord.gg/ue5MTKq"&gt;
  le Discord non-officiel de Zeste de Savoir
 &lt;/a&gt;
 . N’hésitez pas à y faire un tour et à coder votre propre solution si vous voulez vous entraîner ou vous amuser ! (Il suffit de demander les clés aux admins sur place
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 ).
&lt;/p&gt;
&lt;p&gt;
 Les webhooks ne sont que la partie émergée des possibilités de bots possibles sur Discord. Si vous êtes motivés, plongez-vous dans
 &lt;a href="https://discordapp.com/developers/docs/intro"&gt;
  la doc
 &lt;/a&gt;
 pour en savoir plus et faire des bots bien plus évolués, capable par exemple de répondre aux messages des utilisateurs. Pour cela, sachez aussi qu’il existe des bibliothèques pour vous simplifier le travail comme
 &lt;a href="https://github.com/Rapptz/discord.py"&gt;
  discord.py
 &lt;/a&gt;
 . Amusez-vous bien !
&lt;/p&gt;
&lt;p&gt;
 Profitons aussi de cette conclusion pour glisser un petit remerciement à tout ceux qui sont intervenus de près ou de loin pour rendre ce tuto le plus propre possible
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
&lt;/p&gt;</content><category term="web"></category><category term="tuto"></category><category term="discord"></category><category term="webhook"></category></entry><entry><title>Guake, un terminal drop-down qu'il est bien.</title><link href="https://eskimon.fr/guake-un-terminal-drop-down-quil-est-bien" rel="alternate"></link><published>2019-05-12T14:45:00+02:00</published><updated>2019-05-12T14:45:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2019-05-12:/guake-un-terminal-drop-down-quil-est-bien</id><summary type="html">&lt;p&gt;
 Dans ce billet je souhaite vous faire découvrir un terminal que j’utilise depuis maintenant quelques années : Guake.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;a href="#guake"&gt;
   Guake
  &lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="guake"&gt;
 &lt;a aria-hidden="true" href="#guake"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Guake
&lt;/h3&gt;
&lt;p&gt;
 Pour l’installer sous Ubuntu :
 &lt;code&gt;
  sudo apt install guake
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 L’originalité de ce terminal, c’est qu’il est "accroché" à votre écran, et non pas à un bureau …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Dans ce billet je souhaite vous faire découvrir un terminal que j’utilise depuis maintenant quelques années : Guake.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;a href="#guake"&gt;
   Guake
  &lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="guake"&gt;
 &lt;a aria-hidden="true" href="#guake"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Guake
&lt;/h3&gt;
&lt;p&gt;
 Pour l’installer sous Ubuntu :
 &lt;code&gt;
  sudo apt install guake
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 L’originalité de ce terminal, c’est qu’il est "accroché" à votre écran, et non pas à un bureau virtuel.
Du coup, il est possible de le faire apparaître/disparaître à la volée n’importe quand et il se placera toujours au-dessus des autres fenêtres. Via la pression d’une touche, vous pouvez le faire apparaître, puis avec la même touche ou à la perte de focus il peut repartir. Bien entendu, il gère tout ce que fait la concurrence en termes de personnalisation (couleur, onglets…).
&lt;/p&gt;
&lt;p&gt;
 Personnellement, je l’utilise via la touche
 &lt;kbd&gt;
  &lt;sup&gt;
   2
  &lt;/sup&gt;
 &lt;/kbd&gt;
 dont je ne me sers jamais habituellement (mais du coup, je ne peux plus m’en servir si j’en ai besoin, vu que le terminal se déploiera
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 ). En effet, la touche par défaut est
 &lt;kbd&gt;
  F12
 &lt;/kbd&gt;
 et je la trouve bien trop "loin" pour mon utilisation du clavier. J’ai aussi ajouté la commande
 &lt;code&gt;
  guake
 &lt;/code&gt;
 en démarrage automatique pour que l’outil soit lancé dès le démarrage du système. Enfin, un peu de transparence et tout est nickel !
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Démo !" src="./images/uploaded/guake-un-terminal-drop-down-quil-est-bien/demo.gif"/&gt;
 &lt;figcaption&gt;
  Démo !
 &lt;/figcaption&gt;
&lt;/figure&gt;</content><category term="guake"></category><category term="ubuntu"></category><category term="terminal"></category></entry><entry><title>Remettre à zéro les migrations d'un projet Django</title><link href="https://eskimon.fr/remettre-a-zero-les-migrations-d-un-projet-django" rel="alternate"></link><published>2019-04-29T12:00:00+02:00</published><updated>2019-04-29T12:00:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2019-04-29:/remettre-a-zero-les-migrations-d-un-projet-django</id><summary type="html">&lt;p&gt;
 Cet article donne les commandes pour remettre à zéro les fichiers de migrations d’un projet Django
et repartir sur une base vide. À ne faire que pendant le développement, évidemment.
Toutes les données existantes seront perdues.
&lt;/p&gt;
&lt;h3 id="tldr"&gt;
 &lt;a aria-hidden="true" href="#tldr"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 TL;DR
&lt;/h3&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;find . -path &lt;span class="hljs-string"&gt;"*/migrations/*.py"&lt;/span&gt; -not -name &lt;span class="hljs-string"&gt;"__init__.py"&lt;/span&gt; -delete
find . -path …&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;
 Cet article donne les commandes pour remettre à zéro les fichiers de migrations d’un projet Django
et repartir sur une base vide. À ne faire que pendant le développement, évidemment.
Toutes les données existantes seront perdues.
&lt;/p&gt;
&lt;h3 id="tldr"&gt;
 &lt;a aria-hidden="true" href="#tldr"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 TL;DR
&lt;/h3&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;find . -path &lt;span class="hljs-string"&gt;"*/migrations/*.py"&lt;/span&gt; -not -name &lt;span class="hljs-string"&gt;"__init__.py"&lt;/span&gt; -delete
find . -path &lt;span class="hljs-string"&gt;"*/migrations/*.pyc"&lt;/span&gt;  -delete
rm db.sqlite3
python manage.py makemigrations
python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id="détails"&gt;
 &lt;a aria-hidden="true" href="#détails"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Détails
&lt;/h3&gt;
&lt;h4 id="1-effacer-tous-les-fichiers-de-migrations-existants"&gt;
 &lt;a aria-hidden="true" href="#1-effacer-tous-les-fichiers-de-migrations-existants"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 1. Effacer tous les fichiers de migrations existants
&lt;/h4&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;find . -path &lt;span class="hljs-string"&gt;"*/migrations/*.py"&lt;/span&gt; -not -name &lt;span class="hljs-string"&gt;"__init__.py"&lt;/span&gt; -delete
find . -path &lt;span class="hljs-string"&gt;"*/migrations/*.pyc"&lt;/span&gt;  -delete
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="2-supprimer-la-bdd-existante"&gt;
 &lt;a aria-hidden="true" href="#2-supprimer-la-bdd-existante"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 2. Supprimer la bdd existante
&lt;/h4&gt;
&lt;p&gt;
 (en considérant le nom par défaut
 &lt;code&gt;
  db.sqlite3
 &lt;/code&gt;
 )
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;rm db.sqlite3
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="3-refaire-les-migrations-et-le-schéma-de-bdd"&gt;
 &lt;a aria-hidden="true" href="#3-refaire-les-migrations-et-le-schéma-de-bdd"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 3. Refaire les migrations et le schéma de bdd
&lt;/h4&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;python manage.py makemigrations
python manage.py migrate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><category term="memo"></category><category term="Django"></category></entry><entry><title>Simple flask cache buster</title><link href="https://eskimon.fr/simple-flask-cache-buster" rel="alternate"></link><published>2018-12-12T12:00:00+01:00</published><updated>2018-12-12T12:00:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2018-12-12:/simple-flask-cache-buster</id><summary type="html">&lt;p&gt;
 Many bust caching solutions exists out there. However, most of them rely on the use of a query parameters and it has been proven many times over that it is not the best idea since browser might discard it.
&lt;/p&gt;
&lt;p&gt;
 In this article, I’ll present you a solution that virtually …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Many bust caching solutions exists out there. However, most of them rely on the use of a query parameters and it has been proven many times over that it is not the best idea since browser might discard it.
&lt;/p&gt;
&lt;p&gt;
 In this article, I’ll present you a solution that virtually changes the path of your static resources based on the modified timestamp of the last updated resource.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   You could also use a git hash instead of the timestamp, but as my shared hosting disallow me the use of git command, I had to settle for the next best thing.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="tldr"&gt;
 &lt;a aria-hidden="true" href="#tldr"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 TL;DR
&lt;/h3&gt;
&lt;p&gt;
 In a rush? Here is the full code! Just add it to your
 &lt;code&gt;
  app.py
 &lt;/code&gt;
 and you are good to go.
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-python"&gt;&lt;span class="hljs-meta"&gt;@app.before_first_request&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;def&lt;/span&gt; &lt;span class="hljs-title"&gt;startup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;:&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; &lt;span class="hljs-keyword"&gt;not&lt;/span&gt; app.config[&lt;span class="hljs-string"&gt;'DEBUG'&lt;/span&gt;]:
        app.logger.info(&lt;span class="hljs-string"&gt;'Checking static link'&lt;/span&gt;)

        &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;def&lt;/span&gt; &lt;span class="hljs-title"&gt;get_last_modif_time&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;:&lt;/span&gt;
            &lt;span class="hljs-string"&gt;"""Get the timestamp of the most recent modified file"""&lt;/span&gt;
            path = os.path.join(os.path.dirname(os.path.realpath(__file__)), &lt;span class="hljs-string"&gt;'static'&lt;/span&gt;)
            files = [os.path.join(dp, f) &lt;span class="hljs-keyword"&gt;for&lt;/span&gt; dp, dn, filenames &lt;span class="hljs-keyword"&gt;in&lt;/span&gt; os.walk(path) &lt;span class="hljs-keyword"&gt;for&lt;/span&gt; f &lt;span class="hljs-keyword"&gt;in&lt;/span&gt; filenames]
            timestamp = &lt;span class="hljs-number"&gt;0&lt;/span&gt;
            &lt;span class="hljs-keyword"&gt;for&lt;/span&gt; f &lt;span class="hljs-keyword"&gt;in&lt;/span&gt; files:
                &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; os.path.isfile(f):
                    timestamp = max(timestamp, int(os.stat(f).st_mtime))
            &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; str(timestamp)

        last_modif_date = get_last_modif_time()

        &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;def&lt;/span&gt; &lt;span class="hljs-title"&gt;check_static_link&lt;/span&gt;&lt;span class="hljs-params"&gt;(timestamp)&lt;/span&gt;:&lt;/span&gt;
            &lt;span class="hljs-string"&gt;"""
            Check that we have a link to the static folder
            The link should be &amp;lt;timestamp -&amp;gt; .&amp;gt; (ln -s . timestamp)
            inside static folder
            """&lt;/span&gt;
            path = os.path.join(os.path.dirname(os.path.realpath(__file__)), &lt;span class="hljs-string"&gt;'static'&lt;/span&gt;)
            &lt;span class="hljs-comment"&gt;# Unlink previous links&lt;/span&gt;
            files = os.listdir(path)
            &lt;span class="hljs-keyword"&gt;for&lt;/span&gt; f &lt;span class="hljs-keyword"&gt;in&lt;/span&gt; files:
                &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; os.path.islink(os.path.join(path, f)):
                    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; os.readlink(os.path.join(path, f)) == path:
                        app.logger.info(&lt;span class="hljs-string"&gt;'Remove old link {}'&lt;/span&gt;.format(f))
                        os.unlink(os.path.join(path, f))
            &lt;span class="hljs-comment"&gt;# Create the newest link&lt;/span&gt;
            app.logger.info(&lt;span class="hljs-string"&gt;'Create link to static {}'&lt;/span&gt;.format(os.path.join(path, timestamp)))
            os.symlink(path, os.path.join(path, timestamp))

        check_static_link(last_modif_date)

        &lt;span class="hljs-comment"&gt;# Cache Buster (return static url amended with last timestamp)&lt;/span&gt;
&lt;span class="hljs-meta"&gt;        @app.url_defaults&lt;/span&gt;
        &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;def&lt;/span&gt; &lt;span class="hljs-title"&gt;static_cache_buster&lt;/span&gt;&lt;span class="hljs-params"&gt;(endpoint, values)&lt;/span&gt;:&lt;/span&gt;
            &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; endpoint &lt;span class="hljs-keyword"&gt;in&lt;/span&gt; &lt;span class="hljs-string"&gt;'static'&lt;/span&gt;:
                values[&lt;span class="hljs-string"&gt;'filename'&lt;/span&gt;] = os.path.join(last_modif_date, values[&lt;span class="hljs-string"&gt;'filename'&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="detailed-version"&gt;
 &lt;a aria-hidden="true" href="#detailed-version"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Detailed version
&lt;/h3&gt;
&lt;p&gt;
 For those of view how wants to know more, here are some details.
&lt;/p&gt;
&lt;p&gt;
 To avoid browser caching of outdated resources, we need to change the path of the resource. The main idea behind all this code will be to generate a path like
 &lt;code&gt;
  /static/&amp;lt;last_timestamp&amp;gt;/css/style.css
 &lt;/code&gt;
 for example. The important part here is the
 &lt;code&gt;
  &amp;lt;last_timestamp&amp;gt;/
 &lt;/code&gt;
 fragment. This piece of string is gonna be changed everytime we reload the flask server and a static resource has been updated.
&lt;/p&gt;
&lt;h4 id="1-finding-the-last-timestamp"&gt;
 &lt;a aria-hidden="true" href="#1-finding-the-last-timestamp"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 1. Finding the last timestamp
&lt;/h4&gt;
&lt;p&gt;
 First thing to do is to identify what is the timestamp of the most recently modified resource. To do so, we will use the
 &lt;code&gt;
  os.walk()
 &lt;/code&gt;
 function to get all the files in the
 &lt;code&gt;
  static/
 &lt;/code&gt;
 folder. Then, with
 &lt;code&gt;
  os.stat()
 &lt;/code&gt;
 we will get the last modified timestamp.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;def&lt;/span&gt; &lt;span class="hljs-title"&gt;get_last_modif_time&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;:&lt;/span&gt;
    &lt;span class="hljs-string"&gt;"""Get the timestamp of the most recent modified file"""&lt;/span&gt;
    path = os.path.join(os.path.dirname(os.path.realpath(__file__)), &lt;span class="hljs-string"&gt;'static'&lt;/span&gt;)
    files = [os.path.join(dp, f) &lt;span class="hljs-keyword"&gt;for&lt;/span&gt; dp, dn, filenames &lt;span class="hljs-keyword"&gt;in&lt;/span&gt; os.walk(path) &lt;span class="hljs-keyword"&gt;for&lt;/span&gt; f &lt;span class="hljs-keyword"&gt;in&lt;/span&gt; filenames]
    timestamp = &lt;span class="hljs-number"&gt;0&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt; f &lt;span class="hljs-keyword"&gt;in&lt;/span&gt; files:
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; os.path.isfile(f):
            timestamp = max(timestamp, int(os.stat(f).st_mtime))
    &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; str(timestamp)

last_modif_date = get_last_modif_time()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="2-creating-the-new-path"&gt;
 &lt;a aria-hidden="true" href="#2-creating-the-new-path"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 2. Creating the new path
&lt;/h4&gt;
&lt;p&gt;
 As mentionned before, we need to change path from
 &lt;code&gt;
  /static/css/style.css
 &lt;/code&gt;
 to
 &lt;code&gt;
  /static/&amp;lt;last_timestamp&amp;gt;/css/style.css
 &lt;/code&gt;
 . In order to do that without moving around all the files, we simply create a symbolic link named
 &lt;code&gt;
  last_timestamp
 &lt;/code&gt;
 and pointing to its current place. Hence we get the following structure:
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-text"&gt;/home/eskimon/foo/bar/twittorama/static$ tree

.
├── 1542798662 -&amp;gt; /home/eskimon/foo/bar/twittorama/static
├── css
│   └── style.css
├── images
└── js
    ├── gallery.js
    └── vuegallery.js
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 The function to do this need also to remove former existing link to avoid spamming the folder with new links everytime we update the site:
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;def&lt;/span&gt; &lt;span class="hljs-title"&gt;check_static_link&lt;/span&gt;&lt;span class="hljs-params"&gt;(timestamp)&lt;/span&gt;:&lt;/span&gt;
    &lt;span class="hljs-string"&gt;"""
    Check that we have a link to the static folder
    The link should be &amp;lt;timestamp -&amp;gt; .&amp;gt; (ln -s . timestamp)
    inside static folder
    """&lt;/span&gt;
    path = os.path.join(os.path.dirname(os.path.realpath(__file__)), &lt;span class="hljs-string"&gt;'static'&lt;/span&gt;)
    &lt;span class="hljs-comment"&gt;# Unlink previous links&lt;/span&gt;
    files = os.listdir(path)
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt; f &lt;span class="hljs-keyword"&gt;in&lt;/span&gt; files:
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; os.path.islink(os.path.join(path, f)):
            &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; os.readlink(os.path.join(path, f)) == path:
                app.logger.info(&lt;span class="hljs-string"&gt;'Remove old link {}'&lt;/span&gt;.format(f))
                os.unlink(os.path.join(path, f))
    &lt;span class="hljs-comment"&gt;# Create the newest link&lt;/span&gt;
    app.logger.info(&lt;span class="hljs-string"&gt;'Create link to static {}'&lt;/span&gt;.format(os.path.join(path, timestamp)))
    os.symlink(path, os.path.join(path, timestamp))

check_static_link(last_modif_date)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="3-redirecting-request-to-static"&gt;
 &lt;a aria-hidden="true" href="#3-redirecting-request-to-static"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 3. Redirecting request to static
&lt;/h4&gt;
&lt;p&gt;
 Last thing to do is to update the
 &lt;code&gt;
  url_for
 &lt;/code&gt;
 behavior for the templating. We will use the decorator
 &lt;code&gt;
  @app.url_defaults
 &lt;/code&gt;
 in order to do that. The behavior is simple, everytime a request is made on the endpoint
 &lt;code&gt;
  static
 &lt;/code&gt;
 , then the filename must be changed from
 &lt;code&gt;
  foo/bar/static/filename/path.css
 &lt;/code&gt;
 to
 &lt;code&gt;
  foo/bar/static/&amp;lt;timestamp&amp;gt;/filename/path.css
 &lt;/code&gt;
 . Because we now have a symbolic link, the path can be resolved.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;&lt;span class="hljs-comment"&gt;# Cache Buster (return static url amended with last timestamp)&lt;/span&gt;
&lt;span class="hljs-meta"&gt;@app.url_defaults&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;def&lt;/span&gt; &lt;span class="hljs-title"&gt;static_cache_buster&lt;/span&gt;&lt;span class="hljs-params"&gt;(endpoint, values)&lt;/span&gt;:&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; endpoint &lt;span class="hljs-keyword"&gt;in&lt;/span&gt; &lt;span class="hljs-string"&gt;'static'&lt;/span&gt;:
        values[&lt;span class="hljs-string"&gt;'filename'&lt;/span&gt;] = os.path.join(last_modif_date, values[&lt;span class="hljs-string"&gt;'filename'&lt;/span&gt;])
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="4-wrapping-it-to-execute-only-once"&gt;
 &lt;a aria-hidden="true" href="#4-wrapping-it-to-execute-only-once"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 4. Wrapping it to execute only once
&lt;/h4&gt;
&lt;p&gt;
 Last but not least, all this behavior must be executing only before the first request. The link should not be destroyed and recreate everytime a user request a page!
&lt;/p&gt;
&lt;p&gt;
 The solution is simply to wrap all our code in a function decorated with
 &lt;code&gt;
  @app.before_first_request
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;&lt;span class="hljs-meta"&gt;@app.before_first_request&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;def&lt;/span&gt; &lt;span class="hljs-title"&gt;startup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;:&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;# All the code we made so far!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id="conclusion"&gt;
 &lt;a aria-hidden="true" href="#conclusion"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Conclusion
&lt;/h3&gt;
&lt;p&gt;
 There you go, a simple yet efficient cache busting solution that doesn’t involve any query parameters!
&lt;/p&gt;</content><category term="web"></category><category term="tuto"></category></entry><entry><title>Utiliser un gestionnaire de mot de passe</title><link href="https://eskimon.fr/tuto-keeweb-utiliser-un-gestionnaire-de-mot-de-passe" rel="alternate"></link><published>2018-11-04T09:00:00+01:00</published><updated>2018-11-04T09:00:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2018-11-04:/tuto-keeweb-utiliser-un-gestionnaire-de-mot-de-passe</id><summary type="html">&lt;p&gt;
 Dans ce tutoriel, je vais vous présenter de la manière la plus imagée et la plus simple possible un principe de sécurité informatique facile à mettre en place, que tout le monde, même sans connaissance de l’outil informatique sera en mesure de mettre en place ! Le but étant de …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Dans ce tutoriel, je vais vous présenter de la manière la plus imagée et la plus simple possible un principe de sécurité informatique facile à mettre en place, que tout le monde, même sans connaissance de l’outil informatique sera en mesure de mettre en place ! Le but étant de vous aider à mettre en place une petite sécurité supplémentaire pour améliorer la protection de vos services en ligne et de votre vie privée numérique.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;a href="#dans-la-vraie-vie-comment-ça-se-passe"&gt;
   Dans la vraie vie, comment ça se passe ?
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#un-gestionnaire-de-mot-de-passe-comment-ça-marche"&gt;
   Un gestionnaire de mot de passe, comment ça marche ?
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#interlude-parlons-chiffres-et-actualités"&gt;
   Interlude Parlons chiffres et actualités
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#place-à-la-pratique-utilisons-ce-fameux-gestionnaire-de-mot-de-passe-keeweb"&gt;
    Place à la pratique, utilisons ce fameux gestionnaire de mot de passe (KeeWeb)
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#le-logiciel-utilisé-keeweb"&gt;
     Le logiciel utilisé : "KeeWeb"
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#linterface-de-keeweb"&gt;
     L’interface de KeeWeb
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#synchroniser-votre-coffre-fort"&gt;
   Synchroniser votre coffre-fort
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#quelques-astuces-pour-rendre-lutilisation-moins-fastidieuse"&gt;
    Quelques astuces pour rendre l’utilisation moins fastidieuse
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#changer-les-comptes-petits-à-petits"&gt;
     Changer les comptes petits à petits
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#demander-au-navigateur-de-travailler-pour-vous"&gt;
     Demander au navigateur de travailler pour vous
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#utiliser-la-touche-de-remplissage-automatique"&gt;
     Utiliser la touche de remplissage automatique
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#application-mobile-suggérée"&gt;
     Application mobile suggérée
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dans-la-vraie-vie-comment-ça-se-passe"&gt;
 &lt;a aria-hidden="true" href="#dans-la-vraie-vie-comment-ça-se-passe"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Dans la vraie vie, comment ça se passe ?
&lt;/h3&gt;
&lt;p&gt;
 Dans la vie de tous les jours, votre trousseau de clé pour accéder à votre logement, véhicule, bureau ressemble plutôt à celui de gauche ou à celui de droite ?
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Des clés... de différentes forces !" src="./images/uploaded/tuto-keeweb-utiliser-un-gestionnaire-de-mot-de-passe/des-cles-de-differentes-forces.jpg"/&gt;
 &lt;figcaption&gt;
  Des clés... de différentes forces !
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Je pense qu’on est d’accord pour dire que la majorité répondra celui de droite (même mes enfants, qui galèrent à parler, préfèrent le trousseau de droite à celui de gauche, comme quoi !).
&lt;/p&gt;
&lt;p&gt;
 Et utilisez-vous la même clé pour la porte d’entrée, la voiture, la boîte aux lettres ou le cabanon du jardin ?
&lt;/p&gt;
&lt;p&gt;
 Eh bien fondamentalement la sécurité en ligne c’est exactement la même chose, sauf qu’une clé s’appelle un mot de passe !
&lt;/p&gt;
&lt;p&gt;
 Vous pouvez utiliser juste quelques clés pour tout vos services en ligne (email, réseaux sociaux, sites marchands, banques, etc) ou bien utiliser une et une seule clé pour chacun des services. Tout comme vous utilisez déjà une clé pour votre porte d’entrée, une pour votre vélo, une autre pour le garage etc…
&lt;/p&gt;
&lt;p&gt;
 Et sinon, vos clés, elles sont plutôt en "plastique tout mou avec jusque quelques trous et bosses" ou plutôt "métal costaud avec des creux/bosses de différents niveaux voire même des trous de différentes diamètres" ?
&lt;/p&gt;
&lt;p&gt;
 J’imagine la seconde option. C’est ce qu’on appelle une protection "forte". Vous avez peut-être déjà croisé ce terme lorsque vous vous êtes inscrits sur un site internet. Si vous essayez le mot de passe &amp;lt;abc123&amp;gt; le site vous répondra que le mot de passe est faible (clé en plastique). Alors que si votre mot de passe ressemble plutôt à &amp;lt;qQ6jR157Ms_$cS~/&amp;gt; le mot de passe sera qualifié de "fort" (clé en métal).
&lt;/p&gt;
&lt;p&gt;
 Et tout le secret est là. Utiliser des mots de passe
 &lt;strong&gt;
  forts
 &lt;/strong&gt;
 et
 &lt;strong&gt;
  différents
 &lt;/strong&gt;
 pour chacun de vos services, comme vous utilisez une clé différente pour chacune de vos serrures.
&lt;/p&gt;
&lt;p&gt;
 Alors vous allez sûrement me répondre :
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Tu es bien gentil, mais chez moi mes clés je les promène sur un seul trousseau. Comment tu veux que je me rappelle de tout pleins de mots de passe incongrus ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Rassurez-vous, je ne vous demande pas de devenir champion de la mémoire. Nous allons juste utiliser un outil qui fera ça très bien pour nous : un gestionnaire de mot de passe.
&lt;/p&gt;
&lt;h3 id="un-gestionnaire-de-mot-de-passe-comment-ça-marche"&gt;
 &lt;a aria-hidden="true" href="#un-gestionnaire-de-mot-de-passe-comment-ça-marche"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un gestionnaire de mot de passe, comment ça marche ?
&lt;/h3&gt;
&lt;p&gt;
 Le principe d’un gestionnaire de mot de passe est très simple. C’est un coffre-fort qui contiendra tous vos mots de passe. Et quand j’utilise le mot "coffre-fort", c’est presque littéral
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 En effet, il vous suffit d’imaginer que l’internet représente tout l’espace à l’extérieur de votre logement et que votre maison soit votre ordinateur. Ce que je vous propose, c’est de mettre chez vous un coffre-fort qui contiendra tous vos mots de passe. Ce coffre-fort sera impossible à ouvrir, sauf par vous car vous serez la seule personne à en avoir la combinaison. Une fois ouvert, vous pourrez alors prendre le mot de passe qui vous intéresse pour accéder au site internet auquel vous souhaitez vous connecter. Vous pourrez aussi évidemment ajouter de nouveaux mots de passe dedans pour compléter votre trousseau de clé numérique.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ce coffre-fort sera uniquement sur votre ordinateur. Vous n’y aurez donc pas accès depuis un autre ordinateur. Cependant, dans la dernière partie de ce tutoriel je vous expliquerais comment le synchroniser entre différents appareils en toute sécurité !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous vous en doutez peut-être, pour que cette stratégie fonctionne il faut que le code de votre coffre-fort soit robuste. Ce sera là le seul effort à faire : trouver et se souvenir d’un mot de passe
 &lt;em&gt;
  fort
 &lt;/em&gt;
 pour sécuriser votre coffre. Avantage, dorénavant ce sera le seul mot de passe dont vous devrez vous souvenir. Mais nous y revenons juste après une petite pause pour parler chiffres et actualités.
&lt;/p&gt;
&lt;h3 id="interlude-parlons-chiffres-et-actualités"&gt;
 &lt;a aria-hidden="true" href="#interlude-parlons-chiffres-et-actualités"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 [Interlude] Parlons chiffres et actualités
&lt;/h3&gt;
&lt;p&gt;
 Quelque chose est important à comprendre : Utiliser un seul mot de passe par service est primordial. En effet, si vous utilisez le même mot de passe partout, alors il suffit qu’un seul site internet ne se fasse pirater pour compromettre l’ensemble de vos accès à d’autres services/sites internet. En revanche, si vous utilisez un mot de passe unique par service, l’attaque de l’un d’entre eux et le vol de sa base de donnée n’impactera pas votre sécurité sur les autres sites.
&lt;/p&gt;
&lt;p&gt;
 A titre d’exemple, voici quelques évènements majeurs sur la dernière décennie :
&lt;/p&gt;
&lt;p&gt;
 En mai 2016, le célèbre site de réseau professionnel "LinkedIn" a vu 164 millions de couples email/mot de passe révélé suite à une attaque.
&lt;/p&gt;
&lt;p&gt;
 Octobre 2013, l’éditeur de logiciels professionnels de graphisme et d’un célèbre lecteur pdf, Adobe, s’est fait attaquer. 153 millions d’emails, de mots de passe chiffrés (mais avec leur questions types "Quel est le nom de votre premier animal") sont partis dans la nature.
&lt;/p&gt;
&lt;p&gt;
 Mai 2015, le site de rencontre américain
 &lt;em&gt;
  Adult Friend Finder
 &lt;/em&gt;
 s’est fait pirater. 4 millions de comptes sont alors subtilisés avec notamment les identités des personnes, leur situation géographique, leur orientation sexuelle et probablement d’autres données sur leur historique d’utilisation du service. Dans la même veine et posant les mêmes soucis sur la vie privée des utilisateurs, les sites
 &lt;em&gt;
  Beautiful People
 &lt;/em&gt;
 (2015, 1.1 millions de comptes volés),
 &lt;em&gt;
  JustDate
 &lt;/em&gt;
 (2016, 24 millions de comptes) et
 &lt;em&gt;
  Mate1
 &lt;/em&gt;
 (2016, 27 millions de comptes) ont eux aussi subits des attaques.
&lt;/p&gt;
&lt;p&gt;
 Mai 2014, l’éditeur d’antivirus Avast! s’est fait volé 423 000 informations de comptes (nom de profil, email et mot de passe chiffré). Apprécions l’ironie, même un spécialiste des attaques informatiques n’est pas infaillible.
&lt;/p&gt;
&lt;p&gt;
 En septembre 2014, 5 millions de comptes Gmail étaient mis en vente au marché noir.
&lt;/p&gt;
&lt;p&gt;
 Et un des plus gros sites au monde, Facebook, s’est aussi vue attaqué (mais sans vol d’informations) en septembre 2018. A la louche 50 millions de comptes ont été piraté.
&lt;/p&gt;
&lt;p&gt;
 Toutes ces données proviennent du site (en anglais) :
 &lt;a href="https://haveibeenpwned.com/"&gt;
  https://haveibeenpwned.com/
 &lt;/a&gt;
 . Ce site propose aussi un formulaire vous permettant de vérifier si votre email a été retrouvé parmi des comptes volés suite à des attaques.
&lt;/p&gt;
&lt;p&gt;
 Avez-vous remarqué ? Tout ces sites sont des mastodontes de l’informatique et de l’internet. Ce sont des sites dont le business se fait 100% via l’outil informatique. Et pourtant, aucun n’est infaillible. Je ne mentionnerais même pas les plus petits sites n’ayant pas les moyens de faire des audits de sécurité complets.
&lt;/p&gt;
&lt;p&gt;
 La sécurité à 100% n’existe pas. Il y aura toujours une brèche et les pirates rivalisent d’ingéniosité tout les jours pour y parvenir. Une fois les données en leurs mains, ils ne leur faut que très peu de temps pour lancer une batterie d’outils qui testera les couples courriels/mot de passe sur les services en ligne les plus connus.
&lt;/p&gt;
&lt;p&gt;
 Une fois que la brèche a eu lieu il est trop tard, le compte est corrompu. Cependant, les utilisateurs (vous !) peuvent mettre en place des solutions pour éviter la propagation. Utiliser des mots de passe différents sur chacun des sites en est une.
&lt;/p&gt;
&lt;h3 id="place-à-la-pratique-utilisons-ce-fameux-gestionnaire-de-mot-de-passe-keeweb"&gt;
 &lt;a aria-hidden="true" href="#place-à-la-pratique-utilisons-ce-fameux-gestionnaire-de-mot-de-passe-keeweb"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Place à la pratique, utilisons ce fameux gestionnaire de mot de passe (KeeWeb)
&lt;/h3&gt;
&lt;p&gt;
 J’espère que rendu à ce point de la lecture, vous avez cerné les enjeux et l’intérêt d’utiliser des mots de passe
 &lt;strong&gt;
  fort
 &lt;/strong&gt;
 et
 &lt;strong&gt;
  uniques
 &lt;/strong&gt;
 sur chacun des services en ligne que vous fréquentez.
&lt;/p&gt;
&lt;p&gt;
 Comme je vous l’expliquais au début du tutoriel, l’objectif est de n’avoir à retenir qu’un seul mot de passe, le plus efficace possible (tant en terme de facilité à le retenir, que de difficulté à le deviner pour un étranger). Tout les autres mots de passe que vous utiliserez pour des sites en ligne seront dorénavant généré automatiquement, complètement aléatoirement, pour être fort et unique.
&lt;/p&gt;
&lt;h4 id="le-logiciel-utilisé-keeweb"&gt;
 &lt;a aria-hidden="true" href="#le-logiciel-utilisé-keeweb"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le logiciel utilisé : "KeeWeb"
&lt;/h4&gt;
&lt;p&gt;
 Allons-y, mettons en oeuvre tout cela.
&lt;/p&gt;
&lt;p&gt;
 Le logiciel que je vous propose d’utiliser s’appelle KeeWeb. J’ai choisi de vous présenter ce dernier pour plusieurs raisons :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Il est gratuit ;
 &lt;/li&gt;
 &lt;li&gt;
  Il est disponible en français ;
 &lt;/li&gt;
 &lt;li&gt;
  Il fonctionne sur tout les systèmes (Mac, Windows, Linux) ;
 &lt;/li&gt;
 &lt;li&gt;
  Il en existe une version en ligne si vous ne pouvez pas installer de logiciels sur votre ordinateur (dans ce cas votre coffre-fort devra être synchronisé, j’y reviendrais) ;
 &lt;/li&gt;
 &lt;li&gt;
  Enfin, il est
  &lt;em&gt;
   open-source
  &lt;/em&gt;
  . Cela signifie que n’importe qui peut étudier son comportement et pourquoi pas contribuer pour corriger des bugs ou le rendre meilleur. Cette visibilité publique permet aussi de garantir que le logiciel ne nous espionne pas à notre insu.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Vous pouvez le trouver à l’adresse suivante :
 &lt;a href="https://keeweb.info/"&gt;
  https://keeweb.info/
 &lt;/a&gt;
 . Sur ce site, vous pouvez télécharger le fichier pour installer sur votre ordinateur ou utiliser la version en ligne directement, à vous de voir ! Je vous laisse l’installer si vous choisissez cette option avant de passer à la suite de la lecture.
&lt;/p&gt;
&lt;h4 id="linterface-de-keeweb"&gt;
 &lt;a aria-hidden="true" href="#linterface-de-keeweb"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’interface de KeeWeb
&lt;/h4&gt;
&lt;p&gt;
 Lorsque vous démarrez le logiciel, vous vous retrouvez alors devant une fenêtre vous demandant d’ouvrir un fichier. Comme nous n’avons pas encore de coffre-fort, sélectionnez l’option "Nouveau". Les prochaines fois, votre coffre-fort (aussi appelé "base de données de mot de passe") sera proposé directement sur cette écran.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Accueil de KeeWeb" src="./images/uploaded/tuto-keeweb-utiliser-un-gestionnaire-de-mot-de-passe/accueil-de-keeweb.png"/&gt;
 &lt;figcaption&gt;
  Accueil de KeeWeb
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Vous vous retrouvez alors dans l’interface de KeeWeb qui vous résume les différentes parties de l’écran :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="L'interface de KeeWeb" src="./images/uploaded/tuto-keeweb-utiliser-un-gestionnaire-de-mot-de-passe/linterface-de-keeweb.png"/&gt;
 &lt;figcaption&gt;
  L'interface de KeeWeb
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Cette interface se découpe en trois colonnes. De gauche à droite on trouve :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Un menu permettant de classer nos mots de passe ;
 &lt;/li&gt;
 &lt;li&gt;
  Une colonne vide qui contiendra une liste des mots de passe ;
 &lt;/li&gt;
 &lt;li&gt;
  Une fenêtre (vide pour le moment) qui permettra de voir et éditer un mot de passe en particulier.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Sans plus attendre, créons notre premier mot de passe ! Pour cela, cliquez sur le bouton tout en haut en forme de
 &lt;kbd&gt;
  +
 &lt;/kbd&gt;
 , à côté du champ de recherche, dans la deuxième colonne, puis sélectionnez "Nouvelle entrée"
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Créer un nouveau mot de passe" src="./images/uploaded/tuto-keeweb-utiliser-un-gestionnaire-de-mot-de-passe/creer-un-nouveau-mot-de-passe.png"/&gt;
 &lt;figcaption&gt;
  Créer un nouveau mot de passe
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Le troisième panneau des mots de passe se remplit alors, avec des champs qu’il ne reste plus qu’à compléter.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Modèle de mot de passe" src="./images/uploaded/tuto-keeweb-utiliser-un-gestionnaire-de-mot-de-passe/modele-de-mot-de-passe.png"/&gt;
 &lt;figcaption&gt;
  Modèle de mot de passe
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Pour l’exemple, je vous propose de créer un nouveau mot de passe pour un site imaginaire, pour lequel je devrais me connecter via le classique couple "courriel/mot de passe". Je vais donc commencer par donner un nom à ce nouvel enregistrement, puis renseigné mon email comme étant le champ "utilisateur". Enfin, il ne reste plus qu’à ajouter un mot de passe.
&lt;/p&gt;
&lt;p&gt;
 Et là intervient la magie !
&lt;/p&gt;
&lt;p&gt;
 Nous n’allons pas renseigné nous-même ce champ, mais demander au logiciel de nous générer un mot de passe complètement aléatoire selon certains critères. Par exemple, que le mot de passe fasse 16 caractères, contienne des majuscules, minuscules et un/des chiffre(s). On peut aussi lui demander de rajouter des caractères spéciaux. Pour faire tout cela, simplement cliquez sur le petit éclair à droite du champ "mot de passe".
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Nouveau mot de passe" src="./images/uploaded/tuto-keeweb-utiliser-un-gestionnaire-de-mot-de-passe/nouveau-mot-de-passe.png"/&gt;
 &lt;figcaption&gt;
  Nouveau mot de passe
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Une fois le mot de passe saisi, le champ devient "caché" et peut-être révélé d’un simple clic dessus. Il est aussi possible de rajouter des notes si vous voulez ajouter des informations à l’enregistrement.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Le mot de passe est créé !" src="./images/uploaded/tuto-keeweb-utiliser-un-gestionnaire-de-mot-de-passe/le-mot-de-passe-est-cree.png"/&gt;
 &lt;figcaption&gt;
  Le mot de passe est créé !
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Dernière étape, sauvegarder notre coffre-fort. Pour cela, cliquez sur l’onglet actuellement intitulé "New" tout en bas à gauche de l’application. L’écran suivant s’affiche alors.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Enregistrer le coffre-fort" src="./images/uploaded/tuto-keeweb-utiliser-un-gestionnaire-de-mot-de-passe/enregistrer-le-coffre-fort.png"/&gt;
 &lt;figcaption&gt;
  Enregistrer le coffre-fort
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Il vous faudra alors compléter deux champs. Le champ "Nom" qui permettra d’identifier le fichier (si jamais vous en utilisez plusieurs, lorsque vous êtes plusieurs à utiliser le même ordinateur par exemple) et le plus important, le champ "Mot de passe principal". Toute la sécurité de votre coffre-fort se situe ici.
&lt;/p&gt;
&lt;p&gt;
 C’est ce mot de passe que vous devez connaître par cœur et sera le seul à retenir !
&lt;/p&gt;
&lt;p&gt;
 Prenez-donc 5 minutes pour penser à quelques chose qui vous convient, dont vous serez sûr de vous rappeler. Je vous rappel qu’il faut que ce mot de passe soit fort, donc long (12 caractères et au-delà c’est un bon début) et difficile à deviner pour n’importe qui sauf vous ! Pas besoin de faire quelque chose d’incongru, une suite de mot suffisamment loufoque peut faire l’affaire, tant que vous arrivez à vous en souvenir.
&lt;/p&gt;
&lt;p&gt;
 Par exemple, la combinaison de mon coffre-fort ressemble à ceci : "LeChocolatFonduMauve". Il est facile à retenir une fois mémorisé car n’est pas incongru, mais pour autant ne sonne pas comme une évidence pour qu’un esprit extérieur puisse le deviner. On oublie donc les mots de passe à base de prénoms des enfants et de dates de naissance
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;p&gt;
 Il ne reste plus qu’à cliquer sur "Enregistrer" et voilà, votre coffre-fort est en place. Dorénavant, la prochaine fois que vous ouvrirez le logiciel, ce dernier sélectionnera par défaut ce coffre-fort et vous demandera directement le mot de passe pour l’ouvrir.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Sésame ouvre-toi !" src="./images/uploaded/tuto-keeweb-utiliser-un-gestionnaire-de-mot-de-passe/sesame-ouvre-toi.png"/&gt;
 &lt;figcaption&gt;
  Sésame ouvre-toi !
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="synchroniser-votre-coffre-fort"&gt;
 &lt;a aria-hidden="true" href="#synchroniser-votre-coffre-fort"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Synchroniser votre coffre-fort
&lt;/h3&gt;
&lt;p&gt;
 Félicitations, vous avez mine de rien accompli un grand pas dans la sécurisation de votre vie privée en ligne !
&lt;/p&gt;
&lt;p&gt;
 Il me reste une chose à vous apprendre, qui est très simple : La synchronisation de votre coffre-fort.
&lt;/p&gt;
&lt;p&gt;
 Par synchronisation, je veux vous expliquer un mécanisme qui vous permettra de retrouver votre coffre-fort contenant tout vos mots de passe sur n’importe quel ordinateur ou smartphone connecté à internet. Pour cela, nous allons demander à KeeWeb d’envoyer et de garder à jour notre coffre-fort sur un service de stockage en ligne. Par défaut, 3 services grands public sont proposés : Dropbox, Google Drive et Microsoft OneDrive.
&lt;/p&gt;
&lt;p&gt;
 Une question émerge peut-être :
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Est-ce bien prudent de mettre tous mes mots de passe sur un service en ligne qui peut-être sujet à des failles de sécurité ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Et c’est une excellente question. Le fichier, représentant votre coffre-fort, qui va se synchroniser sur les services en ligne est dit "chiffré". Cela signifie que son contenu est inaccessible. Tout comme si vous récureriez un coffre-fort sans son code, vous ne pourriez l’ouvrir.
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Les petits malins me diront qu’un coffre-fort peut-être percé ou dynamité pour être ouvert. Et c’est aussi le cas pour le chiffrement numérique de ce coffre-fort numérique. Toutefois, les
   &lt;em&gt;
    algorithmes
   &lt;/em&gt;
   utilisés pour réaliser cette opération sont tellement perfectionné que cette opération de dynamitage numérique (appelé
   &lt;em&gt;
    brute force
   &lt;/em&gt;
   ) n’est pas réalisable en "temps humain". C’est à dire qu’elle n’est pas réalisable avant que la donnée ne soit devenu obsolète ou alors protégé par un meilleur moyen.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Pour réaliser cette synchronisation, il vous faudra donc un compte sur l’un de ces trois services. Ensuite, lorsque vous allez ouvrir KeeWeb, ouvrez votre coffre-fort puis sélectionner son onglet en bas à gauche. Ensuite, cliquez sur le bouton "Enregistrer sous". Des options apparaissent alors, il ne vous reste plus qu’à sélectionner celle que vous souhaitez puis suivre les instructions de connexion au compte utilisé.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Synchroniser votre coffre-fort" src="./images/uploaded/tuto-keeweb-utiliser-un-gestionnaire-de-mot-de-passe/synchroniser-votre-coffre-fort.png"/&gt;
 &lt;figcaption&gt;
  Synchroniser votre coffre-fort
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Dorénavant, à chaque fois que vous allez créer ou éditer un mot de passe, KeeWeb se chargera automatiquement de faire une synchronisation avec la version distante, afin que vous puissiez utiliser votre coffre-fort partout, en toute circonstance.
&lt;/p&gt;
&lt;h3 id="quelques-astuces-pour-rendre-lutilisation-moins-fastidieuse"&gt;
 &lt;a aria-hidden="true" href="#quelques-astuces-pour-rendre-lutilisation-moins-fastidieuse"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Quelques astuces pour rendre l’utilisation moins fastidieuse
&lt;/h3&gt;
&lt;p&gt;
 Pour conclure ce tutoriel, je souhaite vous partager quelques astuces pour rendre l’utilisation d’un gestionnaire de mot de passe plus agréable et productive au quotidien.
&lt;/p&gt;
&lt;h4 id="changer-les-comptes-petits-à-petits"&gt;
 &lt;a aria-hidden="true" href="#changer-les-comptes-petits-à-petits"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Changer les comptes petits à petits
&lt;/h4&gt;
&lt;p&gt;
 Utiliser un gestionnaire de mot de passe, c’est une gymnastique, une routine, qui peut prendre du temps. Une fois mise en place cependant, les bénéfices se font sentir et aucune contrainte n’apparait.
&lt;/p&gt;
&lt;p&gt;
 Une approche radicale de la sécurité serait de dire "Changez dès aujourd’hui vos mots de passe pour en mettre un fort et unique partout". Je vais toutefois vous proposer une approche plus modérée et plus compatible avec le quotidien.
&lt;/p&gt;
&lt;p&gt;
 Ce que je vous propose, c’est que la prochaine fois que vous vous connecter à un service que vous utilisez déjà, avec peut-être un mot de passe que vous utilisez partout, vous alliez dans les options de votre profil pour ce site pour aller changer votre mot de passe. Et c’est tout !
&lt;/p&gt;
&lt;p&gt;
 L’idée est de ne pas faire un inventaire immédiat de tout les sites et services que vous utilisez pour passer une demi-journée à les mettre à jour, mais plutôt d’avoir une approche progressive, en faisant un site à la fois, une fois de temps en temps. Ainsi, a priori les sites que vous consultez le plus et qui donc vous sont les plus sensibles, seront sécurisés rapidement. Les autres viendront ensuite, petit à petit.
&lt;/p&gt;
&lt;h4 id="demander-au-navigateur-de-travailler-pour-vous"&gt;
 &lt;a aria-hidden="true" href="#demander-au-navigateur-de-travailler-pour-vous"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Demander au navigateur de travailler pour vous
&lt;/h4&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ce conseil ne s’applique que sur un ordinateur personnel, ne le faites pas sur un ordinateur public !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Afin de diminuer un peu la charge de travail, tout les navigateurs internet modernes et à jour propose une fonctionnalité de "mémorisation" des mots de passe. Pourquoi ne pas l’utiliser en parallèle du gestionnaire de mots de passe. Ce dernier crée des mots de passe compliqué et les sauvegardes pour vous pour les rendre accessible partout, puis le navigateur se charge de s’en souvenir localement pour vous éviter d’avoir à les saisir sans arrêt.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Exemple pour Firefox, se souvenir de mon mot de passe" src="./images/uploaded/tuto-keeweb-utiliser-un-gestionnaire-de-mot-de-passe/exemple-pour-firefox-se-souvenir-de-mon-mot-de-passe.png"/&gt;
 &lt;figcaption&gt;
  Exemple pour Firefox, se souvenir de mon mot de passe
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="utiliser-la-touche-de-remplissage-automatique"&gt;
 &lt;a aria-hidden="true" href="#utiliser-la-touche-de-remplissage-automatique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utiliser la touche de remplissage automatique
&lt;/h4&gt;
&lt;p&gt;
 KeeWeb possède quelques raccourcis clavier pour vous rendre la vie plus facile. Je trouve l’un d’entre eux particulièrement utile : La complétion automatique. Grâce à cette fonction, KeeWeb se chargera de compléter intelligemment les champs login / mot de passe du service auquel vous souhaiter accéder.
&lt;/p&gt;
&lt;p&gt;
 Pour l’utiliser c’est assez simple. Tout d’abord, allez sur la page de connexion du service/site web auquel vous souhaitez vous connecter. Ensuite, ouvrez KeeWeb et sélectionner la fiche du mot de passe concerné. Enfin, faites un appui sur les touches
 &lt;kbd&gt;
  Ctrl + T
 &lt;/kbd&gt;
 (restez appuyé sur la touche
 &lt;kbd&gt;
  Ctrl
 &lt;/kbd&gt;
 puis appuyer sur
 &lt;kbd&gt;
  T
 &lt;/kbd&gt;
 ). Si tout se passe bien et que KeeWeb arrive à reconnaître les champs du formulaire, ce dernier va alors automagiquement se compléter tout seul.
&lt;/p&gt;
&lt;p&gt;
 Voici la liste de tout les raccourcis clavier possibles :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Raccourcis clavier" src="./images/uploaded/tuto-keeweb-utiliser-un-gestionnaire-de-mot-de-passe/raccourcis-clavier.png"/&gt;
 &lt;figcaption&gt;
  Raccourcis clavier
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="application-mobile-suggérée"&gt;
 &lt;a aria-hidden="true" href="#application-mobile-suggérée"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Application mobile suggérée
&lt;/h4&gt;
&lt;p&gt;
 Enfin, un dernier conseil que je vous suggère est d’utiliser aussi un gestionnaire de mots de passe sur votre mobile. En le synchronisant, vous pourrez retrouver vos mots de passe pour les sites web, mais aussi ajouter ceux pour vos applications.
&lt;/p&gt;
&lt;p&gt;
 Sur Android, je vous recommande Keepass2Android (
 &lt;a href="https://play.google.com/store/apps/details?id=keepass2android.keepass2android"&gt;
  lien Google Play
 &lt;/a&gt;
 ). L’interface n’est pas des plus élégantes mais elle fait le travail.
&lt;/p&gt;
&lt;p&gt;
 N’utilisant pas iOs, je ne suis pas en mesure de faire une suggestion éclairée. Apparemment l’application MiniKeePass (
 &lt;a href="https://itunes.apple.com/us/app/minikeepass-secure-password/id451661808"&gt;
  lien iTunes
 &lt;/a&gt;
 ) semble bonne.
&lt;/p&gt;
&lt;p&gt;
 Ces deux applications sont bien entendu 100% compatibles avec les coffres-fort générés par KeeWeb. En effet, toutes ces applications utilisent l’écosystème de gestion de mots de passe "KeePass" permettant des interactions entre elles.
&lt;/p&gt;
&lt;p&gt;
 Voilà, ce tutoriel touche à sa fin. J’espère qu’il aura su vous intéresser sans vous égarer dans des termes ou des concepts superflus. L’utilisation d’un gestionnaire de mot de passe au quotidien n’est vraiment pas compliquée et demande juste de s’y habituer. La récompense d’une sécurité vraiment accrue sur vos services en ligne est quant à elle bien réelle !
&lt;/p&gt;</content><category term="securite"></category><category term="keeweb"></category><category term="mot-de-passe"></category><category term="tuto"></category></entry><entry><title>Pelican : pourquoi ?</title><link href="https://eskimon.fr/tuto-pelican-101-pelican-pourquoi" rel="alternate"></link><published>2018-10-27T09:00:00+02:00</published><updated>2018-10-27T09:00:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2018-10-27:/tuto-pelican-101-pelican-pourquoi</id><summary type="html">&lt;p&gt;
 Ce petit chapitre va vous présenter brièvement le principe des générateurs de sites statiques, ainsi que leurs avantages et inconvénients. Dans un second temps, nous verrons pourquoi j’ai fait le choix de vous parler de Pelican plutôt qu’un autre, tout en restant ouvert à la "concurrence"
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 .
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#un-générateur-de-site-statique-quest-ce-que-cest"&gt;
    Un …&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;
 Ce petit chapitre va vous présenter brièvement le principe des générateurs de sites statiques, ainsi que leurs avantages et inconvénients. Dans un second temps, nous verrons pourquoi j’ai fait le choix de vous parler de Pelican plutôt qu’un autre, tout en restant ouvert à la "concurrence"
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 .
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#un-générateur-de-site-statique-quest-ce-que-cest"&gt;
    Un générateur de site statique, qu’est ce que c’est ?
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#rapide-explication"&gt;
     Rapide explication
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#pourquoi"&gt;
     Pourquoi ?
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#pourquoi-utiliser-pelican"&gt;
    Pourquoi utiliser pelican ?
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#parce-que-python"&gt;
     Parce que python
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#parce-que-pelican-lui-même"&gt;
     Parce que Pelican lui-même !
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#dautres-générateurs-de-sites-statiques"&gt;
    D’autres générateurs de sites statiques
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#en-python"&gt;
     En Python
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#en-javascript"&gt;
     En javascript
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#dautres-langages-go-et-ruby"&gt;
     D’autres langages, Go et Ruby
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="un-générateur-de-site-statique-quest-ce-que-cest"&gt;
 &lt;a aria-hidden="true" href="#un-générateur-de-site-statique-quest-ce-que-cest"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un générateur de site statique, qu’est ce que c’est ?
&lt;/h3&gt;
&lt;p&gt;
 Commençons par le début, qu’est ce qu’un site internet statique ?
&lt;/p&gt;
&lt;p&gt;
 S’il y a des sites statiques, c’est qu’il y en a sûrement des dynamiques
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 .
&lt;/p&gt;
&lt;h4 id="rapide-explication"&gt;
 &lt;a aria-hidden="true" href="#rapide-explication"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Rapide explication
&lt;/h4&gt;
&lt;p&gt;
 Les sites que l’on pourrait qualifier de "dynamique" se basent sur l’utilisation d’un logiciel sur un serveur qui va générer les pages à chaque requête. Autrement dit, à chaque fois que vous allez demander une page au site en question, votre requête sera analysée, traitée, puis une page spécifique sera construite juste pour vous et vous sera envoyée. Si Bob et Alice demandent la page A, ils auront
 &lt;em&gt;
  peut-être
 &lt;/em&gt;
 une page différente chacun.
&lt;/p&gt;
&lt;p&gt;
 Un site statique ne bénéficie pas de cela. Toutes les pages sont avant tout pré-générées grâce à un générateur. On obtient alors une collection de pages HTML. Ce sont ces dernières qui seront alors directement envoyées au lecteur, sans avoir d’autres traitements entre temps. Si Bob et Alice demandent la page A, ils obtiendront tous les deux exactement la même.
&lt;/p&gt;
&lt;h4 id="pourquoi"&gt;
 &lt;a aria-hidden="true" href="#pourquoi"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Pourquoi ?
&lt;/h4&gt;
&lt;p&gt;
 Une question vous vient peut-être à l’esprit :
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Pourquoi faire des sites statiques, si le contenu est gravé dans le marbre et qu’on ne peut pas interagir avec ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Et bien pour plusieurs raisons. Tout d’abord, effectivement cela peut sembler un peu triste, un site qui ne change pas. Mais en y réfléchissant, il existe plein de cas d’usage. Le plus fréquent est sûrement le format blog. L’auteur publie des articles, qui vont créer un ensemble de pages qui fera un site internet. Un lecteur d’un blog de son côté se contente juste de lire les articles, il n’y a pas plus d’interactions que cela (oublions les cas des commentaires et/ou liens sociaux, qui sont gérables aussi sur des sites statiques). On peut aussi imaginer le cas d’une photothèque. Je veux partager mes photos de vacances à ma famille, pas besoin d’avoir plus d’interactions que ça pour eux, juste de quoi naviguer entre les pages.
&lt;/p&gt;
&lt;p&gt;
 Et tout cela a un énorme avantage :
 &lt;strong&gt;
  la vitesse
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 En effet, puisque toutes les pages sont pré-générées, le serveur n’a rien d’autre à faire que de les envoyer. Aucun travail de traitement n’est effectué. Si Bob demande la page A, le serveur ne se pose pas de question et renvoie la page A.html. C’est tout. C’est rapide. Et ce genre de mécanisme peut être encore plus rapide grâce à la mise en place de cache qui sera très efficace car les ressources ne changent que très peu.
&lt;/p&gt;
&lt;p&gt;
 Un autre atout :
 &lt;strong&gt;
  La maintenance
 &lt;/strong&gt;
 . Une fois votre site en ligne, rien d’autre à faire si ce n’est de le faire vivre en ajoutant de nouveaux articles / nouvelles pages de temps en temps. Pas de base de données à gérer, peu de risque de sécurité, voire même pas de serveur tout court à gérer si vous optez pour une offre d’hébergement mutualisée (nous y reviendrons).
&lt;/p&gt;
&lt;p&gt;
 Enfin,
 &lt;strong&gt;
  c’est facile
 &lt;/strong&gt;
 !! Pas besoin de compétences de développeur pour faire tout cela, juste un peu de bidouille pour savoir utiliser le générateur. Ensuite, soit vous utilisez un thème pré-existant, soit vous vous faites le vôtre si vous maîtrisez un peu HTML/CSS.
&lt;/p&gt;
&lt;p&gt;
 Tous ces atout permettent ainsi aux créateurs de contenu de se focaliser sur la création de nouveaux articles plutôt que du développement technique et de la maintenance chronophage.
&lt;/p&gt;
&lt;p&gt;
 C’est ce qui m’a fait craquer pour cette technologie pour mon blog,
 &lt;a href="http://eskimon.fr"&gt;
  eskimon.fr
 &lt;/a&gt;
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 .
&lt;/p&gt;
&lt;h3 id="pourquoi-utiliser-pelican"&gt;
 &lt;a aria-hidden="true" href="#pourquoi-utiliser-pelican"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Pourquoi utiliser pelican ?
&lt;/h3&gt;
&lt;p&gt;
 Pourquoi Pelican et pas un autre ? C’est une question légitime, à laquelle je vais essayer de répondre du mieux possible. Bien entendu, tout les goûts et les couleurs sont dans la nature. Bien que je vais essayer de rester le plus impartial possible, certains aspects seront propres à mes préférences pour certains langages et à mon historique en tant que développeur…
&lt;/p&gt;
&lt;h4 id="parce-que-python"&gt;
 &lt;a aria-hidden="true" href="#parce-que-python"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Parce que python
&lt;/h4&gt;
&lt;p&gt;
 Python est un langage que j’aime beaucoup. Du coup lors de mes premiers pas avec les générateurs de sites statiques, c’est évidemment vers cet écosystème que je me suis tourné.
&lt;/p&gt;
&lt;p&gt;
 Plus objectivement, python a l’avantage d’avoir une communauté très importante. C’est un langage qui fait maintenant partie des leaders du marché et qui bénéficie d’une très grande communauté. Il est donc souvent très facile d’avoir des réponses à ses questions rapidement via une simple recherche internet ou en posant sa question sur des forums comme ceux de Zeste de Savoir.
&lt;/p&gt;
&lt;p&gt;
 L’avantage d’une grande communauté est aussi de pouvoir trouver de (très) nombreux exemples de code pour pouvoir s’inspirer et progresser. De la même façon, de nombreux plugins pour tout les systèmes existent bien souvent, faisant ainsi gagner du temps plutôt que de réinventer la roue. Et si ces derniers fonctionnent mal ou sont incomplets, il sera bien souvent possible de proposer des corrections ou améliorations à l’auteur initial si le code est open-source.
&lt;/p&gt;
&lt;h4 id="parce-que-pelican-lui-même"&gt;
 &lt;a aria-hidden="true" href="#parce-que-pelican-lui-même"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Parce que Pelican lui-même !
&lt;/h4&gt;
&lt;p&gt;
 Pelican tire selon moi son épingle du jeu pour plusieurs aspects.
&lt;/p&gt;
&lt;p&gt;
 Tout d’abord, ce n’est pas un projet à l’abandon. À l’heure d’écriture de ces lignes,
 &lt;a href="https://github.com/getpelican/pelican/commits/master"&gt;
  les derniers commits
 &lt;/a&gt;
 dataient de moins d’un mois ! Les commits les plus vieux ont quant à eux plusieurs années derrière eux. C’est plutôt une bonne chose, le projet semble mûr.
&lt;/p&gt;
&lt;p&gt;
 Autre aspect, c’est open-source. C’est toujours cool de pouvoir aller lire les sources quand on a une incompréhension ou par simple curiosité.
&lt;/p&gt;
&lt;p&gt;
 Après lecture de la documentation, la rédaction m’a semblé simple et intuitive (notamment pour la rédaction des métadonnées des articles). Le support natif du markdown a été pour moi un gros plus étant très familier avec de langage de rédaction.
&lt;/p&gt;
&lt;p&gt;
 Enfin, de manière plus pragmatique, Pelican est facile à customiser (j’en parle dans
 &lt;a href="https://zestedesavoir.com/billets/2502/comment-et-pourquoi-jai-integre-zmarkdown-a-pelican/"&gt;
  ce billet
 &lt;/a&gt;
 ) et surtout le rendu est simple à customiser. En effet, le moteur de template utilisé est jinja2, qui ressemble fortement à celui de base de Django et est bien connu dans le monde python (et donc offre de nombreuses réponses à toutes les questions que l’on peut se poser). Ayant pas mal utilisé ce dernier durant mes développements sur ZdS, je suis bien content d’avoir affaire à quelque chose de familier.
&lt;/p&gt;
&lt;h3 id="dautres-générateurs-de-sites-statiques"&gt;
 &lt;a aria-hidden="true" href="#dautres-générateurs-de-sites-statiques"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 D’autres générateurs de sites statiques
&lt;/h3&gt;
&lt;p&gt;
 Ne soyons pas sectaires, voyons quelles autres solutions existent, que ce soit en python ou dans d’autres langages. Ce chapitre sera rédigé grâce notamment au site
 &lt;a href="https://www.staticgen.com/"&gt;
  staticgen
 &lt;/a&gt;
 qui liste les différents générateurs de site statiques open-source existant. Il est toujours bon de voir un peu plus loin que le bout de son nez. Savoir ce qu’offre chez la "concurrence" ne fait donc pas de mal, qui sait, peut-être un jour vous vous inspirerez d’une fonctionnalité existante chez un autre pour la porter sur Pelican !
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Par souci de concision, je ne serai bien entendu pas exhaustif concernant tous les outils existants. Je ne ferai donc qu’une brève présentation de ceux dont j’ai le plus entendu parler ou même testé au moment de l’écriture de ce tutoriel.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="en-python"&gt;
 &lt;a aria-hidden="true" href="#en-python"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 En Python
&lt;/h4&gt;
&lt;p&gt;
 Au moment d’écriture de ces lignes, le service staticgen liste un peu plus de 25 outils en python. Je vais couper sévèrement dans la liste pour vous en présenter deux, Sphinx et Lektor.
&lt;/p&gt;
&lt;p&gt;
 En python il existe un générateur que vous connaissez sûrement si vous lisez des documentations techniques d’outils open-source :
 &lt;a href="http://www.sphinx-doc.org/en/master/"&gt;
  Sphinx
 &lt;/a&gt;
 . En effet, sphinx est utilisé par exemple pour le site de la documentation officielle du langage python. Un autre grand acteur de la documentation open-source, ReadTheDocs, utilise aussi Sphinx pour la génération de ses contenus. Sphinx est donc un grand acteur du monde python.
&lt;/p&gt;
&lt;p&gt;
 Un autre outil populaire méritant d’être cité est
 &lt;a href="https://www.getlektor.com/"&gt;
  Lektor
 &lt;/a&gt;
 . Je le trouve cependant un peu plus compliqué d’utilisation et de paramètrage, c’est notamment pourquoi je préfère vous présenter Pelican dans ce tutoriel. En revanche, Lektor propose un petit serveur web local permettant d’offrir un petit gestionnaire de contenu à la volée et une interface de rédaction qui est un petit plus plutôt sympa.
&lt;/p&gt;
&lt;h4 id="en-javascript"&gt;
 &lt;a aria-hidden="true" href="#en-javascript"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 En javascript
&lt;/h4&gt;
&lt;p&gt;
 En rédigeant cette section, j’ai découvert
 &lt;a href="https://hexo.io/"&gt;
  Hexo
 &lt;/a&gt;
 . Je ne connaissais pas avant, mais quand on voit le premier argument "générer des dizaines de pages en une seconde" forcément ça fait rêver. Cet outil utilise du Node.js, qui devient un grand classique du monde javascript. Comme partout, la rédaction se fait en markdown et la génération des pages se fait en une commande. Je ne peux pas en dire beaucoup plus, ne connaissant pas vraiment l’outil.
&lt;/p&gt;
&lt;p&gt;
 Un autre outil (plus connu ?) est
 &lt;a href="https://legacy.gitbook.com/"&gt;
  GitBook
 &lt;/a&gt;
 . Il est assez connu des personnes voulant rédiger des ouvrages techniques je pense et possède notamment une interface de rédaction et publication en ligne. L’idée derrière ce générateur est de rapprocher le monde de l’édition conventionnel papier au monde de l’édition numérique, notamment en proposant par défaut une publication au format pdf. Les ouvrages sont versionnés via le compte de l’auteur sur GitHub.
&lt;/p&gt;
&lt;h4 id="dautres-langages-go-et-ruby"&gt;
 &lt;a aria-hidden="true" href="#dautres-langages-go-et-ruby"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 D’autres langages, Go et Ruby
&lt;/h4&gt;
&lt;p&gt;
 Tout comme pour Hexo, j’ai découvert
 &lt;a href="http://gohugo.io/"&gt;
  Hugo
 &lt;/a&gt;
 lors de la rédaction et donc ne vous le présenterais que pour le principe. Hugo est codé en Go, langage édité par Google et se voulant très efficace. Ce qui fait que là encore, on retrouve la vitesse de génération comme argument principal d’Hugo. Si vous êtes familier avec le Go, allez donc y jeter un œil
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
&lt;/p&gt;
&lt;p&gt;
 En dernier lieu, je souhaiterais vous présenter
 &lt;a href="https://jekyllrb.com/"&gt;
  Jekyll
 &lt;/a&gt;
 non pas parce que je suis fan de ruby (je n’en ai jamais touché), mais surtout car il fait figure d’étoile montante des générateurs de site statique. En effet, Jekyll est embarqué comme outil de rédaction par plusieurs grands services d’hébergements de pages web statiques, comme Github ou Netlify.
&lt;/p&gt;
&lt;p&gt;
 J’espère que les choses sont maintenant clairs sur les tenants et aboutissants des différentes technologies. Bien entendu, aucune solution n’est parfaite, mais vous avez maintenant des moyens de comparaison.
&lt;/p&gt;
&lt;p&gt;
 La prochaine partie va nous amener doucement vers la pratique en voyant comment installer Pelican.
&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="tuto"></category></entry><entry><title>Pelican : comment ?</title><link href="https://eskimon.fr/tuto-pelican-102-pelican-comment" rel="alternate"></link><published>2018-10-27T09:00:00+02:00</published><updated>2018-10-27T09:00:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2018-10-27:/tuto-pelican-102-pelican-comment</id><summary type="html">&lt;p&gt;
 Dans ce court chapitre, je vous présente la manière la plus simple pour installer Pelican.
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Étant donné que c’est un logiciel en Python, les manipulations décrites ci-dessous sont facilement transposables à n’importe quel OS. Je décrirai ici comment le faire sur un système Linux, Ubuntu en particulier.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Cette …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;
 Dans ce court chapitre, je vous présente la manière la plus simple pour installer Pelican.
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Étant donné que c’est un logiciel en Python, les manipulations décrites ci-dessous sont facilement transposables à n’importe quel OS. Je décrirai ici comment le faire sur un système Linux, Ubuntu en particulier.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Cette partie part du principe que vous connaissez l’outil de gestion de paquets python
   &lt;code&gt;
    pip
   &lt;/code&gt;
   et que vous savez l’utiliser de manière simple (installer des paquets, les supprimer…)
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;a href="#pip-install"&gt;
   Pip install
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#bonjour-le-monde"&gt;
   Bonjour le monde
  &lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pip-install"&gt;
 &lt;a aria-hidden="true" href="#pip-install"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Pip install
&lt;/h3&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   &lt;strong&gt;
    TL;DR
   &lt;/strong&gt;
  &lt;/p&gt;
  &lt;p&gt;
   &lt;code&gt;
    pip install pelican Markdown
   &lt;/code&gt;
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Installer Pelican est vraiment trivial, puisqu’il suffit d’installer seulement deux paquets,
 &lt;code&gt;
  pelican
 &lt;/code&gt;
 et
 &lt;code&gt;
  Markdown
 &lt;/code&gt;
 . Comme nous ne sommes pas des gros bourrins, on va toutefois travailler proprement dans un environnement virtuel.
&lt;/p&gt;
&lt;p&gt;
 Je vais donc commencer par créer ce dernier puis l’activer. Je travaillerai dans le dossier "mon-super-site".
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;$ mkdir mon-super-site
$ &lt;span class="hljs-built_in"&gt;cd&lt;/span&gt; mon-super-site
$ virtualenv venv
$ &lt;span class="hljs-built_in"&gt;source&lt;/span&gt; venv/bin/activate
$ pip intall pelican Markdown
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Et voilà, Pelican est maintenant installé !!
&lt;/p&gt;
&lt;h3 id="bonjour-le-monde"&gt;
 &lt;a aria-hidden="true" href="#bonjour-le-monde"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Bonjour le monde
&lt;/h3&gt;
&lt;p&gt;
 Maintenant que les outils sont là, vérifions que tout marche avant de nous lancer à l’assaut de notre propre site !
&lt;/p&gt;
&lt;p&gt;
 Pour cela, Pelican met à disposition un outil de démarrage sous la forme d’une commande :
 &lt;code&gt;
  pelican-quickstart
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Lorsque vous lancez cette dernière, une série de questions vous sera posée. Ignorez celles où un choix par défaut entre crochet est proposé en vous contentant d’appuyer sur entrée et répondez n’importe quoi aux autres, nous supprimerons tout puis reviendrons sur tout cela dès le chapitre suivant.
&lt;/p&gt;
&lt;p&gt;
 Un exemple de réponse peut-être le suivant :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-plain"&gt;Welcome to pelican-quickstart v3.7.1.

This script will help you create a new Pelican-based website.

Please answer the following questions so this script can generate the files
needed by Pelican.

    
&amp;gt; Where do you want to create your new web site? [.] 
&amp;gt; What will be the title of this web site? Mon super site
&amp;gt; Who will be the author of this web site? Moi
&amp;gt; What will be the default language of this web site? [fr] 
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) 
&amp;gt; What is your URL prefix? (see above example; no trailing slash) http://example.com
&amp;gt; Do you want to enable article pagination? (Y/n) 
&amp;gt; How many articles per page do you want? [10] 
&amp;gt; What is your time zone? [Europe/Paris] 
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) 
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n) 
&amp;gt; Do you want to upload your website using FTP? (y/N) 
&amp;gt; Do you want to upload your website using SSH? (y/N) 
&amp;gt; Do you want to upload your website using Dropbox? (y/N) 
&amp;gt; Do you want to upload your website using S3? (y/N) 
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) 
&amp;gt; Do you want to upload your website using GitHub Pages? (y/N) 
Done. Your new project is available at /tmp/test
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Enfin exécutez la commande
 &lt;code&gt;
  pelican
 &lt;/code&gt;
 , le terminal vous répondra qu’aucun article n’a été généré (c’est normal) avec les lignes suivantes :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-asciidoc"&gt;&lt;span class="hljs-symbol"&gt;WARNING: &lt;/span&gt;No valid files found in content.
Done: Processed 0 articles, 0 drafts, 0 pages and 0 hidden pages in 0.05 seconds.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous devriez voir cependant qu’un dossier output est rempli de fichiers. Ouvrez le fichier
 &lt;code&gt;
  index.html
 &lt;/code&gt;
 avec votre navigateur favori et Tadddaaa, votre premier site web statique sous vos yeux !
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="premier site" src="./images/uploaded/tuto-pelican-102-pelican-comment/premier-site.png"/&gt;
 &lt;figcaption&gt;
  premier site
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Bon ok, c’est moche et inutile. Remédions à cela en attaquant le chapitre suivant qui va vous permettre de faire VOTRE site
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 .
&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="tuto"></category></entry><entry><title>Hello World!</title><link href="https://eskimon.fr/tuto-pelican-201-hello-world" rel="alternate"></link><published>2018-10-27T09:00:00+02:00</published><updated>2018-10-27T09:00:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2018-10-27:/tuto-pelican-201-hello-world</id><summary type="html">&lt;p&gt;
 Le "Hello World!", le grand classique des tutos d’informatique, pas de raison que l’on y échappe ici
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Nous allons voir ici comment bien démarrer un projet dans l’univers Pelican, rien de bien méchant mais c’est important de bien comprendre les bases !
&lt;/p&gt;
&lt;p&gt;
 Alors dépoussiérez vos claviers, on …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Le "Hello World!", le grand classique des tutos d’informatique, pas de raison que l’on y échappe ici
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Nous allons voir ici comment bien démarrer un projet dans l’univers Pelican, rien de bien méchant mais c’est important de bien comprendre les bases !
&lt;/p&gt;
&lt;p&gt;
 Alors dépoussiérez vos claviers, on y va !
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#quick-start"&gt;
    Quick Start
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#rappel-sur-linstallation"&gt;
     Rappel sur l’installation
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#loutil-de-démarrage-rapide-«quickstart»"&gt;
     L’outil de démarrage rapide « quickstart »
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#qui-va-là"&gt;
    Qui va là ?
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#larborescence-en-détail"&gt;
     L’arborescence en détail
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#premiers-articles"&gt;
    Premiers articles
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#notre-première-recette"&gt;
     Notre première recette
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#ajouter-des-images"&gt;
     Ajouter des images
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="quick-start"&gt;
 &lt;a aria-hidden="true" href="#quick-start"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Quick Start
&lt;/h3&gt;
&lt;p&gt;
 Si vous lisez ce tutoriel en continu, les dernières actions que nous avons faites pour créer un début de site sont encore fraîche dans votre mémoire. Pour les autres, remettons nous au jus.
&lt;/p&gt;
&lt;h4 id="rappel-sur-linstallation"&gt;
 &lt;a aria-hidden="true" href="#rappel-sur-linstallation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Rappel sur l’installation
&lt;/h4&gt;
&lt;p&gt;
 Pour créer notre site de recettes de cookies (que j’appellerais
 &lt;em&gt;
  coolcookies
 &lt;/em&gt;
 ), nous allons créer un nouveau dossier de travail dans lequel nous allons tout de suite nous placer.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;$ mkdir coolcookies
$ &lt;span class="hljs-built_in"&gt;cd&lt;/span&gt; coolcookies
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Maintenant, nous créeons un nouvel environnement virtuel que nous activons tout de suite.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;$ virtualenv venv
$ &lt;span class="hljs-built_in"&gt;source&lt;/span&gt; venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Enfin, on installe dans cet environnement virtuel les différents paquets dont nous avons besoin (Pelican et markdown).
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;$ pip install pelican Markdown
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="loutil-de-démarrage-rapide-«quickstart»"&gt;
 &lt;a aria-hidden="true" href="#loutil-de-démarrage-rapide-«quickstart»"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’outil de démarrage rapide «
 &lt;em&gt;
  quickstart
 &lt;/em&gt;
 »
&lt;/h4&gt;
&lt;hr/&gt;
&lt;p&gt;
 Nous voilà avec notre base de travail. Nous allons maintenant utiliser l’outil «
 &lt;em&gt;
  quickstart
 &lt;/em&gt;
 » de Pelican pour préparer le terrain. Cet outil interactif va vous poser quelques questions pour pré-remplir des fichiers de configurations. Pour le lancer, tapez simplement
 &lt;code&gt;
  pelican-quickstart
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Voici un exemple de réponse possible à fournir, je vous explique juste après à quoi servent les différentes étapes.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-text"&gt;&amp;gt; Where do you want to create your new web site? [.] 
&amp;gt; What will be the title of this web site? Cool Cookies
&amp;gt; Who will be the author of this web site? Eskimon
&amp;gt; What will be the default language of this web site? [fr] 
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) n
&amp;gt; Do you want to enable article pagination? (Y/n) 
&amp;gt; How many articles per page do you want? [10] 5
&amp;gt; What is your time zone? [Europe/Paris] 
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) n
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n) 
Done. Your new project is available at /home/eskimon/Documents/tuto-pelican
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Voyons voir… (pour rappel, si les réponses par défaut (en majuscules) vous conviennent vous n’êtes pas obligés de spécifier quoi que ce soit, appuyez juste sur entrée).
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
  Cette première ligne demande où doit être créer le projet. Étant déjà dans un dossier créé pour l’occasion, ce dernier me convient très bien, je laisse donc le choix par défaut (entre crochets).
 &lt;/li&gt;
 &lt;li&gt;
  Quel sera le titre de mon site.
  &lt;em&gt;
   Cool Cookies, pour des recettes de cookies qui sont cools
  &lt;/em&gt;
  . (Vous remarquerez qu’aucun choix par défaut n’est proposé, l’outil ne lit pas encore dans les pensées).
 &lt;/li&gt;
 &lt;li&gt;
  Qui sera le créateur du site. Moi, Eskimon.
 &lt;/li&gt;
 &lt;li&gt;
  Quelle sera la langue par défaut des articles.
  &lt;code&gt;
   fr
  &lt;/code&gt;
  pour Français.
 &lt;/li&gt;
 &lt;li&gt;
  Voulez-vous spécifier une URL de préfixe ? Si vous savez déjà quel domaine utilisera votre site alors spécifiez le. Sinon les URLS seront
  &lt;em&gt;
   relatives
  &lt;/em&gt;
  , de la forme
  &lt;code&gt;
   /ma-super-recette
  &lt;/code&gt;
  plutôt que
  &lt;code&gt;
   https://coolcookies.fr/ma-super-recette
  &lt;/code&gt;
  . Cela ne perturbera pas le développement du site, pas d’inquiétude.
 &lt;/li&gt;
 &lt;li&gt;
  Souhaitez vous que les articles soient paginés ? Autrement dit "dans une page contenant une liste d’articles (page de catégorie par exemple), les articles doivent-ils tous être balancés dans une grande liste ou faut-il créer plusieurs pages listant qu’une partie des articles à chaque fois. On choisit de garder la pagination pour l’exemple.
 &lt;/li&gt;
 &lt;li&gt;
  Du coup, quelle sera le nombre d’articles maximum par page. 5, c’est bien pour illustrer le phénomène
  &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  .
 &lt;/li&gt;
 &lt;li&gt;
  Quelle est votre fuseau horaire ? Histoire que les articles soient horodatés correctement
  &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Voulez-vous générer un fabfile. Si vous ne savez pas ce que c’est, ce n’est pas grave (c’est utilisé pour les déploiements automatisés notamment). Nous nous en passerons dans ce tutoriel, donc répondez
  &lt;strong&gt;
   non
  &lt;/strong&gt;
  .
 &lt;/li&gt;
 &lt;li&gt;
  Enfin, voulez-vous un outil pour aider au développement, répondez oui ! (nous en reparlerons plus tard).
 &lt;/li&gt;
 &lt;li&gt;
  Bravo, votre squelette de site est prêt !
 &lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="qui-va-là"&gt;
 &lt;a aria-hidden="true" href="#qui-va-là"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Qui va là ?
&lt;/h3&gt;
&lt;h4 id="larborescence-en-détail"&gt;
 &lt;a aria-hidden="true" href="#larborescence-en-détail"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’arborescence en détail
&lt;/h4&gt;
&lt;p&gt;
 Si tout s’est bien passé, voici l’arborescence que vous devriez obtenir (en omettant le dossier de l’environnement virtuel) :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-plain"&gt;.
├── content
├── develop_server.sh
├── output
├── pelicanconf.py
└── publishconf.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Comme on le voit dans cette arborescence, il y a plusieurs fichiers et deux dossiers. Voyons brièvement leur rôle.
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
  &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Le dossier
  &lt;code&gt;
   content
  &lt;/code&gt;
  . En français "contenu", c’est ici que nous placerons nos rédactions au format markdown.
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   develop_server.sh
  &lt;/code&gt;
  . L’outil d’aide au développement, j’y reviendrais.
 &lt;/li&gt;
 &lt;li&gt;
  Le dossier
  &lt;code&gt;
   output
  &lt;/code&gt;
  . C’est ici que va se retrouver notre site internet final mis en forme.
 &lt;/li&gt;
 &lt;li&gt;
  Le fichier de configuration de Pelican, pour régler certains paramètres permettant de passer du contenu au rendu final.
 &lt;/li&gt;
 &lt;li&gt;
  Idem que ci-dessus, mais pour reparamètrer certains aspects.
 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
 (Les points 5 et 6 seront vu en détail dans une des
 &lt;a href="https://zestedesavoir.com/contenus/2497/creer-un-site-web-statique-avec-pelican/aller-plus-loin/quelques-parametres-de-configuration/"&gt;
  parties annexes sur les paramètres de configuration
 &lt;/a&gt;
 . En effet, ces derniers sont déjà normalement plutôt bien réglés grâce à l’outil quickstart que nous venons d’utiliser.
&lt;/p&gt;
&lt;p&gt;
 Mais trêve de blabla, Créons notre premier article !
&lt;/p&gt;
&lt;h3 id="premiers-articles"&gt;
 &lt;a aria-hidden="true" href="#premiers-articles"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Premiers articles
&lt;/h3&gt;
&lt;h4 id="notre-première-recette"&gt;
 &lt;a aria-hidden="true" href="#notre-première-recette"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Notre première recette
&lt;/h4&gt;
&lt;p&gt;
 Sans perdre plus de temps, allez tout de suite créer un fichier dans le dossier
 &lt;code&gt;
  content
 &lt;/code&gt;
 . Nommez le
 &lt;code&gt;
  cookies-pepites-chocolat.md
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Attention à l’extension du fichier. Ici j’ai bien marqué
   &lt;code&gt;
    .md
   &lt;/code&gt;
   , qui fera comprendre à Pelican que ce fichier est rédigé en markdown.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Dans ce fichier, collez le contenu suivant.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-markdown"&gt;Title: Cookies aux pépites de chocolat
Date: 2018-05-04 12:42
Tags: cookie, chocolat
Category: Cookie
Authors: Eskimon
Summary: Ma recette pour des supers cookies aux pépites de chocolat.

Une première recette pour débuter dans l'art du cookie.

&lt;span class="hljs-section"&gt;## Ingrédients&lt;/span&gt;

&lt;span class="hljs-emphasis"&gt;*(Pour 10 cookies)*&lt;/span&gt;

&lt;span class="hljs-bullet"&gt;- &lt;/span&gt;100g de pepites de chocolat
&lt;span class="hljs-bullet"&gt;- &lt;/span&gt;1 cuiller à café de levure
&lt;span class="hljs-bullet"&gt;- &lt;/span&gt;1/2 c à café de sel
&lt;span class="hljs-bullet"&gt;- &lt;/span&gt;150g de farine
&lt;span class="hljs-bullet"&gt;- &lt;/span&gt;1 sachet de sucre vanillé
&lt;span class="hljs-bullet"&gt;- &lt;/span&gt;1 œuf
&lt;span class="hljs-bullet"&gt;- &lt;/span&gt;85g de sucre (peut descendre à 50g)
&lt;span class="hljs-bullet"&gt;- &lt;/span&gt;75g de beurre (peut descendre à 50g)

&lt;span class="hljs-section"&gt;## Étape 1 : Mélange&lt;/span&gt;

Ramollir le beurre au micro-ondes (sans le faire fondre).

Mélanger beurre, œuf, sucre et sucre vanillé. Ajouter la farine, le sel et la levure petit à petit, puis les pépites de chocolat.

&lt;span class="hljs-section"&gt;## Étape 2 : Cuisson&lt;/span&gt;

Faites de petites boules, les mettre sur du papier sulfurisé.

Enfournez à 180°C pendant 10 à 12 min (suivant la texture que vous désirez).

&lt;span class="hljs-section"&gt;## Étape 3 : Dégustez !&lt;/span&gt;

:D
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous pouvez remarquer que le fichier est divisé en deux parties. Tout d’abord, une liste de données du type "Information: Valeur". C’est ce que l’on appelle des
 &lt;em&gt;
  metadata
 &lt;/em&gt;
 , métadonnées en français, et nous verrons leur rôle dès le chapitre suivant. Suite à cela, on trouve le corps de notre article, rédigé au format markdown.
&lt;/p&gt;
&lt;p&gt;
 Maintenant, à la racine de votre projet (donc pas dans le dossier content ou output), lancer la commande
 &lt;code&gt;
  pelican
 &lt;/code&gt;
 (tout simplement). Si tout se passe normalement, vous devriez avoir la réponse suivante :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;$ pelican
Done: Processed 1 article, 0 drafts, 0 pages and 0 hidden pages &lt;span class="hljs-keyword"&gt;in&lt;/span&gt; 0.11 seconds.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous êtes alors informé qu’un article a bien été traité. Voyons voir ce qui se passe dans notre arborescence dorénavant…
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-plain"&gt;.
├── content
│   └── cookies-pepites-chocolat.md
├── develop_server.sh
├── output
│   ├── archives.html
│   ├── author
│   │   └── eskimon.html
│   ├── authors.html
│   ├── categories.html
│   ├── category
│   │   └── cookie.html
│   ├── cookies-aux-pepites-de-chocolat.html
│   ├── index.html
│   ├── tag
│   │   ├── chocolat.html
│   │   └── cookie.html
│   ├── tags.html
│   └── theme
│       ├── [...]
├── pelicanconf.py
└── publishconf.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous remarquez que le dossier
 &lt;code&gt;
  output
 &lt;/code&gt;
 a maintenant tout un tas de dossiers et de fichiers ? Ceux qui attirent l’attention sont notamment :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   authors
  &lt;/code&gt;
  , un dossier qui propose une page HTML par auteur identifié. Il est accompagné d’un fichier
  &lt;code&gt;
   authors.html
  &lt;/code&gt;
  qui va lister tous les auteurs sur le site ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   category
  &lt;/code&gt;
  et
  &lt;code&gt;
   categories.html
  &lt;/code&gt;
  , similaires à auteurs mais pour les categories de contenu sur votre site ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   tag
  &lt;/code&gt;
  et
  &lt;code&gt;
   tags.html
  &lt;/code&gt;
  , vous avez deviné ?
  &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  ;
 &lt;/li&gt;
 &lt;li&gt;
  Un dossier
  &lt;code&gt;
   theme
  &lt;/code&gt;
  qui contiendra tous les fichiers
  &lt;em&gt;
   statiques
  &lt;/em&gt;
  (feuille de style CSS, images, script, etc). Je vous le présenterait en détail dans la partie sur la création de votre propre thème ;
 &lt;/li&gt;
 &lt;li&gt;
  Enfin, deux fichiers HTML sont à la racine de ce dossier output.
  &lt;code&gt;
   index.html
  &lt;/code&gt;
  et
  &lt;code&gt;
   cookies-aux-pepites-de-chocolat.html
  &lt;/code&gt;
  . Le fichier index sera l’accueil de votre site, la page qui sera présentée quand un visiteur arrive directement sur la racine du site. La page
  &lt;code&gt;
   cookies-aux-pepites-de-chocolat.html
  &lt;/code&gt;
  quant à elle sera la page contenant votre fameuse recette !
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Vous pouvez déjà essayé d’aller voir votre travail en ouvrant ces deux pages avec votre navigateur préféré.
&lt;/p&gt;
&lt;p&gt;
 Vous devriez alors voir votre recette (oui je sais, c’est moche pour le moment) !
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Mais les deux pages sont identiques ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Effectivement, pour l’instant nous n’avons qu’une seule recette et le rendu par défaut fait que la page index a la même allure que la page de la recette.
 &lt;br/&gt;
 Ajoutons une deuxième recette pour voir la différence en créant le fichier suivant dans
 &lt;code&gt;
  content/cookies-bananes.md
 &lt;/code&gt;
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-markdown"&gt;Title: Cookies à la banane
Date: 2018-05-04 13:42
Tags: cookie, banane
Category: Cookie
Authors: Eskimon
Summary: Recette de cookies à la banane

Partons à l'aventure en faisant des cookies avec de la banane et du chocolat

&lt;span class="hljs-section"&gt;## Ingrédients&lt;/span&gt;

&lt;span class="hljs-emphasis"&gt;*(Pour une vingtaine de cookies)*&lt;/span&gt;

&lt;span class="hljs-bullet"&gt;- &lt;/span&gt;170 g de bananes (à peser sans la peau ;) )
&lt;span class="hljs-bullet"&gt;- &lt;/span&gt;150 g de farine
&lt;span class="hljs-bullet"&gt;- &lt;/span&gt;60 g de beurre
&lt;span class="hljs-bullet"&gt;- &lt;/span&gt;5 g de levure chimique
&lt;span class="hljs-bullet"&gt;- &lt;/span&gt;1 pincée de sel
&lt;span class="hljs-bullet"&gt;- &lt;/span&gt;1 oeuf
&lt;span class="hljs-bullet"&gt;- &lt;/span&gt;100 g de sucre en poudre
&lt;span class="hljs-bullet"&gt;- &lt;/span&gt;1 cuillère à café de vanille liquide
&lt;span class="hljs-bullet"&gt;- &lt;/span&gt;130 g de chocolat

&lt;span class="hljs-section"&gt;## Étape 1&lt;/span&gt;

Préchauffez le four à 190°C (et pas plus!!).

&lt;span class="hljs-section"&gt;## Étape 2&lt;/span&gt;

Mélangez la farine, la levure, le sel.

&lt;span class="hljs-section"&gt;## Étape 3&lt;/span&gt;

Pelez les bananes et écrasez-les à la fourchettes.

&lt;span class="hljs-section"&gt;## Étape 4&lt;/span&gt;

Battez le beurre (bien ramolli) avec le sucre ; ajoutez la banane écrasée, l'oeuf, la vanille. Mélangez bien. Ajoutez le mélange de farine.

&lt;span class="hljs-section"&gt;## Étape 5&lt;/span&gt;

Ajoutez les pépites (+ noix). La pâte doit être molle mais pas trop liquide.

&lt;span class="hljs-section"&gt;## Étape 6&lt;/span&gt;

Faites des petits tas à l'aide de 2 cuillères à café (de la taille d'une noix, pas plus!!) sur une plaque (soit beurrée soit recouverte de papier sulfurisé, + facile!).

&lt;span class="hljs-section"&gt;## Étape 7&lt;/span&gt;

Faites cuire env 6/7 mn (selon votre four).

&lt;span class="hljs-section"&gt;## Étape 8&lt;/span&gt;

Pour la 1ère fournée, surveillez bien, ça cuit très vite. Retirez les cookies dès qu'ils sont bruns à la base.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Régénérez le site avec la commande
 &lt;code&gt;
  pelican
 &lt;/code&gt;
 et observez de nouveau le dossier output. Un nouvel article a du faire son apparition.
&lt;/p&gt;
&lt;p&gt;
 Si vous ouvrez de nouveau la page
 &lt;code&gt;
  index.html
 &lt;/code&gt;
 , cette dernière devrait présenter les deux recettes à la suite
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 .
&lt;/p&gt;
&lt;h4 id="ajouter-des-images"&gt;
 &lt;a aria-hidden="true" href="#ajouter-des-images"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Ajouter des images
&lt;/h4&gt;
&lt;p&gt;
 Le texte c’est bien, mais avec des illustrations, c’est mieux !
&lt;/p&gt;
&lt;p&gt;
 Pour ajouter des illustrations, il va falloir faire plusieurs choses. Tout d’abord, nous allons créer un dossier
 &lt;code&gt;
  images
 &lt;/code&gt;
 dans le dossier
 &lt;code&gt;
  content
 &lt;/code&gt;
 où nous avons écrit nos articles jusqu’à présent.
&lt;/p&gt;
&lt;p&gt;
 Ensuite, il faut informer Pelican que ce dossier est un dossier "statique" et qu’il faut copier le contenu tel quel dans le dossier de sortie "output". Pour cela, il faut ajouter une ligne de configuration dans le fichier
 &lt;code&gt;
  pelicanconf.py
 &lt;/code&gt;
 . Cette ligne sera
 &lt;code&gt;
  STATIC_PATHS = ['images']
 &lt;/code&gt;
 . Si jamais vous avez d’autres dossiers à exporter (comme un dossier contenant des exports pdf des articles par exemple), il suffit des les rajouter dans la liste.
&lt;/p&gt;
&lt;p&gt;
 Enfin, il ne reste plus qu’à utiliser la bonne syntaxe pour insérer l’image. Par exemple, en markdown on écrira
 &lt;code&gt;
  ![Texte alternatif de ma belle image](/images/ma-belle-image.png)
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Et voilà, vous devriez maintenant être familier avec l’arborescence du projet que nous allons manipuler ainsi que les fichiers de base le composant. Nous allons maintenant voir comment enrichir nos articles en ajoutant des informations contextuels via les
 &lt;em&gt;
  metadata
 &lt;/em&gt;
 .
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Et sinon, avez-vous eu la curiosité d’aller voir les pages supplémentaires dans les dossiers tags ou categories ?
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;</content><category term="python"></category><category term="pelican"></category><category term="tuto"></category></entry><entry><title>Les métadonnées</title><link href="https://eskimon.fr/tuto-pelican-202-les-m%C3%A9tadonn%C3%A9es" rel="alternate"></link><published>2018-10-27T09:00:00+02:00</published><updated>2018-10-27T09:00:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2018-10-27:/tuto-pelican-202-les-métadonnées</id><summary type="html">&lt;p&gt;
 Comme nous venons de le voir en créant nos premiers articles, un ensemble de données appelé métadonnées servent à définir certains paramètres concernant l’article, comme par exemple son titre ou encore sa date de parution. Nous allons voir dans cette partie les différents moyens utilisables pour définir ces données …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Comme nous venons de le voir en créant nos premiers articles, un ensemble de données appelé métadonnées servent à définir certains paramètres concernant l’article, comme par exemple son titre ou encore sa date de parution. Nous allons voir dans cette partie les différents moyens utilisables pour définir ces données.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#dans-lentête-du-fichier"&gt;
    Dans l’entête du fichier
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#données-simples"&gt;
     Données simples
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#des-listes"&gt;
     Des listes
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#des-dates"&gt;
     Des dates
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#via-le-contexte-du-fichier"&gt;
    Via le contexte du fichier
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#date-de-larticle"&gt;
     Date de l’article
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#la-catégorie"&gt;
     La catégorie
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#slug-et-autres"&gt;
     Slug et autres
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#summary"&gt;
     Summary
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="dans-lentête-du-fichier"&gt;
 &lt;a aria-hidden="true" href="#dans-lentête-du-fichier"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Dans l’entête du fichier
&lt;/h3&gt;
&lt;p&gt;
 Le premier moyen mis à notre disposition (et le plus flexible) pour ajouter des données de contexte à notre article est de les placer avant le corps de notre contenu. Pour cela, il suffit de présenter les informations sous la forme d’une liste « clé:valeur », avec une donnée par ligne.
&lt;/p&gt;
&lt;h4 id="données-simples"&gt;
 &lt;a aria-hidden="true" href="#données-simples"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Données simples
&lt;/h4&gt;
&lt;p&gt;
 En premier lieu, on trouve des données « simples », composées juste d’un texte. On trouve par exemple le titre, la description ou la catégorie de l’article :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-text"&gt;Title: Mon superbe article
Summary: Voici un article absolument génial pour présenter les choses !
Category: Cookie
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 On trouve aussi des données qui doivent uniquement être en « un seul mot », donc avec les espaces représentés par des tirets (
 &lt;kbd&gt;
  -
 &lt;/kbd&gt;
 ) ou des
 &lt;em&gt;
  underscores
 &lt;/em&gt;
 (
 &lt;kbd&gt;
  _
 &lt;/kbd&gt;
 ). C’est le cas notamment du
 &lt;em&gt;
  slug
 &lt;/em&gt;
 cette chaîne représentant l’identifiant unique de l’article (qui est souvent extrapolé à partir du titre).
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-text"&gt;Title: Mon superbe article
Slug: mon-superbe-article
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="des-listes"&gt;
 &lt;a aria-hidden="true" href="#des-listes"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Des listes
&lt;/h4&gt;
&lt;p&gt;
 On peut aussi rencontrer des listes, comme par exemple une liste de
 &lt;em&gt;
  tags
 &lt;/em&gt;
 pour thématiser notre article ou encore une liste d’auteurs. Dans ce cas, le caractère de séparation sera la virgule
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-text"&gt;Tags: cuisine, dessert, cookies
Authors: Eskimon, Clementine Sanspepins, Jean Bonbeurre
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si jamais vos listes contiennent des textes avec des virgules, alors vous devez utiliser le
   &lt;code&gt;
    ;
   &lt;/code&gt;
   comme séparateur.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="des-dates"&gt;
 &lt;a aria-hidden="true" href="#des-dates"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Des dates
&lt;/h4&gt;
&lt;p&gt;
 Afin d’informer les lecteurs de la fraîcheur de nos contenus, la date de publication est essentielle ! La date de modification peut elle aussi être utile. Les dates sont des contenus particuliers puisqu’elles doivent être rédigées sous une forme compatible avec le sous-ensemble
 &lt;a href="https://www.w3.org/TR/NOTE-datetime"&gt;
  ISO 8601
 &lt;/a&gt;
 . Les différents formats sont :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Année uniquement :
  &lt;code&gt;
   AAAA
  &lt;/code&gt;
  (exemple :
  &lt;code&gt;
   2018
  &lt;/code&gt;
  )
 &lt;/li&gt;
 &lt;li&gt;
  Année et mois :
  &lt;code&gt;
   AAAA-MM
  &lt;/code&gt;
  (exemple :
  &lt;code&gt;
   2018-06
  &lt;/code&gt;
  )
 &lt;/li&gt;
 &lt;li&gt;
  Date complète :
  &lt;code&gt;
   AAAA-MM-JJ
  &lt;/code&gt;
  (exemple :
  &lt;code&gt;
   2018-06-04
  &lt;/code&gt;
  )
 &lt;/li&gt;
 &lt;li&gt;
  Date complète + heures et minutes :
  &lt;code&gt;
   AAAA-MM-JJThh:mmTZD
  &lt;/code&gt;
  (exemple :
  &lt;code&gt;
   2018-06-04T15:28+01:00
  &lt;/code&gt;
  ) (Attention au
  &lt;code&gt;
   T
  &lt;/code&gt;
  séparant date et heure ainsi qu’à l’indicateur de timezone)
 &lt;/li&gt;
 &lt;li&gt;
  Date complète + heures, minutes, secondes :
  &lt;code&gt;
   AAAA-MM-JJThh:mm:ssTZD
  &lt;/code&gt;
  (exemple :
  &lt;code&gt;
   2018-06-04T15:30:25+01:00
  &lt;/code&gt;
  )
 &lt;/li&gt;
 &lt;li&gt;
  Date complète + heures, minutes, secondes et une fraction de seconde :
  &lt;code&gt;
   AAAA-MM-JJThh:mm:ss.sTZD
  &lt;/code&gt;
  (exemple :
  &lt;code&gt;
   2018-06-04T15:31:26.42+01:00
  &lt;/code&gt;
  )
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Par exemple pour un article paru le 6 mai 2018 et mis à jour le 25 décembre 2018 :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-text"&gt;Date: 2018-05-06
Modified: 2018-12-25
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Le format horaire peut aussi être exprimé en
   &lt;a href="https://fr.wikipedia.org/wiki/Temps_universel_coordonné"&gt;
    UTC
   &lt;/a&gt;
   , dans ce cas il faut supprimer la partie ajoutant l’heure et mettre un Z à la place. Ainsi,
   &lt;code&gt;
    2018-06-04T15:28+01:00
   &lt;/code&gt;
   devient
   &lt;code&gt;
    2018-06-04T14:28Z
   &lt;/code&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;
 Voici un aperçu des métadonnées les plus usuelles. Vous aurez remarqué qu’elles sont en anglais
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 . Si jamais vous souhaitez ajouter des données supplémentaires, vous être libre de le faire ! La seule condition est que la clé soit en un seul mot (par exemple une clé "lien canonique" pourrait être notée "lien
 &lt;strong&gt;
  _
 &lt;/strong&gt;
 canonique").
&lt;/p&gt;
&lt;p&gt;
 Seul le titre est obligatoire. Toutes les autres données seront extrapolées des données du fichier lui-même si jamais elles sont absentes. Voyons cela.
&lt;/p&gt;
&lt;h3 id="via-le-contexte-du-fichier"&gt;
 &lt;a aria-hidden="true" href="#via-le-contexte-du-fichier"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Via le contexte du fichier
&lt;/h3&gt;
&lt;p&gt;
 Comme expliqué un peu plus tôt, seul le titre (
 &lt;em&gt;
  Title
 &lt;/em&gt;
 ) est obligatoire. Le reste est alors lu à partir des données du fichier et sous couvert que le fichier de configuration
 &lt;code&gt;
  pelicanconf.py
 &lt;/code&gt;
 est bien paramêtré. Voyons cela.
&lt;/p&gt;
&lt;h4 id="date-de-larticle"&gt;
 &lt;a aria-hidden="true" href="#date-de-larticle"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Date de l’article
&lt;/h4&gt;
&lt;p&gt;
 Si aucune date n’est présente dans les metadonnées, alors ce sera la date de création du fichier qui sera prise en compte. Il faut pour cela que le paramètre de configuration
 &lt;code&gt;
  DEFAULT_DATE
 &lt;/code&gt;
 ai pour valeur
 &lt;code&gt;
  fs
 &lt;/code&gt;
 (signifiant
 &lt;em&gt;
  filesystem
 &lt;/em&gt;
 ).
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;&lt;span class="hljs-string"&gt;'DEFAULT_DATE'&lt;/span&gt; = &lt;span class="hljs-string"&gt;'fs'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Le champ
   &lt;code&gt;
    Modified
   &lt;/code&gt;
   n’exploite pas les données du fichier. Il aura la même valeur que
   &lt;code&gt;
    Date
   &lt;/code&gt;
   s’il n’est pas précisé.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="la-catégorie"&gt;
 &lt;a aria-hidden="true" href="#la-catégorie"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La catégorie
&lt;/h4&gt;
&lt;p&gt;
 La catégorie de l’article (
 &lt;em&gt;
  Category
 &lt;/em&gt;
 ) peut-être devinée via le chemin du fichier. Un document "choco-banane.md" situé dans le dossier "cookie" (
 &lt;code&gt;
  content/cookie/choco-banane.md
 &lt;/code&gt;
 ) sera alors rangé dans la catégorie "cookie".
&lt;/p&gt;
&lt;p&gt;
 Si jamais le paramètre de configuration
 &lt;code&gt;
  USE_FOLDER_AS_CATEGORY
 &lt;/code&gt;
 est à
 &lt;code&gt;
  False
 &lt;/code&gt;
 alors le champ
 &lt;code&gt;
  DEFAULT_CATEGORY
 &lt;/code&gt;
 prend le relais.
&lt;/p&gt;
&lt;h4 id="slug-et-autres"&gt;
 &lt;a aria-hidden="true" href="#slug-et-autres"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Slug et autres
&lt;/h4&gt;
&lt;p&gt;
 Le nom du fichier peut-être paramétré pour retirer des données. Par exemple on pourrait vouloir que le nom de notre fichier soit aussi le slug de l’article. Pour cela, il faut régler le paramètre
 &lt;code&gt;
  FILENAME_METADATA
 &lt;/code&gt;
 de façon à décrire "où" sont les données dans le fichier. Si par exemple le fichier s’appelle
 &lt;code&gt;
  2018-05-06_de-bons-cookies.md
 &lt;/code&gt;
 et que
 &lt;code&gt;
  FILENAME_METADATA = '(?P&amp;lt;date&amp;gt;\d{4}-\d{2}-\d{2})_(?P&amp;lt;slug&amp;gt;.*)'
 &lt;/code&gt;
 , pelican automatiquement pourra sortir la date au format AAAA-MM-JJ puis le slug.
&lt;/p&gt;
&lt;h4 id="summary"&gt;
 &lt;a aria-hidden="true" href="#summary"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Summary
&lt;/h4&gt;
&lt;p&gt;
 Le champ
 &lt;em&gt;
  Summary
 &lt;/em&gt;
 quant à lui exploitera directement le début de l’article pour se former automatiquement s’il n’est pas spécifié. Un paramètre de configuration,
 &lt;code&gt;
  SUMMARY_MAX_LENGTH
 &lt;/code&gt;
 , permet de régler le nombre de mots du début de l’article seront utilisé pour construire le résumé.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Dernière information importante, les données précisé dans l’entête de l’article ont toujours la priorité.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous avez maintenant toutes les cartes en mains pour paramétrer vos articles, il ne restent plus qu’à les écrire ! Pour cela, le prochain chapitre vous propose d’aller à la découverte des différents formats vous permettant de rédiger.
&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="tuto"></category></entry><entry><title>Différents formats de contenu, un seul rendu</title><link href="https://eskimon.fr/tuto-pelican-203-diff%C3%A9rents-formats-de-contenu-un-seul-rendu" rel="alternate"></link><published>2018-10-27T09:00:00+02:00</published><updated>2018-10-27T09:00:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2018-10-27:/tuto-pelican-203-différents-formats-de-contenu-un-seul-rendu</id><summary type="html">&lt;p&gt;
 Pelican étant sympa, l’outil propose différentes méthodes de rédaction pour correspondre au goût du plus grand nombre. Parmi les plus habituels, on retrouve le markdown, le rst ou encore le HTML. Je vais vous présenter leur utilisation dans Pelican dans ce chapitre, mais je ne rentrerais pas dans le …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Pelican étant sympa, l’outil propose différentes méthodes de rédaction pour correspondre au goût du plus grand nombre. Parmi les plus habituels, on retrouve le markdown, le rst ou encore le HTML. Je vais vous présenter leur utilisation dans Pelican dans ce chapitre, mais je ne rentrerais pas dans le détail concernant leur mécanisme de rédaction. Aussi, ormis les différences dans la syntaxe de la rédaction, les metadonnées ne seront pas écrites pareil, et c’est là surtout l’objet de ce court chapitre.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;a href="#markdown"&gt;
   Markdown
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#restructuredtext---rst"&gt;
   reStructuredText - .rst
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#hypertext-markup-language---html"&gt;
   Hypertext Markup Language - .html
  &lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="markdown"&gt;
 &lt;a aria-hidden="true" href="#markdown"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Markdown
&lt;/h3&gt;
&lt;p&gt;
 Le premier moyen de rédaction que je souhaite vous présenter est le markdown. Pour l’utiliser il faudra que vos fichiers aient l’extension
 &lt;code&gt;
  .md
 &lt;/code&gt;
 (les extensions
 &lt;code&gt;
  .markdown
 &lt;/code&gt;
 ,
 &lt;code&gt;
  .mkd
 &lt;/code&gt;
 ou
 &lt;code&gt;
  .mdown
 &lt;/code&gt;
 sont aussi acceptées). Aussi, le
 &lt;em&gt;
  parseur
 &lt;/em&gt;
 markdown doit-être installé via la commande
 &lt;code&gt;
  pip install markdown
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Markdown est un format de rédaction très agréable à utiliser car son
 &lt;em&gt;
  markup
 &lt;/em&gt;
 est très léger, ce qui fait qu’un document rédigé mais non mis en forme reste tout de même très lisible.
&lt;/p&gt;
&lt;p&gt;
 La syntaxe des métadonnées lorsque l’on utilise le format markdown est celle que l’on a vu dans le chapitre précédent, à savoir une liste de clé:valeur.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-text"&gt;Title: Ma super recette de cookies
Date: 2018-06-06 09:00
Modified: 2018-06-07 14:42
Category: Cookie
Tags: cookie, chocolat, recette
Slug: ma-super-recette-de-cookies
Authors: Eskimon
Summary: Dans cette article je vous présente une recette pour des cookies délicieux !

Voici le corps de l'article, blablabla...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id="restructuredtext---rst"&gt;
 &lt;a aria-hidden="true" href="#restructuredtext---rst"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 reStructuredText - .rst
&lt;/h3&gt;
&lt;p&gt;
 Le format reStructuredText possède quant à lui l’extension
 &lt;code&gt;
  .rst
 &lt;/code&gt;
 . Il ne nécessite pas l’installation d’un package supplémentaire particulier. Pour ceux qui l’ignore, c’est le langage utilisé pour la rédaction de la documentation de python !
&lt;/p&gt;
&lt;p&gt;
 Là encore, au delà des sucres syntaxiques, tout se joue dans l’organisation des métadonnées. On retrouve de nouveau une liste de clé:valeur au format
 &lt;code&gt;
  :clé:valeur
 &lt;/code&gt;
 (
 &lt;kbd&gt;
  :
 &lt;/kbd&gt;
 avant la clé). Regardez bien l’exemple suivant, le titre lui aussi change d’aspect.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-asciidoc"&gt;Ma super recette de cookies
###########################

&lt;span class="hljs-meta"&gt;:Date:&lt;/span&gt; 2018-06-06 09:00
&lt;span class="hljs-meta"&gt;:Modified:&lt;/span&gt; 2018-06-07 14:42
&lt;span class="hljs-meta"&gt;:Category:&lt;/span&gt; Cookie
&lt;span class="hljs-meta"&gt;:Tags:&lt;/span&gt; cookie, chocolat, recette
&lt;span class="hljs-meta"&gt;:Slug:&lt;/span&gt; ma-super-recette-de-cookies
&lt;span class="hljs-meta"&gt;:Authors:&lt;/span&gt; Eskimon
&lt;span class="hljs-meta"&gt;:Summary:&lt;/span&gt; Dans cette article je vous présente une recette pour des cookies délicieux !

Voici le corps de l'article, blablabla...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id="hypertext-markup-language---html"&gt;
 &lt;a aria-hidden="true" href="#hypertext-markup-language---html"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Hypertext Markup Language - .html
&lt;/h3&gt;
&lt;p&gt;
 Le dernier langage utilisable lui aussi sans extension est le HTML. Indispensable pour faire des pages web, il permet aussi de rédiger directement vos articles. Il est cependant bien plus verbeux que les deux précédents que nous venons de voir.
&lt;/p&gt;
&lt;p&gt;
 Pour l’utiliser, il faudra que les fichiers des articles aient l’extension
 &lt;code&gt;
  .html
 &lt;/code&gt;
 ou
 &lt;code&gt;
  .htm
 &lt;/code&gt;
 . Ensuite, il suffit d’imaginer rédiger une page web classique, en se contentant du strict minimum. On trouve alors les metadonnées dans la balise
 &lt;code&gt;
  &amp;lt;head&amp;gt;
 &lt;/code&gt;
 et le corps de l’article dans
 &lt;code&gt;
  &amp;lt;body&amp;gt;
 &lt;/code&gt;
 . Le tout étant englobé d’une balise
 &lt;code&gt;
  &amp;lt;html&amp;gt;
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Voici notre exemple de nouveau :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-xml"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Ma super recette de cookies&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"tags"&lt;/span&gt; &lt;span class="hljs-attr"&gt;content&lt;/span&gt;=&lt;span class="hljs-string"&gt;"cookie, chocolat, recette"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"date"&lt;/span&gt; &lt;span class="hljs-attr"&gt;content&lt;/span&gt;=&lt;span class="hljs-string"&gt;"2018-06-06 09:00"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"modified"&lt;/span&gt; &lt;span class="hljs-attr"&gt;content&lt;/span&gt;=&lt;span class="hljs-string"&gt;"2018-06-07 14:42"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"category"&lt;/span&gt; &lt;span class="hljs-attr"&gt;content&lt;/span&gt;=&lt;span class="hljs-string"&gt;"Cookie"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"authors"&lt;/span&gt; &lt;span class="hljs-attr"&gt;content&lt;/span&gt;=&lt;span class="hljs-string"&gt;"Eskimon"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"summary"&lt;/span&gt; &lt;span class="hljs-attr"&gt;content&lt;/span&gt;=&lt;span class="hljs-string"&gt;"Dans cette article je vous présente une recette pour des cookies délicieux !"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
        Voici le corps de l'article, blablabla...
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Voilà cette rapide présentation faite. Comme vous pouvez vous en doutez, bien que la rédaction aura un aspect différent dans le document brut, le rendu sera quant à lui le même.
&lt;/p&gt;
&lt;p&gt;
 Si jamais vous souhaitez utiliser un autre format de rédaction, il existe de nombreux plugins ajoutant ces fonctionnalités. Veillez à bien consulter leur documentation, la mise en forme des métadonnées peut changer d’un article à l’autre. Pour ceux voulant aller plus loin, j’avais même fait un billet traitant de
 &lt;a href="https://zestedesavoir.com/billets/2502/comment-et-pourquoi-jai-integre-zmarkdown-a-pelican/"&gt;
  l’ajout du zmarkdown dans Pelican
 &lt;/a&gt;
 pour pouvoir rédiger avec le même markdown que celui de Zeste de Savoir !
&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="tuto"></category></entry><entry><title>Changer le style des pages - les thèmes</title><link href="https://eskimon.fr/tuto-pelican-204-changer-le-style-des-pages---les-th%C3%A8mes" rel="alternate"></link><published>2018-10-27T09:00:00+02:00</published><updated>2018-10-27T09:00:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2018-10-27:/tuto-pelican-204-changer-le-style-des-pages---les-thèmes</id><summary type="html">&lt;p&gt;
 Maintenant que nous savons rédiger, il va être temps de rendre notre site un peu plus joli ! En effet, les textes noirs sur fond blanc avec zéro mise en forme ça va bien 2 minutes…
&lt;/p&gt;
&lt;p&gt;
 Avant de nous attaquer à la réalisation de notre propre thème, nous allons passer par …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Maintenant que nous savons rédiger, il va être temps de rendre notre site un peu plus joli ! En effet, les textes noirs sur fond blanc avec zéro mise en forme ça va bien 2 minutes…
&lt;/p&gt;
&lt;p&gt;
 Avant de nous attaquer à la réalisation de notre propre thème, nous allons passer par l’utilisation de thème crée par la communauté Pelican.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;a href="#activer-un-thème"&gt;
   Activer un thème
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#petit-aparté-sur-le-serveur-de-développement-intégré"&gt;
   Petit aparté sur le serveur de développement intégré
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#ajouter-un-thème"&gt;
    Ajouter un thème
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#télécharger-un-thème"&gt;
      Télécharger un thème
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#ayant-un-dépôt-git"&gt;
       …ayant un dépôt git
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#qui-nest-quun-sous-dossier-git"&gt;
       …qui n’est qu’un sous-dossier git
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#installer-le-thème"&gt;
     Installer le thème
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#paramétrer-le-thème"&gt;
     Paramétrer le thème
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="activer-un-thème"&gt;
 &lt;a aria-hidden="true" href="#activer-un-thème"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Activer un thème
&lt;/h3&gt;
&lt;p&gt;
 Commencons par voir ce qui existe par défaut avant de nous lancer dans des choses plus compliquées.
&lt;/p&gt;
&lt;p&gt;
 À l’heure d’écriture de ces lignes, Pelican propose deux thèmes par défaut : « notmyidea » et « simple ». On peut retrouver cette information en tapant la commande
 &lt;code&gt;
  pelican-themes -l
 &lt;/code&gt;
 qui donnera en retour la liste des thèmes installés dans l’environnement actuel.
&lt;/p&gt;
&lt;p&gt;
 Le thème « simple » porte plutôt bien son nom puisqu’il n’applique (presque) aucun style à la page. En revanche, le thème « notmyidea » est un tout petit plus évolué et propose une vraie mise en forme.
&lt;/p&gt;
&lt;p&gt;
 Pour changer de thème, il suffit simplement de changer le paramètre de configuration
 &lt;code&gt;
  THEME
 &lt;/code&gt;
 dans le fichier de configuration
 &lt;code&gt;
  pelicanconf.py
 &lt;/code&gt;
 et lui inscrire le nom du thème que l’on souhaite. Par exemple, pour utiliser le thème « notmyidea » on écrit :
 &lt;code&gt;
  THEME = 'notmyidea'
 &lt;/code&gt;
 . Si ensuite vous regénerez le site, vous pourrez voir la différence de rendu dans les pages.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Thème « simple » à gauche, « notmyidea » à droite" src="./images/uploaded/tuto-pelican-204-changer-le-style-des-pages---les-thèmes/theme-simple-a-gauche-notmyidea-a-droite.png"/&gt;
 &lt;figcaption&gt;
  Thème « simple » à gauche, « notmyidea » à droite
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="petit-aparté-sur-le-serveur-de-développement-intégré"&gt;
 &lt;a aria-hidden="true" href="#petit-aparté-sur-le-serveur-de-développement-intégré"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Petit aparté sur le serveur de développement intégré
&lt;/h3&gt;
&lt;p&gt;
 Dans le premier chapitre de cette partie, je vous ai parlé d’un outil intégré à Pelican : le serveur de développement. Cet outil surveille les fichiers de votre dossier de travail et relance une génération à chaque fois qu’un élément change (nouvelle élément dans le CSS, changement d’un paramètre de configuration, ajout/édition d’un article, etc). Le but bien entendu est de gagner du temps en évitant d’oublier de générer les fichiers lors d’un changement et pour ne pas s’embêter à sans arrêt retourner taper la commande pour lancer la génération.
&lt;/p&gt;
&lt;p&gt;
 Un autre avantage du serveur de développement est qu’il permet de "servir" les fichiers statiques. En effet, si vous développez sans et que vous essayer de visiter votre site, vous avez peut-être remarqué que le CSS ou les images ne se chargent pas. Le boulot du serveur de développement est de palier à cela. Il réceptionne les demandes de chargement de fichier et les envoi à votre navigateur pour que le site se charge correctement.
&lt;/p&gt;
&lt;p&gt;
 Bref, c’est un outil bien utile qu’il ne faut pas hésiter à utiliser !
&lt;/p&gt;
&lt;p&gt;
 Pour l’utiliser, il suffit de taper la commande
 &lt;code&gt;
  ./develop_server.sh start
 &lt;/code&gt;
 . L’outil va alors directement générer votre site et continuer à tourner en tâche de fond. À chaque changement de fichier le site sera automatiquement régénéré et le statut s’affichera dans le terminal sans le bloquer pour autant. Dorénavant, pour visiter votre site vous pouvez directement aller à l’adresse
 &lt;a href="http://127.0.0.1:8000"&gt;
  http://127.0.0.1:8000
 &lt;/a&gt;
 . Notez bien la présence de
 &lt;code&gt;
  :8000
 &lt;/code&gt;
 qui précise au navigateur le port à utiliser pour accéder au serveur.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si pour une raison ou une autre vous souhaitez changer le port utilisé par le serveur de développement, vous pouvez le préciser en dernier paramètre de la commande. Par exemple pour utiliser le port 8080, il suffira de taper
   &lt;code&gt;
    ./develop_server.sh start 8080
   &lt;/code&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Pour arrêter le serveur de développement, retaper le nom du script suivi de l’argument "stop" :
 &lt;code&gt;
  ./develop_server.sh stop
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;h3 id="ajouter-un-thème"&gt;
 &lt;a aria-hidden="true" href="#ajouter-un-thème"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Ajouter un thème
&lt;/h3&gt;
&lt;p&gt;
 Dans cette dernière section, nous allons voir comment utiliser un thème pré-existant, qui aura été fait par un tiers de la communauté Pelican. Afin de télécharger le thème qui nous plaît, nous allons devoir distinguer plusieurs cas de figures. En effet, selon que le thème possède son propre dépôt git ou est hébergé de manière plus rudimentaire va influencer la manière de le récupérer. Mais à la fin, tout marchera de la même façon !
&lt;/p&gt;
&lt;p&gt;
 Pour cela, je vais vous faire utiliser deux thèmes répondants à ces deux cas de figures : attila et bootstrap.
&lt;/p&gt;
&lt;h4 id="télécharger-un-thème"&gt;
 &lt;a aria-hidden="true" href="#télécharger-un-thème"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Télécharger un thème
&lt;/h4&gt;
&lt;p&gt;
 Tout d’abord, il est bon de savoir que les thèmes open-source crée par la communauté Pelican sont regroupés dans le dépôt Github
 &lt;a href="https://github.com/getpelican/pelican-themes"&gt;
  pelican-themes
 &lt;/a&gt;
 . C’est donc tout naturellement là-bas que nous allons récupérer nos exemples.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si vous souhaitez avoir un aperçu du rendu d’un thème avant de le télécharger, vous pouvez aller faire un tour sur le site
   &lt;a href="http://www.pelicanthemes.com/"&gt;
    pelicanthemes.com
   &lt;/a&gt;
   qui recense tout les thèmes publiés sur le dépôt
   &lt;a href="https://github.com/getpelican/pelican-themes"&gt;
    https://github.com/getpelican/pelican-themes
   &lt;/a&gt;
   avec leur captures d’écrans respectives si disponibles.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="ayant-un-dépôt-git"&gt;
 &lt;a aria-hidden="true" href="#ayant-un-dépôt-git"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 …ayant un dépôt git
&lt;/h5&gt;
&lt;p&gt;
 Le premier exemple correspondra à l’utilisation d’un thème qui possède son propre dépôt git, géré par son propre mainteneur. On identifie ses derniers facilement en voyant qu’ils ont un « hash" » dans leur nom :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="En jaune quelques thèmes hébergés dans un sous-dépôt. Notez la présence du « @hash » le signifiant." src="./images/uploaded/tuto-pelican-204-changer-le-style-des-pages---les-thèmes/en-jaune-quelques-themes-heberges-dans-un-sous-depot-notez-la-presence-du-hash-le-signifiant.png"/&gt;
 &lt;figcaption&gt;
  En jaune quelques thèmes hébergés dans un sous-dépôt. Notez la présence du « @hash » le signifiant.
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Pour l’exemple, récupérons le thème nommé « attila ». Pour cela, trouvez le dans la liste puis cliquez dessus pour vous rendre dans
 &lt;a href="git@github.com:arulrajnet/attila.git"&gt;
  son dépôt
 &lt;/a&gt;
 . À partir de là, deux options s’offrent à nous. Soit vous connaissez l’utilisation de git, et dans ce cas clonez le dépôt dans un dossier qui vous plaira sur votre machine. Sinon, cliquez sur le bouton vert à droite «
 &lt;em&gt;
  clone or download
 &lt;/em&gt;
 » puis sélectionner l’option « Download zip ». Vous téléchargerez alors un zip que vous pourrez extraire ou vous le souhaitez sur votre ordinateur. C’est tout pour le moment.
&lt;/p&gt;
&lt;h5 id="qui-nest-quun-sous-dossier-git"&gt;
 &lt;a aria-hidden="true" href="#qui-nest-quun-sous-dossier-git"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 …qui n’est qu’un sous-dossier git
&lt;/h5&gt;
&lt;p&gt;
 Si le thème n’est pas dans un sous-dépôt git, alors il nous faudra récupérer uniquement le dossier qui va bien. Malheureusement, il n’y a pas de solution magique intégrée à Github pour récupérer uniquement un dossier. Nous allons donc passer par un service en ligne externe,
 &lt;a href="https://minhaskamal.github.io/DownGit/"&gt;
  DownGit
 &lt;/a&gt;
 , qui permet cela.
&lt;/p&gt;
&lt;p&gt;
 Pour l’utiliser, il suffit d’identifier le chemin du dossier qui nous intéresse. Pour l’exemple, prenons le thème dans le dossier « bootstrap » en cliquant sur ce dernier. La barre d’adresse nous donne alors le chemin
 &lt;a href="https://github.com/getpelican/pelican-themes/tree/master/bootstrap"&gt;
  https://github.com/getpelican/pelican-themes/tree/master/bootstrap
 &lt;/a&gt;
 . Copions ce dernier dans le champ texte de DownGit et cliquons sur «
 &lt;em&gt;
  Download
 &lt;/em&gt;
 ». L’outil va alors créer une archive qui va lancer un téléchargement. Vous pouvez alors décompresser cette archive où bon vous semble.
&lt;/p&gt;
&lt;h4 id="installer-le-thème"&gt;
 &lt;a aria-hidden="true" href="#installer-le-thème"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Installer le thème
&lt;/h4&gt;
&lt;p&gt;
 Maintenant que nous avons récupéré les thèmes, il ne nous reste plus qu’à les installer. Cette étape est très simple puisqu’elle consiste à appeler simplement la commande
 &lt;code&gt;
  pelican-themes
 &lt;/code&gt;
 avec l’option
 &lt;code&gt;
  --install
 &lt;/code&gt;
 . Par exemple, pour installer le thème bootstrap je ferais :
 &lt;code&gt;
  pelican-themes --install /chemin/vers/le/dossier/du/theme/bootstrap/
 &lt;/code&gt;
 . Une fois cela fait, le thème devrait normalement apparaître dans la liste des thèmes installés avec la commande
 &lt;code&gt;
  pelican-themes --list
 &lt;/code&gt;
&lt;/p&gt;
&lt;h4 id="paramétrer-le-thème"&gt;
 &lt;a aria-hidden="true" href="#paramétrer-le-thème"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Paramétrer le thème
&lt;/h4&gt;
&lt;p&gt;
 Vous avez peut-être remarqué, certains thèmes proposent des options pour customiser le rendu. Par exemple, dans l’affichage du site avec le thème boostrap on voit sur la gauche une section « Blogroll » et une autre « Social ».
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Liens externes et sociaux" src="./images/uploaded/tuto-pelican-204-changer-le-style-des-pages---les-thèmes/liens-externes-et-sociaux.png"/&gt;
 &lt;figcaption&gt;
  Liens externes et sociaux
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Le contenu de ces deux sections est assez souvent présentes dans les thèmes et est configurable directement dans le fichier
 &lt;code&gt;
  pelicanconf.py
 &lt;/code&gt;
 . Si vous ouvrez ce dernier, vous devriez y trouver les listes suivantes :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;&lt;span class="hljs-comment"&gt;## Blogroll&lt;/span&gt;
LINKS = ((&lt;span class="hljs-string"&gt;'Pelican'&lt;/span&gt;, &lt;span class="hljs-string"&gt;'http://getpelican.com/'&lt;/span&gt;),
         (&lt;span class="hljs-string"&gt;'Python.org'&lt;/span&gt;, &lt;span class="hljs-string"&gt;'http://python.org/'&lt;/span&gt;),
         (&lt;span class="hljs-string"&gt;'Jinja2'&lt;/span&gt;, &lt;span class="hljs-string"&gt;'http://jinja.pocoo.org/'&lt;/span&gt;),
         (&lt;span class="hljs-string"&gt;'You can modify those links in your config file'&lt;/span&gt;, &lt;span class="hljs-string"&gt;'#'&lt;/span&gt;),)

&lt;span class="hljs-comment"&gt;## Social widget&lt;/span&gt;
SOCIAL = ((&lt;span class="hljs-string"&gt;'You can add links in your config file'&lt;/span&gt;, &lt;span class="hljs-string"&gt;'#'&lt;/span&gt;),
          (&lt;span class="hljs-string"&gt;'Another social link'&lt;/span&gt;, &lt;span class="hljs-string"&gt;'#'&lt;/span&gt;),)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Essayez d’éditer ce contenu et regénerez le site, vous devriez voir vos changements apparaître sans avoir eu à modifier la structure du thème !
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Il est assez fréquent qu’un thème propose des options de personnalisation. Il est donc important de bien consulter le fichier « Readme » qui est normalement toujours fourni avec ce dernier. Si le travail est bien fait, il vous indiquera les options possibles, si elles sont facultatives ou non et les valeurs attendues.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;</content><category term="python"></category><category term="pelican"></category><category term="tuto"></category></entry><entry><title>Principe</title><link href="https://eskimon.fr/tuto-pelican-301-principe" rel="alternate"></link><published>2018-10-27T09:00:00+02:00</published><updated>2018-10-27T09:00:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2018-10-27:/tuto-pelican-301-principe</id><summary type="html">&lt;p&gt;
 Découvrons rapidement le fonctionnement de la personnalisation des thèmes. Ce chapitre est surtout là pour vous présenter le fonctionnement général et les principes du moteur de template que nous allons utiliser.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#le-moteur-de-template-kézaco"&gt;
    Le moteur de template, kézaco ?
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#jinja2"&gt;
     Jinja2
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#un-ensemble-de-fichiers"&gt;
     Un ensemble de fichiers
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#un-monde-dembriquement"&gt;
    Un monde d’embriquement
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#diviser-pour-mieux-régner"&gt;
     Diviser pour mieux régner …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;
 Découvrons rapidement le fonctionnement de la personnalisation des thèmes. Ce chapitre est surtout là pour vous présenter le fonctionnement général et les principes du moteur de template que nous allons utiliser.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#le-moteur-de-template-kézaco"&gt;
    Le moteur de template, kézaco ?
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#jinja2"&gt;
     Jinja2
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#un-ensemble-de-fichiers"&gt;
     Un ensemble de fichiers
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#un-monde-dembriquement"&gt;
    Un monde d’embriquement
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#diviser-pour-mieux-régner"&gt;
     Diviser pour mieux régner
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#Étendre-les-templates"&gt;
     Étendre les templates
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#des-blocs"&gt;
     Des blocs
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#un-exemple"&gt;
   Un exemple
  &lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="le-moteur-de-template-kézaco"&gt;
 &lt;a aria-hidden="true" href="#le-moteur-de-template-kézaco"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le moteur de template, kézaco ?
&lt;/h3&gt;
&lt;h4 id="jinja2"&gt;
 &lt;a aria-hidden="true" href="#jinja2"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Jinja2
&lt;/h4&gt;
&lt;p&gt;
 Comme je l’ai rapidement évoqué dans la section « Pourquoi j’ai choisi Pelican », un moteur de
 &lt;em&gt;
  template
 &lt;/em&gt;
 (« modèles ») nommé Jinja2 est utilisé par Pelican. Le fait de pouvoir passer par des templates est primordial, puisqu’il permet à Pelican de savoir où mettre chaque élément d’un article, en utilisant un système de variables et de marqueurs pour placer les éléments. Vous verrez, ce n’est pas si compliqué.
&lt;/p&gt;
&lt;p&gt;
 Par exemple, notre article possède un titre. Ce dernier sera stocké comme élément
 &lt;code&gt;
  title
 &lt;/code&gt;
 dans la variable
 &lt;code&gt;
  article
 &lt;/code&gt;
 et on y accédera sous la forme
 &lt;code&gt;
  {{ article.title }}
 &lt;/code&gt;
 . Il existe de nombreuses variables, pour chaque élément que l’on peut afficher dans une page. Nous les découvrirons petits à petit dans les prochains chapitres.
&lt;/p&gt;
&lt;h4 id="un-ensemble-de-fichiers"&gt;
 &lt;a aria-hidden="true" href="#un-ensemble-de-fichiers"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un ensemble de fichiers
&lt;/h4&gt;
&lt;p&gt;
 Afin de rendre tout ce travail plus confortable, les
 &lt;em&gt;
  templates
 &lt;/em&gt;
 se divisent en différentes pages HTML qu’il faudra créer. Ainsi, on aura une page correspondant au rendu d’un article, une autre qui correspond aux rendus d’une liste d’articles, une autre pour l’affichage d’un auteur ou d’une liste d’auteurs etc…
&lt;/p&gt;
&lt;p&gt;
 Il nous faudra donc créer chacune des ces pages, afin de gérer tout les cas possibles et garantir une expérience de lecture la plus cohérente et agréable possible pour le visiteur. Tout un programme !
&lt;/p&gt;
&lt;p&gt;
 Voici la liste des pages que nous allons créer :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   archives.html
  &lt;/code&gt;
  : Pour gérer l’affichage des archives
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   period_archives.html
  &lt;/code&gt;
  : Idem que ci-dessus, mais filtré par période
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   article.html
  &lt;/code&gt;
  : Rendu d’un article
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   author.html
  &lt;/code&gt;
  : Rendu pour un auteur
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   authors.html
  &lt;/code&gt;
  : Liste de tout les auteurs
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   categories.html
  &lt;/code&gt;
  : Liste de toutes les catégories
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   category.html
  &lt;/code&gt;
  : Rendu pour une catégorie
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   index.html
  &lt;/code&gt;
  : Pas d’accueil du site
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   page.html
  &lt;/code&gt;
  : Rendu d’une page (format d’article particulier)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   tag.html
  &lt;/code&gt;
  : Rendu pour un tag
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   tags.html
  &lt;/code&gt;
  : Liste de tout les tags
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Certains templates seront assez similaires, c’est le cas notamment des pages de listes (auteurs, catégories, tags).
&lt;/p&gt;
&lt;h3 id="un-monde-dembriquement"&gt;
 &lt;a aria-hidden="true" href="#un-monde-dembriquement"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un monde d’embriquement
&lt;/h3&gt;
&lt;h4 id="diviser-pour-mieux-régner"&gt;
 &lt;a aria-hidden="true" href="#diviser-pour-mieux-régner"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Diviser pour mieux régner
&lt;/h4&gt;
&lt;p&gt;
 Un des autres gros avantages d’un moteur de template est que nous pouvons ainsi diviser notre page en différents morceaux pour
 &lt;em&gt;
  factoriser
 &lt;/em&gt;
 les éléments qui se répètent. Éviter les répétitions est primordial, ça fait gagner du temps et surtout évite de faire des oublis de corrections de certains morceaux.
&lt;/p&gt;
&lt;p&gt;
 Ainsi par exemple, inutile de copier/coller le bout de code qui gère une barre de titre. Nous allons plutôt le mettre dans son propre fichier et il nous suffira simplement de l’inclure dans notre page pour ajouter tout son contenu via le marqueur
 &lt;code&gt;
  {% include 'chemin/du/morceau.html' %}
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;h4 id="Étendre-les-templates"&gt;
 &lt;a aria-hidden="true" href="#Étendre-les-templates"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Étendre les templates
&lt;/h4&gt;
&lt;p&gt;
 Comme je le disais plus tôt, il vaut mieux éviter autant que possible les répétitions. Pour cela, on peut « étendre » un template. Autrement dit, on va créer un squelette servant de base à notre page, et nous nous contenteront de personnaliser uniquement des blocs de ce dernier. On parle alors d’héritage. Les pages que nous allons créer vont "hériter" d’une page mère, et se contenterons uniquement de modifier des morceaux des blocs de cette dernière.
&lt;/p&gt;
&lt;h4 id="des-blocs"&gt;
 &lt;a aria-hidden="true" href="#des-blocs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Des blocs
&lt;/h4&gt;
&lt;p&gt;
 Les blocs parlons-en justement ! C’est un peu le même principe que l’include, mais dans l’autre sens. Au lieu d’aller chercher un morceau de code pour le rajouter, on déclare un emplacement comme pouvant être personnalisé. Si ce dernier n’est jamais édité, alors aucun morceau de code n’est rajouté et le bloc ne s’affichera pas dans la page finale. Leur syntaxe est la suivante :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;{% block content %}
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id="un-exemple"&gt;
 &lt;a aria-hidden="true" href="#un-exemple"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un exemple
&lt;/h3&gt;
&lt;p&gt;
 Voici un petit exemple d’un design très simple pour mettre en valeur les avantages liés au moteur de template.
&lt;/p&gt;
&lt;p&gt;
 Imaginons que nous souhaitons réaliser la page suivante :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Page d'exemple" src="./images/uploaded/tuto-pelican-301-principe/page-dexemple.png"/&gt;
 &lt;figcaption&gt;
  Page d'exemple
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Nous pouvons identifier différentes parties :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Exemple annoté" src="./images/uploaded/tuto-pelican-301-principe/exemple-annote.png"/&gt;
 &lt;figcaption&gt;
  Exemple annoté
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ol&gt;
 &lt;li&gt;
  Le
  &lt;em&gt;
   header
  &lt;/em&gt;
  (bandeau d’en-tête) de notre site, avec un logo/titre à gauche et des liens à droite ;
 &lt;/li&gt;
 &lt;li&gt;
  Une
  &lt;em&gt;
   sidebar
  &lt;/em&gt;
  (barre latérale) à gauche pour afficher des catégories, des liens, des infos… ;
 &lt;/li&gt;
 &lt;li&gt;
  L’en-tête de l’article, avec son titre et …
 &lt;/li&gt;
 &lt;li&gt;
  … des métadonnées comme la date de parution ;
 &lt;/li&gt;
 &lt;li&gt;
  Le corps de l’article lui-même ;
 &lt;/li&gt;
 &lt;li&gt;
  Le
  &lt;em&gt;
   footer
  &lt;/em&gt;
  (pied-de-page) de notre site.
 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
 Le HTML du rendu de cette page ressemble à ceci :
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-meta"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;html&lt;/span&gt; &lt;span class="hljs-attr"&gt;lang&lt;/span&gt;=&lt;span class="hljs-string"&gt;"fr"&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;charset&lt;/span&gt;=&lt;span class="hljs-string"&gt;"utf-8"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Cool Cookies&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"description"&lt;/span&gt; &lt;span class="hljs-attr"&gt;content&lt;/span&gt;=&lt;span class="hljs-string"&gt;"Une description concernant cette article"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"author"&lt;/span&gt; &lt;span class="hljs-attr"&gt;content&lt;/span&gt;=&lt;span class="hljs-string"&gt;"Eskimon"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;link&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"style.css"&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"stylesheet"&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"topbar-inner"&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"container-fluid"&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"brand"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/"&lt;/span&gt;&amp;gt;&lt;/span&gt;Cool Cookies&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;ul&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"nav"&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"active"&lt;/span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/category/cookie.html"&lt;/span&gt;&amp;gt;&lt;/span&gt;Cookie&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"pull-right"&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/archives.html"&lt;/span&gt;&amp;gt;&lt;/span&gt;[archives]&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/tags.html"&lt;/span&gt;&amp;gt;&lt;/span&gt;[tags]&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"container-fluid"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"sidebar"&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"well"&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;Blogroll&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"http://getpelican.com/"&lt;/span&gt;&amp;gt;&lt;/span&gt;Pelican&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"http://python.org/"&lt;/span&gt;&amp;gt;&lt;/span&gt;Python.org&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"http://jinja.pocoo.org/"&lt;/span&gt;&amp;gt;&lt;/span&gt;Jinja2&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"#"&lt;/span&gt;&amp;gt;&lt;/span&gt;You can modify those links in your config file&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"social"&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;Social&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"#"&lt;/span&gt;&amp;gt;&lt;/span&gt;You can add links in your config file&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"#"&lt;/span&gt;&amp;gt;&lt;/span&gt;Another social link&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"content"&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;'article'&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"page-header"&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Cookies aux pépites de chocolat&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"well small"&lt;/span&gt;&amp;gt;&lt;/span&gt;Permalink:
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"more"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/cookies-aux-pepites-de-chocolat.html"&lt;/span&gt;&amp;gt;&lt;/span&gt;2018-05-04 12:42:00+02:00&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    by
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"url fn"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/author/eskimon.html"&lt;/span&gt;&amp;gt;&lt;/span&gt;Eskimon &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    in
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/category/cookie.html"&lt;/span&gt;&amp;gt;&lt;/span&gt;Cookie&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    tags:
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/tag/cookie.html"&lt;/span&gt;&amp;gt;&lt;/span&gt;cookie&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/tag/chocolat.html"&lt;/span&gt;&amp;gt;&lt;/span&gt;chocolat&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Une première recette pour débuter dans l'art du cookie.&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Ingrédients&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;em&lt;/span&gt;&amp;gt;&lt;/span&gt;(Pour 10 cookies)&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;em&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;100g de pepites de chocolat&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;1 cuiller à café de levure&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;1/2 c à café de sel&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;150g de farine&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;1 sachet de sucre vanillé&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;1 œuf&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;85g de sucre (peut descendre à 50g)&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;75g de beurre (peut descendre à 50g)&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Étape 1 : Mélange&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Ramollir le beurre au micro-ondes (sans le faire fondre).&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Mélanger beurre, œuf, sucre et sucre vanillé. Ajouter la farine, le sel et la levure petit à petit, puis
                        les pépites de chocolat.&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Étape 2 : Cuisson&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Faites de petites boules, les mettre sur du papier sulfurisé.&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Enfournez à 180°C pendant 10 à 12 min (suivant la texture que vous désirez).&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Étape 3 : Dégustez !&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;:D&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;img&lt;/span&gt; &lt;span class="hljs-attr"&gt;alt&lt;/span&gt;=&lt;span class="hljs-string"&gt;"Des cookies"&lt;/span&gt; &lt;span class="hljs-attr"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/images/cookies.jpg"&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Powered by
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"http://getpelican.com/"&lt;/span&gt;&amp;gt;&lt;/span&gt;Pelican&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;. Theme based on
                    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"http://twitter.github.com/bootstrap/"&lt;/span&gt;&amp;gt;&lt;/span&gt;Twitter Bootstrap&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;.&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;amp;copy; Eskimon&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Dans une version « découpée », cela ressemblerait plutôt à un ensemble de morceau s’imbriquant ensemble. On commencerait par une page « globale » qui définirait les emplacements des choses :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-meta"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;html&lt;/span&gt; &lt;span class="hljs-attr"&gt;lang&lt;/span&gt;=&lt;span class="hljs-string"&gt;"fr"&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;charset&lt;/span&gt;=&lt;span class="hljs-string"&gt;"utf-8"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;{% block title %}{% endblock %}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"description"&lt;/span&gt; &lt;span class="hljs-attr"&gt;content&lt;/span&gt;=&lt;span class="hljs-string"&gt;"{% block description %}{% endblock %}"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"author"&lt;/span&gt; &lt;span class="hljs-attr"&gt;content&lt;/span&gt;=&lt;span class="hljs-string"&gt;"{% block author_name %}{% endblock %}"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;link&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"style.css"&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"stylesheet"&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
    {% include 'parts/header.html' %}
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"container-fluid"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        {% include 'parts/sidebar.html' %}
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"content"&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;'article'&lt;/span&gt;&amp;gt;&lt;/span&gt;
                {% block content %}
                {% endblock %}
            &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    {% include 'parts/footer.html' %}
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Avez-vous remarqué les changements ? La balise de titre et de description sont devenues des « blocs » qui seront remplis automatiquement. L’en-tête, le pied-de-page et la barre latérale sont aussi passés dans des fichiers externes, afin de découper notre design et rendre le fichier plus léger et du coup plus facile à lire.
&lt;/p&gt;
&lt;p&gt;
 Je conçois que tout cela peut paraître un peu abstrait. Mais vous allez voir en pratiquant que tout cela est en fait très simple à mettre en œuvre tout en étant très puissant pour personnaliser efficacement les pages.
&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="tuto"></category></entry><entry><title>La base</title><link href="https://eskimon.fr/tuto-pelican-302-la-base" rel="alternate"></link><published>2018-10-27T09:00:00+02:00</published><updated>2018-10-27T09:00:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2018-10-27:/tuto-pelican-302-la-base</id><summary type="html">&lt;p&gt;
 Maintenant que le concept est vu, passons à la pratique en nous attaquant tout de suite à la création du squelette de notre site.
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Cette partie va être très dense et longue, mais au profit des suivantes qui seront quant à elles plus légères. Je vous recommande donc d’y …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;
 Maintenant que le concept est vu, passons à la pratique en nous attaquant tout de suite à la création du squelette de notre site.
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Cette partie va être très dense et longue, mais au profit des suivantes qui seront quant à elles plus légères. Je vous recommande donc d’y aller tranquillement, en prenant votre temps pour chaque morceau.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;a href="#inventaire-des-fichiers-nécessaires"&gt;
   Inventaire des fichiers nécessaires
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#basehtml-la-colonne-vertébrale-du-site"&gt;
   base.html, la colonne vertébrale du site
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#la-section-head"&gt;
   La section head
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#la-section-body"&gt;
   La section body
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#len-tête-et-le-pied-de-page-du-site"&gt;
    L’en-tête et le pied de page du site
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#len-tête-headerparthtml"&gt;
     L’en-tête (header.part.html)
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#le-pied-de-page-footerparthtml"&gt;
     Le pied de page (footer.part.html)
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#allure-globale"&gt;
     Allure globale
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#la-barre-latérale"&gt;
    La barre latérale
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#la-liste-des-catégories"&gt;
     La liste des catégories
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#la-liste-des-liens-sociaux"&gt;
     La liste des liens sociaux
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#rendu-final-de-basehtml"&gt;
     Rendu final de base.html
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#one-more-thing-extends"&gt;
   One more thing : extends
  &lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="inventaire-des-fichiers-nécessaires"&gt;
 &lt;a aria-hidden="true" href="#inventaire-des-fichiers-nécessaires"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Inventaire des fichiers nécessaires
&lt;/h3&gt;
&lt;p&gt;
 Comme je vous l’expliquais dans le chapitre précédent, un certain nombre de fichiers est nécessaire pour créer le design du site. En voici l’arborescence.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-stylus"&gt;mon-theme/
├── static
│   ├── css
│   │   └── style&lt;span class="hljs-selector-class"&gt;.css&lt;/span&gt;
│   ├── images
│   │   └── [...]
│   └── js
│       └── [...]
└── templates
    ├── archives&lt;span class="hljs-selector-class"&gt;.html&lt;/span&gt;
    ├── &lt;span class="hljs-selector-tag"&gt;article&lt;/span&gt;&lt;span class="hljs-selector-class"&gt;.html&lt;/span&gt;
    ├── author&lt;span class="hljs-selector-class"&gt;.html&lt;/span&gt;
    ├── authors&lt;span class="hljs-selector-class"&gt;.html&lt;/span&gt;
    ├── base&lt;span class="hljs-selector-class"&gt;.html&lt;/span&gt;
    ├── categories&lt;span class="hljs-selector-class"&gt;.html&lt;/span&gt;
    ├── category&lt;span class="hljs-selector-class"&gt;.html&lt;/span&gt;
    ├── index&lt;span class="hljs-selector-class"&gt;.html&lt;/span&gt;
    ├── page&lt;span class="hljs-selector-class"&gt;.html&lt;/span&gt;
    ├── parts
    │   └── [...]
    ├── period_archives&lt;span class="hljs-selector-class"&gt;.html&lt;/span&gt;
    ├── subcategory&lt;span class="hljs-selector-class"&gt;.html&lt;/span&gt;
    ├── tag&lt;span class="hljs-selector-class"&gt;.html&lt;/span&gt;
    └── tags&lt;span class="hljs-selector-class"&gt;.html&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Je vous invite donc à créer tout de suite un dossier « mon-theme » directement à la racine de votre site (donc à côté du dossier
 &lt;code&gt;
  content
 &lt;/code&gt;
 par exemple. Nous allons ensuite informer Pelican que c’est ce dossier qui servira de thème dorénavant en modifiant simplement la constante
 &lt;code&gt;
  THEME
 &lt;/code&gt;
 du fichier
 &lt;code&gt;
  pelicanconf.py
 &lt;/code&gt;
 par
 &lt;code&gt;
  THEME = 'mon-theme'
 &lt;/code&gt;
 . Profitez-en aussi pour ajouter la ligne
 &lt;code&gt;
  THEME_STATIC_DIR = 'static'
 &lt;/code&gt;
 à la suite. Cette information permet de prévenir l’outil que des fichiers
 &lt;em&gt;
  statiques
 &lt;/em&gt;
 sont présents dans ce dossier.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Les fichiers statiques ne manipulent pas le contenu des articles, mais servent à la mise en page. Comme par exemple le fichier
   &lt;code&gt;
    style.css
   &lt;/code&gt;
   pour le CSS ou encore des scripts javascript ou des images comme votre logo ou une favicon par exemple.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="basehtml-la-colonne-vertébrale-du-site"&gt;
 &lt;a aria-hidden="true" href="#basehtml-la-colonne-vertébrale-du-site"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 base.html, la colonne vertébrale du site
&lt;/h3&gt;
&lt;p&gt;
 Une fois que tout est là, nous pouvons commencer à créer !
&lt;/p&gt;
&lt;p&gt;
 Nous allons commencer en éditant le fichier
 &lt;code&gt;
  base.html
 &lt;/code&gt;
 n qui se trouve dans le dossier
 &lt;code&gt;
  templates/
 &lt;/code&gt;
 . Celui-ci va contenir tout le code HTML le plus commun à toutes les pages, tout en exposant des blocs qui seront personnalisés plus tard.
&lt;/p&gt;
&lt;p&gt;
 Sans plus de détour, voici le fichier. Je vais vous l’expliquer en détail ensuite.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-meta"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;html&lt;/span&gt; &lt;span class="hljs-attr"&gt;lang&lt;/span&gt;=&lt;span class="hljs-string"&gt;"{{ DEFAULT_LANG }}"&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;charset&lt;/span&gt;=&lt;span class="hljs-string"&gt;"utf-8"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;http-equiv&lt;/span&gt;=&lt;span class="hljs-string"&gt;"Content-Type"&lt;/span&gt; &lt;span class="hljs-attr"&gt;content&lt;/span&gt;=&lt;span class="hljs-string"&gt;"text/html; charset=utf-8"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;{% block titre %}{{ SITENAME }}{% endblock %}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;link&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"stylesheet"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ THEME_STATIC_DIR }}/css/style.css"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;link&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"icon"&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"image/x-icon"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ THEME_STATIC_DIR }}/images/favicon.ico"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    
    {% block extra_head %}
    {% endblock %}
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
    {% include 'parts/header.part.html' %}

    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"main"&lt;/span&gt;&amp;gt;&lt;/span&gt; 
        {% include 'parts/sidebar.part.html' %}
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"content"&lt;/span&gt;&amp;gt;&lt;/span&gt;
            {% block content %}
            {% endblock %}
        &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;

    {% include 'parts/footer.part.html' %}

    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;script&lt;/span&gt; &lt;span class="hljs-attr"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ THEME_STATIC_DIR }}/js/script.js"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="null"&gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
    {% block extra_js %}
    {% endblock %}
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous avez remarqué comme il est court ? C’est parce que je fais usage des directives que nous avons vu plus tôt, notamment la fonction
 &lt;code&gt;
  include
 &lt;/code&gt;
 permettant d’inclure des morceaux de templates plutôt que de les écrire directement.
&lt;/p&gt;
&lt;p&gt;
 Voyons tout cela en détail.
&lt;/p&gt;
&lt;h3 id="la-section-head"&gt;
 &lt;a aria-hidden="true" href="#la-section-head"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La section head
&lt;/h3&gt;
&lt;p&gt;
 Sans surprise, notre fichier reprend la même structure que n’importe quel autre. On trouve dons un
 &lt;em&gt;
  DOCTYPE
 &lt;/em&gt;
 tout en haut, puis la balise
 &lt;code&gt;
  &amp;lt;html&amp;gt;
 &lt;/code&gt;
 qui englobe le tout. Ensuite vient la balise
 &lt;code&gt;
  &amp;lt;head&amp;gt;
 &lt;/code&gt;
 pour définir la section de métadonnée concernant la page puis on trouve le
 &lt;code&gt;
  &amp;lt;body&amp;gt;
 &lt;/code&gt;
 qui contiendra le contenu affiché à l’écran.
&lt;/p&gt;
&lt;p&gt;
 Revenons sur la section
 &lt;code&gt;
  &amp;lt;head&amp;gt;
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;charset&lt;/span&gt;=&lt;span class="hljs-string"&gt;"utf-8"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;http-equiv&lt;/span&gt;=&lt;span class="hljs-string"&gt;"Content-Type"&lt;/span&gt; &lt;span class="hljs-attr"&gt;content&lt;/span&gt;=&lt;span class="hljs-string"&gt;"text/html; charset=utf-8"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;{% block title %}{{ SITENAME }}{%endblock%}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;link&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"stylesheet"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ THEME_STATIC_DIR }}/css/style.css"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    
    &lt;span class="hljs-comment"&gt;&amp;lt;!-- Favicon --&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;link&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"icon"&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"image/x-icon"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ THEME_STATIC_DIR }}/images/favicon.ico"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    
    {% block extra_head %}
    {% endblock %}
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Les deux premières lignes ne nous intéressent pas trop ici, elles servent surtout à informer le navigateur pour qu’il interprète correctement le contenu.
&lt;/p&gt;
&lt;p&gt;
 En revanche, la ligne suivante est très intéressante car elle fait appel à plusieurs nouveautés.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;{% block titre %}{{ SITENAME }}{% endblock %}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 D’un point de vue HTML, c’est simplement la balise
 &lt;code&gt;
  &amp;lt;title&amp;gt;
 &lt;/code&gt;
 , qui définira le titre de la page (qui s’affichera dans l’onglet du navigateur). En revanche, son contenu est
 &lt;code&gt;
  {% block titre %}{{ SITENAME }}{% endblock %}
 &lt;/code&gt;
 , ça c’est original !
&lt;/p&gt;
&lt;p&gt;
 De manière plus clair, nous avons affaire ici à notre premier bloc personnalisable ! Ce bloc s’appelle «
 &lt;em&gt;
  title
 &lt;/em&gt;
 » et a pour l’instant comme valeur
 &lt;code&gt;
  {{ SITENAME }}
 &lt;/code&gt;
 . J’attire votre attention sur la construction d’un bloc. On commence tout d’abord par créer un marqueur à base d’accolades et de symbole de pourcentage contenant le mot-clé bloc puis un nom qui référence ce bloc . En l’occurrence "titre". On obtient ainsi le marqueur
 &lt;code&gt;
  {% block titre %}
 &lt;/code&gt;
 . Ensuite, il faut indiquer quand ce termine le bloc. Là encore avec des accolades et des symboles pourcentage et le mot-clé
 &lt;code&gt;
  endblock
 &lt;/code&gt;
 pour former la chaîne
 &lt;code&gt;
  {% endblock %}
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Ici, notre bloc n’est pas vide, il possède déjà une valeur qui est
 &lt;code&gt;
  {{ SITENAME }}
 &lt;/code&gt;
 . C’est une valeur curieuse n’est ce pas ? En fait, c’est carrément l’appel d’une variable globale du site. Cette dernière est renseignée dans le fichier de configuration
 &lt;code&gt;
  pelicanconf.py
 &lt;/code&gt;
 et sert à porter le nom de votre site. Par exemple "Cool Cookies". Ainsi, lorsque Jinja rencontre un marqueur composé de double accolades
 &lt;code&gt;
  {{ ... }}
 &lt;/code&gt;
 il sait qu’il ne doit pas imprimer l’information telle quelle mais plutôt le contenu de la variable indiquée. Il existe plein de variables globales, nous les verrons au fur et à mesure de nos besoins.
&lt;/p&gt;
&lt;p&gt;
 Une fois que le générateur sera passé dessus, si aucune autre page ne vient modifier le bloc "titre", cette ligne se transformera simplement en :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Cool Cookies&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Wahoo. Une seule ligne et on a découvert déjà tant de choses
 &lt;img alt=":lol:" class="smiley" src="./static/smileys/rire.gif"/&gt;
 !!
&lt;/p&gt;
&lt;p&gt;
 Voyons la suivante :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;link&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"stylesheet"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ THEME_STATIC_DIR }}/css/style.css"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Cette dernière nous sert à inclure une feuille de style qui servira à mettre en forme notre page. J’espère que vous avez remarqué l’utilisation de nouveau d’une variable (globale)
 &lt;code&gt;
  THEME_STATIC_DIR
 &lt;/code&gt;
 . Souvenez-vous, au tout début du chapitre je vous ai demandé de la créer pour indiquer à Pelican où se trouvait les fichiers statiques, notamment le CSS. Eh bien là nous y faisons appel ! Concrètement, une fois que le générateur sera passé sur cette ligne elle deviendra :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;link&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"stylesheet"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/static/css/style.css"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Les plus pointus d’entre vous auront peut-être remarqué que l’adresse est
   &lt;strong&gt;
    relative
   &lt;/strong&gt;
   , en commençant directement par un
   &lt;code&gt;
    /
   &lt;/code&gt;
   . Cela nous permet ainsi d’être indépendant du nom de domaine utilisé.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Allez on continue, ligne suivante s’il vous plaît !
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;link&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"icon"&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"image/x-icon"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ THEME_STATIC_DIR }}/images/favicon.ico"&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ici rien de super original, on retrouve ce que l’on vient de voir avec la ligne précédente. La variable
 &lt;code&gt;
  THEME_STATIC_DIR
 &lt;/code&gt;
 sera remplacée pour obtenir un chemin valide et ainsi pouvoir afficher notre favicon (qu’il faudra placer dans le dossier
 &lt;code&gt;
  mon-theme/static/images/
 &lt;/code&gt;
 avec le nom
 &lt;code&gt;
  favicon.ico
 &lt;/code&gt;
 pour que cela fonctionne).
&lt;/p&gt;
&lt;p&gt;
 Enfin, le dernier bout de code de cette section &amp;lt;head&amp;gt; est le suivante.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;    {% block extra_head %}
    {% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 C’est la déclaration d’un bloc nommé « extra_head » et vide pour le moment. Ce dernier sera rempli par le template servant à générer le contenu d’un article, afin de rajouter des métadonnées utiles pour le référencement entre autres. Nous verrons donc cela plus tard
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 .
&lt;/p&gt;
&lt;h3 id="la-section-body"&gt;
 &lt;a aria-hidden="true" href="#la-section-body"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La section body
&lt;/h3&gt;
&lt;p&gt;
 Nous venons déjà de voir un sacré morceau avec la section
 &lt;code&gt;
  &amp;lt;head&amp;gt;
 &lt;/code&gt;
 , mais ne nous reposons pas sur nos lauriers, nous avons
 &lt;em&gt;
  presque
 &lt;/em&gt;
 fini avec cette première page.
&lt;/p&gt;
&lt;p&gt;
 Voyons maintenant la section
 &lt;code&gt;
  &amp;lt;body&amp;gt;
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;    {% include 'parts/header.part.html' %}

    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"main"&lt;/span&gt;&amp;gt;&lt;/span&gt; 
        {% include 'parts/sidebar.part.html' %}
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"content"&lt;/span&gt;&amp;gt;&lt;/span&gt;
            {% block content %}
            {% endblock %}
        &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;

    {% include 'parts/footer.part.html' %}

    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;script&lt;/span&gt; &lt;span class="hljs-attr"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ THEME_STATIC_DIR }}/js/script.js"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="null"&gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
    {% block extra_js %}
    {% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Il commence fort avec une nouvelle instruction, la fonction
 &lt;code&gt;
  include
 &lt;/code&gt;
 . Comme brièvement expliqué plus tôt, cette dernière va nous permettre d’inclure un morceau de code qui sera écrit dans un autre fichier. On peut ainsi garder notre fichier plus léger et donc plus facile à lire et à créer. Un autre avantage est pour les morceaux de code qui se répètent (dans une boucle la plupart du temps). On peut ainsi les isoler et les ajouter de manière procédurale assez facilement. Nous verrons ce cas plus tard, lorsque nous étudierons la réalisation des pages de listing.
&lt;/p&gt;
&lt;p&gt;
 La fonction
 &lt;code&gt;
  include
 &lt;/code&gt;
 a besoin du chemin du fichier HTML à inclure. En l’occurrence, le fichier se trouve dans le dossiers
 &lt;code&gt;
  parts
 &lt;/code&gt;
 et se nomme
 &lt;code&gt;
  header.part.html
 &lt;/code&gt;
 . Ce dernier contient tout le code de la barre d’en-tête de notre site. Nous verrons ce contenu à la fin de ce chapitre.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Je vous invite à essayer de respecter la convention de nommage
   &lt;code&gt;
    *.part.html
   &lt;/code&gt;
   pour les fichiers contenant uniquement des morceaux de code destinés à être inclus. Vous savez ainsi en un clin d’œil qu’il ne se suffise pas à eux-mêmes mais sont destinés à être inclus dans un autre fichier.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Lorsque Jinja va croiser cette ligne, il va tout simplement copier et interpréter tout le contenu du fichier visé.
&lt;/p&gt;
&lt;p&gt;
 Le morceau suivant ne fait pas grand chose. Il se contente simplement de déclarer une
 &lt;code&gt;
  &amp;lt;div&amp;gt;
 &lt;/code&gt;
 avec la classe CSS
 &lt;code&gt;
  main
 &lt;/code&gt;
 qui contiendra de nouveau un include pour le code de la barre latérale et un bloc qui sera personnalisé plus tard (vide pour le moment).
&lt;/p&gt;
&lt;p&gt;
 Ensuite, on retrouve de nouveau un
 &lt;code&gt;
  include
 &lt;/code&gt;
 mais cette fois-ci se sera pour ajouter le pied-de-page de notre site. Les mêmes remarques que pour l’en-tête s’appliquent.
&lt;/p&gt;
&lt;p&gt;
 Enfin, le dernier morceau de code contient à la fois l’inclusion d’un fichier javascript provenant du dossier
 &lt;code&gt;
  static
 &lt;/code&gt;
 (remplacement d’une variable globale
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 ), et ensuite la déclaration d’un bloc "extra_js", vide pour le moment, qui sera personnalisé par d’autre template plus tard.
&lt;/p&gt;
&lt;h3 id="len-tête-et-le-pied-de-page-du-site"&gt;
 &lt;a aria-hidden="true" href="#len-tête-et-le-pied-de-page-du-site"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’en-tête et le pied de page du site
&lt;/h3&gt;
&lt;p&gt;
 Bon c’est bien sympa tout ça mais pour l’instant on a rien fait du tout ! Notre site n’affiche qu’une simple page blanche.
&lt;/p&gt;
&lt;p&gt;
 Je vous propose donc de compléter les fichiers
 &lt;code&gt;
  header.part.html
 &lt;/code&gt;
 ainsi que
 &lt;code&gt;
  footer.part.html
 &lt;/code&gt;
 pour donner un peu de corps (ahah) à notre page.
&lt;/p&gt;
&lt;h4 id="len-tête-headerparthtml"&gt;
 &lt;a aria-hidden="true" href="#len-tête-headerparthtml"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’en-tête (header.part.html)
&lt;/h4&gt;
&lt;p&gt;
 Commençons en toute logique par l’en-tête du site, c’est à dire la « barre de titre » tout en haut de notre page.
&lt;/p&gt;
&lt;p&gt;
 Cette dernière aura l’allure suivante :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="En-tête" src="./images/uploaded/tuto-pelican-302-la-base/en-tete.png"/&gt;
 &lt;figcaption&gt;
  En-tête
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Son code sera tout simple, et composé d’une balise
 &lt;code&gt;
  &amp;lt;header&amp;gt;
 &lt;/code&gt;
 contenant un lien avec une image (redirigeant vers la racine du site) et un span contenant le nom du site.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;header&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"header-bar"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"header-nav"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;img&lt;/span&gt; &lt;span class="hljs-attr"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ THEME_STATIC_DIR }}/images/logo.png"&lt;/span&gt; &lt;span class="hljs-attr"&gt;alt&lt;/span&gt;=&lt;span class="hljs-string"&gt;"{{ SITENAME }} logo"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;span&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"header-title"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ SITENAME }}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Rien de bien transcendant, j’attire toutefois votre attention sur l’utilisation une nouvelle fois des variables pour paramétrer le titre du site et aller chercher les images (le logo en l’occurrence) au bon endroit.
&lt;/p&gt;
&lt;p&gt;
 Voici le CSS associé :
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-css"&gt;&lt;span class="hljs-selector-class"&gt;.header-bar&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;padding&lt;/span&gt;: &lt;span class="hljs-number"&gt;5px&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;margin-bottom&lt;/span&gt;: &lt;span class="hljs-number"&gt;5px&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;background-color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#fafafb&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;box-shadow&lt;/span&gt;: &lt;span class="hljs-number"&gt;0&lt;/span&gt; &lt;span class="hljs-number"&gt;1px&lt;/span&gt; &lt;span class="hljs-number"&gt;0&lt;/span&gt; &lt;span class="hljs-built_in"&gt;rgba&lt;/span&gt;(12,13,14,0.1),&lt;span class="hljs-number"&gt;0&lt;/span&gt; &lt;span class="hljs-number"&gt;1px&lt;/span&gt; &lt;span class="hljs-number"&gt;6px&lt;/span&gt; &lt;span class="hljs-built_in"&gt;rgba&lt;/span&gt;(59,64,69,0.1);
}

&lt;span class="hljs-selector-tag"&gt;a&lt;/span&gt;&lt;span class="hljs-selector-class"&gt;.header-nav&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;text-decoration&lt;/span&gt;: none;
}

&lt;span class="hljs-selector-tag"&gt;a&lt;/span&gt;&lt;span class="hljs-selector-class"&gt;.header-nav&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;img&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;height&lt;/span&gt;: &lt;span class="hljs-number"&gt;50px&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;vertical-align&lt;/span&gt;: middle;
  &lt;span class="hljs-attribute"&gt;margin-left&lt;/span&gt;: &lt;span class="hljs-number"&gt;10px&lt;/span&gt;;
}

&lt;span class="hljs-selector-class"&gt;.header-title&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;font-size&lt;/span&gt;: &lt;span class="hljs-number"&gt;50px&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;margin-left&lt;/span&gt;: &lt;span class="hljs-number"&gt;50px&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;display&lt;/span&gt;: inline-block;
  &lt;span class="hljs-attribute"&gt;vertical-align&lt;/span&gt;: middle
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Maintenant place au pied de page !
&lt;/p&gt;
&lt;h4 id="le-pied-de-page-footerparthtml"&gt;
 &lt;a aria-hidden="true" href="#le-pied-de-page-footerparthtml"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le pied de page (footer.part.html)
&lt;/h4&gt;
&lt;p&gt;
 Le pied de page sera lui aussi assez simple à mettre en œuvre. Il ne possédera qu’une petite indication de copyright sur la gauche puis une liste de liens (tous bidon pour l’exemple) sur la droite.
&lt;/p&gt;
&lt;p&gt;
 Voici le HTML, le CSS et un rendu. Là encore l’utilisation de la variable
 &lt;code&gt;
  SITENAME
 &lt;/code&gt;
 est faite pour le copyright.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;footer&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"footer-bar"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;span&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"footer-copyright"&lt;/span&gt;&amp;gt;&lt;/span&gt;© {{ SITENAME }}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;ul&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"footer-list"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"#"&lt;/span&gt;&amp;gt;&lt;/span&gt;À propos&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"#"&lt;/span&gt;&amp;gt;&lt;/span&gt;Contact&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"#"&lt;/span&gt;&amp;gt;&lt;/span&gt;Mentions Légales&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-css"&gt;&lt;span class="hljs-selector-class"&gt;.footer-bar&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;padding&lt;/span&gt;: &lt;span class="hljs-number"&gt;5px&lt;/span&gt; &lt;span class="hljs-number"&gt;20px&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;margin-top&lt;/span&gt;: &lt;span class="hljs-number"&gt;5px&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;background-color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#242729&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#848d95&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;display&lt;/span&gt;: flex;
  &lt;span class="hljs-attribute"&gt;justify-content&lt;/span&gt;: space-between;
}

&lt;span class="hljs-selector-class"&gt;.footer-bar&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;span&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;margin-top&lt;/span&gt;: &lt;span class="hljs-number"&gt;4px&lt;/span&gt;;
}

&lt;span class="hljs-selector-class"&gt;.footer-bar&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;ul&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;margin&lt;/span&gt;: &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;list-style-type&lt;/span&gt;: none;
}

&lt;span class="hljs-selector-class"&gt;.footer-bar&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;li&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;margin&lt;/span&gt;: &lt;span class="hljs-number"&gt;4px&lt;/span&gt; &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
}

&lt;span class="hljs-selector-class"&gt;.footer-bar&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;a&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#848d95&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;text-decoration&lt;/span&gt;: none;
}

&lt;span class="hljs-selector-class"&gt;.footer-bar&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;a&lt;/span&gt;&lt;span class="hljs-selector-pseudo"&gt;:hover&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#bbc0c4&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;figure&gt;
 &lt;img alt="Le pied de page" src="./images/uploaded/tuto-pelican-302-la-base/le-pied-de-page.png"/&gt;
 &lt;figcaption&gt;
  Le pied de page
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="allure-globale"&gt;
 &lt;a aria-hidden="true" href="#allure-globale"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Allure globale
&lt;/h4&gt;
&lt;p&gt;
 Voici le rendu que vous devriez avoir :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Rendu global - base.html" src="./images/uploaded/tuto-pelican-302-la-base/rendu-global-basehtml.png"/&gt;
 &lt;figcaption&gt;
  Rendu global - base.html
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Un peu de CSS a été utilisé pour étirer correctement le conteneur principale, voici-donc tout ce que j’ai passé sous silence :
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-css"&gt;&lt;span class="hljs-selector-tag"&gt;html&lt;/span&gt;, &lt;span class="hljs-selector-tag"&gt;body&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;height&lt;/span&gt;: &lt;span class="hljs-number"&gt;100%&lt;/span&gt;;
}

&lt;span class="hljs-selector-tag"&gt;body&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;margin&lt;/span&gt;: &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#242729&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;display&lt;/span&gt;: flex;
  &lt;span class="hljs-attribute"&gt;flex-direction&lt;/span&gt;: column;
}

&lt;span class="hljs-selector-class"&gt;.main&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;flex-grow&lt;/span&gt;: &lt;span class="hljs-number"&gt;1&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="la-barre-latérale"&gt;
 &lt;a aria-hidden="true" href="#la-barre-latérale"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La barre latérale
&lt;/h3&gt;
&lt;p&gt;
 Dernière étape, rajouter la barre latérale (
 &lt;em&gt;
  sidebar
 &lt;/em&gt;
 ) qui recensera les catégories de notre blog ainsi que quelques liens « sociaux ».
&lt;/p&gt;
&lt;p&gt;
 Comme d’habitude, je vais tout d’abord vous copier le code puis je vous l’expliquerais ensuite :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;nav&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"sidebar-nav"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;ul&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"categories"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        {% for cat, articles in categories|sort %}
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ cat.url }}"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ cat }} ({{ articles|count }})&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
        {% endfor %}
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;hr&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;ul&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"links"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;
            {% for name, link in SOCIAL %}
            &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
                &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"{{ link }}"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ name }}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
            {% endfor %}
        &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;nav&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-css"&gt;&lt;span class="hljs-selector-class"&gt;.sidebar-nav&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;background-color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#f2f2f2&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;padding&lt;/span&gt;: &lt;span class="hljs-number"&gt;10px&lt;/span&gt; &lt;span class="hljs-number"&gt;20px&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;border&lt;/span&gt;: solid &lt;span class="hljs-number"&gt;1px&lt;/span&gt; grey;
  &lt;span class="hljs-attribute"&gt;border-radius&lt;/span&gt;: &lt;span class="hljs-number"&gt;5px&lt;/span&gt;;
}

&lt;span class="hljs-selector-class"&gt;.sidebar-nav&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;hr&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#fff&lt;/span&gt;;
}

&lt;span class="hljs-selector-class"&gt;.sidebar-nav&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;ul&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;padding&lt;/span&gt;: &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;margin&lt;/span&gt;: &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;list-style-type&lt;/span&gt;: none;
}

&lt;span class="hljs-selector-class"&gt;.sidebar-nav&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;li&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;margin&lt;/span&gt;: &lt;span class="hljs-number"&gt;4px&lt;/span&gt; &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
}

&lt;span class="hljs-selector-class"&gt;.sidebar-nav&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;a&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;text-decoration&lt;/span&gt;: none;
  &lt;span class="hljs-attribute"&gt;color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#43474b&lt;/span&gt;;
}

&lt;span class="hljs-selector-class"&gt;.sidebar-nav&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;a&lt;/span&gt;&lt;span class="hljs-selector-pseudo"&gt;:hover&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#000&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous l’avez sûrement vu, encore de nouvelles choses sont au programme : les boucles !
&lt;/p&gt;
&lt;p&gt;
 Les boucles sont un moyen très pratique pour construire des listes d’éléments. Ici, nous faisons deux boucles, une pour générer la liste des catégories (et le nombre d’articles présents dans chacune) et une autre qui parcourt tout les éléments présents dans la liste globale
 &lt;code&gt;
  SOCIAL
 &lt;/code&gt;
 qui est dans le fichier
 &lt;code&gt;
  pelicanconf.py
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;h4 id="la-liste-des-catégories"&gt;
 &lt;a aria-hidden="true" href="#la-liste-des-catégories"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La liste des catégories
&lt;/h4&gt;
&lt;p&gt;
 La construction de cette nouvelle instruction n’est pas très compliquée vous allez voir. Voici comment elle se décompose :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-django"&gt;&lt;span class="xml"&gt;&lt;/span&gt;&lt;span class="hljs-template-tag"&gt;{% &lt;span class="hljs-name"&gt;&lt;span class="hljs-name"&gt;for&lt;/span&gt;&lt;/span&gt; element-de-la-liste &lt;span class="hljs-keyword"&gt;in&lt;/span&gt; liste %}&lt;/span&gt;&lt;span class="xml"&gt;
    [ ... Instructions executer à chaque passage dans la boucle ... ]
&lt;/span&gt;&lt;span class="hljs-template-tag"&gt;{% &lt;span class="hljs-name"&gt;&lt;span class="hljs-name"&gt;endfor&lt;/span&gt;&lt;/span&gt; %}&lt;/span&gt;&lt;span class="xml"&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 On voit apparaître plusieurs choses. Tout d’abord le mot-clé
 &lt;code&gt;
  for
 &lt;/code&gt;
 , qui indique que l’on veut faire une boucle. Ensuite, on donne un nom symbolique pour une variable que l’on souhaite utiliser pour stocker un élément de la liste à parcourir. Enfin, le mot-clé
 &lt;code&gt;
  in
 &lt;/code&gt;
 suivi du nom de la variable contenant la liste à parcourir.
&lt;/p&gt;
&lt;p&gt;
 Notre cas d’études est un peu particulier :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;{% for cat, articles in categories|sort %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Déjà, on voit que l’on stocke dans
 &lt;code&gt;
  cat, articles
 &lt;/code&gt;
 . C’est dû à la nature de la liste étudiée
 &lt;code&gt;
  categories
 &lt;/code&gt;
 . Cette dernière est en fait une liste de couple
 &lt;em&gt;
  (catégorie, liste d’articles de la catégorie)
 &lt;/em&gt;
 . À chaque passage dans la boucle, à chaque élément récupéré, on récupère donc une catégorie (stockée dans
 &lt;code&gt;
  cat
 &lt;/code&gt;
 ) et la liste des articles de cette catégorie (stockée dans …
 &lt;code&gt;
  articles
 &lt;/code&gt;
 ). Petite facétie en plus, on applique le modificateur
 &lt;code&gt;
  sort
 &lt;/code&gt;
 sur la liste
 &lt;code&gt;
  categories
 &lt;/code&gt;
 initial pour récupérer ses éléments en ordre alphabétiques.
&lt;/p&gt;
&lt;p&gt;
 Ok, on a donc maintenant à chaque tour de boucle une catégorie et sa liste d’articles, il est temps de s’en servir.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ cat.url }}"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ cat }} ({{ articles|count }})&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 On va donc placer l’élément
 &lt;code&gt;
  url
 &lt;/code&gt;
 de la catégorie
 &lt;code&gt;
  cat
 &lt;/code&gt;
 dans le lien de la balise
 &lt;code&gt;
  &amp;lt;a&amp;gt;
 &lt;/code&gt;
 et on utilisera directement
 &lt;code&gt;
  cat
 &lt;/code&gt;
 dans le texte du lien (pour dire vrai, c’est alors sa représentation textuelle qui sera appelée). Enfin, on mettra entre parenthèses le nombre d’articles de la catégorie en cours. Pour ce faire, on utilise la fonction
 &lt;code&gt;
  count
 &lt;/code&gt;
 sur la variables
 &lt;code&gt;
  articles
 &lt;/code&gt;
 (qui est une liste je vous rappelle).
&lt;/p&gt;
&lt;p&gt;
 Et après toutes ces aventures, on obtient une jolie liste à puces avec toutes nos catégories, des liens vers ces dernières et le nombre d’articles qu’elles contiennent !
&lt;/p&gt;
&lt;h4 id="la-liste-des-liens-sociaux"&gt;
 &lt;a aria-hidden="true" href="#la-liste-des-liens-sociaux"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La liste des liens sociaux
&lt;/h4&gt;
&lt;p&gt;
 Cette liste est un peu plus simple que la précédente puisque ce sont "juste" des tuples mis dans une liste. Voici un exemple de ce qu’elle peut contenir :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;SOCIAL = ((&lt;span class="hljs-string"&gt;'Facebook'&lt;/span&gt;, &lt;span class="hljs-string"&gt;'https://lien-vers-profil-facebook.com/'&lt;/span&gt;),
          (&lt;span class="hljs-string"&gt;'Twitter'&lt;/span&gt;, &lt;span class="hljs-string"&gt;'https://lien-vers-profil-twitter.com/'&lt;/span&gt;),
          (&lt;span class="hljs-string"&gt;'Google+'&lt;/span&gt;, &lt;span class="hljs-string"&gt;'https://lien-vers-profil-googleplus.com/'&lt;/span&gt;),
          (&lt;span class="hljs-string"&gt;'ZdS'&lt;/span&gt;, &lt;span class="hljs-string"&gt;'https://lien-vers-profil-zestedesavoir.com/'&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ainsi, en la parcourant on va récupérer deux éléments, un "titre" et un lien vers une page web. Pour la parcourir, on fait donc de nouveau appel à la boucle
 &lt;code&gt;
  for
 &lt;/code&gt;
 sur la variable globale
 &lt;code&gt;
  SOCIAL
 &lt;/code&gt;
 , en précisant deux variables pour stocker les éléments :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;{% for name, link in SOCIAL %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ensuite, il suffit de mettre ces éléments dans des balises
 &lt;code&gt;
  &amp;lt;li&amp;gt;
 &lt;/code&gt;
 et
 &lt;code&gt;
  &amp;lt;a&amp;gt;
 &lt;/code&gt;
 pour construire notre joli liste :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;{% for name, link in SOCIAL %}
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"{{ link }}"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ name }}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Notre liste va ainsi se construire auto-magiquement pour notre plus grand plaisir. Les deux variables étant de simples chaînes de caractères, il n’y a pas à accéder à un sous-élément.
&lt;/p&gt;
&lt;h4 id="rendu-final-de-basehtml"&gt;
 &lt;a aria-hidden="true" href="#rendu-final-de-basehtml"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Rendu final de base.html
&lt;/h4&gt;
&lt;figure&gt;
 &lt;img alt="Rendu final - base.html" src="./images/uploaded/tuto-pelican-302-la-base/rendu-final-basehtml.png"/&gt;
 &lt;figcaption&gt;
  Rendu final - base.html
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="one-more-thing-extends"&gt;
 &lt;a aria-hidden="true" href="#one-more-thing-extends"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 One more thing : extends
&lt;/h3&gt;
&lt;p&gt;
 Une petite dernière chose (promis c’est la dernière du chapitre !). Maintenant que nous avons une fondation solide, il faut pouvoir l’utiliser !
&lt;/p&gt;
&lt;p&gt;
 C’est ce à quoi nous servira le mot-clé
 &lt;code&gt;
  extends
 &lt;/code&gt;
 , qui va informer Jinja que l’on souhaite "étendre", "compléter" un modèle. Ainsi, en tapant
 &lt;code&gt;
  {% extends "base.html" %}
 &lt;/code&gt;
 &lt;strong&gt;
  au début
 &lt;/strong&gt;
 de n’import lequel de vos fichier
 &lt;code&gt;
  .html
 &lt;/code&gt;
 , Jinja utilisera automatiquement le fichier
 &lt;code&gt;
  base.html
 &lt;/code&gt;
 et complètera les blocs personnalisables avec ce que vous souhaitez.
&lt;/p&gt;
&lt;p&gt;
 Par exemple, le rendu final que l’on a obtenu à la section précédente pourra être fait en tapant simplement :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;{% extends "base.html" %}


{% block content %}
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;Le contenu ira ici !&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Automatiquement Jinja saura que vous voulez travailler avec le squelette
 &lt;code&gt;
  base.html
 &lt;/code&gt;
 et que vous souhaitez modifier le bloc
 &lt;code&gt;
  content
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Eh bien, sacré morceau !
&lt;/p&gt;
&lt;p&gt;
 Ce chapitre fût assez dense, je le reconnais, mais il a posé les bases de plusieurs choses, comme l’utilisation de variables ainsi que celles des blocs. Tout ceci est essentiel pour la suite et il était donc important de bien les introduire.
&lt;/p&gt;
&lt;p&gt;
 Les chapitres suivants vont rentrer dans le vif du sujet en vous permettant de découvrir la personnalisation des différents types de pages que votre site proposera.
&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="tuto"></category></entry><entry><title>Page de « listing »</title><link href="https://eskimon.fr/tuto-pelican-303-page-de-%C2%AB-listing-%C2%BB" rel="alternate"></link><published>2018-10-27T09:00:00+02:00</published><updated>2018-10-27T09:00:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2018-10-27:/tuto-pelican-303-page-de-«-listing-»</id><summary type="html">&lt;p&gt;
 Avec le chapitre précédent c’est un bon gros morceau qui est abattu ! Ce chapitre ici fera un peu office de pause
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 Il sera plus léger et les pages que nous allons réaliser sont moins primordiales pour les visiteurs. J’espère cependant que vous le trouverez tout aussi intéressant !
&lt;/p&gt;
&lt;p&gt;
 Nous …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Avec le chapitre précédent c’est un bon gros morceau qui est abattu ! Ce chapitre ici fera un peu office de pause
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 Il sera plus léger et les pages que nous allons réaliser sont moins primordiales pour les visiteurs. J’espère cependant que vous le trouverez tout aussi intéressant !
&lt;/p&gt;
&lt;p&gt;
 Nous allons ici créer les pages de «
 &lt;em&gt;
  listings
 &lt;/em&gt;
 ». Ce sont les pages qui liste les articles correspondants à une catégorie, un auteur ou un tag. Il existe plein de manières de présenter ces différentes pages (comme par exemple faire un nuage de mots pour une page qui recense tous les tags), mais nous nous contenterons de faire simple ici et toutes les pages auront donc la même présentation, des listes !
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#les-pages-de-listes"&gt;
    Les pages de listes
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#les-pages-de-haut-niveau"&gt;
     Les pages de haut niveau
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#les-pages-de-listes-darticles"&gt;
     Les pages de listes d’articles
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#les-listes-de-«haut-niveau»"&gt;
    Les listes de « haut niveau »
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#modèle-générale"&gt;
     Modèle générale
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#un-peu-doptimisation"&gt;
     Un peu d’optimisation
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#les-listes-darticles"&gt;
    Les listes d’articles
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#factorisation"&gt;
     Factorisation
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#annexe-la-pagination"&gt;
    Annexe : La pagination
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#lobjet-page"&gt;
     L’objet Page
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#lobjet-paginator"&gt;
     L’objet Paginator
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#mettre-tout-cela-en-œuvre"&gt;
     Mettre tout cela en œuvre
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#améliorer-le-paginateur"&gt;
     Améliorer le paginateur
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="les-pages-de-listes"&gt;
 &lt;a aria-hidden="true" href="#les-pages-de-listes"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les pages de listes
&lt;/h3&gt;
&lt;p&gt;
 Comme dit dans l’intro, plusieurs pages de "listings" existent et on peut les classer en deux catégories :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Les pages de "Haut niveau" qui listent les auteurs, les catégories ou encore les tags ;
 &lt;/li&gt;
 &lt;li&gt;
  Les pages de "listes d’articles" qui vont lister tout les articles d’une page de haut niveau, par exemple tout les articles écrits par Eskimon.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="les-pages-de-haut-niveau"&gt;
 &lt;a aria-hidden="true" href="#les-pages-de-haut-niveau"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les pages de haut niveau
&lt;/h4&gt;
&lt;p&gt;
 On trouve 3 pages de haut niveau, que nous avons déjà très brièvement vu dans l’arborescence des fichiers du thème. Il s’agit des fichiers suivants :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   authors.html
  &lt;/code&gt;
  : Qui liste tous les auteurs ayant au moins écrit un article sur votre site ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   categories.html
  &lt;/code&gt;
  : Qui liste toutes les catégories contenant au moins un article ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   tags.html
  &lt;/code&gt;
  : Qui liste tous les tags contenant au moins un article.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Vous remarquez que ces noms de fichiers sont en anglais, afin de bien illustrer qu’ils listent les éléments eux mêmes (les tag
 &lt;strong&gt;
  s
 &lt;/strong&gt;
 ) par exemple) et non pas le contenu d’un élément (les articles
 &lt;strong&gt;
  d’un
 &lt;/strong&gt;
 tag). En effet, ces derniers sont gérés par les pages de listes d’articles.
&lt;/p&gt;
&lt;h4 id="les-pages-de-listes-darticles"&gt;
 &lt;a aria-hidden="true" href="#les-pages-de-listes-darticles"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les pages de listes d’articles
&lt;/h4&gt;
&lt;p&gt;
 Et c’est avec cette superbe transition que je vais vous présenter les pages qui vont servir à donner le détail du contenu d’une page de haut niveau. Par exemple, tous les articles écrits par Eskimon et personne d’autres.
&lt;/p&gt;
&lt;p&gt;
 Ces pages ont le même nom que leur pendant de haut-niveau, mais au singulier. Pratique non ? Logiquement, on trouve donc :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   author.html
  &lt;/code&gt;
  : Qui liste tous les articles d’un auteur ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   category.html
  &lt;/code&gt;
  : Qui liste tous les articles d’une catégorie ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   tag.html
  &lt;/code&gt;
  : Qui liste tous les articles d’un tag.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Maintenant que les présentations sont faites, voyons comment nous allons construire tout cela.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ces listes ne sont pas immuables. En effet, certains
   &lt;em&gt;
    plugins
   &lt;/em&gt;
   (comme le fameux
   &lt;em&gt;
    subcategories
   &lt;/em&gt;
   ) peuvent rajouter de nouveaux fichiers de listings qu’il faudra alors créer.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="les-listes-de-«haut-niveau»"&gt;
 &lt;a aria-hidden="true" href="#les-listes-de-«haut-niveau»"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les listes de « haut niveau »
&lt;/h3&gt;
&lt;p&gt;
 Nous allons dès à présent voir le principe de réalisation de nos différentes pages. Là encore nous allons le faire en deux étapes, les pages de haut-niveau et celle listant des articles. Deux astuces vont être utiles ici, la généralisation de codes et l’utilisation de la balise
 &lt;code&gt;
  include
 &lt;/code&gt;
 . Commençons par les pages de haut niveau.
&lt;/p&gt;
&lt;h4 id="modèle-générale"&gt;
 &lt;a aria-hidden="true" href="#modèle-générale"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Modèle générale
&lt;/h4&gt;
&lt;p&gt;
 Prenons comme exemple la page listant les catégories et partons du principe que nos articles se divisent pour le moment en deux catégories : "Cookies" et "Gateaux". L’objectif de la page
 &lt;code&gt;
  categories.html
 &lt;/code&gt;
 sera donc de nous lister ces deux catégories, avec en bonus le nombre d’articles que chacune possèdent.
&lt;/p&gt;
&lt;p&gt;
 Lorsque l’on va faire un tour sur la
 &lt;a href="http://docs.getpelican.com/en/stable/themes.html#common-variables"&gt;
  documentation de création de thème de Pelican
 &lt;/a&gt;
 , on voit que toutes les pages recoivent les variables contenant tout les auteurs (
 &lt;code&gt;
  authors
 &lt;/code&gt;
 ), les catégories (
 &lt;code&gt;
  categories
 &lt;/code&gt;
 ) ou encore les (
 &lt;code&gt;
  tags
 &lt;/code&gt;
 ). Il nous faut donc utiliser la bonne sur la bonne page. Ensuite, une simple boucle
 &lt;code&gt;
  for
 &lt;/code&gt;
 permet de générer la liste et hop, le tour est joué !
&lt;/p&gt;
&lt;p&gt;
 Par exemple, voilà ce que l’on pourrait faire :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;{% extends "base.html" %}


{% block content %}

&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;h1&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"list-title"&lt;/span&gt;&amp;gt;&lt;/span&gt;Liste des catégories&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;
{% for cat, articles in categories|sort %}
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;section&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"list-element"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;h2&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"list-element-title"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ cat.url }}"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ cat }}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"list-element-count"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        ({{ articles|count }} article{% if articles|length &amp;gt; 1 %}s{% endif %})
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;
{% endfor %}

{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 C’est somme toute assez simple. Tout d’abord, on "étend" le squelette
 &lt;code&gt;
  base.html
 &lt;/code&gt;
 , sans quoi on n’aurait pas la base même de la page. Ensuite, on personnalise le
 &lt;em&gt;
  block
 &lt;/em&gt;
 "content". Dans ce dernier, on placera tout d’abord un titre ("Liste des catégories") puis ensuite, une boucle
 &lt;code&gt;
  for
 &lt;/code&gt;
 va itérer sur la variable
 &lt;code&gt;
  categories
 &lt;/code&gt;
 pour en resortir à chaque tour une catégorie (variable
 &lt;code&gt;
  cat
 &lt;/code&gt;
 ) et la liste d’articles contenu dans cette dernière (variables
 &lt;code&gt;
  articles
 &lt;/code&gt;
 ). Enfin, on construit une section dans la boucle for pour placer tout ses éléments.
&lt;/p&gt;
&lt;p&gt;
 Voici un exemple de rendu que l’on obtient en visitant la page
 &lt;a href="http://localhost:8000"&gt;
  http://localhost:8000
 &lt;/a&gt;
 (rappel, il faut que le serveur de développement soit en marche) :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Rendu de la liste des catégories" src="./images/uploaded/tuto-pelican-303-page-de-«-listing-»/rendu-de-la-liste-des-categories.png"/&gt;
 &lt;figcaption&gt;
  Rendu de la liste des catégories
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 (CSS ci-dessous)
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-css"&gt;&lt;span class="hljs-selector-class"&gt;.content&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;flex-grow&lt;/span&gt;: &lt;span class="hljs-number"&gt;1&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;margin-left&lt;/span&gt;: &lt;span class="hljs-number"&gt;20px&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;border&lt;/span&gt;: &lt;span class="hljs-number"&gt;1px&lt;/span&gt; solid &lt;span class="hljs-built_in"&gt;rgba&lt;/span&gt;(0,0,0,.125);
  &lt;span class="hljs-attribute"&gt;border-radius&lt;/span&gt;: .&lt;span class="hljs-number"&gt;25rem&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;padding&lt;/span&gt;: &lt;span class="hljs-number"&gt;20px&lt;/span&gt;;
}

&lt;span class="hljs-selector-tag"&gt;h1&lt;/span&gt;, &lt;span class="hljs-selector-tag"&gt;h2&lt;/span&gt;, &lt;span class="hljs-selector-tag"&gt;h3&lt;/span&gt;, &lt;span class="hljs-selector-tag"&gt;h4&lt;/span&gt;, &lt;span class="hljs-selector-tag"&gt;h5&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;font-weight&lt;/span&gt;: &lt;span class="hljs-number"&gt;500&lt;/span&gt;;
}

&lt;span class="hljs-selector-class"&gt;.list-title&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;margin-top&lt;/span&gt;: &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
}

&lt;span class="hljs-selector-class"&gt;.list-element&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;padding&lt;/span&gt;: &lt;span class="hljs-number"&gt;5px&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;border-left&lt;/span&gt;: &lt;span class="hljs-number"&gt;1px&lt;/span&gt; solid &lt;span class="hljs-built_in"&gt;rgba&lt;/span&gt;(0,0,0,.375);
  &lt;span class="hljs-attribute"&gt;border-radius&lt;/span&gt;: .&lt;span class="hljs-number"&gt;25rem&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;margin&lt;/span&gt;: &lt;span class="hljs-number"&gt;10px&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;padding-left&lt;/span&gt;: &lt;span class="hljs-number"&gt;10px&lt;/span&gt;;
}

&lt;span class="hljs-selector-class"&gt;.list-element-title&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;margin-top&lt;/span&gt;: &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;margin-bottom&lt;/span&gt;: &lt;span class="hljs-number"&gt;10px&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Avez-vous remarqué l’utilisation de la structure
   &lt;code&gt;
    {% if ... %} ... {% endif %}
   &lt;/code&gt;
   pour mettre au pluriel le mot
   &lt;em&gt;
    article
   &lt;/em&gt;
   ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="un-peu-doptimisation"&gt;
 &lt;a aria-hidden="true" href="#un-peu-doptimisation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un peu d’optimisation
&lt;/h4&gt;
&lt;p&gt;
 Bon c’est chouette, on a un truc qui tourne et donne un rendu. Maintenant il suffit de copier/coller ça pour les tags et les auteurs, modifier le titre et en avant Guingamp n’est ce pas ?!
&lt;/p&gt;
&lt;p&gt;
 &lt;img alt=":waw:" class="smiley" src="./static/smileys/waw.png"/&gt;
&lt;/p&gt;
&lt;p&gt;
 Mauvais réflexe ! Le copier-coller n’est pas toujours la solution ! Imaginons nous faisons une modification sur le nom d’une classe par exemple, eh bien il ne faudrait surtout pas oublier de la refaire dans les autres fichiers, sinon on aurait un site qui serait propre par endroit, mais avec des vieux morceaux à d’autres !
&lt;/p&gt;
&lt;p&gt;
 Bon ok je chipote un peu pour 3 fichiers, mais quand même, pour le principe (et pour l’exercice) on va faire en sorte de rendre notre code le plus générique possible. Ainsi, en donnant un bon gros coup de hache dedans, on va se retrouver avec ça :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;{% extends "base.html" %}

{% block content %}
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;h1&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"list-title"&lt;/span&gt;&amp;gt;&lt;/span&gt;Liste des catégories&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;
{% set _object = categories %}
{% include 'parts/high-level-list.part.html' %}
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Léger non ? Que s’est-il passé ?
&lt;/p&gt;
&lt;p&gt;
 Tout d’abord, on a gardé le titre du contenu, puisque ce dernier ne peut pas être deviné. Ensuite, on crée une variable avec le mot-clé
 &lt;code&gt;
  set
 &lt;/code&gt;
 et la syntaxe
 &lt;code&gt;
  {% set ma_variable = ma_valeur %}
 &lt;/code&gt;
 . Ici la variable s’appellera
 &lt;code&gt;
  _object
 &lt;/code&gt;
 et aura pour valeur la variable globales de Pelican
 &lt;code&gt;
  categories
 &lt;/code&gt;
 (l’underscore devant le nom servant par convention à symboliser une variable privée dans de nombreux langages).
&lt;/p&gt;
&lt;p&gt;
 Ensuite, on insère un fragment de code situé dans le dossier
 &lt;code&gt;
  parts
 &lt;/code&gt;
 et se nommant
 &lt;code&gt;
  high-level-list.part.html
 &lt;/code&gt;
 . C’est ce dernier qui ira construire notre liste de catégories (en fait quelque soit la liste dans
 &lt;code&gt;
  _object
 &lt;/code&gt;
 ) comme précédemment, seule la variable utilisée change.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;{% for obj, articles in _object|sort %}
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;section&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"list-element"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;h2&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"list-element-title"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ obj.url }}"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ obj }}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"list-element-count"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        ({{ articles|count }} article{% if articles|length &amp;gt; 1 %}s{% endif %})
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous cernez la flexibilité du truc ? Maintenant pour les pages
 &lt;code&gt;
  tags.html
 &lt;/code&gt;
 et
 &lt;code&gt;
  authors.html
 &lt;/code&gt;
 il y a vraiment un minimum de choses à reprendre et modifier ! On gagne du temps et si jamais on veut bidouiller la liste on a un seul fichier à modifier.
&lt;/p&gt;
&lt;p&gt;
 Par exemple, pour la liste des auteurs, dans
 &lt;code&gt;
  authors.html
 &lt;/code&gt;
 on aura :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;{% extends "base.html" %}


{% block content %}
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;h1&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"list-title"&lt;/span&gt;&amp;gt;&lt;/span&gt;Liste des auteurs&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;
{% set _object = authors %}
{% include 'parts/high-level-list.part.html' %}
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 On a juste eu besoin de remplacer le titre et la variable à utiliser et tout le reste s’est fait auto-magiquement !
&lt;/p&gt;
&lt;p&gt;
 Je vous laisse faire la page
 &lt;code&gt;
  tags.html
 &lt;/code&gt;
 , ça ne devrait pas vous poser trop de soucis !
&lt;/p&gt;
&lt;p&gt;
 Pour visiter ces trois pages et en voir le rendu, rendez-vous aux adresses suivantes :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   authors.html
  &lt;/code&gt;
  :
  &lt;a href="http://localhost:8000/authors"&gt;
   http://localhost:8000/authors
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   categories.html
  &lt;/code&gt;
  :
  &lt;a href="http://localhost:8000/categories"&gt;
   http://localhost:8000/categories
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   tags.html
  &lt;/code&gt;
  :
  &lt;a href="http://localhost:8000/tags"&gt;
   http://localhost:8000/tags
  &lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Bien entendu cette astuce de factorisation marche bien si vous voulez avoir un rendu homogène sur ces 3 pages. En revanche, si vous souhaitez faire un style différent à chaque fois dans ce cas il n’y a évidemment pas d’astuce particulière, il faudra personnaliser le template idoine de la bonne façon selon vos rêves et désirs !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="les-listes-darticles"&gt;
 &lt;a aria-hidden="true" href="#les-listes-darticles"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les listes d’articles
&lt;/h3&gt;
&lt;p&gt;
 Il ne nous reste plus qu’à faire les listes d’articles et nous aurons fait le tour de ce type de page !
&lt;/p&gt;
&lt;p&gt;
 Si vous avez bien compris la section précédente, alors celle-ci sera du gâteau
 &lt;img alt=":lol:" class="smiley" src="./static/smileys/rire.gif"/&gt;
 ! À vrai dire vous pourriez presque déjà la faire sans moi, il suffit juste de trouver quelles variables utiliser pour générer la liste.
&lt;/p&gt;
&lt;p&gt;
 Comme vu précédemment, les listes d’articles sont les détails des listes de haut niveau. Ainsi, on va là encore trouver trois pages à créer / éditer :
 &lt;code&gt;
  author.html
 &lt;/code&gt;
 ,
 &lt;code&gt;
  category.html
 &lt;/code&gt;
 et
 &lt;code&gt;
  tag.html
 &lt;/code&gt;
 . Comme l’explique
 &lt;a href="http://docs.getpelican.com/en/stable/themes.html#category-html"&gt;
  la documentation
 &lt;/a&gt;
 , chacune de ses pages proposes une variable correspondante au contenu de haut niveau en cours d’affichage, donc respectivement
 &lt;code&gt;
  author
 &lt;/code&gt;
 ,
 &lt;code&gt;
  category
 &lt;/code&gt;
 et
 &lt;code&gt;
  tag
 &lt;/code&gt;
 . On y trouvera aussi une variable
 &lt;code&gt;
  articles
 &lt;/code&gt;
 qui contiendra les articles de la page étudiée.
&lt;/p&gt;
&lt;p&gt;
 Ainsi, avec toutes ses informations on peut faire un premier jet de réalisation similaire à la précédente. Cette fois-ci nous afficherons un peu plus d’informations, en effet les articles sont riches en métadonnées, profitons-en pour aider le lecteur à choisir un contenu qui lui plaît ! Voici pour une page présentant une catégorie. Je pense qu’avec tout ce que nous avons vu jusqu’à présent, ce code ne devrait pas vous poser trop de souci
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 .
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;{% extends "base.html" %}


{% block content %}
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;h1&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"list-title"&lt;/span&gt;&amp;gt;&lt;/span&gt;Article de la catégorie "{{ category }}"&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;

{% for article in articles %}
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;section&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"list-element"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;h2&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"list-element-title"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ article.url }}"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ article.title }}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"list-element-content"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;em&lt;/span&gt;&amp;gt;&lt;/span&gt;Écrit par &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ article.author.url }}"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ article.author }}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt; le {{ article.locale_date }}.&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;em&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
            {{ article.summary }}
        &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;
{% endfor %}

{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si vous souhaitez utiliser une liste d’articles triés par date et non pas par titre, vous pouvez utiliser la variable
   &lt;code&gt;
    dates
   &lt;/code&gt;
   au lieu de
   &lt;code&gt;
    articles
   &lt;/code&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;figure&gt;
 &lt;img alt="Rendu d'une liste d'articles" src="./images/uploaded/tuto-pelican-303-page-de-«-listing-»/rendu-dune-liste-darticles.png"/&gt;
 &lt;figcaption&gt;
  Rendu d'une liste d'articles
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Avez-vous remarqué que les variables pour parcourir tout les contenus sont
   &lt;code&gt;
    articles
   &lt;/code&gt;
   (au pluriel, contenant la liste des articles de cette catégorie) et
   &lt;code&gt;
    article
   &lt;/code&gt;
   (au singulier, l’article actuellement étudié à chaque tour dans la boucle
   &lt;code&gt;
    for
   &lt;/code&gt;
   ). C’est une convention d’écriture assez habituelle, alors n’ayez pas peur de l’utiliser :
   &lt;code&gt;
    for singulier in pluriel
   &lt;/code&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="factorisation"&gt;
 &lt;a aria-hidden="true" href="#factorisation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Factorisation
&lt;/h4&gt;
&lt;p&gt;
 Comme pour les listes de haut-niveau, là encore nous pouvons déplacer une bonne partie du code dans un fichier
 &lt;code&gt;
  part
 &lt;/code&gt;
 et ainsi réutiliser sans peine le code pour toutes nos listes d’articles. Voici ma version allégée, le code ne changeant pas énormément et ne voulant pas répéter ce que vous connaissez déjà je vous laisse l’analyser vous-même. Aussi, il ne faut pas oublier de reproduire ce schéma pour les pages
 &lt;code&gt;
  tag.html
 &lt;/code&gt;
 et
 &lt;code&gt;
  author.html
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;{% extends "base.html" %}


{% block content %}

&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;h1&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"list-title"&lt;/span&gt;&amp;gt;&lt;/span&gt;Article de la catégorie "{{ category }}"&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;

{% include 'parts/articles-list.part.html' %}

{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;{% for article in articles %}
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;section&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"list-element"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;h2&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"list-element-title"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ article.url }}"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ article.title }}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;h2&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"list-element-content"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;em&lt;/span&gt;&amp;gt;&lt;/span&gt;Écrit par &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ article.author.url }}"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ article.author }}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt; le {{ article.locale_date }}.&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;em&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
            {{ article.summary }}
        &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;
{% endfor %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id="annexe-la-pagination"&gt;
 &lt;a aria-hidden="true" href="#annexe-la-pagination"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Annexe : La pagination
&lt;/h3&gt;
&lt;p&gt;
 Qui dit liste, dit souvent pages. En effet, notre exemple ici ne paie pas de mine, mais on est pas à l’abri qu’un jour on ait beaucoup d’articles. On risquerait alors de se retrouver avec une liste longue comme le bras, avec une page mettant du temps à charger et pénible à naviguer.
&lt;/p&gt;
&lt;p&gt;
 Une solution : La pagination.
&lt;/p&gt;
&lt;p&gt;
 J’ai brièvement évoqué cet aspect dans le début du tutoriel, il est temps de le mettre en pratique.
&lt;/p&gt;
&lt;p&gt;
 Tout d’abord, il faut repérer le paramètre
 &lt;code&gt;
  DEFAULT_PAGINATION
 &lt;/code&gt;
 dans le fichier
 &lt;code&gt;
  pelicanconf.py
 &lt;/code&gt;
 . La valeur de ce dernier va servir à régler combien d’articles par page seront affichés. Une valeur de 5 par exemple permettera d’afficher 5 articles sur chaque page. Donc si on a 20 articles dans une catégorie, l’affichage du contenu de cette dernière se fera sur 4 pages distinctes.
&lt;/p&gt;
&lt;p&gt;
 Puisque nous parlons de l’exemple des catégories, retournons voir
 &lt;a href="http://docs.getpelican.com/en/stable/themes.html#category-html"&gt;
  la documentation de ces dernières
 &lt;/a&gt;
 . Tout d’abord, on apprend que si plusieurs pages sont nécessaires pour afficher la liste des articles, alors elles seront formatées selon la convention
 &lt;code&gt;
  category/{category_name}{number}.html
 &lt;/code&gt;
 . La page 1 contiendra les articles 1 à 5, la n°2 les 6 à 10 etc.
&lt;/p&gt;
&lt;p&gt;
 Ensuite, le tableau nous affiche le nom et l’utilité des variables supplémentaires spécifiques à cette page. Cinq attirent notre attention :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   articles_paginator
  &lt;/code&gt;
  : Un objet de type
  &lt;em&gt;
   paginator
  &lt;/em&gt;
  , utile pour gérer la pagination ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   articles_page
  &lt;/code&gt;
  : Un objet de type
  &lt;em&gt;
   Page
  &lt;/em&gt;
  représentant la page courante. Je reviens tout de suite là dessus ! ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   articles_previous_page
  &lt;/code&gt;
  : Un objet de type
  &lt;em&gt;
   Page
  &lt;/em&gt;
  représentant la page précédente ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   articles_next_page
  &lt;/code&gt;
  : Un objet de type
  &lt;em&gt;
   Page
  &lt;/em&gt;
  représentant la page suivante ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   page_name
  &lt;/code&gt;
  : Nous servira à contruire les liens pour accéder aux différentes pages. Ce dernier représente le lien de "base" de la page (par exemple
  &lt;code&gt;
   category/cookie
  &lt;/code&gt;
  pour n’importe quel numéro de page de la catégorie cookie).
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="lobjet-page"&gt;
 &lt;a aria-hidden="true" href="#lobjet-page"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’objet
 &lt;code&gt;
  Page
 &lt;/code&gt;
&lt;/h4&gt;
&lt;p&gt;
 Ce type de variable transporte plein d’informations intéressantes, notamment pour créer notre joli pagination. Je ne vais pas rentrer dans le détail de tout ce qu’il propose, cependant sachez que son
 &lt;em&gt;
  code-source-pas-si-compliqué
 &lt;/em&gt;
 est disponible ici :
 &lt;a href="https://github.com/getpelican/pelican/blob/master/pelican/paginator.py"&gt;
  https://github.com/getpelican/pelican/blob/master/pelican/paginator.py
 &lt;/a&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Le premier élément nous qui nous intéresse sera la variable
 &lt;code&gt;
  object_list
 &lt;/code&gt;
 de cet objet. Cette dernière nous met à disposition la liste des articles contenus dans uniquement cette page (donc au plus 5 articles si la pagination est paramétré à 5 articles par page). Via les variables mentionnées précédemment, on utilisera
 &lt;code&gt;
  articles_page.object_list
 &lt;/code&gt;
 pour les articles de la page courante.
&lt;/p&gt;
&lt;p&gt;
 Un autre élément est l’accès aux fonctions
 &lt;code&gt;
  has_previous
 &lt;/code&gt;
 et
 &lt;code&gt;
  has_next
 &lt;/code&gt;
 . Ces deux fonctions renvoient un booléen si il y a effectivement une page précédente ou suivante par rapport à la courante. On pourra alors utiliser
 &lt;code&gt;
  previous_page_number
 &lt;/code&gt;
 et
 &lt;code&gt;
  next_page_number
 &lt;/code&gt;
 pour avoir le numéro de la page précédente et celui de la suivante.
&lt;/p&gt;
&lt;p&gt;
 Enfin, on peut aussi obtenir l’url de la page via la variable
 &lt;code&gt;
  url
 &lt;/code&gt;
 (
 &lt;code&gt;
  category/cookie2.html
 &lt;/code&gt;
 pour la deuxième page de la catégorie
 &lt;em&gt;
  cookie
 &lt;/em&gt;
 par exemple).
&lt;/p&gt;
&lt;h4 id="lobjet-paginator"&gt;
 &lt;a aria-hidden="true" href="#lobjet-paginator"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’objet
 &lt;code&gt;
  Paginator
 &lt;/code&gt;
&lt;/h4&gt;
&lt;p&gt;
 Cet objet est lui aussi assez simple à utiliser. Son code se trouve au même endroit que celui de
 &lt;code&gt;
  Page
 &lt;/code&gt;
 . Seules certaines variables contenues dans
 &lt;code&gt;
  Paginator
 &lt;/code&gt;
 vont vraiment nous intéresser :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   count
  &lt;/code&gt;
  : Le nombre total d’articles dans cette pagination (par exemple 20 pour 20 articles, avec 5 articles par page) ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   num_pages
  &lt;/code&gt;
  : Le nombre total de pages composant la pagination (par exemple '4' pour 20 articles, avec 5 articles par page) ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   page_range
  &lt;/code&gt;
  : Un générateur allant de 1 au nombre de pages nécessaire pour tout parcourir (par exemple [1..4] pour afficher 20 articles, avec 5 articles par page).
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="mettre-tout-cela-en-œuvre"&gt;
 &lt;a aria-hidden="true" href="#mettre-tout-cela-en-œuvre"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Mettre tout cela en œuvre
&lt;/h4&gt;
&lt;p&gt;
 Maintenant que nous savons tout cela, il va falloir modifier notre code pour afficher la liste d’articles de la meilleure manière qu’il soit. Et bonne nouvelle, il ne faudra le faire qu’à un seul endroit puisque nous avons factorisé tout le code d’affichages des listes d’articles dans le fichier
 &lt;code&gt;
  articles-list.part.html
 &lt;/code&gt;
 !
&lt;/p&gt;
&lt;p&gt;
 Pour commencer, on ne va afficher que les articles concernant la page courante. Pour cela on va remplacer le for :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;{% for article in articles %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 devient
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;{% for article in articles_page.object_list %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Donc au lieu d’afficher 20 articles on en affiche plus que 5.
&lt;/p&gt;
&lt;p&gt;
 Maintenant, il va falloir créer l’affichage qui nous permettra de sélectionner la page que nous souhaitons afficher.
&lt;/p&gt;
&lt;p&gt;
 Pour cela, on va utiliser le générateur
 &lt;code&gt;
  page_range
 &lt;/code&gt;
 de
 &lt;code&gt;
  articles_paginator
 &lt;/code&gt;
 dans un for pour créer une liste de toutes les pages (en dehors de la boucle
 &lt;code&gt;
  for
 &lt;/code&gt;
 de la liste d’articles) :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;{% if articles_paginator.num_pages &amp;gt; 1 %}
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"paginator"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    {% for cpt in articles_paginator.page_range %}
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ page_name }}{{ cpt if cpt &amp;gt; 1 else '' }}.html"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ cpt }}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
    {% endfor %}
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Comme vous pouvez le remarquer, j’ai ajouté un
 &lt;code&gt;
  if
 &lt;/code&gt;
 sur le nombre de pages. En effet, inutile de construire le sélecteur de pages s’il y en a qu’une seule !
&lt;/p&gt;
&lt;p&gt;
 On trouve aussi une condition pour construire le lien des pages. En effet, la toute première page ne se nomme pas
 &lt;code&gt;
  categorie/cookie1.html
 &lt;/code&gt;
 mais juste
 &lt;code&gt;
  category/cookie.html
 &lt;/code&gt;
 (sans le 1 final).
&lt;/p&gt;
&lt;p&gt;
 Avec un peu de CSS, voici ce que l’on peut déjà obtenir :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Paginateur simple" src="./images/uploaded/tuto-pelican-303-page-de-«-listing-»/paginateur-simple.png"/&gt;
 &lt;figcaption&gt;
  Paginateur simple
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-css"&gt;&lt;span class="hljs-selector-class"&gt;.paginator&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;margin&lt;/span&gt;: &lt;span class="hljs-number"&gt;10px&lt;/span&gt;;
}

&lt;span class="hljs-selector-class"&gt;.paginator&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;a&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;display&lt;/span&gt;: inline-block;
  &lt;span class="hljs-attribute"&gt;padding&lt;/span&gt;: &lt;span class="hljs-number"&gt;10px&lt;/span&gt; &lt;span class="hljs-number"&gt;15px&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;margin-left&lt;/span&gt;: -&lt;span class="hljs-number"&gt;6px&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#007bff&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;background-color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#fff&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;border&lt;/span&gt;: &lt;span class="hljs-number"&gt;1px&lt;/span&gt; solid &lt;span class="hljs-number"&gt;#dee2e6&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;text-decoration&lt;/span&gt;: none;
}

&lt;span class="hljs-selector-class"&gt;.paginator&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;a&lt;/span&gt;&lt;span class="hljs-selector-pseudo"&gt;:hover&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#0056b3&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;text-decoration&lt;/span&gt;: none;
  &lt;span class="hljs-attribute"&gt;background-color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#e9ecef&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;border-color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#dee2e6&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 C’est un bon début, mais on peut faire un peu mieux…
&lt;/p&gt;
&lt;h4 id="améliorer-le-paginateur"&gt;
 &lt;a aria-hidden="true" href="#améliorer-le-paginateur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Améliorer le paginateur
&lt;/h4&gt;
&lt;p&gt;
 En utilisant à bon escient les différentes variables, on peut obtenir un résultat fort sympathique. Voici par exemple ce qui est possible :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Zoom sur le paginateur" src="./images/uploaded/tuto-pelican-303-page-de-«-listing-»/zoom-sur-le-paginateur.png"/&gt;
 &lt;figcaption&gt;
  Zoom sur le paginateur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 On voit ainsi apparaitre des chevrons à droite et gauche permettant de naviguer en avant/arrière d’une page à la fois, et aussi un indicateur visuel permettant de savoir sur quelle page nous nous trouvons. Les chevrons ainsi que la page courante sont rendus non cliquables dans les cas où c’est utile (si nous sommes sur la première ou dernière page par exemple).
&lt;/p&gt;
&lt;p&gt;
 Pour obtenir ce résultat, voici le code utilisé :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;{% if articles_paginator.num_pages &amp;gt; 1 %}
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"paginator"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    {% if articles_previous_page %}
    {% set num = articles_page.previous_page_number() %}
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ page_name }}{{ num if num &amp;gt; 1 else '' }}.html"&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;amp;lt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
    {% else %}
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;amp;lt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;
    {% endif %}

    {% for cpt in articles_paginator.page_range %}
        {% if cpt == articles_page.number %}
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;span&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"active"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ cpt }}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;
        {% else %}
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"{{ SITEURL }}/{{ page_name }}{{ cpt if cpt &amp;gt; 1 else '' }}.html"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ cpt }}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
        {% endif %}
    {% endfor %}

    {% if articles_next_page %}
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ page_name }}{{ articles_page.next_page_number() }}.html"&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;amp;gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
    {% else %}
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;amp;gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;
    {% endif %}
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
{% endif %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Pour construire ce beau paginateur, on fait appel à plusieurs conditions
 &lt;code&gt;
  if
 &lt;/code&gt;
 . La première et dernière condition servent toutes deux à afficher les chevrons. Ils sont soit affichés dans un span (si nous sommes à la première/dernière page), soit dans un lien pour se rendre à la page précédente/suivante lorsqu’elle existe (il faut là encore ruser pour créer l’adresse de la toute première page).
&lt;/p&gt;
&lt;p&gt;
 Au milieu, on retrouve notre boucle
 &lt;code&gt;
  for
 &lt;/code&gt;
 . Son contenu a cependant été un peu amélioré pour pouvoir afficher un span au lieu d’un lien lorsque il faut afficher le numéro de la page courante.
&lt;/p&gt;
&lt;p&gt;
 Et voici le CSS mise à jour :
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-css"&gt;&lt;span class="hljs-selector-class"&gt;.paginator&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;margin&lt;/span&gt;: &lt;span class="hljs-number"&gt;10px&lt;/span&gt;;
}

&lt;span class="hljs-selector-class"&gt;.paginator&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;a&lt;/span&gt;, &lt;span class="hljs-selector-class"&gt;.paginator&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;span&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;display&lt;/span&gt;: inline-block;
  &lt;span class="hljs-attribute"&gt;padding&lt;/span&gt;: &lt;span class="hljs-number"&gt;10px&lt;/span&gt; &lt;span class="hljs-number"&gt;15px&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;margin-left&lt;/span&gt;: -&lt;span class="hljs-number"&gt;6px&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#007bff&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;background-color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#fff&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;border&lt;/span&gt;: &lt;span class="hljs-number"&gt;1px&lt;/span&gt; solid &lt;span class="hljs-number"&gt;#dee2e6&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;text-decoration&lt;/span&gt;: none;
}

&lt;span class="hljs-selector-class"&gt;.paginator&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;a&lt;/span&gt;&lt;span class="hljs-selector-pseudo"&gt;:hover&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#0056b3&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;text-decoration&lt;/span&gt;: none;
  &lt;span class="hljs-attribute"&gt;background-color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#e9ecef&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;border-color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#dee2e6&lt;/span&gt;;
}

&lt;span class="hljs-selector-class"&gt;.paginator&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;span&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;color&lt;/span&gt;: &lt;span class="hljs-built_in"&gt;rgba&lt;/span&gt;(0,0,0,.3);
}

&lt;span class="hljs-selector-class"&gt;.paginator&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;span&lt;/span&gt;&lt;span class="hljs-selector-class"&gt;.active&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#0056b3&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;background-color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#e9ecef&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Je reconnais que ce code est un peu plus compliqué, mais finalement, avec un peu de réflexion et pas mal d’essais on finit par obtenir des trucs sympas non
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 ?
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Paginateur amélioré" src="./images/uploaded/tuto-pelican-303-page-de-«-listing-»/paginateur-ameliore.png"/&gt;
 &lt;figcaption&gt;
  Paginateur amélioré
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Et voilà encore un beau morceau d’abattu, avec quelques nouveautés comme les boucle
 &lt;code&gt;
  for
 &lt;/code&gt;
 mais surtout l’occasion de (re)travailler tout ce qui avait pu être vu pendant le chapitre précédent.
&lt;/p&gt;
&lt;p&gt;
 Maintenant nous pouvons passer au cœur du site en créant le design d’un article lui-même.
&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="tuto"></category></entry><entry><title>Rendu d'un article</title><link href="https://eskimon.fr/tuto-pelican-304-rendu-dun-article" rel="alternate"></link><published>2018-10-27T09:00:00+02:00</published><updated>2018-10-27T09:00:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2018-10-27:/tuto-pelican-304-rendu-dun-article</id><summary type="html">&lt;p&gt;
 Nous y voila, une des dernières pages à créer, celle qui représentera un article !
&lt;/p&gt;
&lt;p&gt;
 Avec tout ce que nous avons vu, vous allez voir que c’est vraiment un jeu d’enfant !
&lt;/p&gt;
&lt;p&gt;
 Tout le code que nous allons écrire ici sera à mettre dans le fichier
 &lt;code&gt;
  article.html
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Voici ce …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Nous y voila, une des dernières pages à créer, celle qui représentera un article !
&lt;/p&gt;
&lt;p&gt;
 Avec tout ce que nous avons vu, vous allez voir que c’est vraiment un jeu d’enfant !
&lt;/p&gt;
&lt;p&gt;
 Tout le code que nous allons écrire ici sera à mettre dans le fichier
 &lt;code&gt;
  article.html
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Voici ce vers quoi nous allons tendre :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Rendu d'un article" src="/media/galleries/5008/fc96cf5d-2526-4696-95c6-0a5e95391404.png"/&gt;
 &lt;figcaption&gt;
  Rendu d'un article
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#principe"&gt;
    Principe
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#structure"&gt;
     Structure
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#ajout-de-données-dans-le-head-de-la-page"&gt;
     Ajout de données dans le &amp;lt;head&amp;gt; de la page
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#len-tête-de-notre-article"&gt;
   L’en-tête de notre article
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#le-corps-et-le-pied-de-larticle"&gt;
    Le corps et le pied de l’article
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#le-corps-de-larticle"&gt;
     Le corps de l’article
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#le-pied-de-page"&gt;
     Le pied de page
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#intégralité-de-la-page"&gt;
     Intégralité de la page
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#annexe-ajouter-une-section-de-commentaires-avec-disqus"&gt;
    Annexe : Ajouter une section de commentaires avec Disqus
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#créer-un-compte-disqus"&gt;
     Créer un compte Disqus
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#intégrer-disqus-aux-pages"&gt;
     Intégrer Disqus aux pages
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#afficher-un-compteur-de-commentaires"&gt;
     Afficher un compteur de commentaires
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="principe"&gt;
 &lt;a aria-hidden="true" href="#principe"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Principe
&lt;/h3&gt;
&lt;h4 id="structure"&gt;
 &lt;a aria-hidden="true" href="#structure"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Structure
&lt;/h4&gt;
&lt;p&gt;
 Afin de réaliser ce morceau de la page, nous allons diviser le travail en trois parties. Tout d’abord l’entête de l’article, qui sera dans une balise
 &lt;code&gt;
  &amp;lt;header&amp;gt;
 &lt;/code&gt;
 . Ensuite viendra le corps de l’article, puis enfin un pied de page dans une balise
 &lt;code&gt;
  &amp;lt;footer&amp;gt;
 &lt;/code&gt;
 . Le tout sera encapsulé dans une balise
 &lt;code&gt;
  &amp;lt;section&amp;gt;
 &lt;/code&gt;
 et viendra personnaliser le bloc
 &lt;code&gt;
  content
 &lt;/code&gt;
 . Le tout est basé sur le squelette habituel,
 &lt;code&gt;
  base.html
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Sur le principe on aura donc quelque chose comme ceci :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;{% extends "base.html" %}


{% block content %}
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;&amp;lt;!-- L’entête de l'article --&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;hr&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;&amp;lt;!-- Le contenu de l'article lui-même --&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;hr&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;&amp;lt;!-- Le pied de page de l'article --&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Bien entendu, ce n’est qu’une proposition parmi tant d’autres !
&lt;/p&gt;
&lt;h4 id="ajout-de-données-dans-le-head-de-la-page"&gt;
 &lt;a aria-hidden="true" href="#ajout-de-données-dans-le-head-de-la-page"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Ajout de données dans le
 &lt;code&gt;
  &amp;lt;head&amp;gt;
 &lt;/code&gt;
 de la page
&lt;/h4&gt;
&lt;p&gt;
 Nos articles ayant plein d’informations à faire passer, nous allons rajouter des choses dans la section
 &lt;code&gt;
  &amp;lt;head&amp;gt;
 &lt;/code&gt;
 de la page elle-même, comme par exemple une balise
 &lt;code&gt;
  &amp;lt;meta&amp;gt;
 &lt;/code&gt;
 avec le résumé de l’article ou encore avec les tags qui définissent ce dernier. Pour cela, on va simplement personnaliser le bloc
 &lt;code&gt;
  extra_head
 &lt;/code&gt;
 qui est justement prévu pour ça.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;{% block extra_head %}
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;link&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;'https://cdn.jsdelivr.net/npm/boxicons@1.5.1/css/boxicons.min.css'&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;'stylesheet'&lt;/span&gt;&amp;gt;&lt;/span&gt;
    
    {% if article.description %}
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"description"&lt;/span&gt; &lt;span class="hljs-attr"&gt;content&lt;/span&gt;=&lt;span class="hljs-string"&gt;"{{ article.summary }}"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    {% endif %}

    {% for tag in article.tags %}
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"tags"&lt;/span&gt; &lt;span class="hljs-attr"&gt;content&lt;/span&gt;=&lt;span class="hljs-string"&gt;"{{ tag }}"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    {% endfor %}
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Comme vous pouvez le voir, j’ai surtout ajouté trois choses.
&lt;/p&gt;
&lt;p&gt;
 Tout d’abord, j’importe le CSS de
 &lt;a href="https://boxicons.com/"&gt;
  boxicons
 &lt;/a&gt;
 , qui me permettra d’afficher des icônes assez simplement.
&lt;/p&gt;
&lt;p&gt;
 Ensuite, je crée une balise
 &lt;code&gt;
  &amp;lt;meta&amp;gt;
 &lt;/code&gt;
 &lt;code&gt;
  description
 &lt;/code&gt;
 , qui contiendra la variable
 &lt;code&gt;
  article.summary
 &lt;/code&gt;
 . Cela permet au moteur de recherche de savoir quoi afficher dans leur page de résultat en dessous du titre de votre article (le texte sous l’url sur cette image issue du moteur de recherche qwant).
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Description dans un moteur de recherche" src="./images/uploaded/tuto-pelican-304-rendu-dun-article/description-dans-un-moteur-de-recherche.png"/&gt;
 &lt;figcaption&gt;
  Description dans un moteur de recherche
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Enfin, j’ajoute autant de balises
 &lt;code&gt;
  &amp;lt;meta&amp;gt;
 &lt;/code&gt;
 &lt;code&gt;
  tag
 &lt;/code&gt;
 que nécessaire grâce à une boucle
 &lt;code&gt;
  for
 &lt;/code&gt;
 sur la variable
 &lt;code&gt;
  article.tags
 &lt;/code&gt;
 . Ceci est notamment fait pour optimiser le
 &lt;abbr title="Search Engine Optimization"&gt;
  SEO
 &lt;/abbr&gt;
 de notre article.
&lt;/p&gt;
&lt;p&gt;
 Une fois tout cela fait, attaquons l’article en lui-même !
&lt;/p&gt;
&lt;h3 id="len-tête-de-notre-article"&gt;
 &lt;a aria-hidden="true" href="#len-tête-de-notre-article"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’en-tête de notre article
&lt;/h3&gt;
&lt;p&gt;
 Pour commencer, nous allons composer l’en-tête de notre article qui servira à afficher un fil d’Ariane (pour voir (et accéder) facilement la catégorie de l’article), puis viendra le titre de l’article et quelques métadonnées qui le compose.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="En-tête article" src="./images/uploaded/tuto-pelican-304-rendu-dun-article/en-tete-article.png"/&gt;
 &lt;figcaption&gt;
  En-tête article
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 C’est relativement trivial à faire, en voici le code que je vous explique ensuite :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"breadcrumb"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ article.category.url }}"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ article.category}}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
        /
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ article.title}}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ article.title}}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"metadata"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
            {% for author in article.authors %}
            &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ author.url }}"&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"author"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ author }}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
            {% endfor %}
            &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;time&lt;/span&gt; &lt;span class="hljs-attr"&gt;datetime&lt;/span&gt;=&lt;span class="hljs-string"&gt;"{{ article.date.isoformat() }}"&lt;/span&gt; &lt;span class="hljs-attr"&gt;pubdate&lt;/span&gt;&amp;gt;&lt;/span&gt;
                le {{ article.locale_date }}
            &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;time&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
            {% for tag in article.tags %}
            &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"link-item"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ tag.url }}"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ tag }}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
            {% endfor %}
        &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Comme vous pouvez le constater, il n’y a rien de très compliqué ici. On fait appel aux différentes variables de
 &lt;code&gt;
  article
 &lt;/code&gt;
 pour composer les différentes éléments. Ensuite, via des boucles on peut afficher des listes d’éléments comme tout les auteurs ou tout les tags.
&lt;/p&gt;
&lt;p&gt;
 Voici le CSS utilisé (qui sera aussi repris pour d’autres morceaux de cette page) :
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-css"&gt;&lt;span class="hljs-selector-tag"&gt;section&lt;/span&gt;&lt;span class="hljs-selector-class"&gt;.article&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;header&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;a&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#007bff&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;text-decoration&lt;/span&gt;: none;
}

&lt;span class="hljs-selector-tag"&gt;section&lt;/span&gt;&lt;span class="hljs-selector-class"&gt;.article&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;header&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;h1&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;font-size&lt;/span&gt;: &lt;span class="hljs-number"&gt;40px&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;margin&lt;/span&gt;: &lt;span class="hljs-number"&gt;10px&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;text-align&lt;/span&gt;: center;
}

&lt;span class="hljs-selector-class"&gt;.metadata&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;display&lt;/span&gt;: flex;
  &lt;span class="hljs-attribute"&gt;align-items&lt;/span&gt;: center;
  &lt;span class="hljs-attribute"&gt;justify-content&lt;/span&gt;: space-between;
}

&lt;span class="hljs-selector-class"&gt;.metadata&lt;/span&gt; &lt;span class="hljs-selector-tag"&gt;p&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;display&lt;/span&gt;: inline-block;
}

&lt;span class="hljs-selector-class"&gt;.link-item&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;display&lt;/span&gt;: inline-block;
  &lt;span class="hljs-attribute"&gt;color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#007bff&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;border&lt;/span&gt;: solid &lt;span class="hljs-number"&gt;1px&lt;/span&gt; &lt;span class="hljs-number"&gt;#007bff&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;text-decoration&lt;/span&gt;: none;
  &lt;span class="hljs-attribute"&gt;border-radius&lt;/span&gt;: .&lt;span class="hljs-number"&gt;25rem&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;padding&lt;/span&gt;: &lt;span class="hljs-number"&gt;5px&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;margin&lt;/span&gt;: &lt;span class="hljs-number"&gt;0&lt;/span&gt; &lt;span class="hljs-number"&gt;5px&lt;/span&gt;;
}

&lt;span class="hljs-selector-class"&gt;.link-item&lt;/span&gt;&lt;span class="hljs-selector-pseudo"&gt;:hover&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#fff&lt;/span&gt;;
  &lt;span class="hljs-attribute"&gt;background-color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#007bff&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="le-corps-et-le-pied-de-larticle"&gt;
 &lt;a aria-hidden="true" href="#le-corps-et-le-pied-de-larticle"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le corps et le pied de l’article
&lt;/h3&gt;
&lt;p&gt;
 Ces deux morceaux aussi seront assez simple, voyons cela…
&lt;/p&gt;
&lt;h4 id="le-corps-de-larticle"&gt;
 &lt;a aria-hidden="true" href="#le-corps-de-larticle"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le corps de l’article
&lt;/h4&gt;
&lt;p&gt;
 Voici la partie qui représente tout le contenu de votre article et pourtant, ce sera la plus courte de ce tuto !
&lt;/p&gt;
&lt;p&gt;
 En effet, tout le corps de l’article se trouve dans la variable
 &lt;code&gt;
  article.content
 &lt;/code&gt;
 . Il nous faut donc juste l’afficher et hop, c’est réglé !
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-stylus"&gt;&amp;lt;&lt;span class="hljs-selector-tag"&gt;div&lt;/span&gt; class=&lt;span class="hljs-string"&gt;"article-content"&lt;/span&gt;&amp;gt;
    {{ &lt;span class="hljs-selector-tag"&gt;article&lt;/span&gt;&lt;span class="hljs-selector-class"&gt;.content&lt;/span&gt; }}
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Bien entendu, tout cela est personnalisable à grand coup de CSS !
&lt;/p&gt;
&lt;h4 id="le-pied-de-page"&gt;
 &lt;a aria-hidden="true" href="#le-pied-de-page"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le pied de page
&lt;/h4&gt;
&lt;p&gt;
 Il ne reste plus qu’à faire un morceau contenant le pied de page de notre article. En l’occurrence, j’ai choisi d’y afficher une invitation au partage, en mettant des liens vers les réseaux sociaux les plus populaires. Ces liens permettent de pré-remplir un message à poster sur les réseaux.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Pied de page de l'article" src="./images/uploaded/tuto-pelican-304-rendu-dun-article/pied-de-page-de-larticle.png"/&gt;
 &lt;figcaption&gt;
  Pied de page de l'article
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;Vous aimez cet article ? Partagez-le !&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"link-item"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"https://twitter.com/share?url={{ SITEURL }}/{{ article.url }}&amp;amp;amp;text={{ article.title }} - {{ SITEURL }}/{{ article.url }}"&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"nofollow"&lt;/span&gt; &lt;span class="hljs-attr"&gt;title&lt;/span&gt;=&lt;span class="hljs-string"&gt;"Partager cet article sur Twitter"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;i&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"bx bxl-twitter bx-md"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"link-item"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"https://www.facebook.com/sharer.php?u={{ SITEURL }}/{{ article.url }}&amp;amp;amp;t={{ article.title }} - {{ SITEURL }}/{{ article.url }}"&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"nofollow"&lt;/span&gt; &lt;span class="hljs-attr"&gt;title&lt;/span&gt;=&lt;span class="hljs-string"&gt;"Partager cet article sur Facebook"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;i&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"bx bxl-facebook bx-md"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"link-item"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"https://plus.google.com/share?url={{ SITEURL }}/{{ article.url }}&amp;amp;amp;hl=fr"&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"nofollow"&lt;/span&gt; &lt;span class="hljs-attr"&gt;title&lt;/span&gt;=&lt;span class="hljs-string"&gt;"Partager cet article sur Google +"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;i&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"bx bxl-google-plus bx-md"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"link-item"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"mailto:?subject={{ article.title }}&amp;amp;amp;body={{ SITEURL }}/{{ article.url }}"&lt;/span&gt;&lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"nofollow"&lt;/span&gt; &lt;span class="hljs-attr"&gt;title&lt;/span&gt;=&lt;span class="hljs-string"&gt;"Partager cet article par email"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;i&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"bx bx-envelope bx-md"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 C’est ici que nous ferons appel aux icônes "boxicon" dont on a intégré le CSS dans le
 &lt;code&gt;
  &amp;lt;head&amp;gt;
 &lt;/code&gt;
 du site.
&lt;/p&gt;
&lt;p&gt;
 Et un petit bout de CSS pour la forme !
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-css"&gt;&lt;span class="hljs-selector-tag"&gt;footer&lt;/span&gt; {
  &lt;span class="hljs-attribute"&gt;display&lt;/span&gt;: flex;
  &lt;span class="hljs-attribute"&gt;align-items&lt;/span&gt;: center;
  &lt;span class="hljs-attribute"&gt;justify-content&lt;/span&gt;: center;
  &lt;span class="hljs-attribute"&gt;color&lt;/span&gt;: &lt;span class="hljs-number"&gt;#000&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="intégralité-de-la-page"&gt;
 &lt;a aria-hidden="true" href="#intégralité-de-la-page"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Intégralité de la page
&lt;/h4&gt;
&lt;p&gt;
 En résumé, voici le code de tout mon fichier
 &lt;code&gt;
  article.html
 &lt;/code&gt;
 :
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-html"&gt;{% extends "base.html" %}


{% block extra_head %}
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;link&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;'https://cdn.jsdelivr.net/npm/boxicons@1.5.1/css/boxicons.min.css'&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;'stylesheet'&lt;/span&gt;&amp;gt;&lt;/span&gt;
    
    {% if article.description %}
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"description"&lt;/span&gt; &lt;span class="hljs-attr"&gt;content&lt;/span&gt;=&lt;span class="hljs-string"&gt;"{{ article.summary }}"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    {% endif %}

    {% for tag in article.tags %}
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"tags"&lt;/span&gt; &lt;span class="hljs-attr"&gt;content&lt;/span&gt;=&lt;span class="hljs-string"&gt;"{{ tag }}"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
    {% endfor %}
{% endblock %}


{% block content %}
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;section&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"article"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"breadcrumb"&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ article.category.url }}"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ article.category}}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
            /
            &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ article.title}}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ article.title}}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;h1&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"metadata"&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
                {% for author in article.authors %}
                &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ author.url }}"&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"author"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ author }}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
                {% endfor %}
                &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;time&lt;/span&gt; &lt;span class="hljs-attr"&gt;datetime&lt;/span&gt;=&lt;span class="hljs-string"&gt;"{{ article.date.isoformat() }}"&lt;/span&gt; &lt;span class="hljs-attr"&gt;pubdate&lt;/span&gt;&amp;gt;&lt;/span&gt;
                    le {{ article.locale_date }}
                &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;time&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
                {% for tag in article.tags %}
                &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"link-item"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ tag.url }}"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ tag }}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
                {% endfor %}
            &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;header&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;hr&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"article-content"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        {{ article.content }}
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;hr&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;Vous aimez cet article ? Partagez-le !&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"link-item"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"https://twitter.com/share?url={{ SITEURL }}/{{ article.url }}&amp;amp;amp;text={{ article.title }} - {{ SITEURL }}/{{ article.url }}"&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"nofollow"&lt;/span&gt; &lt;span class="hljs-attr"&gt;title&lt;/span&gt;=&lt;span class="hljs-string"&gt;"Partager cet article sur Twitter"&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;i&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"bx bxl-twitter bx-md"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"link-item"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"https://www.facebook.com/sharer.php?u={{ SITEURL }}/{{ article.url }}&amp;amp;amp;t={{ article.title }} - {{ SITEURL }}/{{ article.url }}"&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"nofollow"&lt;/span&gt; &lt;span class="hljs-attr"&gt;title&lt;/span&gt;=&lt;span class="hljs-string"&gt;"Partager cet article sur Facebook"&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;i&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"bx bxl-facebook bx-md"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"link-item"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"https://plus.google.com/share?url={{ SITEURL }}/{{ article.url }}&amp;amp;amp;hl=fr"&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"nofollow"&lt;/span&gt; &lt;span class="hljs-attr"&gt;title&lt;/span&gt;=&lt;span class="hljs-string"&gt;"Partager cet article sur Google +"&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;i&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"bx bxl-google-plus bx-md"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"link-item"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"mailto:?subject={{ article.title }}&amp;amp;amp;body={{ SITEURL }}/{{ article.url }}"&lt;/span&gt;&lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"nofollow"&lt;/span&gt; &lt;span class="hljs-attr"&gt;title&lt;/span&gt;=&lt;span class="hljs-string"&gt;"Partager cet article par email"&lt;/span&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;i&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"bx bx-envelope bx-md"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;i&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;footer&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;section&lt;/span&gt;&amp;gt;&lt;/span&gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="annexe-ajouter-une-section-de-commentaires-avec-disqus"&gt;
 &lt;a aria-hidden="true" href="#annexe-ajouter-une-section-de-commentaires-avec-disqus"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Annexe : Ajouter une section de commentaires avec Disqus
&lt;/h3&gt;
&lt;p&gt;
 Vous vous souvenez, tout au début de ce tuto je vous expliquais qu’un site statique était gravé dans le marbre etc MAIS que en fait ce n’était pas complètement exact ? Et bien voilà un excellent exemple de comment rajouter de l’interactivité à votre site : En rajoutant une section de commentaires !
&lt;/p&gt;
&lt;p&gt;
 Nous n’allons bien entendu pas gérer les commentaires nous-même, sinon on perdrait tout l’intérêt d’utiliser un site statique (avec 0 base de données etc). Nous allons plutôt déléguer cela à un service externe, en l’occurrence
 &lt;a href="https://disqus.com/"&gt;
  Disqus
 &lt;/a&gt;
 . Ce service est très répandu, vous l’avez sûrement déjà croisé lors de vos voyages sur internet.
&lt;/p&gt;
&lt;p&gt;
 Ainsi, en déléguant la gestion des commentaires à ce service, il nous suffira juste de rajouter un peu de javascript sur notre site pour intégrer ces derniers. Le chargement se fera alors en tâche de fond lors du chargement de la page, de manière transparente pour l’utilisateur.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Info pour les libristes qui me lisent : Disqus est un logiciel propriétaire géré par une entreprise. Je n’ai pas connaissance d’équivalent libre.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="créer-un-compte-disqus"&gt;
 &lt;a aria-hidden="true" href="#créer-un-compte-disqus"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Créer un compte Disqus
&lt;/h4&gt;
&lt;p&gt;
 Pour commencer il va falloir un compte sur le site Disqus. Nous pourrons ensuite y créer un nouveau site à gérer.
&lt;/p&gt;
&lt;p&gt;
 Pour créer un compte, aller sur la page de
 &lt;a href="https://disqus.com/profile/signup/"&gt;
  &lt;em&gt;
   signup
  &lt;/em&gt;
 &lt;/a&gt;
 et remplissez-y le formulaire de création de compte. Si vous voulez un minimum d’utilisation de vos données, laissez la dernière case décochée.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Formulaire de création de compte Disqus" src="./images/uploaded/tuto-pelican-304-rendu-dun-article/formulaire-de-creation-de-compte-disqus.png"/&gt;
 &lt;figcaption&gt;
  Formulaire de création de compte Disqus
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Une page vous demandant ce que vous souhaitez faire apparaît, sélectionnez alors "I want to install Disqus on my site". On vous demandera alors sur une nouvelle page le nom du site à créer, saisissez-y vos informations.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Ajouter un site dans Disqus" src="./images/uploaded/tuto-pelican-304-rendu-dun-article/ajouter-un-site-dans-disqus.png"/&gt;
 &lt;figcaption&gt;
  Ajouter un site dans Disqus
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Il faut maintenant sélectionner un tarif, nous prendrons l’option
 &lt;sub&gt;
  offensive
 &lt;/sub&gt;
 gratuite, "Free". Puis sur la page suivante, sélectionnez la toute dernière option "I don’t see my platform listed, install manually with Universal Code".
&lt;/p&gt;
&lt;p&gt;
 Le site vous montre alors un laïus sur comment intégrer Disqus à vos page web, voici la même chose mais en français !
&lt;/p&gt;
&lt;h4 id="intégrer-disqus-aux-pages"&gt;
 &lt;a aria-hidden="true" href="#intégrer-disqus-aux-pages"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Intégrer Disqus aux pages
&lt;/h4&gt;
&lt;p&gt;
 Pour que la zone de commentaires puisse se charger, il va falloir rajouter un morceau de javascript. Nous allons mettre ce dernier juste après le
 &lt;code&gt;
  &amp;lt;footer&amp;gt;
 &lt;/code&gt;
 de notre article, afin que les commentaires s’affichent à cet endroit.
&lt;/p&gt;
&lt;p&gt;
 Le morceau à rajouter aura cet allure :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-comment"&gt;&amp;lt;!-- disqus start --&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;id&lt;/span&gt;=&lt;span class="hljs-string"&gt;"disqus_thread"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="javascript"&gt;
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; disqus_config = &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; (&lt;span class="hljs-params"&gt;&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class="hljs-keyword"&gt;this&lt;/span&gt;.page.url = &lt;span class="hljs-string"&gt;'{{ SITEURL }}/{{ article.url }}'&lt;/span&gt;;
        &lt;span class="hljs-keyword"&gt;this&lt;/span&gt;.page.identifier = &lt;span class="hljs-string"&gt;'{{ article.slug }}'&lt;/span&gt;;
        &lt;span class="hljs-keyword"&gt;this&lt;/span&gt;.page.title = &lt;span class="hljs-string"&gt;'{{ article.title }}'&lt;/span&gt;;
    };
    (&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; (&lt;span class="hljs-params"&gt;&lt;/span&gt;) &lt;/span&gt;{ &lt;span class="hljs-comment"&gt;// DON'T EDIT BELOW THIS LINE&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; d = &lt;span class="hljs-built_in"&gt;document&lt;/span&gt;, s = d.createElement(&lt;span class="hljs-string"&gt;'script'&lt;/span&gt;);
        s.src = &lt;span class="hljs-string"&gt;'https://&amp;lt;le-nom-de-votre-site-dans-disqus&amp;gt;.disqus.com/embed.js'&lt;/span&gt;;
        s.setAttribute(&lt;span class="hljs-string"&gt;'data-timestamp'&lt;/span&gt;, +&lt;span class="hljs-keyword"&gt;new&lt;/span&gt; &lt;span class="hljs-built_in"&gt;Date&lt;/span&gt;());
        (d.head || d.body).appendChild(s);
    })();
&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;noscript&lt;/span&gt;&amp;gt;&lt;/span&gt;Please enable JavaScript to view the
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"https://disqus.com/?ref_noscript"&lt;/span&gt;&amp;gt;&lt;/span&gt;comments powered by Disqus.&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;noscript&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-comment"&gt;&amp;lt;!-- disqus end --&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Faites bien attention à bien remplacer le nom de votre site à la ligne 11 du code précédent. C’est grâce à cela que le javascript fera le lien avec votre site !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Et voilà, c’est en fait tout ce qu’il y avait à faire ! Maintenant le service de commentaires se chargera automagiquement sous chacun des articles !
&lt;/p&gt;
&lt;p&gt;
 Si vous retournez sur la page Disqus que nous avons laissée, vous verrez que le site vous propose d’aller configurer des options supplémentaires, n’hésitez pas à aller le faire !
&lt;/p&gt;
&lt;h4 id="afficher-un-compteur-de-commentaires"&gt;
 &lt;a aria-hidden="true" href="#afficher-un-compteur-de-commentaires"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Afficher un compteur de commentaires
&lt;/h4&gt;
&lt;p&gt;
 Afin de voir en un clin d’œil combien de commentaires ont été posté sous un article, nous allons afficher un compteur de commentaires directement dans le
 &lt;code&gt;
  &amp;lt;header&amp;gt;
 &lt;/code&gt;
 de l’article.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="En-tête de l'article avec nombre de commentaires" src="./images/uploaded/tuto-pelican-304-rendu-dun-article/en-tete-de-larticle-avec-nombre-de-commentaires.png"/&gt;
 &lt;figcaption&gt;
  En-tête de l'article avec nombre de commentaires
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Pour ce faire, on commence par rajouter un lien qui servira à accueillir le texte contenant le nombre de commentaires :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;(&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"{{ SITEURL }}/{{ article.url }}#disqus_thread"&lt;/span&gt; &lt;span class="hljs-attr"&gt;data-disqus-identifier&lt;/span&gt;=&lt;span class="hljs-string"&gt;"{{ article.slug }}"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 (Dans l’exemple ci-dessus j’ai mis ce lien juste après la balise
 &lt;code&gt;
  &amp;lt;time&amp;gt;
 &lt;/code&gt;
 du header de l’article)
&lt;/p&gt;
&lt;p&gt;
 Peu importe le texte du lien, Disqus le modifiera pour afficher la bonne information.
&lt;/p&gt;
&lt;p&gt;
 Ensuite, il faut de nouveau ajouter un bout de javascript qui fera une requête chez Disqus pour obtenir le comptage :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;{% block extra_script %}
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;script&lt;/span&gt; &lt;span class="hljs-attr"&gt;id&lt;/span&gt;=&lt;span class="hljs-string"&gt;"dsq-count-scr"&lt;/span&gt; &lt;span class="hljs-attr"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"//&amp;lt;le-nom-de-votre-site-dans-disqus&amp;gt;.disqus.com/count.js"&lt;/span&gt; &lt;span class="hljs-attr"&gt;async&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="null"&gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
{% endblock %}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 De nouveau il faut bien penser à changer le nom du site disqus à charger dans le lien.
&lt;/p&gt;
&lt;p&gt;
 Et avez-vous remarqué ? J’ai rajouté ce morceau de javascript dans le bloc
 &lt;code&gt;
  extra_head
 &lt;/code&gt;
 , qui est juste avant la balise fermante
 &lt;code&gt;
  &amp;lt;body&amp;gt;
 &lt;/code&gt;
 . Ainsi ce javascript ne se chargera qu’en dernier, sans bloquer le reste de la page pour les connexions les plus lentes.
&lt;/p&gt;
&lt;p&gt;
 Enfin, retournons chez Disqus pour modifier le texte à afficher. En effet, Disqus est un service anglais avant tout, et donc les textes sont en anglais par défaut. Donc le texte « 0 commentaire » afficherait par défaut «
 &lt;em&gt;
  0 Comment
 &lt;/em&gt;
 ». Pas top pour les sites francophones. Pour modifier ce paramètre, allez sur la page d’administration «
 &lt;em&gt;
  community
 &lt;/em&gt;
 » de votre site (https://&amp;lt;le-nom-de-votre-site-dans-disqus&amp;gt;.disqus.com/admin/settings/community/). Vous verrez alors la première section qui permet de modifier les textes et les pluriels. De mon côté, je les ai modifié de la manière suivante :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Texte des commentaires" src="./images/uploaded/tuto-pelican-304-rendu-dun-article/texte-des-commentaires.png"/&gt;
 &lt;figcaption&gt;
  Texte des commentaires
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Une fois cela fait, vous avez tous les paramètres standards pour avoir des commentaires aux petits oignons, et un site déjà plein de supers fonctionnalités !
&lt;/p&gt;
&lt;p&gt;
 C’est fini, notre site est maintenant prêt à l’emploi. Enfin presque ! Il reste tout de même à faire une page d’accueil, celle que verrons en premier vos lecteurs avide de lecture de votre prose. C’est le sujet du chapitre suivant, qui ne sera rien d’autre qu’un exercice de mise en pratique de tout ce que vous avez pu apprendre dans cette partie.
&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="tuto"></category></entry><entry><title>[TP] Page d'accueil</title><link href="https://eskimon.fr/tuto-pelican-305-tp-page-daccueil" rel="alternate"></link><published>2018-10-27T09:00:00+02:00</published><updated>2018-10-27T09:00:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2018-10-27:/tuto-pelican-305-tp-page-daccueil</id><summary type="html">&lt;p&gt;
 Vous savez maintenant pratiquement tout ce qu’il faut savoir pour créer les différentes pages de votre site. Il reste néanmoins la page
 &lt;code&gt;
  index.html
 &lt;/code&gt;
 à réaliser. C’est la page
 &lt;em&gt;
  racine
 &lt;/em&gt;
 de votre site, celle que les visiteurs verront lorsqu’ils arrivent sur l’accueil du site.
&lt;/p&gt;
&lt;p&gt;
 Afin de …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Vous savez maintenant pratiquement tout ce qu’il faut savoir pour créer les différentes pages de votre site. Il reste néanmoins la page
 &lt;code&gt;
  index.html
 &lt;/code&gt;
 à réaliser. C’est la page
 &lt;em&gt;
  racine
 &lt;/em&gt;
 de votre site, celle que les visiteurs verront lorsqu’ils arrivent sur l’accueil du site.
&lt;/p&gt;
&lt;p&gt;
 Afin de laisser librement s’exprimer votre créativité, je ne vais rien imposer ici, mais laissez votre imagination et votre talent s’exprimer. En effet, ce chapitre sera un TP !
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#consigne-et-indices"&gt;
    Consigne et indices
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#consigne"&gt;
     Consigne
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#quelques-indices-et-rappels"&gt;
     Quelques indices et rappels
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#bon-courage"&gt;
     Bon courage !
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="consigne-et-indices"&gt;
 &lt;a aria-hidden="true" href="#consigne-et-indices"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Consigne et indices
&lt;/h3&gt;
&lt;h4 id="consigne"&gt;
 &lt;a aria-hidden="true" href="#consigne"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Consigne
&lt;/h4&gt;
&lt;p&gt;
 Vous l’avez compris, le but est de réaliser le contenu de la page
 &lt;code&gt;
  index.html
 &lt;/code&gt;
 . Il n’existe pas une réponse universelle sur ce à quoi elle doit ressembler. À chaque site son identité !
&lt;/p&gt;
&lt;p&gt;
 Une seule consigne : Amusez-vous ! Faites vous plaisir et essayez de découvrir ce qu’il est possible de faire, et si possible intelligemment en faisant appel aux différentes structures que nous avons pu voir (
 &lt;code&gt;
  include
 &lt;/code&gt;
 ,
 &lt;code&gt;
  for
 &lt;/code&gt;
 ,
 &lt;code&gt;
  if/else
 &lt;/code&gt;
 ). Il n’y a cependant pas d’obligations, l’important est d’avoir un résultat qui vous convient.
&lt;/p&gt;
&lt;h4 id="quelques-indices-et-rappels"&gt;
 &lt;a aria-hidden="true" href="#quelques-indices-et-rappels"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Quelques indices et rappels
&lt;/h4&gt;
&lt;p&gt;
 Une fois n’est pas coutume, revenons brièvement à la documentation, et notamment à la section «
 &lt;a href="http://docs.getpelican.com/en/stable/themes.html?highlight=pagination#common-variables"&gt;
  &lt;em&gt;
   Common variables
  &lt;/em&gt;
 &lt;/a&gt;
 ». Cette dernière vous liste les différentes variables accessibles sur toutes les pages, donc aussi sur
 &lt;code&gt;
  index.html
 &lt;/code&gt;
 . Voici celle que je juge les plus utiles (en français) :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   articles
  &lt;/code&gt;
  : La liste des tout les articles du site
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   dates
  &lt;/code&gt;
  : La liste des tout les articles du site triés par date de publication
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   tags
  &lt;/code&gt;
  : La liste des tags
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   categories
  &lt;/code&gt;
  : La liste des catégories
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Souvenez vous aussi que vous pouvez accéder à toutes les données d’un article lorsque vous les explorées. Par exemple
 &lt;code&gt;
  article.title
 &lt;/code&gt;
 sera le titre de l’article en train d’être examiné (dans le cas de l’utilisation d’une boucle
 &lt;code&gt;
  for article in articles
 &lt;/code&gt;
 par exemple).
&lt;/p&gt;
&lt;p&gt;
 L’index propose aussi, comme toutes les pages pouvant avoir des listes, un mécanisme de pagination pour les articles (
 &lt;a href="http://docs.getpelican.com/en/stable/themes.html?highlight=pagination#index-html"&gt;
  la doc
 &lt;/a&gt;
 ).
&lt;/p&gt;
&lt;h4 id="bon-courage"&gt;
 &lt;a aria-hidden="true" href="#bon-courage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Bon courage !
&lt;/h4&gt;
&lt;p&gt;
 Je n’ai pas grand chose de plus à vous dire. Amusez-vous bien, n’hésitez pas à aller voir comment font vos sites internet favoris pour vous inspirer à droite à gauche. Vous pouvez aussi allez vous inspirer des
 &lt;a href="https://github.com/getpelican/pelican-themes"&gt;
  thèmes Pelican existant
 &lt;/a&gt;
 si vous êtes en panne de code !
&lt;/p&gt;
&lt;p&gt;
 Enfin, n’hésitez pas à venir sur le forum "
 &lt;a href="https://zestedesavoir.com/forums/savoirs/site-web/"&gt;
  Dev Web
 &lt;/a&gt;
 " pour partager vos créations ou poser vos questions !
&lt;/p&gt;
&lt;p&gt;
 Bon courage !
&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="tuto"></category></entry><entry><title>Utiliser des plugins</title><link href="https://eskimon.fr/tuto-pelican-401-utiliser-des-plugins" rel="alternate"></link><published>2018-10-27T09:00:00+02:00</published><updated>2018-10-27T09:00:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2018-10-27:/tuto-pelican-401-utiliser-des-plugins</id><summary type="html">&lt;p&gt;
 De base, Pelican propose déjà pas mal de choses. Mais grâce à son système de
 &lt;em&gt;
  plugins
 &lt;/em&gt;
 , il est possible de rajouter de nouvelles fonctionnalités à ce générateur de site en un clin d’œil.
&lt;/p&gt;
&lt;p&gt;
 Dans cette partie, je vous présenterais tout d’abord le principe de fonctionnement des plugins. Ensuite …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 De base, Pelican propose déjà pas mal de choses. Mais grâce à son système de
 &lt;em&gt;
  plugins
 &lt;/em&gt;
 , il est possible de rajouter de nouvelles fonctionnalités à ce générateur de site en un clin d’œil.
&lt;/p&gt;
&lt;p&gt;
 Dans cette partie, je vous présenterais tout d’abord le principe de fonctionnement des plugins. Ensuite, je vous mentionnerais quelques plugins que je juge presque indispensable.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#généralités-sur-les-plugins"&gt;
    Généralités sur les plugins
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#reader-ou-generator-deux-types-de-plugins"&gt;
      reader ou generator, deux types de plugins
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#les-readers"&gt;
       Les readers
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-generators"&gt;
       Les generators
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#comment-installer-un-plugin"&gt;
      Comment installer un plugin
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#trouver-un-plugin"&gt;
       Trouver un plugin
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#installer-le-plugin"&gt;
       Installer le plugin
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#une-extension-pour-générer-un-sitemap"&gt;
    Une extension pour générer un sitemap
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#installer-sitemap"&gt;
     Installer sitemap
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#paramétrer-le-plugin"&gt;
     Paramétrer le plugin
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#une-extension-pour-créer-des-sous-catégories"&gt;
   Une extension pour créer des sous-catégories
  &lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="généralités-sur-les-plugins"&gt;
 &lt;a aria-hidden="true" href="#généralités-sur-les-plugins"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Généralités sur les plugins
&lt;/h3&gt;
&lt;h4 id="reader-ou-generator-deux-types-de-plugins"&gt;
 &lt;a aria-hidden="true" href="#reader-ou-generator-deux-types-de-plugins"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 &lt;em&gt;
  reader
 &lt;/em&gt;
 ou
 &lt;em&gt;
  generator
 &lt;/em&gt;
 , deux types de plugins
&lt;/h4&gt;
&lt;p&gt;
 Dans écosystème Pelican, on trouve surtout deux types de plugins. L’un regroupe les
 &lt;em&gt;
  readers
 &lt;/em&gt;
 (les
 &lt;em&gt;
  lecteurs
 &lt;/em&gt;
 ), et l’autre les
 &lt;em&gt;
  generators
 &lt;/em&gt;
 (
 &lt;em&gt;
  générateurs
 &lt;/em&gt;
 ). Voyons les différences.
&lt;/p&gt;
&lt;h5 id="les-readers"&gt;
 &lt;a aria-hidden="true" href="#les-readers"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les readers
&lt;/h5&gt;
&lt;p&gt;
 Un reader est un plugin qui aura la charge de prendre un document en entrée pour le transformer en un nouveau format. Par exemple, un plugin qui permet de rédiger en LaTeX tombera dans cette catégorie. En effet, il aura la tâche de transformer un nouveau format d’entrée (le LaTeX) en html, le format des pages web. Le reader a deux tâches principales. La première, identifier et regrouper les métadonnées du contenu
afin qu’elles soient utilisable dans les templates. La seconde est bien entendu la transformation du contenu réelle de l’article en html.
&lt;/p&gt;
&lt;h5 id="les-generators"&gt;
 &lt;a aria-hidden="true" href="#les-generators"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les generators
&lt;/h5&gt;
&lt;p&gt;
 Les générateurs ont aussi pour but de créer de nouvelles pages, mais pour cela il ne partent pas d’un seul fichier source mais plutôt de l’ensemble de votre site. Par exemple, le plugin "sitemap" que nous allons voir dans ce chapitre permet, à partir de l’ensemble des pages générées, de créer un fichier
 &lt;em&gt;
  sitemap.xml
 &lt;/em&gt;
 qui regroupe le plan de votre site, bien utile pour les outils d’indexation des moteurs de recherche et autres robots.
&lt;/p&gt;
&lt;h4 id="comment-installer-un-plugin"&gt;
 &lt;a aria-hidden="true" href="#comment-installer-un-plugin"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Comment installer un plugin
&lt;/h4&gt;
&lt;p&gt;
 Installer un plugin est relativement trivial. Il suffit tout simplement de télécharger ce dernier, le mettre au bon endroit puis régler sa configuration. Voyons cela.
&lt;/p&gt;
&lt;h5 id="trouver-un-plugin"&gt;
 &lt;a aria-hidden="true" href="#trouver-un-plugin"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Trouver un plugin
&lt;/h5&gt;
&lt;p&gt;
 Pour cela rien de plus simple, la majeur partie des plugins (si ce n’est la totalité) se trouve sur le dépôt git suivant :
 &lt;a href="https://github.com/getpelican/pelican-plugins"&gt;
  https://github.com/getpelican/pelican-plugins
 &lt;/a&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Une fois le plugin qui vous intéresse identifié, il ne reste plus qu’à le récupérer. Deux cas de figures peuvent alors se présenter. Soit le plugin est dans un sous-module git, et dans ce cas il suffit de cloner uniquement ce sous-module. Soit le plugin est directement dans le dossier. Dans ce cas, je vous conseille de passer par l’outil
 &lt;a href="https://minhaskamal.github.io/DownGit/#/home"&gt;
  DownGit
 &lt;/a&gt;
 pour récupérer juste le dossier qui vous intéresse.
&lt;/p&gt;
&lt;h5 id="installer-le-plugin"&gt;
 &lt;a aria-hidden="true" href="#installer-le-plugin"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Installer le plugin
&lt;/h5&gt;
&lt;p&gt;
 Passons maintenant à l’installation d’un plugin.
&lt;/p&gt;
&lt;p&gt;
 Tout d’abord, je vous propose de créer un dossier nommé
 &lt;code&gt;
  plugins
 &lt;/code&gt;
 à la racine de votre dossier de travail (donc au même niveau hiérarchique que le dossier
 &lt;code&gt;
  content
 &lt;/code&gt;
 ).
&lt;/p&gt;
&lt;p&gt;
 Ensuite, il va falloir informer Pelican que nos plugins vont se trouver dans ce dossier. Il faut pour cela ajouter une ligne dans le fichier de configuration
 &lt;code&gt;
  pelicanconf.py
 &lt;/code&gt;
 :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;PLUGIN_PATHS = [&lt;span class="hljs-string"&gt;"plugins"&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Cette ligne contient simplement un tableau de tout les dossiers que Pelican va explorer pour trouver des plugins.
&lt;/p&gt;
&lt;p&gt;
 Enfin, vous l’avez peut-être deviné, il va falloir copier/déplacer les plugins précédemment téléchargé pour les mettre dans ce fameux dossier
 &lt;code&gt;
  plugins/
 &lt;/code&gt;
 que nous venons de créer.
&lt;/p&gt;
&lt;p&gt;
 Il ne reste plus qu’à activer ou non les plugins pour les voir rentrer en action. Une simple ligne dans le fichier de configuration fait ce travail :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;PLUGINS = [&lt;span class="hljs-string"&gt;"sitemap"&lt;/span&gt;, &lt;span class="hljs-string"&gt;"subcategory"&lt;/span&gt;, &lt;span class="hljs-string"&gt;"permalink"&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Là encore, c’est un tableau contenant les noms des dossiers des plugins à utiliser tels qu’ils sont nommés dans le dossier
 &lt;code&gt;
  plugins/
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;
 De manière général, pour obtenir plus d’informations sur les plugins la page de référence se trouve ici :
 &lt;a href="http://docs.getpelican.com/en/stable/plugins.html"&gt;
  http://docs.getpelican.com/en/stable/plugins.html
 &lt;/a&gt;
 .
&lt;/p&gt;
&lt;h3 id="une-extension-pour-générer-un-sitemap"&gt;
 &lt;a aria-hidden="true" href="#une-extension-pour-générer-un-sitemap"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Une extension pour générer un sitemap
&lt;/h3&gt;
&lt;p&gt;
 Afin de voir comment fonctionne les plugins, je vous propose d’en étudier deux :
 &lt;code&gt;
  sitemap
 &lt;/code&gt;
 et
 &lt;code&gt;
  subcategory
 &lt;/code&gt;
 . Commencons par
 &lt;code&gt;
  sitemap
 &lt;/code&gt;
 dans cette partie.
&lt;/p&gt;
&lt;h4 id="installer-sitemap"&gt;
 &lt;a aria-hidden="true" href="#installer-sitemap"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Installer sitemap
&lt;/h4&gt;
&lt;p&gt;
 Ce premier plugin permet de générer une page de type
 &lt;em&gt;
  sitemap
 &lt;/em&gt;
 . c’est le type de page qui permet d’inventorier les pages accessibles pour les moteurs de recherche notamment. C’est donc plutôt utile si vous êtes sensible à la visibilité de votre site sur internet. En général, cela consiste en un fichier au format
 &lt;code&gt;
  xml
 &lt;/code&gt;
 regroupant les pages ainsi que leur date de dernière mise à jour.
&lt;/p&gt;
&lt;p&gt;
 Trêve de bavardage, récupérons tout de suite le plugin (via DownGit) à l’adresse suivante :
 &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/sitemap"&gt;
  https://github.com/getpelican/pelican-plugins/tree/master/sitemap
 &lt;/a&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Une fois que vous l’avez sur votre disque dur, il vous faudra le déplacer dans le dossier plugin de votre site internet comme vu précédemment. Enfin, il ne reste plus qu’à l’activer en l’ajoutant à la constante
 &lt;code&gt;
  PLUGINS
 &lt;/code&gt;
 du fichier de configuration
 &lt;code&gt;
  pelicanconf.py
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;PLUGINS = [&lt;span class="hljs-string"&gt;"sitemap"&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="paramétrer-le-plugin"&gt;
 &lt;a aria-hidden="true" href="#paramétrer-le-plugin"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Paramétrer le plugin
&lt;/h4&gt;
&lt;p&gt;
 Comme de très nombreux plugins, sitemap propose des options de configuration. Si vous ne faites rien, il fonctionnera de base très bien. Mais pour des utilisateurs ayant des besoins plus spécifiques, quelques options sont réglables. Ces dernières sont résumé dans le fichier
 &lt;code&gt;
  Readme
 &lt;/code&gt;
 du plugin.
&lt;/p&gt;
&lt;p&gt;
 La première option est le format du fichier généré. Par défaut, ce sera du
 &lt;code&gt;
  xml
 &lt;/code&gt;
 , mais un format texte brut (
 &lt;code&gt;
  txt
 &lt;/code&gt;
 ) est aussi possible. Pour choisir, il faut ajouter une nouvelle ligne dans le fichier de configuration
 &lt;code&gt;
  pelicanconf.py
 &lt;/code&gt;
 . Cette nouvelle ligne sera une constante du nom de
 &lt;code&gt;
  SITEMAP
 &lt;/code&gt;
 et contiendra un dictionnaire des différents paramètres à modifier. Donc pour régler le format de sortie, on obtiendra la ligne suivante :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;&lt;span class="hljs-comment"&gt;## Pour passer au format txt plutôt que xml&lt;/span&gt;
SITEMAP = {
    &lt;span class="hljs-string"&gt;'format'&lt;/span&gt;: &lt;span class="hljs-string"&gt;'txt'&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Sitemap propose aussi d’exclure des urls pour limiter leur indexation. Cela se fait avec le paramètre
 &lt;code&gt;
  exclude
 &lt;/code&gt;
 suivi d’un tableau des adresses à supprimer. Par exemple pour ne pas proposer les pages de tags et de catégories, on modifierai la donnée de la manière suivante :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;SITEMAP = {
    &lt;span class="hljs-string"&gt;'format'&lt;/span&gt;: &lt;span class="hljs-string"&gt;'txt'&lt;/span&gt;,
    &lt;span class="hljs-string"&gt;'exclude'&lt;/span&gt;: [&lt;span class="hljs-string"&gt;'tag/'&lt;/span&gt;, &lt;span class="hljs-string"&gt;'category/'&lt;/span&gt;]
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Un dernier paramètre intéressant à paramétrer est la fréquence de changement des contenus. Si vos contenus sont susceptibles de changer fréquemment, autant prévenir les moteurs de recherches pour qu’ils reviennent plus souvent voir les différences. Les fréquences possibles sont always (toujours en changement), hourly (toutes les heures), daily (tous les jours), weekly (hebdomadaire), monthly (mensuel), yearly (annuel) et never (ne changera jamais). Ces paramètres peuvent être appliqués aux articles, aux pages ou encore aux indexes (les pages de listes par exemple). Pour cela, on ajoute un dictionnaire à nos données :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;SITEMAP = {
    &lt;span class="hljs-string"&gt;'format'&lt;/span&gt;: &lt;span class="hljs-string"&gt;'txt'&lt;/span&gt;,
    &lt;span class="hljs-string"&gt;'exclude'&lt;/span&gt;: [&lt;span class="hljs-string"&gt;'tag/'&lt;/span&gt;, &lt;span class="hljs-string"&gt;'category/'&lt;/span&gt;],
    &lt;span class="hljs-string"&gt;'changefreqs'&lt;/span&gt;: {
        &lt;span class="hljs-string"&gt;'articles'&lt;/span&gt;: &lt;span class="hljs-string"&gt;'daily'&lt;/span&gt;,
        &lt;span class="hljs-string"&gt;'pages'&lt;/span&gt;: &lt;span class="hljs-string"&gt;'monthly'&lt;/span&gt;,
        &lt;span class="hljs-string"&gt;'indexes'&lt;/span&gt;: &lt;span class="hljs-string"&gt;'daily'&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Comme dis plus haut, toutes ces configurations sont facultatives, celle par défaut feront sûrement très bien le travail dans la plupart des cas.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Si jamais vous voulez en savoir plus ou voir les quelques paramètres restants, n’hésitez pas à consulter le Readme dans votre dossier d’installation ou
 &lt;a href="https://github.com/getpelican/pelican-plugins/blob/master/sitemap/Readme.rst"&gt;
  en ligne
 &lt;/a&gt;
 .
&lt;/p&gt;
&lt;h3 id="une-extension-pour-créer-des-sous-catégories"&gt;
 &lt;a aria-hidden="true" href="#une-extension-pour-créer-des-sous-catégories"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Une extension pour créer des sous-catégories
&lt;/h3&gt;
&lt;p&gt;
 Afin de clôturer ce chapitre avec de bonne idées, voici une deuxième extension que j’affectionne : subcategory. Comme son nom l’indique, elle permet de regrouper les contenus en catégories
 &lt;em&gt;
  et
 &lt;/em&gt;
 sous-catégories. Par exemple, on pourrait avoir une catégorie "Dessert" qui regrouperait des sous-catégories "gâteaux", "cookies", "crèmes" …
&lt;/p&gt;
&lt;p&gt;
 Comme pour le plugin précédent, ce dernier est disponible dans le dépôt principal de pelican-plugins à l’adresse suivante :
 &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/subcategory"&gt;
  https://github.com/getpelican/pelican-plugins/tree/master/subcategory
 &lt;/a&gt;
 . Là encore, il faudra le déplacer dans le dossier
 &lt;code&gt;
  plugins/
 &lt;/code&gt;
 de votre site web puis l’ajouter à la ligne
 &lt;code&gt;
  PLUGINS
 &lt;/code&gt;
 de la configuration :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;PLUGINS = [&lt;span class="hljs-string"&gt;"sitemap"&lt;/span&gt;, &lt;span class="hljs-string"&gt;"subcategory"&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Maintenant, pour l’utiliser c’est très simple. Il suffit simple d’éditer la métadonnée
 &lt;code&gt;
  Category
 &lt;/code&gt;
 de vos contenus. Par exemple, pour qu’un article soit automagiquement classé dans la catégorie "Dessert/Gateaux" on fera simplement
 &lt;code&gt;
  Category: Dessert/Gateaux
 &lt;/code&gt;
 (le caractère
 &lt;kbd&gt;
  /
 &lt;/kbd&gt;
 sert de séparateur). Vous pourrez maintenant assez simplement faire un fil d’ariane dans vos template en utilisant nouvelle variable
 &lt;code&gt;
  subcategories
 &lt;/code&gt;
 . Par exemple :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ article.category.url }}"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ article.category}}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
    {% for subcategory in article.subcategories %}
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"breadcrumb-item"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;a&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"/{{ subcategory.url }}"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ subcategory.shortname }}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
    {% endfor %}
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;li&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"breadcrumb-item active"&lt;/span&gt; &lt;span class="hljs-attr"&gt;aria-current&lt;/span&gt;=&lt;span class="hljs-string"&gt;"page"&lt;/span&gt;&amp;gt;&lt;/span&gt;{{ article.title }}&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;ol&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Là encore, quelques paramètres sont disponibles, surtout lié aux chemins d’enregistrement des fichiers. Ceux par défaut sont de nouveaux très bien. Je vous laisse les consulter dans
 &lt;a href="https://github.com/getpelican/pelican-plugins/blob/master/subcategory/README.md#settings"&gt;
  le README, à la section
  &lt;em&gt;
   settings
  &lt;/em&gt;
 &lt;/a&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Vous savez maintenant comment ajouter des nouvelles fonctionnalités à votre générateur de site. Dorénavant, si une fonctionnalité vous manque, vous pourrez carrément la coder vous même afin d’enrichir votre contenu facilement. A ce sujet, j’avais de mon côté fait un plugin pour générer des pages à partir du format markdown utilisé sur Zeste de Savoir, le zmarkdown.
 &lt;a href="https://eskimon.fr/comment-et-pourquoi-jai-intégré-zmarkdown-à-pelican"&gt;
  Voici l’article à ce sujet
 &lt;/a&gt;
 .
&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="tuto"></category></entry><entry><title>Quelques paramètres de configuration</title><link href="https://eskimon.fr/tuto-pelican-402-quelques-param%C3%A8tres-de-configuration" rel="alternate"></link><published>2018-10-27T09:00:00+02:00</published><updated>2018-10-27T09:00:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2018-10-27:/tuto-pelican-402-quelques-paramètres-de-configuration</id><summary type="html">&lt;p&gt;
 Ce dernier chapitre viendra conclure ce tutoriel. Il vous permettra quelques paramètres de configuration, afin de pouvoir peaufiner votre utilisation de Pelican et rendre votre installation la plus pratique pour vos usages. Les différents paramètres présentés ici peuvent tous être retrouvés sur
 &lt;a href="http://docs.getpelican.com/en/stable/settings.html"&gt;
  cette page de la documentation de Pelican
 &lt;/a&gt;
 .
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Afin …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;
 Ce dernier chapitre viendra conclure ce tutoriel. Il vous permettra quelques paramètres de configuration, afin de pouvoir peaufiner votre utilisation de Pelican et rendre votre installation la plus pratique pour vos usages. Les différents paramètres présentés ici peuvent tous être retrouvés sur
 &lt;a href="http://docs.getpelican.com/en/stable/settings.html"&gt;
  cette page de la documentation de Pelican
 &lt;/a&gt;
 .
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Afin de garder le chapitre digeste, je ne vais pas présenter tous les paramètres utilisables dans le fichier de configuration, mais seulement ceux que j’estime les plus utiles pour commencer. Libre à vous de consulter la page de documentation ci-dessus pour en savoir plus.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#quelques-bonnes-pratiques"&gt;
    Quelques bonnes pratiques
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#sélection-de-la-config"&gt;
     Sélection de la config
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#héritage-de-configuration"&gt;
     Héritage de configuration
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#gestion-des-fichiers-statiques"&gt;
    Gestion des fichiers statiques
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#pour-le-thème"&gt;
     Pour le thème
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#les-contenus-statiques"&gt;
     Les contenus statiques
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#quelques-conseils-supplémentaires"&gt;
    Quelques conseils supplémentaires
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#pour-les-flemmards"&gt;
     Pour les flemmards
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#les-der-des-ders"&gt;
      Les der des ders
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#enlarge-your-summary"&gt;
       Enlarge your summary
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#altération-du-dossier-output"&gt;
       Altération du dossier output
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="quelques-bonnes-pratiques"&gt;
 &lt;a aria-hidden="true" href="#quelques-bonnes-pratiques"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Quelques bonnes pratiques
&lt;/h3&gt;
&lt;p&gt;
 Commencons tout d’abord par quelques bonnes pratiques.
&lt;/p&gt;
&lt;h4 id="sélection-de-la-config"&gt;
 &lt;a aria-hidden="true" href="#sélection-de-la-config"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sélection de la config
&lt;/h4&gt;
&lt;p&gt;
 Saviez-vous qu’il est possible de sélectionner un fichier de configuration au moment de l’appel à Pelican ? En effet, une option à passer en paramètre de la commande
 &lt;code&gt;
  Pelican
 &lt;/code&gt;
 permet de spécifier le chemin vers un fichier spécifique, plutôt que le fichier de base
 &lt;code&gt;
  pelicanconf.py
 &lt;/code&gt;
 dont nous parlons depuis le début de ce tutoriel.
&lt;/p&gt;
&lt;p&gt;
 Cette option est activable via le paramètre
 &lt;code&gt;
  -s &amp;lt;chemin/du/fichier/de/conf.py&amp;gt;
 &lt;/code&gt;
 (
 &lt;em&gt;
  s
 &lt;/em&gt;
 pour
 &lt;em&gt;
  settings
 &lt;/em&gt;
 ). Il suffit donc simplement de rajouter ce paramètre à l’appel de la commande. Par exemple :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;pelican content -s /home/eskimon/coolcookies/ma_conf_de_prod.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="héritage-de-configuration"&gt;
 &lt;a aria-hidden="true" href="#héritage-de-configuration"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Héritage de configuration
&lt;/h4&gt;
&lt;p&gt;
 Il est toujours bon de séparer proprement les paramètres de votre environnement de développement et ceux servant à produire les pages finales. En effet, ces derniers peuvent varier entre les deux cas.
&lt;/p&gt;
&lt;p&gt;
 Cependant, il est pénible de recopier à la main tout les paramètres d’un fichier de configuration vers l’autre. De plus, faire ainsi risque d’engendrer des oublis si une modification doit être faite dans les deux fichiers à la fois.
&lt;/p&gt;
&lt;p&gt;
 Pour palier à cela, on utilise une méthode que l’on pourrait qualifier «d’héritage». Nous allons créer un fichier de base (en l’occurrence notre fichier habituelle
 &lt;code&gt;
  pelicanconf.py
 &lt;/code&gt;
 ) qui servira à définir tout nos paramètres par défaut commun à tout nos environnements (développement, préprod’, prod' etc…). Ensuite, on créera autant de fichier de configuration propre aux différents environnements. Prenons par exemple le cas ou l’on veut une configuration de développement dans laquelle la pagination sera réglée à 5 articles pour s’assurer que le paginateur fonctionne bien, et une configuration de production avec une pagination à 20 articles. Dans notre fichier standard
 &lt;code&gt;
  pelicanconf.py
 &lt;/code&gt;
 on aura alors
 &lt;code&gt;
  DEFAULT_PAGINATION = 5
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Nous allons ensuite créer un fichier
 &lt;code&gt;
  prod_conf.py
 &lt;/code&gt;
 . Ce dernier devra reprendre toute la configuration de base, mais devra mettre à jour le paramètre de pagination. Pour cela, on commencera par importer dans notre fichier toutes les valeurs du fichier «parent»,
 &lt;code&gt;
  pelicanconf.py
 &lt;/code&gt;
 . Ensuite, il ne restera qu’à modifier les paramètres nécessaires. Tout les autres seront automatiquement importé, mais garderont leur valeur d’origine.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;&lt;span class="hljs-comment"&gt;## On importe toute la configuration de pelicanconf&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; os
&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; sys
sys.path.append(os.curdir)
&lt;span class="hljs-keyword"&gt;from&lt;/span&gt; pelicanconf &lt;span class="hljs-keyword"&gt;import&lt;/span&gt; *

&lt;span class="hljs-comment"&gt;## Puis on modifie les paramètres qu'il faut mettre à jour&lt;/span&gt;
DEFAULT_PAGINATION = &lt;span class="hljs-number"&gt;20&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ainsi, quelque soit les modifications faites dans
 &lt;code&gt;
  pelicanconf.py
 &lt;/code&gt;
 , on les retrouvera forcément dans
 &lt;code&gt;
  prod_conf.py
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Il ne reste plus qu’à appeler ce fichier lors de la génération via la commande
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;pelican content -s prod_conf.py
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id="gestion-des-fichiers-statiques"&gt;
 &lt;a aria-hidden="true" href="#gestion-des-fichiers-statiques"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Gestion des fichiers statiques
&lt;/h3&gt;
&lt;p&gt;
 Tout d’abord, clarifions la notion de fichiers «statiques» étant donnée que depuis le début on travaille sur un site qui est lui-même statique. Dans le contexte du développement web, un fichier statique est un fichier qui doit-être servi tel quel, sans manipulation du serveur. Par exemple, le fichier contenant le CSS ou encore une image sont tout deux des fichiers que l’on qualifient de statiques.
&lt;/p&gt;
&lt;p&gt;
 Dans Pelican, on trouve ce type de fichiers dans deux endroits bien différents : pour le thème et dans les contenus.
&lt;/p&gt;
&lt;h4 id="pour-le-thème"&gt;
 &lt;a aria-hidden="true" href="#pour-le-thème"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Pour le thème
&lt;/h4&gt;
&lt;p&gt;
 Comme on vient de le voir, le thème a besoin de fournir des fichiers statiques, notamment pour le CSS. Lorsque l’on a créé notre thème,
 &lt;a href=""&gt;
  souvenez-vous
 &lt;/a&gt;
 nous les avons mis dans le dossier
 &lt;code&gt;
  static/css
 &lt;/code&gt;
 . Ce dossier peut-être personnalisé via le paramètre
 &lt;code&gt;
  THEME_STATIC_PATHS
 &lt;/code&gt;
 . Par défaut, on a nommé notre dossier
 &lt;code&gt;
  static
 &lt;/code&gt;
 , mais on aurait très bien pu changer ce chemin si besoin. Vous remarquerez que cette variable est un tableau. En effet, on peut fournir plusieurs chemins à utiliser.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;THEME_STATIC_PATHS = [&lt;span class="hljs-string"&gt;'static'&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="les-contenus-statiques"&gt;
 &lt;a aria-hidden="true" href="#les-contenus-statiques"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les contenus statiques
&lt;/h4&gt;
&lt;p&gt;
 Sur notre site, on peut vouloir imaginer avoir des fichiers que l’on a réaliser nous-même et ne sont donc pas généré via le Pelican. Ce peut-être par exemple des fichiers «de gestion techniques» du site (comme le fichier
 &lt;code&gt;
  robots.txt
 &lt;/code&gt;
 ) ou bien des documents que l’on souhaiterais mettre à disposition du public (un fichier pdf par exemple).
&lt;/p&gt;
&lt;p&gt;
 Là encore, il va falloir informer Pelican où trouver ces fichiers, et où les placer dans le dossier
 &lt;code&gt;
  output
 &lt;/code&gt;
 final.
&lt;/p&gt;
&lt;p&gt;
 Pour cela, on utilise plusieurs paramètres. Tout d’abord,
 &lt;code&gt;
  STATIC_PATHS
 &lt;/code&gt;
 qui va lister les emplacements à copier. Dans l’exemple suivant, l’ensemble du dossier
 &lt;code&gt;
  pdfs
 &lt;/code&gt;
 et le fichier
 &lt;code&gt;
  extra/robots.txt
 &lt;/code&gt;
 seront copiés. Ces deux éléments seront considérés comme étant dans le dossier de contenu
 &lt;code&gt;
  content
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;STATIC_PATHS = [&lt;span class="hljs-string"&gt;'pdfs'&lt;/span&gt;, &lt;span class="hljs-string"&gt;'extra/robots.txt'&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Si l’on ne fait rien de plus, les éléments seront copiés tel quel ainsi que leur arborescence directement dans le dossier
 &lt;code&gt;
  output
 &lt;/code&gt;
 . Cependant, certains fichiers peuvent nécessiter d’être placé à un endroit particulier. C’est là que rentre en jeu
 &lt;code&gt;
  EXTRA_PATH_METADATA
 &lt;/code&gt;
 . Ce dictionaire va permettre de paramètrer certaines métadonnée de différents objets, en l’occurrence nos fichiers statiques. Pour cela, on lui fournir comme clé le fichier à modifier (
 &lt;code&gt;
  extra/robots.txt
 &lt;/code&gt;
 par exemple) et la donnée à modifier (en l’occurence son chemin,
 &lt;code&gt;
  path
 &lt;/code&gt;
 ).
&lt;/p&gt;
&lt;p&gt;
 Voici par exemple ce que nous pourrions faire pour déplacer le fichier
 &lt;code&gt;
  extra/robots.txt
 &lt;/code&gt;
 à l’emplacement
 &lt;code&gt;
  robots.txt
 &lt;/code&gt;
 (sans le préfixe
 &lt;code&gt;
  extra/
 &lt;/code&gt;
 ) :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;EXTRA_PATH_METADATA = {
    &lt;span class="hljs-string"&gt;'extra/robots.txt'&lt;/span&gt;: {&lt;span class="hljs-string"&gt;'path'&lt;/span&gt;: &lt;span class="hljs-string"&gt;'robots.txt'&lt;/span&gt;}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 (Vous remarquerez que je n’ai pas touché au dossier
 &lt;code&gt;
  pdfs
 &lt;/code&gt;
 ).
&lt;/p&gt;
&lt;h3 id="quelques-conseils-supplémentaires"&gt;
 &lt;a aria-hidden="true" href="#quelques-conseils-supplémentaires"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Quelques conseils supplémentaires
&lt;/h3&gt;
&lt;p&gt;
 Voici en vrac quelques paramètres qui peuvent toujours être utile.
&lt;/p&gt;
&lt;h4 id="pour-les-flemmards"&gt;
 &lt;a aria-hidden="true" href="#pour-les-flemmards"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Pour les flemmards
&lt;/h4&gt;
&lt;p&gt;
 Si vous en avez marre de spécifier
 &lt;code&gt;
  content
 &lt;/code&gt;
 dans l’appel de votre commande Pelican, vous pouvez spécifier le nom du dossier qui contient le contenu (articles, pages, etc) dans la configuration. C’est le paramètre
 &lt;code&gt;
  PATH
 &lt;/code&gt;
 qui gère cela.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;PATH = &lt;span class="hljs-string"&gt;'content'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 De la même facon, si vous êtes seul à rédiger tout le contenu, la variable author dans toutes les métadonnées des articles est un peu monotone. Elle peut-être paramétrer directement via la variable
 &lt;code&gt;
  AUTHOR
 &lt;/code&gt;
 dans la configuration.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;AUTHOR = &lt;span class="hljs-string"&gt;'Eskimon'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="les-der-des-ders"&gt;
 &lt;a aria-hidden="true" href="#les-der-des-ders"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les der des ders
&lt;/h4&gt;
&lt;h5 id="enlarge-your-summary"&gt;
 &lt;a aria-hidden="true" href="#enlarge-your-summary"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Enlarge your summary
&lt;/h5&gt;
&lt;p&gt;
 Si vous trouver que la variable contenant le résumé (
 &lt;code&gt;
  article.summary
 &lt;/code&gt;
 ) est trop courte, vous pouvez l’augmenter via le paramètre
 &lt;code&gt;
  SUMMARY_MAX_LENGTH
 &lt;/code&gt;
 avec un entier représentant le nombre de caractère.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;SUMMARY_MAX_LENGTH = &lt;span class="hljs-number"&gt;100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="altération-du-dossier-output"&gt;
 &lt;a aria-hidden="true" href="#altération-du-dossier-output"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Altération du dossier output
&lt;/h5&gt;
&lt;p&gt;
 Enfin, je vous propose pour finir deux astuces liés au dossier qui va contenir le site généré. Premièrement, la constante
 &lt;code&gt;
  OUTPUT_PATH
 &lt;/code&gt;
 permet de donner le nom de ce dossier. Par défaut c’est
 &lt;code&gt;
  output
 &lt;/code&gt;
 , mais vous pouvez mettre ce que vous voulez. Par exemple, si vous souhaitez faire de l’hébergement sur l’outil
 &lt;a href="https://about.gitlab.com/features/pages/"&gt;
  Pages de GitLab
 &lt;/a&gt;
 , alors il faudra mettre ce nom de dossier à
 &lt;code&gt;
  public
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;OUTPUT_PATH = &lt;span class="hljs-string"&gt;'public/'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Enfin, si vous souhaitez conservez des fichiers/dossiers dans votre dossier de sortie (
 &lt;code&gt;
  output
 &lt;/code&gt;
 ), comme par exemple les fichiers de gestion de version si vous gérer votre déploiement via un outil de ce genre, c’est la donnée
 &lt;code&gt;
  OUTPUT_RETENTION
 &lt;/code&gt;
 qu’il faut éditer. Il faut lui fournir un tableau contenant tout les fichiers à conserver. Ces derniers ne seront alors plus effacés si vous avez activez le paramètre
 &lt;code&gt;
  DELETE_OUTPUT_DIRECTORY
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-ini"&gt;&lt;span class="hljs-comment"&gt;## Par exemple, pour conserver mon suivi de version via git&lt;/span&gt;
&lt;span class="hljs-attr"&gt;OUTPUT_RETENTION&lt;/span&gt; = [&lt;span class="hljs-string"&gt;'.git'&lt;/span&gt;, &lt;span class="hljs-string"&gt;'.gitignore'&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><category term="python"></category><category term="pelican"></category><category term="tuto"></category></entry><entry><title>Faire un gif de son écran sous Ubuntu avec byzanz</title><link href="https://eskimon.fr/faire-un-gif-de-son-ecran-sous-ubuntu-avec-byzanz" rel="alternate"></link><published>2018-06-18T14:18:00+02:00</published><updated>2018-06-18T14:18:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2018-06-18:/faire-un-gif-de-son-ecran-sous-ubuntu-avec-byzanz</id><summary type="html">&lt;p&gt;
 Voici un moyen simple de faire un gif de son écran sous Ubuntu 18.04 à l’aide du logiciel
 &lt;code&gt;
  byzanz
 &lt;/code&gt;
 (devrait marcher aussi sous 16.04).
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   TL;DR :
   &lt;code&gt;
    byzanz-record --duration=15 --x=200 --y=300 --width=700 --height=400 out.gif
   &lt;/code&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Pour cela, on commence par installer l’outil …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Voici un moyen simple de faire un gif de son écran sous Ubuntu 18.04 à l’aide du logiciel
 &lt;code&gt;
  byzanz
 &lt;/code&gt;
 (devrait marcher aussi sous 16.04).
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   TL;DR :
   &lt;code&gt;
    byzanz-record --duration=15 --x=200 --y=300 --width=700 --height=400 out.gif
   &lt;/code&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Pour cela, on commence par installer l’outil
 &lt;code&gt;
  byzanz
 &lt;/code&gt;
 . Comme il est dans les dépôts principaux, c’est assez simple et rapide.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;sudo apt-get install byzanz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ensuite, il suffit de lancer la commande
 &lt;code&gt;
  byzanz-record &amp;lt;/chemin/du.gif
 &lt;/code&gt;
 pour lancer un enregistrement !
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;byzanz-record /tmp/mon-super-gif-de-test.gif
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Par défaut l’enregistrement démarrera 1 seconde après le lancement de la commande et enregistrera tout l’écran pendant 10 secondes.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Via la commande
 &lt;code&gt;
  byzanz-record --help
 &lt;/code&gt;
 , vous obtiendrez une liste des paramètres pour personnaliser l’enregistrement. Les voici détaillé :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   -d
  &lt;/code&gt;
  ,
  &lt;code&gt;
   --duration=SECS
  &lt;/code&gt;
  : Durée (en secondes) de l’enregistrement (10 secondes par défaut)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   -e
  &lt;/code&gt;
  ,
  &lt;code&gt;
   --exec=COMMAND
  &lt;/code&gt;
  : Commande à executer
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   --delay=SECS
  &lt;/code&gt;
  : Délai (en seconde) avant le début de l’enregistrement (1 seconde par défaut)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   -c
  &lt;/code&gt;
  ,
  &lt;code&gt;
   --cursor
  &lt;/code&gt;
  : Enregistrer le curseur de la souris (désactivé par défaut)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   -a
  &lt;/code&gt;
  ,
  &lt;code&gt;
   --audio
  &lt;/code&gt;
  : Enregistrer l’audio
  &lt;em&gt;
   (je ne l’ai pas testé, je ne sais pas ce qui se passera dans un gif avec l’audio oO )
  &lt;/em&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   -x
  &lt;/code&gt;
  ,
  &lt;code&gt;
   --x=PIXEL
  &lt;/code&gt;
  : Coordonnée X (en pixels) du coin haut-gauche de la section à enregistrer
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   -y
  &lt;/code&gt;
  ,
  &lt;code&gt;
   --y=PIXEL
  &lt;/code&gt;
  : Coordonnée Y (en pixels) du coin haut-gauche de la section à enregistrer
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   -w
  &lt;/code&gt;
  ,
  &lt;code&gt;
   --width=PIXEL
  &lt;/code&gt;
  : Largeur de la section à enregistrer (en pixels)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   -h
  &lt;/code&gt;
  ,
  &lt;code&gt;
   --height=PIXEL
  &lt;/code&gt;
  : Hauteur de la section à enregistrer (en pixels)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   -v
  &lt;/code&gt;
  ,
  &lt;code&gt;
   --verbose
  &lt;/code&gt;
  : Affiche une sortie plus détaillée dans le terminal
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   --display=DISPLAY
  &lt;/code&gt;
  : Écran à enregistrer
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Ainsi, pour réaliser un enregistrement de 15 secondes, de la section [(200,300), (900, 700)] de notre écran et enregistrer le tout dans
 &lt;code&gt;
  /tmp/out.gif
 &lt;/code&gt;
 on fera :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;byzanz-record --duration=15 --x=200 --y=300 --width=700 --height=400 out.gif
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Pour ceux qui veulent un moyen plus
   &lt;em&gt;
    user-friendly
   &lt;/em&gt;
   , je vous conseille d’essayer le logiciel
   &lt;code&gt;
    peek
   &lt;/code&gt;
   qui demande de passer par un dépôt tiers. Pour cela, aller voir
   &lt;a href="https://askubuntu.com/questions/107726/how-to-create-animated-gif-images-of-a-screencast/"&gt;
    la réponse StackOverflow
   &lt;/a&gt;
   à l’origine de cet article
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;</content><category term="memo"></category></entry><entry><title>Comment (et pourquoi) j'ai intégré ZMarkdown à Pelican</title><link href="https://eskimon.fr/comment-et-pourquoi-jai-int%C3%A9gr%C3%A9-zmarkdown-%C3%A0-pelican" rel="alternate"></link><published>2018-04-11T14:30:00+02:00</published><updated>2018-04-11T14:30:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2018-04-11:/comment-et-pourquoi-jai-intégré-zmarkdown-à-pelican</id><summary type="html">&lt;p&gt;
 J’expliquais récemment
 &lt;a href="https://zestedesavoir.com/forums/sujet/10541/eskimonfr-le-renouveau/"&gt;
  sur le forum
 &lt;/a&gt;
 que j’ai remis au goût du jour
 &lt;a href="http://eskimon.fr"&gt;
  mon blog
 &lt;/a&gt;
 , notamment en revoyant ma chaîne de rédaction qui intègre désormais le parseur markdown de zeste de savoir : zmarkdown. Ce tuto-billet vous propose de voir la réflexion qui a accompagné ce choix, ainsi que le …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 J’expliquais récemment
 &lt;a href="https://zestedesavoir.com/forums/sujet/10541/eskimonfr-le-renouveau/"&gt;
  sur le forum
 &lt;/a&gt;
 que j’ai remis au goût du jour
 &lt;a href="http://eskimon.fr"&gt;
  mon blog
 &lt;/a&gt;
 , notamment en revoyant ma chaîne de rédaction qui intègre désormais le parseur markdown de zeste de savoir : zmarkdown. Ce tuto-billet vous propose de voir la réflexion qui a accompagné ce choix, ainsi que le processus ayant permis de l’intégrer sans heurts dans le moteur de site statique Pelican.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;a href="#pourquoi-ne-pas-se-contenter-du-parseur-md-de-base"&gt;
   Pourquoi ne pas se contenter du parseur md de base ?
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#mes-premiers-pas-avec-zmarkdown"&gt;
    Mes premiers pas avec zmarkdown
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#installation"&gt;
     Installation
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#utilisation"&gt;
     Utilisation
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#intégration-dans-pelican"&gt;
    Intégration dans pelican
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#une-histoire-de-reader"&gt;
     Une histoire de Reader
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#la-conversion-du-zmd-via-le-serveur-idoine"&gt;
     La conversion du zmd via le serveur idoine
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="pourquoi-ne-pas-se-contenter-du-parseur-md-de-base"&gt;
 &lt;a aria-hidden="true" href="#pourquoi-ne-pas-se-contenter-du-parseur-md-de-base"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Pourquoi ne pas se contenter du parseur md de base ?
&lt;/h3&gt;
&lt;p&gt;
 C’est une bonne question ça ! Après tout, Pelican propose de base de faire de la rédaction en Markdown via le paquet python du même nom. Pourquoi ne pas s’en contenter ?
&lt;/p&gt;
&lt;p&gt;
 Et bien la réponse est assez simple. Je rédige depuis maintenant un moment sur ZdS et je me suis habitué à sa syntaxe
 &lt;em&gt;
  évoluée
 &lt;/em&gt;
 du markdown. En effet, le markdown de Zeste de Savoir propose des choses intéressantes qui n’existe pas de base, comme l’ajout simple de vidéo directement embarqué (et non pas juste le lien), l’ajout de jsfiddle pour faire de la démo interactive de code ou encore la gestion des notes de bas de page. Bref, tout un tas de petites choses qui mise bout à bout font une grande différence.
&lt;/p&gt;
&lt;p&gt;
 Un autre aspect est que je souhaite pouvoir facilement partager mes rédactions entre mon blog et ZdS. Avoir la même chaîne de traitement des écrits me permet donc de gagner énormément de temps. En effet, je n’ai qu’à faire du copier/coller de mon blog vers ZdS ou bien importer directement le zip dans un outil de mon cru dans mon blog pour que l’import se fasse automagiquement. Bref, je me simplifie la vie et j’aime ça.
&lt;/p&gt;
&lt;p&gt;
 Enfin, ça aussi été un très bon exercice puisque grâce à ça j’ai pu plonger un peu dans le nouveau code de zmarkdown (en javascript), mais je reviens sur ce point dans une des parties de cet article.
&lt;/p&gt;
&lt;p&gt;
 Ah,
 &lt;em&gt;
  last but not least
 &lt;/em&gt;
 , l’utilisation de zmarkdown me permettra à terme de publier aussi bien en html pour le blog qu’en pdf/epub pour proposer de la lecture hors-ligne, et ça c’est cool, pas besoin de s’embêter avec d’autres outils !
&lt;/p&gt;
&lt;h3 id="mes-premiers-pas-avec-zmarkdown"&gt;
 &lt;a aria-hidden="true" href="#mes-premiers-pas-avec-zmarkdown"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Mes premiers pas avec zmarkdown
&lt;/h3&gt;
&lt;p&gt;
 Bon, on va pas se mentir, j’ai un peu galéré (IRC témoignera). Je suis assez novice en javascript et encore plus avec les outils modernes de ce dernier. Bref, j’ai appris des choses
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
&lt;/p&gt;
&lt;p&gt;
 Commençons, par le début, le dépôt se trouve à l’adresse suivante
 &lt;a href="https://github.com/zestedesavoir/zmarkdown"&gt;
  https://github.com/zestedesavoir/zmarkdown
 &lt;/a&gt;
 . Du coup la première étape fût de le cloner, jusque là ça va
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 .
&lt;/p&gt;
&lt;h4 id="installation"&gt;
 &lt;a aria-hidden="true" href="#installation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Installation
&lt;/h4&gt;
&lt;p&gt;
 Du coup première étape naturel, tentons de convertir un petit truc md en html, vu que c’est ça le but final. Alors allons-y gaiement, lisons
 &lt;a href="https://github.com/zestedesavoir/zmarkdown/blob/master/README.md"&gt;
  la doc de zmd
 &lt;/a&gt;
 . Elle nous invite à installer node 8 et yarn. Du coup on cherche tout ca et on découvre que de base node propose de télécharger directement les binaires (
 &lt;a href="https://nodejs.org/en/download/"&gt;
  https://nodejs.org/en/download/
 &lt;/a&gt;
 ). LoL me direz-vous. Étant sous Ubuntu j’aurais bien aimé une installation propre via mon gestionnaire de paquet. Du coup je garde mon sang-froid et découvre que plus bas dans la page on me propose un "via package manager". Ouf, je suis les liens et trouve effectivement mon bonheur :
 &lt;a href="https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions"&gt;
  https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions
 &lt;/a&gt;
 . Pour Yarn c’est relativement similaire, on va sur le site et on trouve assez vite le lien qui va bien
 &lt;a href="https://yarnpkg.com/en/docs/install"&gt;
  https://yarnpkg.com/en/docs/install
 &lt;/a&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Les prérequis sont là, installons tout ca. La doc demande de cloner le dépôt, ça c’est fait, puis de faire
 &lt;code&gt;
  yarn
 &lt;/code&gt;
 . Alors on s’exécute. Les paquets/dépendances s’installent, tout roule.
&lt;/p&gt;
&lt;p&gt;
 La doc parle ensuite de test, j’ignore ceci ne souhaitant pas tester le code lui-même.
&lt;/p&gt;
&lt;p&gt;
 Enfin, on nous présente une longue liste des paquets utilisés pour finir sur une note concernant la licence du code. Ok. Cool. Je fais quoi ? Petit appel à l’aide sur IRC et on relit tout pour finir par la liste qui parle du paquet
 &lt;em&gt;
  zmarkdown
 &lt;/em&gt;
 , "Fully integrated package to be used in zeste de savoir website". Allons voir là dedans (Je découvrirais alors plus tard que le dossier package du dépot contient tout les paquets développés spécifiquement pour zmd, et que zmarkdown est un exemple du serveur en lui-même).
&lt;/p&gt;
&lt;p&gt;
 Je me retrouve alors dans
 &lt;a href="https://github.com/zestedesavoir/zmarkdown/tree/master/packages/zmarkdown"&gt;
  le dossier zmarkdown
 &lt;/a&gt;
 . Le README commence bien, "zmarkdown server HTTP API", ouf!
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 Il attaque direct par une section "usage" (chouette
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 ) en disant de lancer la commande
 &lt;code&gt;
  npm run server
 &lt;/code&gt;
 . Je
 &lt;del&gt;
  m
 &lt;/del&gt;
 l’exécute.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="npm run server" src="./images/uploaded/comment-et-pourquoi-jai-intégré-zmarkdown-à-pelican/npm-run-server.png"/&gt;
 &lt;figcaption&gt;
  npm run server
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ok, apparemment ça marche… Mais la doc ne précise pas sur quel port tout cela est servi !! À l’aide !! Les gentils compères sur IRC m’explique alors que le serveur tourne sur le port 27272. Allons voir…
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="zmd is running" src="./images/uploaded/comment-et-pourquoi-jai-intégré-zmarkdown-à-pelican/zmd-is-running.png"/&gt;
 &lt;figcaption&gt;
  zmd is running
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Effectivement, ça marche !
&lt;/p&gt;
&lt;h4 id="utilisation"&gt;
 &lt;a aria-hidden="true" href="#utilisation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utilisation
&lt;/h4&gt;
&lt;p&gt;
 En lisant la doc, on voit que le serveur sert plusieurs routes pour les différents types de contenu souhaité. On veut de l’html, donc on va aller faire une requête sur la route du même nom,
 &lt;code&gt;
  /html
 &lt;/code&gt;
 . (cf la doc pour le contenu du json à envoyer).
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;$ curl -H &lt;span class="hljs-string"&gt;"Content-Type: application/json"&lt;/span&gt; -X POST -d &lt;span class="hljs-string"&gt;'{"md":"foo"}'&lt;/span&gt; http://localhost:27272/html
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ce à quoi le serveur nous répond gentiment (cf la doc pour mieux comprendre le contenu du json réponse),
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;[&lt;span class="hljs-string"&gt;"&amp;lt;p&amp;gt;foo&amp;lt;/p&amp;gt;"&lt;/span&gt;,{&lt;span class="hljs-string"&gt;"disableToc"&lt;/span&gt;:&lt;span class="hljs-literal"&gt;true&lt;/span&gt;,&lt;span class="hljs-string"&gt;"languages"&lt;/span&gt;:[],&lt;span class="hljs-string"&gt;"depth"&lt;/span&gt;:1},[]]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Yes, on a du contenu converti !! Joie et bonheur !!
&lt;/p&gt;
&lt;p&gt;
 Il ne reste plus qu’à faire fonctionner ça avec pelican…
&lt;/p&gt;
&lt;h3 id="intégration-dans-pelican"&gt;
 &lt;a aria-hidden="true" href="#intégration-dans-pelican"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Intégration dans pelican
&lt;/h3&gt;
&lt;p&gt;
 Maintenant que l’on sait convertir du markdown de ZdS (que j’appelerais
 &lt;del&gt;
  Quézac
 &lt;/del&gt;
 &lt;em&gt;
  zmd
 &lt;/em&gt;
 ), il nous faut l’intégrer à Pelican pour que ce dernier sache comment l’utiliser.
&lt;/p&gt;
&lt;h4 id="une-histoire-de-reader"&gt;
 &lt;a aria-hidden="true" href="#une-histoire-de-reader"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Une histoire de Reader
&lt;/h4&gt;
&lt;p&gt;
 Faut le reconnaître, Pelican s’est relativement bien foutu. Et en plus comme c’est open-source, on trouve facilement des exemples de code pour faire plein de choses. Ce fut le cas pour créer un nouveau
 &lt;a href="http://docs.getpelican.com/en/stable/internals.html#how-to-implement-a-new-reader"&gt;
  &lt;em&gt;
   Reader
  &lt;/em&gt;
 &lt;/a&gt;
 , c’est à dire une procédure de traitement pour avoir en entrée un texte avec des métadonnées et en sortie de l’html pour le site. Dans mon cas, le texte sera du zmd évidemment.
&lt;/p&gt;
&lt;p&gt;
 De base Pelican possède des readers pour plusieurs formats, comme le markdown (md) de base, le rst ou encore l’asciidoc. J’en ai donc créer un pour traiter le zmd. Histoire de gagner du temps et pour ne pas tout réinventer, je me suis inspiré de différents readers proposé par la communauté dans le dépôt
 &lt;a href="https://github.com/getpelican/pelican-plugins"&gt;
  pelican-plugins
 &lt;/a&gt;
 . Prenons par exemple
 &lt;a href="https://github.com/dames57/multimarkdown_reader/blob/d6b0746ee94bfb721c96b18afdc970e1ebf287e9/mmd_reader.py"&gt;
  multimarkdown_reader
 &lt;/a&gt;
 et la doc de pelican qui va bien.
&lt;/p&gt;
&lt;p&gt;
 On apprend tout d’abord qu’il faut hériter de
 &lt;code&gt;
  BaseReader
 &lt;/code&gt;
 et avoir une variable
 &lt;code&gt;
  enable
 &lt;/code&gt;
 à
 &lt;code&gt;
  True
 &lt;/code&gt;
 . Ok facile. On lui renseignera aussi quelles extensions on se doit de traiter avec notre reader. Disons
 &lt;code&gt;
  zmd
 &lt;/code&gt;
 . On a un début de classe comme ceci :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;&lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;ZmdReader&lt;/span&gt;&lt;span class="hljs-params"&gt;(BaseReader)&lt;/span&gt;:&lt;/span&gt;
    enabled = &lt;span class="hljs-keyword"&gt;True&lt;/span&gt;
    file_extensions = [&lt;span class="hljs-string"&gt;'zmd'&lt;/span&gt;]

    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;def&lt;/span&gt; &lt;span class="hljs-title"&gt;read&lt;/span&gt;&lt;span class="hljs-params"&gt;(self, filename)&lt;/span&gt;:&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;pass&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Il ne reste "plus qu’à" coder la méthode read qui traitera un fichier en entrée puis donnera de l’html en sortie.
&lt;/p&gt;
&lt;p&gt;
 Pour rappel (ou pas), un fichier de contenu zmd aura la forme suivante :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-plain"&gt;metadata_key_1: metadata_value_1
metadata_key_2: metadata_value_2
metadata_key_n: metadata_value_n

text-au-format-zmd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 On va donc séparer le traitement du fichier en deux étapes. Tout d’abord extraire les métadonnées (titre, date, description etc) puis convertir le zmd en html.
&lt;/p&gt;
&lt;p&gt;
 Grosso modo, voici le code de la fonction read. Le traitement du zmd se fait dans la fonction
 &lt;code&gt;
  _zmdtohtml()
 &lt;/code&gt;
 ligne 17 et que l’on verra ensuite.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;def&lt;/span&gt; &lt;span class="hljs-title"&gt;read&lt;/span&gt;&lt;span class="hljs-params"&gt;(self, filename)&lt;/span&gt;:&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;with&lt;/span&gt; pelican_open(filename) &lt;span class="hljs-keyword"&gt;as&lt;/span&gt; fp:
        text = list(fp.splitlines())

    &lt;span class="hljs-comment"&gt;# Split metadata from content&lt;/span&gt;
    metadata = {}
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt; i, line &lt;span class="hljs-keyword"&gt;in&lt;/span&gt; enumerate(text):
        meta_match = re.match(&lt;span class="hljs-string"&gt;r'^([a-zA-Z_-]+):(.*)'&lt;/span&gt;, line)
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; meta_match:
            name = meta_match.group(&lt;span class="hljs-number"&gt;1&lt;/span&gt;).lower()
            value = meta_match.group(&lt;span class="hljs-number"&gt;2&lt;/span&gt;).strip()
            metadata[name] = self.process_metadata(name, value)
        &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;:
            content = &lt;span class="hljs-string"&gt;'\n'&lt;/span&gt;.join(text[i:])
            &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;

    output = self._zmdtohtml(content)

    &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; output, metadata
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="la-conversion-du-zmd-via-le-serveur-idoine"&gt;
 &lt;a aria-hidden="true" href="#la-conversion-du-zmd-via-le-serveur-idoine"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La conversion du zmd via le serveur idoine
&lt;/h4&gt;
&lt;p&gt;
 Maintenant que l’on a isolé le texte au format zmd, il ne reste plus qu’à le donner à manger au serveur zmarkdown pour que ce dernier nous renvoi un beau contenu html. Et en python c’est archi simple !
&lt;/p&gt;
&lt;p&gt;
 En effet, il suffit finalement de simplement mettre le contenu du markdown dans du json…
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;content = {&lt;span class="hljs-string"&gt;'md'&lt;/span&gt;: md}
json_content = json.dumps(content)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 …de préparer une connection au serveur…
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;connection = http.client.HTTPConnection(&lt;span class="hljs-string"&gt;'localhost'&lt;/span&gt;, &lt;span class="hljs-number"&gt;27272&lt;/span&gt;)
headers = {&lt;span class="hljs-string"&gt;'Content-type'&lt;/span&gt;: &lt;span class="hljs-string"&gt;'application/json'&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 … et d’envoyer/recevoir le tout !
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;connection.request(&lt;span class="hljs-string"&gt;'POST'&lt;/span&gt;, &lt;span class="hljs-string"&gt;'/html'&lt;/span&gt;, json_content, headers)
response = connection.getresponse()
&lt;span class="hljs-keyword"&gt;return&lt;/span&gt; json.loads(response.read().decode())[&lt;span class="hljs-number"&gt;0&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 En résumé :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;def&lt;/span&gt; &lt;span class="hljs-title"&gt;_zmdtohtml&lt;/span&gt;&lt;span class="hljs-params"&gt;(self, md)&lt;/span&gt;:&lt;/span&gt;
    connection = http.client.HTTPConnection(&lt;span class="hljs-string"&gt;'localhost'&lt;/span&gt;, &lt;span class="hljs-number"&gt;27272&lt;/span&gt;)
    headers = {&lt;span class="hljs-string"&gt;'Content-type'&lt;/span&gt;: &lt;span class="hljs-string"&gt;'application/json'&lt;/span&gt;}
    content = {&lt;span class="hljs-string"&gt;'md'&lt;/span&gt;: md}
    json_content = json.dumps(content)

    connection.request(&lt;span class="hljs-string"&gt;'POST'&lt;/span&gt;, &lt;span class="hljs-string"&gt;'/html'&lt;/span&gt;, json_content, headers)

    response = connection.getresponse()
    &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; json.loads(response.read().decode())[&lt;span class="hljs-number"&gt;0&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Et BOUM! on a tout !
&lt;/p&gt;
&lt;p&gt;
 Enfin presque
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 Il ne reste qu’à prévenir Pelican qu’il existe un nouveau reader en rajoutant les deux fonctions suivantes dans le fichier de notre nouvelle classe (mais pas dans la classe elle-même) :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;def&lt;/span&gt; &lt;span class="hljs-title"&gt;add_reader&lt;/span&gt;&lt;span class="hljs-params"&gt;(readers)&lt;/span&gt;:&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt; ext &lt;span class="hljs-keyword"&gt;in&lt;/span&gt; ZmdReader.file_extensions:
        readers.reader_classes[ext] = ZmdReader

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;def&lt;/span&gt; &lt;span class="hljs-title"&gt;register&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;:&lt;/span&gt;
    signals.readers_init.connect(add_reader)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 et dire à Pelican où chercher notre reader en éditant la configuration (habituellement le fichier s’appelle pelicanconf.py) :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-makefile"&gt;PLUGIN_PATHS = ['my-plugins']  &lt;span class="hljs-comment"&gt;# J'ai ajouté le fichier dans un dossier "my-plugins"&lt;/span&gt;
PLUGINS = ['zmd_reader']  &lt;span class="hljs-comment"&gt;# mon plugin reader s'appelle zmd_reader&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Et voilà !!!
&lt;/p&gt;
&lt;p&gt;
 Une dernière chose n’est pas évoquée dans ce billet, l’étape de configuration de zmarkdown. En effet, le dossier
 &lt;a href="https://github.com/zestedesavoir/zmarkdown/tree/master/packages/zmarkdown/config"&gt;
  https://github.com/zestedesavoir/zmarkdown/tree/master/packages/zmarkdown/config
 &lt;/a&gt;
 possède des fichiers servant à personnaliser le rendu. J’ai donc passé pas mal de temps dedans pour obtenir les bonnes classes CSS ou les bons chemin de fichier pour les smileys par exemple. Mais à la fin tout roule une bonne fois pour toute, et ça, ça fait plaisir !
&lt;/p&gt;
&lt;p&gt;
 J’aimerais profiter de cet espace de conclusion pour remercier les dev de ZdS qui bossent sur zmarkdown. C’est un bel outil, un peu rude à personnaliser quand on est une quiche en javascript mais leur aide sur IRC a toujours été positive. Bref, des cœurs à eux, ils se reconnaîtront
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
&lt;/p&gt;</content><category term="python"></category><category term="pelican"></category><category term="markdown"></category><category term="tuto"></category></entry><entry><title>Faire communiquer son Arduino avec un appareil Android</title><link href="https://eskimon.fr/faire-communiquer-son-arduino-avec-un-appareil-android" rel="alternate"></link><published>2017-08-24T13:40:00+02:00</published><updated>2017-08-24T13:40:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2017-08-24:/faire-communiquer-son-arduino-avec-un-appareil-android</id><summary type="html">&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Cet article est un article "invité", rédigé par Sébastien (vous pourrez retrouver d’autres de ces réalisations à la fin de l’article).
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Bonjour à tous !
&lt;/p&gt;
&lt;p&gt;
 Dans ce tutoriel porté sur Android et Arduino, nous allons connecter ces deux mondes géniaux (n’est-ce pas
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 ?). Nous allons illustrer ce tutoriel par …&lt;/p&gt;</summary><content type="html">&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Cet article est un article "invité", rédigé par Sébastien (vous pourrez retrouver d’autres de ces réalisations à la fin de l’article).
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Bonjour à tous !
&lt;/p&gt;
&lt;p&gt;
 Dans ce tutoriel porté sur Android et Arduino, nous allons connecter ces deux mondes géniaux (n’est-ce pas
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 ?). Nous allons illustrer ce tutoriel par une application concrète ! A la fin, vous aurez une application Android avec deux boutons. Ces deux boutons permettront soit d’allumer une led connecté à l’Arduino, soit de l’éteindre. Pour cela, vous allez avoir besoin du matériel suivant :
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
  Un Arduino avec un shield Ethernet (ou wifi) ainsi qu’une led et sa résistance
 &lt;/li&gt;
 &lt;li&gt;
  Un appareil sous Android
 &lt;/li&gt;
 &lt;li&gt;
  Un ordinateur
 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
 L’ordinateur jouera le rôle du serveur : il recevra les messages envoyés par l’application Android et les renverra ensuite à l’Arduino. Sachez qu’il est tout à fait possible d’envoyer des messages de l’Arduino à Android.
&lt;/p&gt;
&lt;p&gt;
 Au niveau des compétences requises, des connaissances basiques en programmation Android et en Arduino suffiront !
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si vous voulez voir le résultat que vous obtiendrez à la fin de ce tutoriel, je vous invite à vous rendre à la section "Résultat" où vous trouverez une vidéo !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;a href="#le-protocole-mqtt"&gt;
   Le protocole MQTT
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#le-broker-mqtt--le-nœud-central"&gt;
   Le broker MQTT : le nœud central
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#connectez-votre-appareil-android-au-broker-mqtt"&gt;
    Connectez votre appareil Android au broker MQTT
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#initialisez-votre-projet-android"&gt;
     Initialisez votre projet Android
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#connectez-vous-au-broker-mqtt"&gt;
     Connectez vous au broker MQTT
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#envoyez-un-message-sur-un-topic"&gt;
     Envoyez un message sur un topic
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#recevoir-un-message"&gt;
     Recevoir un message
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#créez-votre-application"&gt;
     Créez votre application
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#connectez-votre-arduino-au-broker-mqtt"&gt;
    Connectez votre Arduino au broker MQTT
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#initialiser-votre-projet-arduino"&gt;
     Initialiser votre projet Arduino
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#le-câblage"&gt;
     Le câblage
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#communiquez-avec-le-protocole-mqtt"&gt;
      Communiquez avec le protocole MQTT
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#les-includes-nécessaires-sont-les-suivants"&gt;
       Les includes nécessaires sont les suivants
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-variables-nécessaires"&gt;
       Les variables nécessaires
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-fonctions-connect-et-messagearrived"&gt;
       Les fonctions connect et messageArrived
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#finalisation-du-programme"&gt;
       Finalisation du programme
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#le-résultat"&gt;
   Le résultat !
  &lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="le-protocole-mqtt"&gt;
 &lt;a aria-hidden="true" href="#le-protocole-mqtt"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le protocole MQTT
&lt;/h3&gt;
&lt;p&gt;
 Pour faire communiquer l’appareil Android avec l’Arduino, nous allons utiliser un langage commun : le protocole MQTT. L’avantage de ce protocole, c’est qu’il existe une librairie pour Android et une librairie pour Arduino. Ainsi nos deux mondes communiqueront de la même façon !
&lt;/p&gt;
&lt;p&gt;
 Le protocole MQTT est un protocole de messagerie de type Publish-Subscribe basé sur le protocole TCP/IP (d’où la nécessité du shield Ethernet). Le protocole se décompose donc en trois grandes parties :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Les « publishers » : ils envoient un ou des message(s) sur un ou plusieurs « Topic »
 &lt;/li&gt;
 &lt;li&gt;
  Le « broker » MQTT : il fait le lien entre les « publishers » et les « subscribers »
 &lt;/li&gt;
 &lt;li&gt;
  Les « subscribers » : ils s’abonnent à un ou plusieurs « Topic ». Lorsque qu’un message est publié sur un topic, tous les subscribers de ce topic reçoivent le message
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Le broker MQTT permet de faire le lien entre le publisher (appareil Android) et le subscriber (Arduino). Dans notre exemple il n’y a qu’un seul publisher et qu’un seul subscriber, mais il pourrait y en avoir plus.
&lt;/p&gt;
&lt;h3 id="le-broker-mqtt--le-nœud-central"&gt;
 &lt;a aria-hidden="true" href="#le-broker-mqtt--le-nœud-central"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le broker MQTT : le nœud central
&lt;/h3&gt;
&lt;p&gt;
 Le broker MQTT est le cœur de notre architecture (voir image ci-dessous). Il va permettre de faire communiquer l’appareil Android avec l’Arduino.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Architecture" src="./images/uploaded/faire-communiquer-son-arduino-avec-un-appareil-android/architecture.png"/&gt;
 &lt;figcaption&gt;
  Architecture
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Rassurez-vous, vous n’aurez pas besoin de développer votre propre broker, il en existe déjà. Mais si cela peut satisfaire votre soif de développement, ça fera un bon exercice !
&lt;/p&gt;
&lt;p&gt;
 Celui que je vais utiliser tout au long de ce tuto, et que je vous conseille, est le broker « Mosquitto ». C’est un broker open source. Il suffit de télécharger l’exécutable sur le site officiel (
 &lt;a href="https://mosquitto.org/"&gt;
  https://mosquitto.org/
 &lt;/a&gt;
 ) et de l’installer. Pensez à lire le fichier readme.txt qui se trouve à la racine du dossier d’installation, car il vous précise les dépendances à installer. Il vous faudra notamment installer pthread, openSSL (les liens vous sont fournis dans le readme) ainsi que l’ajout de quelques dll. Pour information, il vous faudra placer les dll dans le dossier de l’installation.
&lt;/p&gt;
&lt;p&gt;
 Pour le lancer, une simple ligne de commande suffit. Dans mon cas ça donne (sachant que je suis sous Windows) :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;&lt;span class="hljs-string"&gt;"C:\Program Files (x86)\mosquitto\mosquitto.exe"&lt;/span&gt; -v -p 1883
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Il suffit donc de lancer l’exécutable qui a été installé, avec les options :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   -v
  &lt;/code&gt;
  : mode verbose
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   -p 1883
  &lt;/code&gt;
  : on va utiliser le port de l’ordinateur 1883
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Vous voilà avec un broker qui tourne et qui est prêt à recevoir et envoyer des messages !
&lt;/p&gt;
&lt;h3 id="connectez-votre-appareil-android-au-broker-mqtt"&gt;
 &lt;a aria-hidden="true" href="#connectez-votre-appareil-android-au-broker-mqtt"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Connectez votre appareil Android au broker MQTT
&lt;/h3&gt;
&lt;p&gt;
 On va à présent créer notre application Android ! Elle sera composée de deux boutons : un pour allumer la LED connectée à notre Arduino, et l’autre pour l’éteindre.
&lt;/p&gt;
&lt;h4 id="initialisez-votre-projet-android"&gt;
 &lt;a aria-hidden="true" href="#initialisez-votre-projet-android"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Initialisez votre projet Android
&lt;/h4&gt;
&lt;p&gt;
 On va dans un premier temps initialiser notre projet pour qu’il puisse communiquer avec le protocole MQTT. Pour cela, il faut :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   Ajouter les dépendances dans le fichier gradle:
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    Au tout début de votre fichier gradle :
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-text"&gt;    repositories {
        maven { url 'https://repo.eclipse.org/content/repositories/paho-snapshots/' }
    }
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-asciidoc"&gt;&lt;span class="hljs-bullet"&gt;- &lt;/span&gt;Dans la partie &lt;span class="hljs-strong"&gt;*dependencies*&lt;/span&gt; de votre fichier gradle:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-text"&gt;    compile('org.eclipse.paho:org.eclipse.paho.android.service:1.0.3-SNAPSHOT') {
        exclude module: 'support-v4'
    }
    compile 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.0.3-SNAPSHOT'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
 &lt;li&gt;
  Ajouter le service dans le Manifest entre les balises
  &lt;code&gt;
   &amp;lt;Application&amp;gt;
  &lt;/code&gt;
  (si vous l’oubliez, vous n’aurez aucune erreur mais il vous sera impossible de vous connecter au broker et d’envoyer/recevoir des messages. Si je vous dis ça c’est que j’ai passé quelques heures à débogger mon application pour ce simple oublie) :
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-xml"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;service&lt;/span&gt; &lt;span class="hljs-attr"&gt;android:name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"org.eclipse.paho.android.service.MqttService"&lt;/span&gt; &amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;service&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ajouter les permissions dans le Manifest (en dessous de la balise fermante : &amp;lt;/application&amp;gt;) :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-xml"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;uses-permission&lt;/span&gt; &lt;span class="hljs-attr"&gt;android:name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"android.permission.WAKE_LOCK"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;uses-permission&lt;/span&gt; &lt;span class="hljs-attr"&gt;android:name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"android.permission.INTERNET"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;uses-permission&lt;/span&gt; &lt;span class="hljs-attr"&gt;android:name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"android.permission.ACCESS_NETWORK_STATE"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;uses-permission&lt;/span&gt; &lt;span class="hljs-attr"&gt;android:name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"android.permission.READ_PHONE_STATE"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="connectez-vous-au-broker-mqtt"&gt;
 &lt;a aria-hidden="true" href="#connectez-vous-au-broker-mqtt"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Connectez vous au broker MQTT
&lt;/h4&gt;
&lt;p&gt;
 Votre projet est enfin prêt ! Nous allons maintenant créer la méthode qui va nous permettre de nous connecter au broker. Voici son prototype :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-java"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;connect&lt;/span&gt;&lt;span class="hljs-params"&gt;(String address, String port)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
 &lt;li&gt;
  Le premier argument
  &lt;code&gt;
   address
  &lt;/code&gt;
  , correspond à l’adresse IP où se situe le broker. Pour connaitre l’adresse IP de votre ordinateur (sous windows), ouvrez une console et tapez la commande
  &lt;code&gt;
   ipconfig
  &lt;/code&gt;
  et cherchez la ligne
  &lt;em&gt;
   Adresse IPv4
  &lt;/em&gt;
  . L’adresse est de la forme :
  &lt;code&gt;
   192.168.1.xxx
  &lt;/code&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Le second argument
  &lt;code&gt;
   port
  &lt;/code&gt;
  correspond au port utilisé par votre broker MQTT.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Dans la partie précédente, nous avons lancé notre broker MQTT sur le port 1883.
&lt;/p&gt;
&lt;p&gt;
 Le corps de la méthode est assez simple. Je vous laisse le découvrir par vous même. Si la connexion est réussi, la méthode
 &lt;code&gt;
  onSuccess
 &lt;/code&gt;
 est appelée, sinon la méthode
 &lt;code&gt;
  onFailure
 &lt;/code&gt;
 sera appelée.
 &lt;strong&gt;
  Attention !
 &lt;/strong&gt;
 Vous aurez une erreur sur la dernière ligne, quand on appelle la méthode
 &lt;code&gt;
  setCallback
 &lt;/code&gt;
 , ainsi que sur la ligne
 &lt;code&gt;
  subscribe(topic);
 &lt;/code&gt;
 . Commentez les, nous y reviendrons plus tard.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-java"&gt;&lt;span class="hljs-keyword"&gt;private&lt;/span&gt; MqttAndroidClient client = &lt;span class="hljs-keyword"&gt;null&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;connect&lt;/span&gt;&lt;span class="hljs-params"&gt;(String address, String port)&lt;/span&gt; &lt;/span&gt;{
    String clientId = MqttClient.generateClientId(); &lt;span class="hljs-comment"&gt;// génère un ID&lt;/span&gt;
    client = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; MqttAndroidClient(getApplicationContext(), &lt;span class="hljs-string"&gt;"tcp://"&lt;/span&gt; + address + &lt;span class="hljs-string"&gt;":"&lt;/span&gt; + port, clientId);

    &lt;span class="hljs-keyword"&gt;try&lt;/span&gt; {
        IMqttToken token = client.connect(); &lt;span class="hljs-comment"&gt;// on tente de se connecter&lt;/span&gt;
        token.setActionCallback(&lt;span class="hljs-keyword"&gt;new&lt;/span&gt; IMqttActionListener() {
            &lt;span class="hljs-meta"&gt;@Override&lt;/span&gt;
            &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;onSuccess&lt;/span&gt;&lt;span class="hljs-params"&gt;(IMqttToken asyncActionToken)&lt;/span&gt; &lt;/span&gt;{
                &lt;span class="hljs-comment"&gt;// Nous sommes connecté&lt;/span&gt;
                System.out.println(&lt;span class="hljs-string"&gt;"On est connecté !"&lt;/span&gt;);
                subscribe(topic); &lt;span class="hljs-comment"&gt;// ligne à commenter pour le moment&lt;/span&gt;
            }

            &lt;span class="hljs-meta"&gt;@Override&lt;/span&gt;
            &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;onFailure&lt;/span&gt;&lt;span class="hljs-params"&gt;(IMqttToken asyncActionToken, Throwable exception)&lt;/span&gt; &lt;/span&gt;{
                &lt;span class="hljs-comment"&gt;// Erreur de connexion : temps de connexion trop long ou problème de pare-feu&lt;/span&gt;
                System.err.println(&lt;span class="hljs-string"&gt;"Echec de connection !"&lt;/span&gt;);
            }
        });
    } &lt;span class="hljs-keyword"&gt;catch&lt;/span&gt; (MqttException e) {
        e.printStackTrace();
    }

    client.setCallback(&lt;span class="hljs-keyword"&gt;new&lt;/span&gt; MqttCallbackHandler()); &lt;span class="hljs-comment"&gt;// ligne à commenter pour le moment&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Il ne vous reste plus qu’à appeler cette méthode dans la méthode
 &lt;code&gt;
  onResume
 &lt;/code&gt;
 et vous serez connecté à votre broker ! Pensez à mettre votre propre adresse IP et à avoir le broker qui tourne sur votre ordinateur pour que la connexion puisse se faire.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-java"&gt;&lt;span class="hljs-meta"&gt;@Override&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;onResume&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;super&lt;/span&gt;.onResume();
    connect(&lt;span class="hljs-string"&gt;"192.168.1.17"&lt;/span&gt;, &lt;span class="hljs-string"&gt;"1883"&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Bien sûr, si vous vous connectez au broker dans la méthode
 &lt;code&gt;
  onResume
 &lt;/code&gt;
 , il faut penser à vous déconnecter dans la méthode
 &lt;code&gt;
  onPause
 &lt;/code&gt;
 . Je ne détaille pas le code mais je vous le donne (il est assez simple) :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-java"&gt;&lt;span class="hljs-meta"&gt;@Override&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;onPause&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;super&lt;/span&gt;.onPause();
    disconnect();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-java"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;disconnect&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (client == &lt;span class="hljs-keyword"&gt;null&lt;/span&gt;) {
        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;try&lt;/span&gt; {
        IMqttToken disconToken = client.disconnect();
        disconToken.setActionCallback(&lt;span class="hljs-keyword"&gt;new&lt;/span&gt; IMqttActionListener() {
            &lt;span class="hljs-meta"&gt;@Override&lt;/span&gt;
            &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;onSuccess&lt;/span&gt;&lt;span class="hljs-params"&gt;(IMqttToken asyncActionToken)&lt;/span&gt; &lt;/span&gt;{
                &lt;span class="hljs-comment"&gt;// Nous nous sommes correctement déconnecté&lt;/span&gt;
            }

            &lt;span class="hljs-meta"&gt;@Override&lt;/span&gt;
            &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;onFailure&lt;/span&gt;&lt;span class="hljs-params"&gt;(IMqttToken asyncActionToken,
                                  Throwable exception)&lt;/span&gt; &lt;/span&gt;{
                &lt;span class="hljs-comment"&gt;// Quelque chose c'est mal passé, mais on est probablement déconnecté malgré tout&lt;/span&gt;
            }
        });
    } &lt;span class="hljs-keyword"&gt;catch&lt;/span&gt; (MqttException e) {
        e.printStackTrace();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="envoyez-un-message-sur-un-topic"&gt;
 &lt;a aria-hidden="true" href="#envoyez-un-message-sur-un-topic"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Envoyez un message sur un topic
&lt;/h4&gt;
&lt;p&gt;
 Pour envoyer un message, nous aurons besoin de deux choses : le topic sur lequel envoyer le message et le message lui-même. Pour ce faire, nous allons utiliser la méthode
 &lt;code&gt;
  publish
 &lt;/code&gt;
 de notre client (de classe
 &lt;code&gt;
  MqttAndroidClient
 &lt;/code&gt;
 ). Cette méthode prend en paramètre un topic et un message, ça tombe bien ! Pour notre exemple, nous allons publier un message sur le topic
 &lt;em&gt;
  LEDArduino
 &lt;/em&gt;
 . Ainsi, tous les subscribers abonnés à ce topic receveront le message. Voici le code :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-java"&gt;&lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;final&lt;/span&gt; String topic = &lt;span class="hljs-string"&gt;"LEDArduino"&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;sendMsg&lt;/span&gt;&lt;span class="hljs-params"&gt;(String msg)&lt;/span&gt; &lt;/span&gt;{
    MqttMessage message = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; MqttMessage();
    message.setPayload(msg.getBytes());
    &lt;span class="hljs-keyword"&gt;try&lt;/span&gt; {
        client.publish(topic, message);
    } &lt;span class="hljs-keyword"&gt;catch&lt;/span&gt; (MqttException e) {
        e.printStackTrace();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="recevoir-un-message"&gt;
 &lt;a aria-hidden="true" href="#recevoir-un-message"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Recevoir un message
&lt;/h4&gt;
&lt;p&gt;
 Pour notre exemple, notre application Android n’aura pas besoin de recevoir de message. Vous pouvez passer cette partie si vous le souhaitez. Sachez que c’est dans cette partie que nous allons pouvoir décommenter le code précédemment commenté dans notre méthode
 &lt;code&gt;
  connect
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Nous allons avoir besoin de deux choses pour recevoir des messages : souscrire à des topics et avoir un callback qui sera appelé automatiquement quand un message aura été reçu par l’application.
&lt;/p&gt;
&lt;p&gt;
 Pour souscrire à un topic, nous allons faire appel à la méthode
 &lt;code&gt;
  subscribe
 &lt;/code&gt;
 de notre client. Cette méthode prend deux arguments :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  topic : le topic sur lequel on veut s’abonner
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   QOS (quality of service) : peut prendre trois valeurs :
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    0 : Le message sera délivré qu’une seule fois, sans confirmation
   &lt;/li&gt;
   &lt;li&gt;
    1 : Le message sera délivré au moins une fois, avec confirmation
   &lt;/li&gt;
   &lt;li&gt;
    2 : Le message sera délivré exactement une fois, avec vérification en quatre étapes
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Voici ce que donne notre méthode
 &lt;code&gt;
  subscribe
 &lt;/code&gt;
 . Une fois inséré dans votre code, vous pouvez décommenter le code qui l’appele dans la méthode
 &lt;code&gt;
  connect
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-java"&gt;&lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;static&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; QOS = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;subscribe&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;final&lt;/span&gt; String topic)&lt;/span&gt; &lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;try&lt;/span&gt; {
        IMqttToken subToken = client.subscribe(topic, QOS);
        subToken.setActionCallback(&lt;span class="hljs-keyword"&gt;new&lt;/span&gt; IMqttActionListener() {
            &lt;span class="hljs-meta"&gt;@Override&lt;/span&gt;
            &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;onSuccess&lt;/span&gt;&lt;span class="hljs-params"&gt;(IMqttToken asyncActionToken)&lt;/span&gt; &lt;/span&gt;{
                &lt;span class="hljs-comment"&gt;// On a bien souscrit au topic&lt;/span&gt;
                System.out.println(&lt;span class="hljs-string"&gt;"onSuccess subscribe topic "&lt;/span&gt; + topic);
            }
            &lt;span class="hljs-meta"&gt;@Override&lt;/span&gt;
            &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;onFailure&lt;/span&gt;&lt;span class="hljs-params"&gt;(IMqttToken asyncActionToken,
                                  Throwable exception)&lt;/span&gt; &lt;/span&gt;{
                &lt;span class="hljs-comment"&gt;// La souscription n'a pas pu se faire, peut être que l'utilisateur n'a pas&lt;/span&gt;
                &lt;span class="hljs-comment"&gt;// l'autorisation de souscrire à ce topic&lt;/span&gt;
            }
        });
    } &lt;span class="hljs-keyword"&gt;catch&lt;/span&gt; (MqttException e) {
        e.printStackTrace();
    } &lt;span class="hljs-keyword"&gt;catch&lt;/span&gt; (Exception e) {
        e.printStackTrace();
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Passons maintenant à la classe qui va permettre d’avoir nos callback ! Elle doit implémenter l’interface
 &lt;code&gt;
  MqttCallback
 &lt;/code&gt;
 . Une fois cette classe implémenter, vous allez pouvoir décommenter la méthode
 &lt;code&gt;
  setCallback
 &lt;/code&gt;
 de la méthode
 &lt;code&gt;
  connect
 &lt;/code&gt;
 . Dans notre exemple, la classe qui implémente cette interface se nomme
 &lt;code&gt;
  MqttCallbackHandler
 &lt;/code&gt;
 . Je vous donne le code basique de la classe. Encore une fois, il est facile à comprendre :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-java"&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; android.content.Context;

&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.eclipse.paho.client.mqttv3.MqttCallback;
&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; org.eclipse.paho.client.mqttv3.MqttMessage;

&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-class"&gt;&lt;span class="hljs-keyword"&gt;class&lt;/span&gt; &lt;span class="hljs-title"&gt;MqttCallbackHandler&lt;/span&gt; &lt;span class="hljs-keyword"&gt;implements&lt;/span&gt; &lt;span class="hljs-title"&gt;MqttCallback&lt;/span&gt; &lt;/span&gt;{

    &lt;span class="hljs-comment"&gt;/** {&lt;span class="hljs-doctag"&gt;@link&lt;/span&gt; Context} for the application used to format and import external strings**/&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; Context context;
    &lt;span class="hljs-comment"&gt;/** Client handle to reference the connection that this handler is attached to**/&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;private&lt;/span&gt; String clientHandle;

    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-title"&gt;MqttCallbackHandler&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
    &lt;/span&gt;{
    }

    &lt;span class="hljs-comment"&gt;/**
     * &lt;span class="hljs-doctag"&gt;@see&lt;/span&gt; org.eclipse.paho.client.mqttv3.MqttCallback#connectionLost(java.lang.Throwable)
     */&lt;/span&gt;
    &lt;span class="hljs-meta"&gt;@Override&lt;/span&gt;
    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;connectionLost&lt;/span&gt;&lt;span class="hljs-params"&gt;(Throwable cause)&lt;/span&gt; &lt;/span&gt;{
    }

    &lt;span class="hljs-comment"&gt;/**
     * &lt;span class="hljs-doctag"&gt;@see&lt;/span&gt; org.eclipse.paho.client.mqttv3.MqttCallback#messageArrived(java.lang.String, |org.eclipse.paho.client.mqttv3.MqttMessage)
     */&lt;/span&gt;
    &lt;span class="hljs-meta"&gt;@Override&lt;/span&gt;
    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;messageArrived&lt;/span&gt;&lt;span class="hljs-params"&gt;(String topic, MqttMessage message)&lt;/span&gt; &lt;span class="hljs-keyword"&gt;throws&lt;/span&gt; Exception &lt;/span&gt;{
        String message_str = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; String(message.getPayload(), &lt;span class="hljs-string"&gt;"UTF-8"&lt;/span&gt;);
        System.out.println(&lt;span class="hljs-string"&gt;"message arrivé str "&lt;/span&gt; + topic + &lt;span class="hljs-string"&gt;" "&lt;/span&gt; + message_str);
    }

    &lt;span class="hljs-comment"&gt;/**
     * &lt;span class="hljs-doctag"&gt;@see&lt;/span&gt; |org.eclipse.paho.client.mqttv3.MqttCallback#deliveryComplete(org.eclipse.paho.client.mqttv3.IMqttDeliveryTok|en)
     */&lt;/span&gt;
    &lt;span class="hljs-meta"&gt;@Override&lt;/span&gt;
    &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;deliveryComplete&lt;/span&gt;&lt;span class="hljs-params"&gt;(IMqttDeliveryToken token)&lt;/span&gt; &lt;/span&gt;{
        &lt;span class="hljs-comment"&gt;// Do nothing&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="créez-votre-application"&gt;
 &lt;a aria-hidden="true" href="#créez-votre-application"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Créez votre application
&lt;/h4&gt;
&lt;p&gt;
 Nous avons maintenant toutes les bases qu’il nous faut pour créer notre application qui va communiquer avec notre Arduino. Il ne nous reste plus qu’à créer deux boutons : un bouton qui va permettre d’allumer la LED et un bouton pour l’éteindre. Si on clique sur le bouton qui doit allumer la LED, on va envoyer le message "ON" en appelant simplement la méthode
 &lt;code&gt;
  sendMsg
 &lt;/code&gt;
 précédemment écrite. Si on clique sur le bouton pour éteindre la LED, on va envoyer le message "OFF". Simple non ? Je vous laisse le faire, et si besoin je vous donne mon code Java et XML :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-java"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;AllumerLed&lt;/span&gt;&lt;span class="hljs-params"&gt;(View v)&lt;/span&gt; &lt;/span&gt;{
    sendMsg(&lt;span class="hljs-string"&gt;"ON"&lt;/span&gt;);
}
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;public&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;EteindreLed&lt;/span&gt;&lt;span class="hljs-params"&gt;(View v)&lt;/span&gt; &lt;/span&gt;{
    sendMsg(&lt;span class="hljs-string"&gt;"OFF"&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-xml"&gt;&lt;span class="php"&gt;&lt;span class="hljs-meta"&gt;&amp;lt;?&lt;/span&gt;xml version=&lt;span class="hljs-string"&gt;"1.0"&lt;/span&gt; encoding=&lt;span class="hljs-string"&gt;"utf-8"&lt;/span&gt;&lt;span class="hljs-meta"&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;RelativeLayout&lt;/span&gt; &lt;span class="hljs-attr"&gt;xmlns:android&lt;/span&gt;=&lt;span class="hljs-string"&gt;"http://schemas.android.com/apk/res/android"&lt;/span&gt;
    &lt;span class="hljs-attr"&gt;android:layout_width&lt;/span&gt;=&lt;span class="hljs-string"&gt;"match_parent"&lt;/span&gt;
    &lt;span class="hljs-attr"&gt;android:layout_height&lt;/span&gt;=&lt;span class="hljs-string"&gt;"match_parent"&lt;/span&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;LinearLayout&lt;/span&gt;
        &lt;span class="hljs-attr"&gt;android:layout_width&lt;/span&gt;=&lt;span class="hljs-string"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="hljs-attr"&gt;android:layout_height&lt;/span&gt;=&lt;span class="hljs-string"&gt;"wrap_content"&lt;/span&gt;
        &lt;span class="hljs-attr"&gt;android:layout_centerInParent&lt;/span&gt;=&lt;span class="hljs-string"&gt;"true"&lt;/span&gt;
        &lt;span class="hljs-attr"&gt;android:orientation&lt;/span&gt;=&lt;span class="hljs-string"&gt;"vertical"&lt;/span&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;Button&lt;/span&gt;
            &lt;span class="hljs-attr"&gt;android:layout_width&lt;/span&gt;=&lt;span class="hljs-string"&gt;"match_parent"&lt;/span&gt;
            &lt;span class="hljs-attr"&gt;android:layout_height&lt;/span&gt;=&lt;span class="hljs-string"&gt;"wrap_content"&lt;/span&gt;
            &lt;span class="hljs-attr"&gt;android:onClick&lt;/span&gt;=&lt;span class="hljs-string"&gt;"AllumerLed"&lt;/span&gt;
            &lt;span class="hljs-attr"&gt;android:text&lt;/span&gt;=&lt;span class="hljs-string"&gt;"Que la lumière soit !"&lt;/span&gt; /&amp;gt;&lt;/span&gt;

        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;Button&lt;/span&gt;
            &lt;span class="hljs-attr"&gt;android:layout_width&lt;/span&gt;=&lt;span class="hljs-string"&gt;"wrap_content"&lt;/span&gt;
            &lt;span class="hljs-attr"&gt;android:layout_height&lt;/span&gt;=&lt;span class="hljs-string"&gt;"wrap_content"&lt;/span&gt;
            &lt;span class="hljs-attr"&gt;android:onClick&lt;/span&gt;=&lt;span class="hljs-string"&gt;"EteindreLed"&lt;/span&gt;
            &lt;span class="hljs-attr"&gt;android:text&lt;/span&gt;=&lt;span class="hljs-string"&gt;"J'ai eu assez de lumière, merci !"&lt;/span&gt; /&amp;gt;&lt;/span&gt;

    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;LinearLayout&lt;/span&gt;&amp;gt;&lt;/span&gt;

&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;RelativeLayout&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Une fois votre application terminée, elle devrait pouvoir se connecter au broker MQTT (pensez à lancer le broker sur votre ordinateur et à avoir votre appareil Android en réseau local avec votre ordinateur, par exemple en étant sur le même réseau wifi, et envoyer des messages. Lorsque vous cliquez sur un bouton sur Android, vous devriez voir dans la console que le broker MQTT a reçu un message (voir image ci-dessous).
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Console Mosquitto" src="./images/uploaded/faire-communiquer-son-arduino-avec-un-appareil-android/console-mosquitto.png"/&gt;
 &lt;figcaption&gt;
  Console Mosquitto
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Le message reçu par le broker qui fait 2 bytes est le message "ON" et le message reçu qui fait 3 bytes est le message "OFF".
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="connectez-votre-arduino-au-broker-mqtt"&gt;
 &lt;a aria-hidden="true" href="#connectez-votre-arduino-au-broker-mqtt"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Connectez votre Arduino au broker MQTT
&lt;/h3&gt;
&lt;h4 id="initialiser-votre-projet-arduino"&gt;
 &lt;a aria-hidden="true" href="#initialiser-votre-projet-arduino"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Initialiser votre projet Arduino
&lt;/h4&gt;
&lt;p&gt;
 Comme pour Android, il vous faut d’abord télécharger la librairie qui va vous permettre de communiquer avec le protocole MQTT. Rendez-vous à l’adresse suivante :
 &lt;a href="https://eclipse.org/paho/clients/c/embedded/"&gt;
  https://eclipse.org/paho/clients/c/embedded/
 &lt;/a&gt;
 et descendez jusqu’à la section Arduino. Vous allez avoir un lien pour télécharger la librairie. Pour rappel, pour ajouter la librairie dans Arduino (téléchargée au format ZIP), il vous faut cliquer (dans l’IDE d’Arduino) sur "Croquis-&amp;gt;Inclure une bibliothèque-&amp;gt;Ajouter la bibliothèque .ZIP".
&lt;/p&gt;
&lt;p&gt;
 Une fois la librairie ajoutée, vous pouvez utiliser le protocole MQTT ! Sachez qu’un exemple très complet vous est fourni avec la librairie. Vous le trouverez dans votre dossier Arduino-&amp;gt;libraries-&amp;gt;MQTTClient-&amp;gt;example. Vous ne devriez pas avoir de mal à le lire car il reprends ce que nous avons vu avec Android (connect, subscribe, …), mais façon Arduino. Sachez d’ailleurs que je me suis grandement inspiré de cet exemple pour écrire le code que nous allons voir ensemble.
&lt;/p&gt;
&lt;h4 id="le-câblage"&gt;
 &lt;a aria-hidden="true" href="#le-câblage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le câblage
&lt;/h4&gt;
&lt;p&gt;
 Pour pouvoir utiliser le protocole MQTT sur votre Arduino, il vous faut un shield ethernet (ou wifi). En effet, le protocole MQTT étant basé sur le protocole TCP/IP, le shield ethernet (ou wifi) est requis. Il vous faudra également relier votre Arduino à votre réseau local en connectant le shield à votre box via un câble ethernet (ou via wifi). Une fois ceci fait, nous allons pouvoir brancher notre LED.
&lt;/p&gt;
&lt;p&gt;
 Concernant la LED, je l’ai connecté au PIN 2 de l’Arduino, en série avec sa résistance (ça serait bête de la griller !). J’ai connecté l’anode sur le pin 5V de l’Arduino et la cathode sur le PIN 2. Ainsi, quand le PIN 2 sera à 0V, la LED s’allumera, et quand le PIN sera à 5V, la LED s’éteindra.
&lt;/p&gt;
&lt;h4 id="communiquez-avec-le-protocole-mqtt"&gt;
 &lt;a aria-hidden="true" href="#communiquez-avec-le-protocole-mqtt"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Communiquez avec le protocole MQTT
&lt;/h4&gt;
&lt;p&gt;
 Nous allons à présent passer au code pour connecter l’Arduino au broker MQTT et pour recevoir les messages. Je ne vous montrerai pas comment envoyer un message. Vous trouverez, si besoin, les quelques lignes qui le permettent dans la fonction loop() de l’exemple fourni avec la librairie.
&lt;/p&gt;
&lt;h5 id="les-includes-nécessaires-sont-les-suivants"&gt;
 &lt;a aria-hidden="true" href="#les-includes-nécessaires-sont-les-suivants"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les includes nécessaires sont les suivants
&lt;/h5&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-c"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;SPI.h&amp;gt;        // Pour communiquer avec le shield Ethernet&lt;/span&gt;&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;Ethernet.h&amp;gt;   // Pour la partie Ethernet, evidemment !&lt;/span&gt;&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;IPStack.h&amp;gt;    // Permet de gérer la couche IP&lt;/span&gt;&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;Countdown.h&amp;gt;  // Timer utilisé par le protocole MQTT&lt;/span&gt;&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;MQTTClient.h&amp;gt; // Permet de gérer le protocole MQTT&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="les-variables-nécessaires"&gt;
 &lt;a aria-hidden="true" href="#les-variables-nécessaires"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les variables nécessaires
&lt;/h5&gt;
&lt;p&gt;
 Dont le pin de la LED et le topic auquel on veut souscrire (qui sera le même que celui sur lequel on envoie les messages côté Android) :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-c"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led = &lt;span class="hljs-number"&gt;2&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// pin de la LED&lt;/span&gt;

EthernetClient c; &lt;span class="hljs-comment"&gt;// remplacez par un YunClient si vous utilisez Yun&lt;/span&gt;
&lt;span class="hljs-function"&gt;IPStack &lt;span class="hljs-title"&gt;ipstack&lt;/span&gt;&lt;span class="hljs-params"&gt;(c)&lt;/span&gt;&lt;/span&gt;;
MQTT::Client&amp;lt;IPStack, Countdown, &lt;span class="hljs-number"&gt;50&lt;/span&gt;, &lt;span class="hljs-number"&gt;1&lt;/span&gt;&amp;gt; client = MQTT::Client&amp;lt;IPStack, Countdown, &lt;span class="hljs-number"&gt;50&lt;/span&gt;, &lt;span class="hljs-number"&gt;1&lt;/span&gt;&amp;gt;(ipstack);

byte mac[] = { &lt;span class="hljs-number"&gt;0x00&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x11&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x22&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x33&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x44&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x55&lt;/span&gt; };  &lt;span class="hljs-comment"&gt;// remplacer par l'adresse MAC de votre shield ethernet&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt;* topic = &lt;span class="hljs-string"&gt;"LEDArduino"&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// le topic utilisé pour communiquer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="les-fonctions-connect-et-messagearrived"&gt;
 &lt;a aria-hidden="true" href="#les-fonctions-connect-et-messagearrived"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les fonctions
 &lt;code&gt;
  connect
 &lt;/code&gt;
 et
 &lt;code&gt;
  messageArrived
 &lt;/code&gt;
&lt;/h5&gt;
&lt;p&gt;
 Nous allons créer la fonction qui sera appelée quand un message sera reçu. On indiquera plus tard au client MQTT que c’est cette fonction qu’il faudra qu’il appelle quand on recevra un message appartenant au topic
 &lt;em&gt;
  LEDArduino
 &lt;/em&gt;
 . C’est dans cette fonction que nous gérons l’allumage et l’extinction de la LED en fonction du message reçu.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-c"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;messageArrived&lt;/span&gt;&lt;span class="hljs-params"&gt;(MQTT::MessageData&amp;amp; md)&lt;/span&gt;
&lt;/span&gt;{
  MQTT::Message &amp;amp;message = md.message;

  &lt;span class="hljs-keyword"&gt;char&lt;/span&gt;* msg = (&lt;span class="hljs-keyword"&gt;char&lt;/span&gt;*) message.payload; &lt;span class="hljs-comment"&gt;// on recupere le message&lt;/span&gt;
  msg[message.payloadlen] = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// indique la fin du char*&lt;/span&gt;

  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (&lt;span class="hljs-built_in"&gt;strcmp&lt;/span&gt;(msg, &lt;span class="hljs-string"&gt;"ON"&lt;/span&gt;) == &lt;span class="hljs-number"&gt;0&lt;/span&gt;) &lt;span class="hljs-comment"&gt;// on a reçu le message "ON"&lt;/span&gt;
    digitalWrite(led, LOW);   &lt;span class="hljs-comment"&gt;// on allume la LED&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (&lt;span class="hljs-built_in"&gt;strcmp&lt;/span&gt;(msg, &lt;span class="hljs-string"&gt;"OFF"&lt;/span&gt;) == &lt;span class="hljs-number"&gt;0&lt;/span&gt;) &lt;span class="hljs-comment"&gt;// on a reçu le message "OFF"&lt;/span&gt;
    digitalWrite(led, HIGH);        &lt;span class="hljs-comment"&gt;// on éteint la LED&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Maintenant il va falloir nous connecter au broker MQTT et souscrire au topic qui nous intéresse. Pour cela, nous allons créer la méthode
 &lt;code&gt;
  connect
 &lt;/code&gt;
 , exactement de la même façon que nous avons fait pour Android. Pensez à remplacer la variable hostname par votre propre adresse IP (comme nous avons fait pour l’application Android).
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-c"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;connect&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
  &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; hostname[] = &lt;span class="hljs-string"&gt;"192.168.1.17"&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// IP où se trouve le broker MQTT&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; port = &lt;span class="hljs-number"&gt;1883&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// port utilisé par le broker&lt;/span&gt;

  &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; rc = ipstack.connect(hostname, port);
  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (rc != &lt;span class="hljs-number"&gt;1&lt;/span&gt;)
  {
    Serial.print(&lt;span class="hljs-string"&gt;"rc from TCP connect is "&lt;/span&gt;);
    Serial.println(rc);
  }

  Serial.println(&lt;span class="hljs-string"&gt;"MQTT connecting"&lt;/span&gt;);
  MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
  data.MQTTVersion = &lt;span class="hljs-number"&gt;3&lt;/span&gt;;
  data.clientID.cstring = (&lt;span class="hljs-keyword"&gt;char&lt;/span&gt;*)&lt;span class="hljs-string"&gt;"arduino-id"&lt;/span&gt;;
  rc = client.connect(data);
  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (rc != &lt;span class="hljs-number"&gt;0&lt;/span&gt;)
  {
    Serial.print(&lt;span class="hljs-string"&gt;"rc from MQTT connect is "&lt;/span&gt;);
    Serial.println(rc);
  }
  Serial.println(&lt;span class="hljs-string"&gt;"MQTT connected"&lt;/span&gt;);

  rc = client.subscribe(topic, MQTT::QOS0, messageArrived);    &lt;span class="hljs-comment"&gt;// le client souscrit au topic&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (rc != &lt;span class="hljs-number"&gt;0&lt;/span&gt;)
  {
    Serial.print(&lt;span class="hljs-string"&gt;"rc from MQTT subscribe is "&lt;/span&gt;);
    Serial.println(rc);
  }
  Serial.println(&lt;span class="hljs-string"&gt;"MQTT subscribed"&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="finalisation-du-programme"&gt;
 &lt;a aria-hidden="true" href="#finalisation-du-programme"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Finalisation du programme
&lt;/h5&gt;
&lt;p&gt;
 Voilà ! Toutes nos fonctions sont prêtes, il ne nous reste plus qu’à implémenter les fonctions setup() et loop() ! Pensez à appeler
 &lt;code&gt;
  client.yield(1000)
 &lt;/code&gt;
 dans la fonction loop() sinon votre Arduino ne recevra aucun message !
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-c"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
  pinMode(led, OUTPUT);
  digitalWrite(led, HIGH); &lt;span class="hljs-comment"&gt;// on initialise la LED en l'éteignant&lt;/span&gt;

  Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);
  Ethernet.begin(mac);

  connect();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-c"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
   &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (!client.isConnected())
    connect();

   delay(&lt;span class="hljs-number"&gt;500&lt;/span&gt;);
   client.yield(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// permet la reception des messages&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id="le-résultat"&gt;
 &lt;a aria-hidden="true" href="#le-résultat"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le résultat !
&lt;/h3&gt;
&lt;p&gt;
 Nous allons à présent voir le résultat tant attendu après un travail acharné entre le monde d’Android, d’Arduino et sans oublier le protocole MQTT géré par le broker qui tourne sur votre ordinateur.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Lancez le broker sur votre ordinateur
 &lt;/li&gt;
 &lt;li&gt;
  Lancez l’application Android (soyez sûr que vous ayez toujours la bonne adresse IP pour le broker MQTT et que vous soyez connecté en réseau local avec le broker)
 &lt;/li&gt;
 &lt;li&gt;
  Démarrez votre Arduino connecté à votre réseau local
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Amusez-vous à cliquer sur les boutons qui permettent d’allumer et d’éteindre la LED de votre Arduino !
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/JlRVDwtbOBI" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;
 Nous avons vu dans ce tutoriel comment faire communiquer un appareil Android avec un Arduino.
&lt;/p&gt;
&lt;p&gt;
 Nous nous sommes contenté, pour illustrer ce tuto, d’envoyer un message à l’Arduino pour qu’il allume ou éteigne une LED. Mais les possibilités sont infinies ! Vous pouvez envoyer des messages d’un Arduino à un appareil Android. Vous pouvez aussi faire communiquer autant d’Arduino et d’appareil d’Android que vous le voulez simultanément !
&lt;/p&gt;
&lt;p&gt;
 J’espère que ce tutoriel vous a plu ! Je vous laisse libre imagination pour intégrer la communication Android/Arduino dans vos futurs projets !
&lt;/p&gt;
&lt;p&gt;
 Si vous êtes intéressé par le développement Android, vous pouvez me retrouver :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Sur ma chaîne YouTube
  &lt;a href='https://www.youtube.com/channel/UClhbWbH9lTUmJDJCTJohbzQ" title="La chaine youtube de Sébastien'&gt;
   https://www.youtube.com/channel/UClhbWbH9lTUmJDJCTJohbzQ
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Ou sur ma page Facebook
  &lt;a href="https://www.facebook.com/BeeApps"&gt;
   https://www.facebook.com/BeeApps
  &lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 À bientôt !
&lt;/p&gt;
&lt;p&gt;
 Sébastien
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Des cartes sur votre site</title><link href="https://eskimon.fr/tuto-des-cartes-sur-votre-site" rel="alternate"></link><published>2016-11-12T13:05:00+01:00</published><updated>2016-11-12T13:05:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2016-11-12:/tuto-des-cartes-sur-votre-site</id><summary type="html">&lt;p&gt;
 Vous avez peut-être déjà eu à afficher des cartes géographiques sur un de vos sites web ? Vous auriez bien aimé vous passer d’un service privateur comme Google Maps ? Et bien la réponse est ici, avec la bibliothèque OpenSource Leaflet et les fonds de cartes OpenStreetMap.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si vous préférez les …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;
 Vous avez peut-être déjà eu à afficher des cartes géographiques sur un de vos sites web ? Vous auriez bien aimé vous passer d’un service privateur comme Google Maps ? Et bien la réponse est ici, avec la bibliothèque OpenSource Leaflet et les fonds de cartes OpenStreetMap.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si vous préférez les solutions Googlesques, n’hésitez pas à aller lire
   &lt;a href="https://zestedesavoir.com/tutoriels/246/google-maps-javascript-api-v3/"&gt;
    cet autre tuto
   &lt;/a&gt;
   sur l’API Google Maps.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#quelques-mots-sur-leaflet-et-openstreetmap"&gt;
    Quelques mots sur Leaflet et OpenStreetMap
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#openstreetmap"&gt;
      OpenStreetMap
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#quelques-projets-utilisant-osm"&gt;
       Quelques projets utilisant OSM
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#leaflet"&gt;
     Leaflet
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#notre-première-carte"&gt;
    Notre première carte
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#la-structure-de-base"&gt;
     La structure de base
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#afficher-la-carte"&gt;
     Afficher la carte
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#rajoutons-de-linformations"&gt;
    Rajoutons de l’informations
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#des-marqueurs"&gt;
     Des marqueurs
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#des-lignes"&gt;
     Des lignes
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#des-formes"&gt;
      Des formes
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#un-cercle"&gt;
       Un cercle
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#un-polygone"&gt;
       Un polygone
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#un-peu-plus-dinteractivité"&gt;
    Un peu plus d’interactivité
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#exemple-simple-le-clic"&gt;
     Exemple simple, le clic
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#toujours-plus-dinfos-la-popup"&gt;
     Toujours plus d’infos, la popup
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#glisser-et-déposer"&gt;
     Glisser et déposer
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#tp-calculateur-de-distances"&gt;
    TP Calculateur de distances
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#indices"&gt;
       Indices
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#correction"&gt;
     Correction
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#amélioration"&gt;
     Amélioration
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#partage"&gt;
     Partage
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#le-mécanisme-des-plugins"&gt;
    Le mécanisme des plugins
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#exemple-markercluster"&gt;
      Exemple, MarkerCluster
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#installation"&gt;
       Installation
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#utilisation"&gt;
     Utilisation
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="quelques-mots-sur-leaflet-et-openstreetmap"&gt;
 &lt;a aria-hidden="true" href="#quelques-mots-sur-leaflet-et-openstreetmap"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Quelques mots sur Leaflet et OpenStreetMap
&lt;/h3&gt;
&lt;p&gt;
 Commencons par voir ce que sont Leaflet et OpenStreetMap, afin que nous ayons un vocabulaire commun.
&lt;/p&gt;
&lt;h4 id="openstreetmap"&gt;
 &lt;a aria-hidden="true" href="#openstreetmap"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 OpenStreetMap
&lt;/h4&gt;
&lt;p&gt;
 OpenStreetMap (que j’abrégerais dorénavant OSM) est un fournisseur de fonds de carte
 &lt;sup id="fnref-1-UKFaVPVBC"&gt;
  &lt;a class="footnote-ref" href="#fn-1-UKFaVPVBC"&gt;
   1
  &lt;/a&gt;
 &lt;/sup&gt;
 . C’est exactement le même métier que ce que font les grands du web comme Google Maps, Bing Maps ou encore des acteurs plus locaux, comme
 &lt;abbr title="Institut national de l'information géographique et forestière"&gt;
  IGN
 &lt;/abbr&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 OSM se distingue cependant de ces différents organismes par sa démarche. En effet, toutes les cartes sont construites de manière collaborative et sont placées sous licence libre. En 2013 on recensait plus d’un million de personnes ayant contribué à l’élaboration des cartes que ce soit en répertoriant des chemins lors de leur promenade ou en corrigeant/ajoutant des noms de rues et bâtiments, par exemple.
&lt;/p&gt;
&lt;p&gt;
 Tout comme Zeste de Savoir, OSM est géré par un organisme à but non lucratif.
&lt;/p&gt;
&lt;p&gt;
 Si vous voulez essayer, rendez-vous sur
 &lt;a href="http://www.openstreetmap.org/"&gt;
  http://www.openstreetmap.org/
 &lt;/a&gt;
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Logo d'OpenStreetMap" src="./images/uploaded/tuto-des-cartes-sur-votre-site/logo-dopenstreetmap.png"/&gt;
 &lt;figcaption&gt;
  Logo d'OpenStreetMap
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="quelques-projets-utilisant-osm"&gt;
 &lt;a aria-hidden="true" href="#quelques-projets-utilisant-osm"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Quelques projets utilisant OSM
&lt;/h5&gt;
&lt;p&gt;
 Parlons rapidement de quelques projets utilisant OSM
 &lt;sup id="fnref-2-UKFaVPVBC"&gt;
  &lt;a class="footnote-ref" href="#fn-2-UKFaVPVBC"&gt;
   2
  &lt;/a&gt;
 &lt;/sup&gt;
 . Tout d’abord, on trouve bien entendu le site du même nom (la version
 &lt;code&gt;
  *.fr
 &lt;/code&gt;
 parle de l’organisation, les versions
 &lt;code&gt;
  *.com
 &lt;/code&gt;
 et
 &lt;code&gt;
  *.org
 &lt;/code&gt;
 exposent quant à elles les cartes). Ce site vous permet d’explorer l’environnement et d’établir des itinéraires. Ensuite, de nombreux outils dédiés aux loisirs se servent aussi des cartes OSM, comme par exemple OpenSeaMap pour la navigation ou OpenCycleMap plutôt orienté cyclisme. Enfin, de véritables projets citoyens ont aussi vu le jour comme WheelMap qui recense les lieux étant considérés comme accessibles en fauteuil roulant.
&lt;/p&gt;
&lt;h4 id="leaflet"&gt;
 &lt;a aria-hidden="true" href="#leaflet"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Leaflet
&lt;/h4&gt;
&lt;p&gt;
 OSM c’est bien, mais ce n’est pas forcément trivial à intégrer sur un site. Il faut en effet gérer le système de tuiles
 &lt;sup id="fnref-3-UKFaVPVBC"&gt;
  &lt;a class="footnote-ref" href="#fn-3-UKFaVPVBC"&gt;
   3
  &lt;/a&gt;
 &lt;/sup&gt;
 pour afficher la carte et on ne peut pas vraiment interagir avec.
&lt;/p&gt;
&lt;p&gt;
 Afin de palier à cela, une bibliothèque javascript à vu le jour : Leaflet. Cette bibliothèque est
 &lt;a href="https://github.com/Leaflet/Leaflet"&gt;
  open-source
 &lt;/a&gt;
 et permet pas mal de choses tout en étant
 &lt;em&gt;
  customisable
 &lt;/em&gt;
 via un mécanisme de plugin.
&lt;/p&gt;
&lt;p&gt;
 Leaflet va donc se charger de faire le chargement des tuiles de la carte en fonction du lieu que l’utilisateur veut visualiser (et à quel niveau de zoom) mais aussi gérer des interactions comme l’affichage de marqueur, de zone, gérer les déplacements, etc.
&lt;/p&gt;
&lt;p&gt;
 Enfin, il est bon de noter que Leaflet est indépendant du fournisseur de cartes. En effet, la bibliothèque peut tout à fait fonctionner avec OSM mais aussi Google Maps ou d’autres organismes (mais selon le cas il faudra alors fournir des clés d’accès aux cartes).
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Logo de Leaflet" src="./images/uploaded/tuto-des-cartes-sur-votre-site/logo-de-leaflet.png"/&gt;
 &lt;figcaption&gt;
  Logo de Leaflet
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="notre-première-carte"&gt;
 &lt;a aria-hidden="true" href="#notre-première-carte"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Notre première carte
&lt;/h3&gt;
&lt;p&gt;
 Commençons sans plus attendre par afficher une carte avec Leaflet et OSM.
&lt;/p&gt;
&lt;h4 id="la-structure-de-base"&gt;
 &lt;a aria-hidden="true" href="#la-structure-de-base"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La structure de base
&lt;/h4&gt;
&lt;p&gt;
 Pour cela, la première étape sera d’ajouter la bibliothèque Leaflet dans votre page web en y ajoutant la balise suivante :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-js"&gt;&amp;lt;script src=&lt;span class="hljs-string"&gt;"http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js"&lt;/span&gt;&amp;gt;&lt;span class="xml"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Il faudra aussi ajouter un peu de CSS spécifique via la balise
 &lt;code&gt;
  &amp;lt;link&amp;gt;
 &lt;/code&gt;
 suivante à mettre dans le
 &lt;code&gt;
  &amp;lt;head&amp;gt;
 &lt;/code&gt;
 de votre page :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;link&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"stylesheet"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Vous avez sûrement remarqué qu’un numéro de version est présent dans le lien. Je vous invite à vérifier que vous utilisez bien la dernière version de Leaflet en allant sur
   &lt;a href="http://leafletjs.com/download.html"&gt;
    leur page "Downloads"
   &lt;/a&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Une fois que ces deux éléments sont prêts, il ne reste plus qu’à rajouter une balise
 &lt;code&gt;
  &amp;lt;div&amp;gt;
 &lt;/code&gt;
 dans votre page. Cette dernière servira évidemment à accueillir la carte. Afin de la retrouver facilement, on lui donne un
 &lt;code&gt;
  id
 &lt;/code&gt;
 reconnaissable comme
 &lt;code&gt;
  #macarte
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;id&lt;/span&gt;=&lt;span class="hljs-string"&gt;"macarte"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Si vous avez bien tout suivi, vous obtenez un squelette ressemblant au suivant :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-meta"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;html&lt;/span&gt; &lt;span class="hljs-attr"&gt;lang&lt;/span&gt;=&lt;span class="hljs-string"&gt;"fr"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;&amp;lt;!--
            Inclusion de la bibliothèque Leaflet et sa feuille de style.
            L'include du js pourrait aussi être fait à la fin du &amp;lt;body&amp;gt;
        --&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;link&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"stylesheet"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;script&lt;/span&gt; &lt;span class="hljs-attr"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="null"&gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="hljs-comment"&gt;&amp;lt;!-- Une feuille de style éventuelle --&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;link&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"stylesheet"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"style.css"&lt;/span&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Tutoriel Leaflet OSM&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;&amp;lt;!-- Le conteneur de notre carte (avec une contrainte CSS pour la taille) --&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;id&lt;/span&gt;=&lt;span class="hljs-string"&gt;"macarte"&lt;/span&gt; &lt;span class="hljs-attr"&gt;style&lt;/span&gt;=&lt;span class="hljs-string"&gt;"width:545px; height:490px"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Bon, c’est pas mal, mais ça n’affiche rien ! Passons à la vitesse supérieure.
&lt;/p&gt;
&lt;h4 id="afficher-la-carte"&gt;
 &lt;a aria-hidden="true" href="#afficher-la-carte"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Afficher la carte
&lt;/h4&gt;
&lt;p&gt;
 Maintenant que tout est prêt, on va enfin pouvoir afficher des données, et observer notre première carte s’afficher.
&lt;/p&gt;
&lt;p&gt;
 Pour cela, on va rajouter un bloc script à la fin de notre page, avant la balise
 &lt;code&gt;
  &amp;lt;/body&amp;gt;
 &lt;/code&gt;
 . Ce morceau de script va se charger de faire le lien entre la balise
 &lt;code&gt;
  &amp;lt;div id="macarte"&amp;gt;
 &lt;/code&gt;
 créée plus tôt et le javascript qui effectue nos actions.
&lt;/p&gt;
&lt;p&gt;
 On commence donc par créer une variable
 &lt;code&gt;
  carte
 &lt;/code&gt;
 qui va contenir un objet
 &lt;code&gt;
  map
 &lt;/code&gt;
 de la bibliothèque Leaflet.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-js"&gt;&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; carte = L.map(&lt;span class="hljs-string"&gt;'macarte'&lt;/span&gt;).setView([&lt;span class="hljs-number"&gt;46.3630104&lt;/span&gt;, &lt;span class="hljs-number"&gt;2.9846608&lt;/span&gt;], &lt;span class="hljs-number"&gt;6&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous aurez remarqué que pour s’initialiser cet objet à besoin de connaitre l'
 &lt;code&gt;
  id
 &lt;/code&gt;
 du div qui contiendra la carte. J’en ai aussi profité pour centrer la carte sur la France pour avoir un point de départ autre que (0,0) (le dernier élément est le zoom).
&lt;/p&gt;
&lt;p&gt;
 Maintenant qu’on a un
 &lt;em&gt;
  moteur
 &lt;/em&gt;
 de carte de prêt, on va lui rajouter un fond de carte OSM.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-js"&gt;L.tileLayer(&lt;span class="hljs-string"&gt;'http://{s}.tile.osm.org/{z}/{x}/{y}.png'&lt;/span&gt;, {
    &lt;span class="hljs-attr"&gt;attribution&lt;/span&gt;: &lt;span class="hljs-string"&gt;'&amp;amp;copy; &amp;lt;a href="http://osm.org/copyright"&amp;gt;OpenStreetMap&amp;lt;/a&amp;gt; contributors'&lt;/span&gt;
}).addTo(carte);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Que voit-on ici ? En fait c’est assez simple. La première partie désigne le fournisseur de cartes et place des
 &lt;em&gt;
  marqueurs de templates
 &lt;/em&gt;
 dans son adresse. Ensuite, on ajoute ce fournisseur de carte à notre variable carte créée juste avant. Et c’est tout !
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Sans rentrer dans les détails, les marqueurs de template servent à décrire quel est le format de l’adresse à utiliser pour charger une tuile particulière. Ainsi, les infos
   &lt;code&gt;
    z
   &lt;/code&gt;
   ,
   &lt;code&gt;
    x
   &lt;/code&gt;
   ,
   &lt;code&gt;
    y
   &lt;/code&gt;
   servent à décrire respectivement le niveau de zoom voulu ainsi que par exemple, la position en x et y voulue.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voici ce que vous devez maintenant obtenir :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/byo71sxm/1/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 &lt;sub&gt;
  (Les plus observateurs auront remarqué que j’ai mis une adresse différente pour le chargement des ressources. Cela est du au chargement http
  &lt;strong&gt;
   s
  &lt;/strong&gt;
  qui n’est pas bien supporté par le CDN original de Leaflet.)
 &lt;/sub&gt;
&lt;/p&gt;
&lt;h3 id="rajoutons-de-linformations"&gt;
 &lt;a aria-hidden="true" href="#rajoutons-de-linformations"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Rajoutons de l’informations
&lt;/h3&gt;
&lt;p&gt;
 Afficher une carte c’est sympa, mais c’est pas transcendant ! Pouvoir afficher de l’informations par dessus ce serait quand même plus sympa ! Voyons comment faire…
&lt;/p&gt;
&lt;h4 id="des-marqueurs"&gt;
 &lt;a aria-hidden="true" href="#des-marqueurs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Des marqueurs
&lt;/h4&gt;
&lt;p&gt;
 Le B-A-BA de la cartographie est bien souvent de savoir placer un marqueur sur une carte pour indiquer une position. Ne grillons pas les étapes et apprenons déjà à faire cela…
&lt;/p&gt;
&lt;p&gt;
 Un marqueur (
 &lt;a href="http://leafletjs.com/reference.html#marker"&gt;
  &lt;em&gt;
   marker
  &lt;/em&gt;
 &lt;/a&gt;
 ) est défini par une position en latitude et en longitude. Pour l’exemple je vous propose d’en placer un sur le nombril du monde, se situant aux coordonnées [46.6835956, -0.4137665].
&lt;/p&gt;
&lt;p&gt;
 Pour placer un marqueur, on va donc commencer par créer une variable de type
 &lt;code&gt;
  marker
 &lt;/code&gt;
 en lui donnant des coordonnées.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-js"&gt;&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; marker = L.marker([&lt;span class="hljs-number"&gt;46.6835956&lt;/span&gt;, &lt;span class="hljs-number"&gt;-0.4137665&lt;/span&gt;]);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ensuite c’est très simple, il faut juste lui dire de s’ajouter sur notre carte !
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-js"&gt;marker.addTo(carte);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Et si on est radin sur le nombre de caractères, on fait tout en une seule fois :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-js"&gt;&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; marker = L.marker([&lt;span class="hljs-number"&gt;46.6835956&lt;/span&gt;, &lt;span class="hljs-number"&gt;-0.4137665&lt;/span&gt;]).addTo(carte);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Et voilà le résultat !
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/byo71sxm/2/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Ça a tout de suite bien plus d’allure !
&lt;/p&gt;
&lt;h4 id="des-lignes"&gt;
 &lt;a aria-hidden="true" href="#des-lignes"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Des lignes
&lt;/h4&gt;
&lt;p&gt;
 Une autre indication sympathique peut-être le dessin de forme sur une carte. Par exemple, on pourrait avoir envie de dessiner la lettre E de Eskimon sur le nombril du monde.
&lt;/p&gt;
&lt;p&gt;
 Pour dessiner un chemin, on va créer un
 &lt;code&gt;
  Polyline
 &lt;/code&gt;
 . Un
 &lt;a href="http://leafletjs.com/reference.html#polyline"&gt;
  Polyline
 &lt;/a&gt;
 va avoir besoin d’une succession de position à relier puis d'
 &lt;a href="http://leafletjs.com/reference.html#path-options"&gt;
  options
 &lt;/a&gt;
 comme sa couleur, son opacité, sa largeur…
&lt;/p&gt;
&lt;p&gt;
 On va donc faire un chemin qui relie les coordonnés suivantes :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="table-wrapper"&gt;
  &lt;table class=" table table-bordered table-striped"&gt;
   &lt;thead&gt;
    &lt;tr&gt;
     &lt;th&gt;
      Coordonnées #
     &lt;/th&gt;
     &lt;th&gt;
      Latitude
     &lt;/th&gt;
     &lt;th&gt;
      Longitude
     &lt;/th&gt;
    &lt;/tr&gt;
   &lt;/thead&gt;
   &lt;tbody&gt;
    &lt;tr&gt;
     &lt;td&gt;
      1
     &lt;/td&gt;
     &lt;td&gt;
      47.077766
     &lt;/td&gt;
     &lt;td&gt;
      -0.219043
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td&gt;
      2
     &lt;/td&gt;
     &lt;td&gt;
      47.077766
     &lt;/td&gt;
     &lt;td&gt;
      -0.643656
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td&gt;
      3
     &lt;/td&gt;
     &lt;td&gt;
      46.912911
     &lt;/td&gt;
     &lt;td&gt;
      -0.643656
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td&gt;
      4
     &lt;/td&gt;
     &lt;td&gt;
      46.912911
     &lt;/td&gt;
     &lt;td&gt;
      -0.219043
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td&gt;
      5
     &lt;/td&gt;
     &lt;td&gt;
      46.912911
     &lt;/td&gt;
     &lt;td&gt;
      -0.643656
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td&gt;
      6
     &lt;/td&gt;
     &lt;td&gt;
      46.778871
     &lt;/td&gt;
     &lt;td&gt;
      -0.643656
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td&gt;
      7
     &lt;/td&gt;
     &lt;td&gt;
      46.778871
     &lt;/td&gt;
     &lt;td&gt;
      -0.219043
     &lt;/td&gt;
    &lt;/tr&gt;
   &lt;/tbody&gt;
  &lt;/table&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Maintenant que l’on a nos positions pour décrire le polygone, on va le dessiner !
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-js"&gt;&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; eskimon = L.polyline([
    [&lt;span class="hljs-number"&gt;47.077766&lt;/span&gt;, &lt;span class="hljs-number"&gt;-0.219043&lt;/span&gt;],
    [&lt;span class="hljs-number"&gt;47.077766&lt;/span&gt;, &lt;span class="hljs-number"&gt;-0.643656&lt;/span&gt;],
    [&lt;span class="hljs-number"&gt;46.912911&lt;/span&gt;, &lt;span class="hljs-number"&gt;-0.643656&lt;/span&gt;],
    [&lt;span class="hljs-number"&gt;46.912911&lt;/span&gt;, &lt;span class="hljs-number"&gt;-0.219043&lt;/span&gt;],
    [&lt;span class="hljs-number"&gt;46.912911&lt;/span&gt;, &lt;span class="hljs-number"&gt;-0.643656&lt;/span&gt;],
    [&lt;span class="hljs-number"&gt;46.778871&lt;/span&gt;, &lt;span class="hljs-number"&gt;-0.643656&lt;/span&gt;],
    [&lt;span class="hljs-number"&gt;46.778871&lt;/span&gt;, &lt;span class="hljs-number"&gt;-0.219043&lt;/span&gt;]
], {&lt;span class="hljs-attr"&gt;color&lt;/span&gt;: &lt;span class="hljs-string"&gt;'red'&lt;/span&gt;}).addTo(carte);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/byo71sxm/3/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="des-formes"&gt;
 &lt;a aria-hidden="true" href="#des-formes"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Des formes
&lt;/h4&gt;
&lt;p&gt;
 Les lignes sont maîtrisées ? Passons maintenant aux formes ! Vous allez voir c’est finalement assez simple une fois qu’on a compris le principe.
&lt;/p&gt;
&lt;h5 id="un-cercle"&gt;
 &lt;a aria-hidden="true" href="#un-cercle"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un cercle
&lt;/h5&gt;
&lt;p&gt;
 Dessinons le cercle d’influence du nombril du monde… Pour cela, on va le représenter par un cercle. Un cercle en anglais c’est un
 &lt;a href="http://leafletjs.com/reference.html#circle"&gt;
  &lt;em&gt;
   circle
  &lt;/em&gt;
 &lt;/a&gt;
 , et il est représenté en mathématiques par un centre et un rayon. On aura donc besoin de deux infos, le centre qui sera un couple de coordonnées latitude/longitude et le rayon en mètres. On va donc dessiner un cercle de centre le nombril du monde aux coordonnées [46.6835956, -0.4137665] et de diamètre 420km, ce qui fait un rayon de 210000 mètres.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-lsl"&gt;var influence = L.circle([&lt;span class="hljs-number"&gt;46.6835956&lt;/span&gt;, &lt;span class="hljs-number"&gt;-0.4137665&lt;/span&gt;], &lt;span class="hljs-number"&gt;210000&lt;/span&gt;).addTo(carte);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/byo71sxm/4/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Comme vous le voyez, par défaut le cercle est de couleur bleu semi-opaque avec un bord bleu foncé. Comme pour les polylines ci-dessous, cela peut-être changé via des options.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-actionscript"&gt;&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; influence = L.circle([&lt;span class="hljs-number"&gt;46.6835956&lt;/span&gt;, &lt;span class="hljs-number"&gt;-0.4137665&lt;/span&gt;], &lt;span class="hljs-number"&gt;210000&lt;/span&gt;, {
    &lt;span class="hljs-string"&gt;'color'&lt;/span&gt;: &lt;span class="hljs-string"&gt;'#FF7F00'&lt;/span&gt;,
    &lt;span class="hljs-string"&gt;'fill'&lt;/span&gt;: &lt;span class="hljs-literal"&gt;true&lt;/span&gt;,
    &lt;span class="hljs-string"&gt;'fillColor'&lt;/span&gt;: &lt;span class="hljs-string"&gt;'#FFFF00'&lt;/span&gt;,
    &lt;span class="hljs-string"&gt;'fillOpacity'&lt;/span&gt;: &lt;span class="hljs-number"&gt;0.2&lt;/span&gt;,
}).addTo(carte);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Je vous laisse essayer et vous référer à la
 &lt;a href="http://leafletjs.com/reference.html#path-options"&gt;
  page de documentation
 &lt;/a&gt;
 pour tester les options.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;h5 id="un-polygone"&gt;
 &lt;a aria-hidden="true" href="#un-polygone"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un polygone
&lt;/h5&gt;
&lt;p&gt;
 Et si la zone d’influence était en fait non pas un cercle mais plutôt un hexagone ? Et bien rien de plus simple, un polygone ce n’est rien de plus qu’un polyline fermé dont on pourra colorier l’intérieur.
&lt;/p&gt;
&lt;p&gt;
 Sans plus attendre, voici un ensemble de coordonnées. Je vous laisse comme exercice le soin d’obtenir le résultat suivant :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="table-wrapper"&gt;
  &lt;table class=" table table-bordered table-striped"&gt;
   &lt;thead&gt;
    &lt;tr&gt;
     &lt;th&gt;
      Coordonnées #
     &lt;/th&gt;
     &lt;th&gt;
      Latitude
     &lt;/th&gt;
     &lt;th&gt;
      Longitude
     &lt;/th&gt;
    &lt;/tr&gt;
   &lt;/thead&gt;
   &lt;tbody&gt;
    &lt;tr&gt;
     &lt;td&gt;
      1
     &lt;/td&gt;
     &lt;td&gt;
      47.318398
     &lt;/td&gt;
     &lt;td&gt;
      -0.886464
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td&gt;
      2
     &lt;/td&gt;
     &lt;td&gt;
      47.318398
     &lt;/td&gt;
     &lt;td&gt;
      0.069346
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td&gt;
      3
     &lt;/td&gt;
     &lt;td&gt;
      46.722971
     &lt;/td&gt;
     &lt;td&gt;
      0.5862335
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td&gt;
      4
     &lt;/td&gt;
     &lt;td&gt;
      46.000000
     &lt;/td&gt;
     &lt;td&gt;
      0.069346
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td&gt;
      5
     &lt;/td&gt;
     &lt;td&gt;
      46.000000
     &lt;/td&gt;
     &lt;td&gt;
      -0.886464
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td&gt;
      6
     &lt;/td&gt;
     &lt;td&gt;
      46.722971
     &lt;/td&gt;
     &lt;td&gt;
      -1.4137665
     &lt;/td&gt;
    &lt;/tr&gt;
   &lt;/tbody&gt;
  &lt;/table&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/byo71sxm/5/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Et comment je supprime une forme ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Rien de plus simple, il suffit d’appeler la méthode
 &lt;a href="http://leafletjs.com/reference.html#map-removelayer"&gt;
  &lt;code&gt;
   removeLayer
  &lt;/code&gt;
 &lt;/a&gt;
 de votre carte et de lui donner le marqueur (ou autre élément) à supprimer.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-js"&gt;carte.removeLayer(marker);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id="un-peu-plus-dinteractivité"&gt;
 &lt;a aria-hidden="true" href="#un-peu-plus-dinteractivité"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un peu plus d’interactivité
&lt;/h3&gt;
&lt;p&gt;
 Les cartes s’affichent et on peut déjà transmettre des informations à l’utilisateur via l’affichage. Passons dès à présent à l’étape suivante qui nous permettra d’augmenter les interactions via la gestion des clics et autres
 &lt;em&gt;
  drag’n drop
 &lt;/em&gt;
 .
&lt;/p&gt;
&lt;h4 id="exemple-simple-le-clic"&gt;
 &lt;a aria-hidden="true" href="#exemple-simple-le-clic"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Exemple simple, le clic
&lt;/h4&gt;
&lt;p&gt;
 Le clic. L’élément d’interaction élémentaire de la navigation sur internet. Rajoutons le à notre carte !
&lt;/p&gt;
&lt;p&gt;
 C’est d’ailleurs assez simple. Les grands habitués du javascript ne vont pas disparaître. En effet, il s’agit ici d’ajouter une fonction à appeler lors du déclenchement de l’événement. Cela se fera via la méthode
 &lt;code&gt;
  on
 &lt;/code&gt;
 à laquelle on passera le nom de l’événement (
 &lt;code&gt;
  click
 &lt;/code&gt;
 ) puis la fonction à appeler au déclenchement.
&lt;/p&gt;
&lt;p&gt;
 Par exemple, pour appeler une fonction "placerMarqueur" on fera :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-js"&gt;carte.on(&lt;span class="hljs-string"&gt;'click'&lt;/span&gt;, placerMarqueur);

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;placerMarqueur&lt;/span&gt;(&lt;span class="hljs-params"&gt;e&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// Faire quelque chose suite à l’événement&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Vous remarquerez que la fonction appelée par le clic possède un paramètre
   &lt;code&gt;
    e
   &lt;/code&gt;
   . Ce dernier porte des infos sur l’événement, comme le lieu géographique du clic par exemple.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voici un exemple un peu plus complet qui déplacera le marqueur à la position du clic.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-js"&gt;&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; carte = L.map(&lt;span class="hljs-string"&gt;'macarte'&lt;/span&gt;).setView([&lt;span class="hljs-number"&gt;46.5630104&lt;/span&gt;, &lt;span class="hljs-number"&gt;1.4846608&lt;/span&gt;], &lt;span class="hljs-number"&gt;6&lt;/span&gt;);
L.tileLayer(&lt;span class="hljs-string"&gt;'http://{s}.tile.osm.org/{z}/{x}/{y}.png'&lt;/span&gt;, {
    &lt;span class="hljs-attr"&gt;attribution&lt;/span&gt;: &lt;span class="hljs-string"&gt;'&amp;amp;copy; &amp;lt;a href="http://osm.org/copyright"&amp;gt;OpenStreetMap&amp;lt;/a&amp;gt; contributors'&lt;/span&gt;
}).addTo(carte);
&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; marker = L.marker([&lt;span class="hljs-number"&gt;46.6835956&lt;/span&gt;, &lt;span class="hljs-number"&gt;-0.4137665&lt;/span&gt;]).addTo(carte);
carte.on(&lt;span class="hljs-string"&gt;'click'&lt;/span&gt;, placerMarqueur);

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;placerMarqueur&lt;/span&gt;(&lt;span class="hljs-params"&gt;e&lt;/span&gt;) &lt;/span&gt;{
    marker.setLatLng(e.latlng);
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/byo71sxm/6/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="toujours-plus-dinfos-la-popup"&gt;
 &lt;a aria-hidden="true" href="#toujours-plus-dinfos-la-popup"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Toujours plus d’infos, la popup
&lt;/h4&gt;
&lt;p&gt;
 Maintenant que l’on déplace des marqueurs, on pourrait aussi s’amuser à rajouter une petite couche d’informations via une petite
 &lt;a href="http://leafletjs.com/reference.html#popup"&gt;
  infobulle
 &lt;/a&gt;
 . Cette infobulle pourra être peuplé de plein d’informations qui vous semblent pertinentes. Pour garder les choses simples, affichons la coordonnée au dessus du marqueur quand celui-ci va se déplacer…
&lt;/p&gt;
&lt;p&gt;
 L’infobulle de Leaflet s’appelle "popup". Rassurez-vous, elle est bien moins envahissante que celle que les publicitaires aiment nous afficher !
&lt;/p&gt;
&lt;p&gt;
 Pour attacher une popup à élément (comme un marqueur), on utilise la fonction
 &lt;code&gt;
  bindPopup
 &lt;/code&gt;
 que l’on peut éventuellement tout de suite personnaliser avec un texte (qui peut-être mis en forme avec des balises html). On peut ensuite récupérer cette popup pour la manipuler via la méthode
 &lt;code&gt;
  getPopup
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-js"&gt;&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; marker = L.marker([&lt;span class="hljs-number"&gt;46.6835956&lt;/span&gt;, &lt;span class="hljs-number"&gt;-0.4137665&lt;/span&gt;]).addTo(carte);
marker.bindPopup(&lt;span class="hljs-string"&gt;''&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// Je ne mets pas de texte par défaut&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; mapopup = marker.getPopup();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Mais ça ne s’affiche pas
   &lt;img alt=":(" class="smiley" src="./static/smileys/triste.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Et non ! Il ne reste juste une petite méthode à faire pour cela, appeler la fonction
 &lt;code&gt;
  openPopup
 &lt;/code&gt;
 du
 &lt;strong&gt;
  marqueur
 &lt;/strong&gt;
 (ou de l’objet à laquelle vous l’avez attachée).
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-js"&gt;mapopup.setContent(&lt;span class="hljs-string"&gt;'Salut, ça zeste ?'&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// je personnalise un peu avant d'afficher&lt;/span&gt;
marker.openPopup();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/byo71sxm/7/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="glisser-et-déposer"&gt;
 &lt;a aria-hidden="true" href="#glisser-et-déposer"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Glisser et déposer
&lt;/h4&gt;
&lt;p&gt;
 Dernière étape pour ajouter de l’interaction, apprenons à maîtriser le glisser-déposer sur la carte pour déplacer un marqueur. En anglais on parle de
 &lt;em&gt;
  draggable
 &lt;/em&gt;
 , c’est donc sous ce terme qu’on le trouvera dans
 &lt;a href="http://leafletjs.com/reference.html#draggable"&gt;
  la doc
 &lt;/a&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Et on attaque par une question : vous rappelez-vous qu’on a parlé "d’options" un peu plus tôt dans ce tuto ? J’espère, car c’est par ce biais que l’on va rendre un marqueur déplaçable ! En effet, il suffit simplement de rajouter l’option
 &lt;code&gt;
  draggable
 &lt;/code&gt;
 à
 &lt;code&gt;
  true
 &lt;/code&gt;
 pour que notre marqueur devienne déplaçable à la souris. Une fois cela fait, il pourra générer entre autres deux nouveaux événements intéressants :
 &lt;code&gt;
  dragstart
 &lt;/code&gt;
 et
 &lt;code&gt;
  dragend
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Sans plus attendre, appliquons cela à un exemple, l’affichage des coordonnées où sera déposé le marqueur :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-js"&gt;&lt;span class="hljs-comment"&gt;// Notez bien l'apparition de l'option draggable&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; marker = L.marker([&lt;span class="hljs-number"&gt;46.6835956&lt;/span&gt;, &lt;span class="hljs-number"&gt;-0.4137665&lt;/span&gt;], {&lt;span class="hljs-attr"&gt;draggable&lt;/span&gt;:&lt;span class="hljs-string"&gt;'true'&lt;/span&gt;}).bindPopup(&lt;span class="hljs-string"&gt;""&lt;/span&gt;).addTo(carte);

marker.on(&lt;span class="hljs-string"&gt;'dragend'&lt;/span&gt;, relachement);

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;relachement&lt;/span&gt;(&lt;span class="hljs-params"&gt;e&lt;/span&gt;) &lt;/span&gt;{
    marker.getPopup().setContent(&lt;span class="hljs-string"&gt;''&lt;/span&gt;+marker.getLatLng());
    marker.openPopup();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/byo71sxm/8/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Bien entendu, ce ne sont pas là les seules actions possibles sur les objets ou sur la carte.
   &lt;a href="http://leafletjs.com/reference.html"&gt;
    La documentation
   &lt;/a&gt;
   vous tend les bras si vous voulez en savoir plus !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="tp-calculateur-de-distances"&gt;
 &lt;a aria-hidden="true" href="#tp-calculateur-de-distances"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 [TP] Calculateur de distances
&lt;/h3&gt;
&lt;p&gt;
 Pour ce petit exercice, on se propose de faire un calculateur de distances. Ce calculateur devra être en mesure d’afficher la distance entre deux marqueurs et de tracer un joli segment entre les deux. Chaque marqueur doit pouvoir être déplacé et lorsque le déplacement se termine, une popup doit apparaître sur le marqueur déplacé pour afficher la distance entre les deux.
&lt;/p&gt;
&lt;p&gt;
 Pour avoir un aperçu du résultat, rendez vous ci-dessous dans la rubrique correction.
&lt;/p&gt;
&lt;h5 id="indices"&gt;
 &lt;a aria-hidden="true" href="#indices"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Indices
&lt;/h5&gt;
&lt;p&gt;
 Il y a pas mal de choses que l’on a pas vu encore, mais tout est dit dans
 &lt;a href="http://leafletjs.com/reference.html"&gt;
  la documentation
 &lt;/a&gt;
 en allant chercher les bons mots-clés.
&lt;/p&gt;
&lt;p&gt;
 Indice #1 : Comment calculer une distance ?
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   En allant voir la méthode
   &lt;a href="http://leafletjs.com/reference.html#latlng-distanceto"&gt;
    distanceTo
   &lt;/a&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Indice #2 : J’ai déplacé un marqueur, comment je le récupère dans l’événement ?
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Les fonctions qui réceptionnent les événements possèdent un argument (que l’on note souvent
   &lt;code&gt;
    e
   &lt;/code&gt;
   ). Ce dernier possède un champ
   &lt;a href="http://leafletjs.com/reference.html#events-target"&gt;
    target
   &lt;/a&gt;
   qui est l’objet déclencheur de l’événement.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="correction"&gt;
 &lt;a aria-hidden="true" href="#correction"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Correction
&lt;/h4&gt;
&lt;p&gt;
 Avant de regarder le code, essayez quand même par vous-même
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/fb0xbdm6/2/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="amélioration"&gt;
 &lt;a aria-hidden="true" href="#amélioration"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Amélioration
&lt;/h4&gt;
&lt;p&gt;
 Pour les plus courageux d’entre vous, voici quelques idées d’améliorations pour faire un calculateur de distance du tonnerre !
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
  &lt;p&gt;
   Première amélioration, réussir à placer plusieurs marqueurs lors d’un clic. À chaque clic, un marqueur se rajoute et le chemin s’étend jusqu’à ce nouveau marqueur. On affiche alors la distance totale sur ce nouveau marqueur (somme de tout les tronçons). Bien entendu la distance doit se recalculer lors du déplacement d’un marqueur.
  &lt;/p&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   Ensuite, il serait sympa d’afficher une popup par dessus les marqueurs, pour avoir les distances intermédiaires (en gros le point A n’affiche rien, le B affiche la distance de [AB], le C affiche [AB]+[BC] puis le D affiche la somme de tout, [AB]+[BC]+[CD]). Comme je suis sympa, je vous laisse choisir entre afficher les distances intermédiaires soit au clic sur le marqueur, soit à son survol.
  &lt;/p&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   Enfin, petit comble du confort, un double clic sur un point le supprime (et comme on veut une belle application, les distances doivent se recalculer proprement et le dessin du chemin aussi).
  &lt;/p&gt;
 &lt;/li&gt;
&lt;/ol&gt;
&lt;div class="text-center"&gt;
 &lt;p&gt;
  &lt;strong&gt;
   Bon courage !
  &lt;/strong&gt;
 &lt;/p&gt;
&lt;/div&gt;
&lt;h4 id="partage"&gt;
 &lt;a aria-hidden="true" href="#partage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Partage
&lt;/h4&gt;
&lt;p&gt;
 Afin de partager vos résultats, questions, performances et autres prouesses codesques, je vous invite à aller sur
 &lt;a href="https://zestedesavoir.com/forums/sujet/6463/atelier-reactions-pour-exercice-du-tuto/"&gt;
  ce sujet du forum
 &lt;/a&gt;
 qui servira à animer cet atelier (plutôt que la zone de commentaires).
&lt;/p&gt;
&lt;h3 id="le-mécanisme-des-plugins"&gt;
 &lt;a aria-hidden="true" href="#le-mécanisme-des-plugins"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le mécanisme des plugins
&lt;/h3&gt;
&lt;p&gt;
 On l’a vu, le combo Leafet+OSM de base permet déjà de faire un paquet de choses. Mais grâce à son système de plugins, Leaflet peut proposer encore bien plus, proposant des outils pour afficher de nouveaux fond de cartes ou encore de nouveaux marqueurs et autres indicateurs visuels. Tout comme la bibliothèque Leaflet, les plugins sont opensources. Ils sont tous recensés sur la page "
 &lt;a href="http://leafletjs.com/plugins.html"&gt;
  Plugins
 &lt;/a&gt;
 " du site original et regroupés par catégories de fonctions (fonds de cartes, affichages, interactions…).
&lt;/p&gt;
&lt;h4 id="exemple-markercluster"&gt;
 &lt;a aria-hidden="true" href="#exemple-markercluster"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Exemple, MarkerCluster
&lt;/h4&gt;
&lt;p&gt;
 À titre d’exemple, je vous propose d’intégrer l’incontournable plugin
 &lt;a href="https://github.com/Leaflet/Leaflet.markercluster"&gt;
  MarkerCluster
 &lt;/a&gt;
 qui propose de regrouper les marqueurs géographiquements proches lorsque vous [dé]zoomer sur la carte (
 &lt;a href="http://leaflet.github.io/Leaflet.markercluster/example/marker-clustering-realworld.388.html"&gt;
  démo
 &lt;/a&gt;
 ).
&lt;/p&gt;
&lt;h5 id="installation"&gt;
 &lt;a aria-hidden="true" href="#installation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Installation
&lt;/h5&gt;
&lt;p&gt;
 Bon, pas de chance, en général l’étape d’installation est la plus pénible. Certains plugins passent par des outils comme npm, d’autres un simple lien à lier après téléchargement de la librairie minifiée.
&lt;/p&gt;
&lt;p&gt;
 MarkerCluset fait partie de la catégorie "installation via Bower". Cependant, en cherchant un peu on peut facilement trouver un CDN le fournissant :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-js"&gt;&amp;lt;link rel=&lt;span class="hljs-string"&gt;"stylesheet"&lt;/span&gt; href=&lt;span class="hljs-string"&gt;"http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.css"&lt;/span&gt; /&amp;gt;
&lt;span class="xml"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;link&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"stylesheet"&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"text/css"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"http://cdnjs.cloudflare.com/ajax/libs/leaflet.markercluster/0.4.0/MarkerCluster.css"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;/span&gt;&amp;lt;link rel="stylesheet" type="text/css" href="http://cdnjs.cloudflare.com/ajax/libs/leaflet.markercluster/0.4.0/MarkerCluster.Default.css" /&amp;gt;

&amp;lt;script src="http://cdn.leafletjs.com/leaflet/v0.7.7/leaflet.js"&amp;gt;&amp;lt;/script&amp;gt;
&amp;lt;script src='http://cdnjs.cloudflare.com/ajax/libs/leaflet.markercluster/0.4.0/leaflet.markercluster.js'&amp;gt;&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Un petit rajout dans notre
 &lt;code&gt;
  &amp;lt;head&amp;gt;
 &lt;/code&gt;
 et c’est parti !
&lt;/p&gt;
&lt;h4 id="utilisation"&gt;
 &lt;a aria-hidden="true" href="#utilisation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utilisation
&lt;/h4&gt;
&lt;p&gt;
 Maintenant, pour l’utilisation c’est comme pour tout plugin de tout logiciel, on lit
 &lt;a href="https://github.com/Leaflet/Leaflet.markercluster/blob/master/README.md"&gt;
  la doc
 &lt;/a&gt;
 et on démarre avec
 &lt;a href="https://github.com/Leaflet/Leaflet.markercluster/blob/master/README.md#usage"&gt;
  un exemple
 &lt;/a&gt;
 !
&lt;/p&gt;
&lt;p&gt;
 On découvre alors que ce plugin est tout simple puisqu’il suffit simplement d’ajouter un
 &lt;code&gt;
  markerClusterGroup
 &lt;/code&gt;
 à notre carte puis ajouter des marqueurs classiques à ce dernier (et comme d’habitude on peut spécifier un tas d’options pour chaque chose à chaque fois
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 ).
&lt;/p&gt;
&lt;p&gt;
 Voyez plutôt :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/ww25z0mt/1/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Ce tutoriel touche à sa fin, j’espère qu’il vous aura plu. Vous en savez maintenant suffisamment pour voler de vos propres ailes et dessiner des cartes à tout va avec Leaflet et OSM. Sachez cependant que nous avons juste écorché la surface, plein de choses peuvent être faites avec cette bibliothèque vraiment sympa. Une liste de
 &lt;a href="http://leafletjs.com/examples.html"&gt;
  tutoriels officiels
 &lt;/a&gt;
 existe ainsi que bien entendu
 &lt;a href="http://leafletjs.com/reference.html"&gt;
  une documentation
 &lt;/a&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 N’oubliez pas aussi que tout ce que vous avez vu ici est opensource. Si c’est un sujet qui vous passionne et que le javascript est votre ami, le
 &lt;a href="https://github.com/Leaflet/Leaflet"&gt;
  github de Leaflet
 &lt;/a&gt;
 vous tend les bras. OpenStreetMap aussi accueille toutes les contributions, alors n’hésitez pas à rendre tout ces projets encore meilleurs !
&lt;/p&gt;
&lt;p&gt;
 Et enfin, merci aux Beta Zesteurs pour leur relectures et Emeric pour sa validation et corrections faites pour l’amour du Zeste !
&lt;/p&gt;
&lt;div class="footnotes"&gt;
 &lt;hr/&gt;
 &lt;ol&gt;
  &lt;li id="fn-1-UKFaVPVBC"&gt;
   &lt;p&gt;
    Un fond de carte est une représentation planaire graphique d’un environnement géographique. Bref, c’est une carte qui n’affiche pas forcément des routes ou des reliefs.
   &lt;/p&gt;
   &lt;a class="footnote-backref" href="#fnref-1-UKFaVPVBC" title="Retourner au texte de la note 1"&gt;
    ↩
   &lt;/a&gt;
  &lt;/li&gt;
  &lt;li id="fn-2-UKFaVPVBC"&gt;
   &lt;p&gt;
    &lt;a href="https://fr.wikipedia.org/wiki/OpenStreetMap#Applications_et_sites_utilisant_les_donn.C3.A9es_OSM"&gt;
     source
    &lt;/a&gt;
   &lt;/p&gt;
   &lt;a class="footnote-backref" href="#fnref-2-UKFaVPVBC" title="Retourner au texte de la note 2"&gt;
    ↩
   &lt;/a&gt;
  &lt;/li&gt;
  &lt;li id="fn-3-UKFaVPVBC"&gt;
   &lt;p&gt;
    On ne charge jamais une carte en entier, cela demanderait bien trop d’informations et générait un trafic trop important. À la place, on charge la carte "par morceau" de plusieurs [k]m² concernant uniquement la zone à visualiser.
   &lt;/p&gt;
   &lt;a class="footnote-backref" href="#fnref-3-UKFaVPVBC" title="Retourner au texte de la note 3"&gt;
    ↩
   &lt;/a&gt;
  &lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;</content><category term="web"></category><category term="tuto"></category></entry><entry><title>Les balises audio et vidéo en HTML5</title><link href="https://eskimon.fr/tuto-les-balises-audio-et-vid%C3%A9o-en-html5" rel="alternate"></link><published>2016-11-12T13:05:00+01:00</published><updated>2016-11-12T13:05:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2016-11-12:/tuto-les-balises-audio-et-vidéo-en-html5</id><summary type="html">&lt;p&gt;
 Le HTML5 a apporté son lot de nouveautés, notamment au niveau du contenu multimédia. En effet, avant, il était bien souvent nécessaire de faire appel à des conteneurs lourds comme Flash. Dorénavant, des balises dédiées à ces usages ont été introduites :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   &amp;lt;video&amp;gt;
  &lt;/code&gt;
  pour les contenus audio ET vidéo ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   &amp;lt;audio&amp;gt;
  &lt;/code&gt;
  pour …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;
 Le HTML5 a apporté son lot de nouveautés, notamment au niveau du contenu multimédia. En effet, avant, il était bien souvent nécessaire de faire appel à des conteneurs lourds comme Flash. Dorénavant, des balises dédiées à ces usages ont été introduites :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   &amp;lt;video&amp;gt;
  &lt;/code&gt;
  pour les contenus audio ET vidéo ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   &amp;lt;audio&amp;gt;
  &lt;/code&gt;
  pour les contenus audio uniquement.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Dans ce tutoriel, nous allons découvrir comment utiliser ces deux balises. Nous verrons tout d’abord une approche simple de ces dernières, puis nous étudierons comment rendre les choses plus intéressantes en essayant de créer notre propre lecteur multimédia en HTML5.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Afin de bien suivre ce tutoriel, de (petites) bases en HTML sont nécessaires ainsi qu’un peu de JavaScript.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   La balise
   &lt;code&gt;
    &amp;lt;audio&amp;gt;
   &lt;/code&gt;
   ayant un comportement très proche de celle de la vidéo (à quelques fonctions près), je me concentrerai davantage sur cette dernière.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 A la fin de ce tutoriel, vous serez en mesure de réaliser votre propre lecteur multimédia HTML5. Voici quelques exemples :
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;img alt="Daily Motion" src="./images/uploaded/tuto-les-balises-audio-et-vidéo-en-html5/daily-motion.jpg"/&gt;
   &lt;figcaption&gt;
    Daily Motion
   &lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;figure&gt;
   &lt;img alt="YouTube" src="./images/uploaded/tuto-les-balises-audio-et-vidéo-en-html5/youtube.jpg"/&gt;
   &lt;figcaption&gt;
    YouTube
   &lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;figure&gt;
   &lt;img alt="Projekktor" src="./images/uploaded/tuto-les-balises-audio-et-vidéo-en-html5/projekktor.jpg"/&gt;
   &lt;figcaption&gt;
    Projekktor
   &lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;figure&gt;
   &lt;img alt="Interface native" src="./images/uploaded/tuto-les-balises-audio-et-vidéo-en-html5/interface-native.jpg"/&gt;
   &lt;figcaption&gt;
    Interface native
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#les-balises-audio-et-vidéo"&gt;
    Les balises audio et vidéo
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#les-balises-audio-et-vidéo-1"&gt;
     Les balises audio et vidéo
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#les-éléments-importants-de-ces-balises"&gt;
      Les éléments importants de ces balises
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;p&gt;
       &lt;a href="#la-source"&gt;
        La source
       &lt;/a&gt;
      &lt;/p&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;a href="#via-lattribut-src"&gt;
         Via l’attribut src
        &lt;/a&gt;
       &lt;/li&gt;
       &lt;li&gt;
        &lt;a href="#via-la-balise-source"&gt;
         Via la balise &amp;lt;source&amp;gt;
        &lt;/a&gt;
       &lt;/li&gt;
      &lt;/ul&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#contrôler-simplement-le-média"&gt;
      Contrôler (simplement) le média
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#les-options-«natives»"&gt;
       Les options « natives »
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#encore-plus-loin-des-sous-titres-pour-les-vidéos"&gt;
       Encore plus loin, des sous-titres pour les vidéos
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#fallback"&gt;
       Fallback
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#interagir-un-peu-plus-avec-les-médias"&gt;
    Interagir un peu plus avec les médias
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#structure-de-base"&gt;
       Structure de base
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#mettre-nos-contrôleurs"&gt;
       Mettre nos contrôleurs
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#interagir-avec-la-vidéo"&gt;
       Interagir avec la vidéo
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#tp--faire-votre-propre-lecteur-multimédia"&gt;
    TP : Faire votre propre lecteur multimédia
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#consigne"&gt;
      Consigne
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#niveau-1"&gt;
       Niveau 1
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#niveau-2"&gt;
       Niveau 2
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#niveau-3"&gt;
       Niveau 3
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#solution"&gt;
     Solution
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="les-balises-audio-et-vidéo"&gt;
 &lt;a aria-hidden="true" href="#les-balises-audio-et-vidéo"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les balises audio et vidéo
&lt;/h3&gt;
&lt;h4 id="les-balises-audio-et-vidéo-1"&gt;
 &lt;a aria-hidden="true" href="#les-balises-audio-et-vidéo-1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les balises audio et vidéo
&lt;/h4&gt;
&lt;p&gt;
 Comme vous le savez, en HTML, tout élément est représenté par une balise.
 &lt;code&gt;
  audio
 &lt;/code&gt;
 et
 &lt;code&gt;
  video
 &lt;/code&gt;
 ne feront pas exception.
&lt;/p&gt;
&lt;p&gt;
 Ces éléments sont de type
 &lt;em&gt;
  block
 &lt;/em&gt;
 et sont écrits de la manière suivante :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;audio&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-comment"&gt;&amp;lt;!-- Des informations sur la piste audio --&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;audio&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-comment"&gt;&amp;lt;!-- Des informations sur la vidéo --&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="les-éléments-importants-de-ces-balises"&gt;
 &lt;a aria-hidden="true" href="#les-éléments-importants-de-ces-balises"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les éléments importants de ces balises
&lt;/h4&gt;
&lt;p&gt;
 Bien que leurs buts soient différents, ces deux balises sont très similaires dans leur comportement. Finalement, la seule différence entre un contenu audio et vidéo est que le second
 &lt;em&gt;
  peut
 &lt;/em&gt;
 inclure le premier (mais pas nécessairement). Dans un cas comme dans l’autre, on souhaite lire une piste et afficher une interface à l’utilisateur pour interagir avec cette dernière.
&lt;/p&gt;
&lt;p&gt;
 Cela nous amène donc au premier attribut indispensable de ces deux balises : la
 &lt;strong&gt;
  source
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;h5 id="la-source"&gt;
 &lt;a aria-hidden="true" href="#la-source"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La source
&lt;/h5&gt;
&lt;p&gt;
 Savoir afficher une balise audio/vidéo c’est bien, mais si on ne lui donne rien à afficher, on n’est pas plus avancé ! Il va donc falloir donner une source à afficher. Tout comme pour une image, elle peut être relative ou absolue. Il existe deux moyens pour la spécifier.
&lt;/p&gt;
&lt;h6 id="via-lattribut-src"&gt;
 &lt;a aria-hidden="true" href="#via-lattribut-src"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Via l’attribut
 &lt;code&gt;
  src
 &lt;/code&gt;
&lt;/h6&gt;
&lt;p&gt;
 Là encore, comme pour une image, il suffit de spécifier l’attribut
 &lt;code&gt;
  src
 &lt;/code&gt;
 pour donner un lien vers la vidéo ou le flux audio à lire.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;video&lt;/span&gt; &lt;span class="hljs-attr"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"http://masource.com/lavideo.avi"&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h6 id="via-la-balise-source"&gt;
 &lt;a aria-hidden="true" href="#via-la-balise-source"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Via la balise
 &lt;code&gt;
  &amp;lt;source&amp;gt;
 &lt;/code&gt;
&lt;/h6&gt;
&lt;p&gt;
 Cependant, il peut être intéressant de proposer plusieurs formats à l’utilisateur. En effet, tous les navigateurs ne savent pas lire tous les formats vidéo. On propose donc la même vidéo dans des formats différents et le navigateur choisira ! Pour cela, on utilise la balise
 &lt;code&gt;
  &amp;lt;source&amp;gt;
 &lt;/code&gt;
 &lt;em&gt;
  dans
 &lt;/em&gt;
 la balise audio/vidéo.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;source&lt;/span&gt; &lt;span class="hljs-attr"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"chemin/vers/masource.mp4"&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"video/mp4"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;source&lt;/span&gt; &lt;span class="hljs-attr"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"chemin/vers/masource.ogg"&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"video/ogg"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;source&lt;/span&gt; &lt;span class="hljs-attr"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"chemin/vers/masource.webm"&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"video/webm"&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Voici une petite démonstration
 &lt;sup id="fnref-1-PqvxgTbho2"&gt;
  &lt;a class="footnote-ref" href="#fn-1-PqvxgTbho2"&gt;
   1
  &lt;/a&gt;
 &lt;/sup&gt;
 de ce dernier cas :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/tmjosu22/3/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Mais c’est pourri, on peut pas lancer la vidéo ! Ça marche pas !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 En fait si, tout marche très bien, c’est juste que maintenant que nous avons la vidéo, il va falloir la contrôler…
&lt;/p&gt;
&lt;h4 id="contrôler-simplement-le-média"&gt;
 &lt;a aria-hidden="true" href="#contrôler-simplement-le-média"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Contrôler (simplement) le média
&lt;/h4&gt;
&lt;p&gt;
 Maintenant que la vidéo est présente, ajoutons un peu d’interactivité à cette dernière…
&lt;/p&gt;
&lt;h5 id="les-options-«natives»"&gt;
 &lt;a aria-hidden="true" href="#les-options-«natives»"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les options « natives »
&lt;/h5&gt;
&lt;p&gt;
 Les balises multimédia possèdent par défaut quelques attributs bien pratiques. En effet, voici une liste non exhaustive de celles que j’estime être les plus utiles dans l’immédiat :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   controls
  &lt;/code&gt;
  : permet de rajouter des boutons de contrôle de lecture standards (lecture/pause, barre de progression, plein-écran…) ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   autoplay
  &lt;/code&gt;
  : (plutôt évident…) la lecture est lancée automatiquement dès que la vidéo commence à se charger ; n’en abusez pas, cela peut être assez gênant pour la navigation ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   poster
  &lt;/code&gt;
  &lt;sup&gt;
   *
  &lt;/sup&gt;
  : lien vers une image d’illustration si la vidéo n’est pas disponible à l’adresse spécifiée ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   loop
  &lt;/code&gt;
  : relance la lecture quand cette dernière est terminée, encore et encore ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   height
  &lt;/code&gt;
  et
  &lt;code&gt;
   width
  &lt;/code&gt;
  &lt;sup&gt;
   *
  &lt;/sup&gt;
  : pour spécifier une hauteur et une largeur au lecteur ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   muted
  &lt;/code&gt;
  : coupe le son.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 &lt;sub&gt;
  * ne s’applique pas à la balise audio
 &lt;/sub&gt;
&lt;/p&gt;
&lt;p&gt;
 Voici par exemple une vidéo avec des contrôles, dont le son est coupé, qui jouera en boucle et dont la taille a été limitée à 320x240 pixels.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;video&lt;/span&gt; &lt;span class="hljs-attr"&gt;width&lt;/span&gt;=&lt;span class="hljs-string"&gt;"320"&lt;/span&gt; &lt;span class="hljs-attr"&gt;height&lt;/span&gt;=&lt;span class="hljs-string"&gt;"240"&lt;/span&gt; &lt;span class="hljs-attr"&gt;controls&lt;/span&gt; &lt;span class="hljs-attr"&gt;muted&lt;/span&gt; &lt;span class="hljs-attr"&gt;loop&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;source&lt;/span&gt; &lt;span class="hljs-attr"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"chemin/vers/masource.mp4"&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"video/mp4"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;source&lt;/span&gt; &lt;span class="hljs-attr"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"chemin/vers/masource.ogg"&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"video/ogg"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;source&lt;/span&gt; &lt;span class="hljs-attr"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"chemin/vers/masource.webm"&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"video/webm"&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/tmjosu22/4/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous savez maintenant afficher une vidéo ou jouer un son !
&lt;/p&gt;
&lt;h5 id="encore-plus-loin-des-sous-titres-pour-les-vidéos"&gt;
 &lt;a aria-hidden="true" href="#encore-plus-loin-des-sous-titres-pour-les-vidéos"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Encore plus loin, des sous-titres pour les vidéos
&lt;/h5&gt;
&lt;p&gt;
 Dans notre monde moderne et international, il arrive que les sous-titres puissent être nécessaires pour offrir le contenu à un plus grand public. Et c’est là que la balise
 &lt;code&gt;
  &amp;lt;track&amp;gt;
 &lt;/code&gt;
 intervient. Placée dans une balise vidéo, cette dernière proposera des sous-titres au lecteur.
&lt;/p&gt;
&lt;p&gt;
 La balise
 &lt;em&gt;
  track
 &lt;/em&gt;
 a besoin des informations suivantes :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   src
  &lt;/code&gt;
  : la source (relative ou absolue) du fichier de sous-titres (au format WebVTT
  &lt;a href="http://dev.w3.org/html5/webvtt/"&gt;
   .vtt
  &lt;/a&gt;
  (WEB Video Text Track)) ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   kind="subtitles"
  &lt;/code&gt;
  : pour préciser que l’on parle de sous-titres ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   srclang
  &lt;/code&gt;
  : le code international de la langue (en, de, fr…) ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   label
  &lt;/code&gt;
  : le nom littéral de la piste de sous-titres.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Par exemple :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;video&lt;/span&gt; &lt;span class="hljs-attr"&gt;controls&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;source&lt;/span&gt; &lt;span class="hljs-attr"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"ma-super-video.mp4"&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"video/mp4"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;source&lt;/span&gt; &lt;span class="hljs-attr"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"ma-super-video.ogg"&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"video/ogg"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;track&lt;/span&gt; &lt;span class="hljs-attr"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"subtitles_en.vtt"&lt;/span&gt; &lt;span class="hljs-attr"&gt;kind&lt;/span&gt;=&lt;span class="hljs-string"&gt;"subtitles"&lt;/span&gt; &lt;span class="hljs-attr"&gt;srclang&lt;/span&gt;=&lt;span class="hljs-string"&gt;"en"&lt;/span&gt; &lt;span class="hljs-attr"&gt;label&lt;/span&gt;=&lt;span class="hljs-string"&gt;"English"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;track&lt;/span&gt; &lt;span class="hljs-attr"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"subtitles_fr.vtt"&lt;/span&gt; &lt;span class="hljs-attr"&gt;kind&lt;/span&gt;=&lt;span class="hljs-string"&gt;"subtitles"&lt;/span&gt; &lt;span class="hljs-attr"&gt;srclang&lt;/span&gt;=&lt;span class="hljs-string"&gt;"fr"&lt;/span&gt; &lt;span class="hljs-attr"&gt;label&lt;/span&gt;=&lt;span class="hljs-string"&gt;"Francais"&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   À l’heure d’écriture de ce tutoriel, cette balise est encore très peu supportée dans les navigateurs.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="fallback"&gt;
 &lt;a aria-hidden="true" href="#fallback"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 &lt;em&gt;
  Fallback
 &lt;/em&gt;
&lt;/h5&gt;
&lt;p&gt;
 Si l’utilisateur qui visite votre site possède un navigateur un peu
 &lt;em&gt;
  rétro
 &lt;/em&gt;
 ou incomplet vis-à-vis des standards du Web, il serait de bon ton de l’avertir que le contenu ne peut être affiché plutôt que de le laisser attendre indéfiniment un média qui n’arrivera jamais.
&lt;/p&gt;
&lt;p&gt;
 Pour cela, il suffit tout simplement d’ajouter du HTML dans la balise média concernée. Si le navigateur ne sait pas interpréter la balise vidéo/audio, alors il ignorera les balises et affichera notre
 &lt;em&gt;
  fallback
 &lt;/em&gt;
 . Sinon ce contenu est ignoré car la balise est correctement interprétée.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;&amp;lt;!-- Une source quelconque --&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;source&lt;/span&gt; &lt;span class="hljs-attr"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"…"&lt;/span&gt;&amp;gt;&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;&amp;lt;!-- Ce paragraphe ne s'affichera que dans le cas où le navigateur
         ne sait pas interpréter la balise vidéo --&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"alert"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        Votre navigateur ne supporte pas la balise vidéo ! Mettez-vous à jour !
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Plutôt que d’afficher du texte, vous pouvez très bien aussi afficher un conteneur Flash en solution de secours pour jouer la vidéo. L’idéal est même de proposer une alternative ET les liens de téléchargement de la vidéo, si la licence de distribution de cette dernière le permet.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="interagir-un-peu-plus-avec-les-médias"&gt;
 &lt;a aria-hidden="true" href="#interagir-un-peu-plus-avec-les-médias"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Interagir un peu plus avec les médias
&lt;/h3&gt;
&lt;p&gt;
 Lorsque l’on a un média, on peut avoir envie d’interagir un peu plus avec que simplement afficher les contrôles de base. Nous ferons alors appel à JavaScript pour rentrer dans les entrailles du lecteur…
&lt;/p&gt;
&lt;p&gt;
 Imaginons que nous voulions proposer un lecteur sans contrôles natifs, mais uniquement avec nos boutons HTML que nous pourrions styliser via du CSS. Il faudrait alors que ces boutons interagissent avec la vidéo correctement. Admettons que nous voulions ajouter les contrôles suivants :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   Lecture
  &lt;/code&gt;
  : lit la vidéo ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   Pause
  &lt;/code&gt;
  : met la vidéo en pause ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   Stop
  &lt;/code&gt;
  : arrête la vidéo ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   -10s
  &lt;/code&gt;
  : recule la vidéo de 10 secondes ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   +10s
  &lt;/code&gt;
  : avance la vidéo de 10 secondes ;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="structure-de-base"&gt;
 &lt;a aria-hidden="true" href="#structure-de-base"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Structure de base
&lt;/h5&gt;
&lt;p&gt;
 Voici la structure de base que nous allons respecter :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;video&lt;/span&gt; &lt;span class="hljs-attr"&gt;id&lt;/span&gt;=&lt;span class="hljs-string"&gt;"mavideo"&lt;/span&gt; &lt;span class="hljs-attr"&gt;controls&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;source&lt;/span&gt; &lt;span class="hljs-attr"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"http://clips.vorwaerts-gmbh.de/VfE_html5.mp4"&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"video/mp4"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;source&lt;/span&gt; &lt;span class="hljs-attr"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"http://clips.vorwaerts-gmbh.de/VfE.webm"&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"video/webm"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;source&lt;/span&gt; &lt;span class="hljs-attr"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"http://clips.vorwaerts-gmbh.de/VfE.ogv"&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"video/ogg"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"alert"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        Votre navigateur ne supporte pas la balise vidéo ! Mettez-vous à jour !
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;video&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"controles"&lt;/span&gt; &lt;span class="hljs-attr"&gt;hidden&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-javascript"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;lecture&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// Lit la vidéo&lt;/span&gt;
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;pause&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// Met la vidéo en pause&lt;/span&gt;
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;stop&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// Arrête la vidéo&lt;/span&gt;
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;avancer&lt;/span&gt;(&lt;span class="hljs-params"&gt;duree&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// Avance de 'duree' secondes&lt;/span&gt;
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;reculer&lt;/span&gt;(&lt;span class="hljs-params"&gt;duree&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// Recule de 'duree' secondes&lt;/span&gt;
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;creerBoutons&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// Crée les boutons de gestion du lecteur&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/tmjosu22/8/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="mettre-nos-contrôleurs"&gt;
 &lt;a aria-hidden="true" href="#mettre-nos-contrôleurs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Mettre nos contrôleurs
&lt;/h5&gt;
&lt;p&gt;
 Comme vous pouvez le voir dans le squelette précédent, pour l’instant, aucun bouton personnalisé n’est présent sur notre page et la vidéo possède l’interface par défaut. En effet, nous allons créer les boutons dynamiquement en JavaScript dans la fonction
 &lt;code&gt;
  creerBoutons()
 &lt;/code&gt;
 qui sera exécutée à la fin du chargement de la page. De cette manière, un utilisateur désactivant le JavaScript pourra tout de même utiliser le navigateur avec l’interface standard.
&lt;/p&gt;
&lt;p&gt;
 Voici comment nous allons créer nos boutons. Je compte sur vous pour comprendre sans explication, juste avec les commentaires !
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-javascript"&gt;&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; lecteur;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;creerBoutons&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// Crée les boutons de gestion du lecteur&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; btnLecture = &lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.createElement(&lt;span class="hljs-string"&gt;"button"&lt;/span&gt;);
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; btnPause = &lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.createElement(&lt;span class="hljs-string"&gt;"button"&lt;/span&gt;);
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; btnStop = &lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.createElement(&lt;span class="hljs-string"&gt;"button"&lt;/span&gt;);
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; btnReculer = &lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.createElement(&lt;span class="hljs-string"&gt;"button"&lt;/span&gt;);
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; btnAvancer = &lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.createElement(&lt;span class="hljs-string"&gt;"button"&lt;/span&gt;);
    
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; controlesBox = &lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.getElementById(&lt;span class="hljs-string"&gt;"controles"&lt;/span&gt;);
    lecteur = &lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.getElementById(&lt;span class="hljs-string"&gt;"mavideo"&lt;/span&gt;);
    
    &lt;span class="hljs-comment"&gt;// Ajoute un peu de texte&lt;/span&gt;
    btnLecture.textContent = &lt;span class="hljs-string"&gt;"Lecture"&lt;/span&gt;;
    btnPause.textContent = &lt;span class="hljs-string"&gt;"Pause"&lt;/span&gt;;
    btnStop.textContent = &lt;span class="hljs-string"&gt;"Stop"&lt;/span&gt;;
    btnReculer.textContent = &lt;span class="hljs-string"&gt;"-10s"&lt;/span&gt;;
    btnAvancer.textContent = &lt;span class="hljs-string"&gt;"+10s"&lt;/span&gt;;
    
    &lt;span class="hljs-comment"&gt;// Ajoute les boutons à l'interface&lt;/span&gt;
    controlesBox.appendChild(btnLecture);
    controlesBox.appendChild(btnPause);
    controlesBox.appendChild(btnStop);
    controlesBox.appendChild(btnReculer);
    controlesBox.appendChild(btnAvancer);
    
    &lt;span class="hljs-comment"&gt;// Lie les fonctions aux boutons&lt;/span&gt;
    btnLecture.addEventListener(&lt;span class="hljs-string"&gt;"click"&lt;/span&gt;, lecture, &lt;span class="hljs-literal"&gt;false&lt;/span&gt;);
    btnPause.addEventListener(&lt;span class="hljs-string"&gt;"click"&lt;/span&gt;, pause, &lt;span class="hljs-literal"&gt;false&lt;/span&gt;);
    btnStop.addEventListener(&lt;span class="hljs-string"&gt;"click"&lt;/span&gt;, stop, &lt;span class="hljs-literal"&gt;false&lt;/span&gt;);
    btnReculer.addEventListener(&lt;span class="hljs-string"&gt;"click"&lt;/span&gt;, &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;/span&gt;)&lt;/span&gt;{reculer(&lt;span class="hljs-number"&gt;10&lt;/span&gt;)}, &lt;span class="hljs-literal"&gt;false&lt;/span&gt;);
    btnAvancer.addEventListener(&lt;span class="hljs-string"&gt;"click"&lt;/span&gt;, &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;/span&gt;)&lt;/span&gt;{avancer(&lt;span class="hljs-number"&gt;10&lt;/span&gt;)}, &lt;span class="hljs-literal"&gt;false&lt;/span&gt;);
    
    &lt;span class="hljs-comment"&gt;// Affiche les nouveaux boutons et supprime l'interface originale&lt;/span&gt;
    controlesBox.removeAttribute(&lt;span class="hljs-string"&gt;"hidden"&lt;/span&gt;);
    lecteur.removeAttribute(&lt;span class="hljs-string"&gt;"controls"&lt;/span&gt;);
}

&lt;span class="hljs-comment"&gt;// Crée les boutons lorsque le DOM est chargé&lt;/span&gt;
&lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.addEventListener(&lt;span class="hljs-string"&gt;'DOMContentLoaded'&lt;/span&gt;, creerBoutons, &lt;span class="hljs-literal"&gt;false&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/tmjosu22/11/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="interagir-avec-la-vidéo"&gt;
 &lt;a aria-hidden="true" href="#interagir-avec-la-vidéo"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Interagir avec la vidéo
&lt;/h5&gt;
&lt;p&gt;
 Maintenant que nous avons un squelette, nous allons devoir faire appel aux propriétés de l’objet vidéo pour interagir avec (son id est « mavideo »). Pour cela, on ira chercher dans la référence de l’élément :
 &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement"&gt;
  HTMLMediaElement
 &lt;/a&gt;
 . Vous y trouverez les attributs accessibles (dont certains ont été vus plus tôt) ainsi que les méthodes que nous pouvons appeler.
&lt;/p&gt;
&lt;p&gt;
 Ainsi nous trouverons par exemple les éléments suivants :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   play()
  &lt;/code&gt;
  : pour lire la vidéo ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   pause()
  &lt;/code&gt;
  : pour la mettre en pause ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   currentTime
  &lt;/code&gt;
  : attribut représentant le minutage actuel de la vidéo (
  &lt;em&gt;
   position
  &lt;/em&gt;
  dans la vidéo).
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 On va alors pouvoir implémenter les méthodes JavaScript proposées plus tôt !
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-javascript"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;lecture&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// Lit la vidéo&lt;/span&gt;
    lecteur.play();
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;pause&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// Met la vidéo en pause&lt;/span&gt;
    lecteur.pause();
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;stop&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// Arrête la vidéo&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// On met en pause&lt;/span&gt;
    lecteur.pause();
    &lt;span class="hljs-comment"&gt;// Et on se remet au départ&lt;/span&gt;
    lecteur.currentTime = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;avancer&lt;/span&gt;(&lt;span class="hljs-params"&gt;duree&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// Avance de 'duree' secondes&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// On parse en entier pour être sûr d'avoir un nombre&lt;/span&gt;
    lecteur.currentTime += &lt;span class="hljs-built_in"&gt;parseInt&lt;/span&gt;(duree);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;reculer&lt;/span&gt;(&lt;span class="hljs-params"&gt;duree&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// Recule de 'duree' secondes&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// On parse en entier pour être sûr d'avoir un nombre&lt;/span&gt;
    lecteur.currentTime -= &lt;span class="hljs-built_in"&gt;parseInt&lt;/span&gt;(duree);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/tmjosu22/15/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="tp--faire-votre-propre-lecteur-multimédia"&gt;
 &lt;a aria-hidden="true" href="#tp--faire-votre-propre-lecteur-multimédia"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 TP : Faire votre propre lecteur multimédia
&lt;/h3&gt;
&lt;h4 id="consigne"&gt;
 &lt;a aria-hidden="true" href="#consigne"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Consigne
&lt;/h4&gt;
&lt;p&gt;
 En guise d’exercice, je vous propose de continuer l’interface que nous avons commencée en rajoutant les boutons suivants.
&lt;/p&gt;
&lt;h5 id="niveau-1"&gt;
 &lt;a aria-hidden="true" href="#niveau-1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Niveau 1
&lt;/h5&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   Répéter
  &lt;/code&gt;
  :
  &lt;em&gt;
   checkbox
  &lt;/em&gt;
  qui fera répéter la vidéo lorsqu’elle se termine si elle est cochée ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   Avancer/Reculer de xx secondes
  &lt;/code&gt;
  : un
  &lt;em&gt;
   input
  &lt;/em&gt;
  de votre choix pour sélectionner une valeur et deux boutons pour avancer ou reculer.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="niveau-2"&gt;
 &lt;a aria-hidden="true" href="#niveau-2"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Niveau 2
&lt;/h5&gt;
&lt;p&gt;
 Pour les plus forts :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Une barre de progression pour afficher où la vidéo est rendue dans sa lecture ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   Un
   &lt;em&gt;
    input
   &lt;/em&gt;
   de type
   &lt;em&gt;
    range
   &lt;/em&gt;
   pour :
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    afficher où la vidéo est rendue ;
   &lt;/li&gt;
   &lt;li&gt;
    sélectionner un endroit où aller.
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="niveau-3"&gt;
 &lt;a aria-hidden="true" href="#niveau-3"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Niveau 3
&lt;/h5&gt;
&lt;p&gt;
 Prouvez que vous être le maître des technos Web, rajoutez une belle couche de CSS par dessus tout cela !
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;p&gt;
  Voila, ça fera de quoi vous occuper
  &lt;img alt=":pirate:" class="smiley" src="./static/smileys/pirate.png"/&gt;
  !
 &lt;/p&gt;
 &lt;p&gt;
  &lt;strong&gt;
   BON COURAGE
  &lt;/strong&gt;
 &lt;/p&gt;
&lt;/div&gt;
&lt;h4 id="solution"&gt;
 &lt;a aria-hidden="true" href="#solution"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Solution
&lt;/h4&gt;
&lt;p&gt;
 Voici un exemple simple de solution « Niveau 1 » :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/tmjosu22/16/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Et voila une deuxième démo mettant plus l’accent sur le style que sur les fonctions.
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/tmjosu22/20/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 S’il est encore nécessaire de montrer l’intérêt des balises modernes du HTML5, sachez par exemple que YouTube, le célèbre hébergeur de vidéos, a décidé d’arrêter complètement l’utilisation de Flash pour ses contenus. En effet, maintenant, toutes les vidéos passent par l’utilisation… de la balise
 &lt;code&gt;
  &amp;lt;video&amp;gt;
 &lt;/code&gt;
 !
&lt;/p&gt;
&lt;p&gt;
 Un gros merci à
 &lt;a href="https://zestedesavoir.com/membres/voir/Dominus Carnufex/"&gt;
  Dominus Carnufex
 &lt;/a&gt;
 pour avoir pris le temps et le courage de venir relire et corriger toutes mes monstrueuses fautes ! Merci aussi à
 &lt;a href="https://zestedesavoir.com/membres/voir/viki53/"&gt;
  viki53
 &lt;/a&gt;
 pour ses conseils sur le JavaScript et ses idées.
&lt;/p&gt;
&lt;div class="footnotes"&gt;
 &lt;hr/&gt;
 &lt;ol&gt;
  &lt;li id="fn-1-PqvxgTbho2"&gt;
   &lt;p&gt;
    Les vidéos d’exemple sont celles du film
    &lt;a href="https://peach.blender.org/"&gt;
     &lt;em&gt;
      Big Buck Bunny
     &lt;/em&gt;
    &lt;/a&gt;
    , un film sous licence Creative Commons.
   &lt;/p&gt;
   &lt;a class="footnote-backref" href="#fnref-1-PqvxgTbho2" title="Retourner au texte de la note 1"&gt;
    ↩
   &lt;/a&gt;
  &lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;</content><category term="web"></category><category term="tuto"></category></entry><entry><title>Refaire l'histoire avec git</title><link href="https://eskimon.fr/tuto-refaire-lhistoire-avec-git" rel="alternate"></link><published>2016-11-12T13:05:00+01:00</published><updated>2016-11-12T13:05:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2016-11-12:/tuto-refaire-lhistoire-avec-git</id><summary type="html">&lt;p&gt;
 Lors d’un projet informatique, gérer ses sources et leur historique est crucial. C’est pourquoi des logiciels comme
 &lt;strong&gt;
  git
 &lt;/strong&gt;
 ont vu le jour, afin de suivre les versions et modifications.
&lt;/p&gt;
&lt;p&gt;
 Dans le meilleur des mondes, chaque commit est bien exécuté et les choses sont faites dans l’ordre. Les …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Lors d’un projet informatique, gérer ses sources et leur historique est crucial. C’est pourquoi des logiciels comme
 &lt;strong&gt;
  git
 &lt;/strong&gt;
 ont vu le jour, afin de suivre les versions et modifications.
&lt;/p&gt;
&lt;p&gt;
 Dans le meilleur des mondes, chaque commit est bien exécuté et les choses sont faites dans l’ordre. Les fichiers ne sont pas édités sans arrêt, et donc tous les changements sont bien atomiques. Ça, c’est la théorie…
&lt;/p&gt;
&lt;p&gt;
 Dans la pratique, il peut arriver que l’on ait besoin de toucher à l’historique git pour plusieurs raisons, comme fusionner des commits entre eux (pour n’en avoir plus qu’un) ou encore fusionner une branche avec une autre, pour suivre les changements de l’une dans l’autre. Eh bien tout cela peut se résumer en une commande :
 &lt;strong&gt;
  rebase
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Ce tutoriel
 &lt;strong&gt;
  introductif
 &lt;/strong&gt;
 va vous proposer de
 &lt;strong&gt;
  découvrir
 &lt;/strong&gt;
 et mettre en pratique ces différents aspects au travers d’un exemple simple et complet. À la fin de ce tutoriel, vous saurez :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  déplacer des commits pour réécrire un historique ;
 &lt;/li&gt;
 &lt;li&gt;
  fusionner deux commits entre eux ;
 &lt;/li&gt;
 &lt;li&gt;
  fusionner une branche dans une autre proprement.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Pour suivre ce tutoriel, quelques pré-requis sont nécessaires :
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    savoir se servir de git et ses opérations de base (commit, add, branch) ;
   &lt;/li&gt;
   &lt;li&gt;
    comprendre les concepts de branche et d’historique.
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Dans ce tutoriel nous allons toucher l’historique d’un dépôt git. Bien que cela soit souvent sans risque pour votre dépôt, les opérations que nous allons faire peuvent tout autant très bien casser votre historique de modifications, si vous n’êtes pas assez vigilant.
   &lt;br/&gt;
   Faites donc attention lorsque vous les appliquez sur vos projets. Évitez aussi tant que possible de faire ce genre d’opérations une fois vos changements poussés sur le serveur commun, pour ne pas embrouiller le travail de vos collègues.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si vous faites partie des développeurs de Zeste de Savoir, sachez que les notes dans les balises "secret" vous sont destinées, pour faire des analogies avec le projet.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#préparation-de-notre-environnement"&gt;
    Préparation de notre environnement
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#la-situation"&gt;
     La situation
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#le-dépôt-exemple"&gt;
     Le dépôt exemple
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#les-objectifs"&gt;
     Les objectifs
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#déplacer-des-commits"&gt;
   Déplacer des commits
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#fusionner-des-commits"&gt;
   Fusionner des commits
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#merger-une-autre-branche"&gt;
    Merger une autre branche
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#sources"&gt;
       Sources
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="préparation-de-notre-environnement"&gt;
 &lt;a aria-hidden="true" href="#préparation-de-notre-environnement"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Préparation de notre environnement
&lt;/h3&gt;
&lt;h4 id="la-situation"&gt;
 &lt;a aria-hidden="true" href="#la-situation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La situation
&lt;/h4&gt;
&lt;p&gt;
 Cette année Bob s’organise, il se fait des fiches de révision pour son examen d’histoire. Du coup, en bon programmeur, il décide de les rédiger en markdown pour pouvoir les enrichir avec des illustrations et autres bricoles.
&lt;/p&gt;
&lt;p&gt;
 Il a ainsi rédigé 5 fichiers différents pour 5 périodes différentes :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  la révolution industrielle (la
  &lt;em&gt;
   revolution
  &lt;/em&gt;
  industrielle.md) ;
 &lt;/li&gt;
 &lt;li&gt;
  la Première Guerre mondiale (la
  &lt;em&gt;
   premiere
  &lt;/em&gt;
  guerre_mondiale.md) ;
 &lt;/li&gt;
 &lt;li&gt;
  l’entre-deux-guerres (entre_guerre.md) ;
 &lt;/li&gt;
 &lt;li&gt;
  la Seconde Guerre mondiale (la
  &lt;em&gt;
   seconde
  &lt;/em&gt;
  guerre_mondiale.md) ;
 &lt;/li&gt;
 &lt;li&gt;
  les Trente Glorieuses (30_glorieuses.md).
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Seulement il y a un problème, Bob a été malade pendant l’année. Du coup, ses fichiers ont été écrits dans le désordre : il a rédigé ses cours au fur et à mesure puis, quand il avait du temps, il a fait du rattrapage en prenant les cours d’Alice.
&lt;/p&gt;
&lt;p&gt;
 Il se retrouve alors avec l’historique de commits git suivant :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-maxima"&gt;218bfcb Conclusion de la première guerre mondiale - rattrapage
b1cc9fd L'entre deux guerres
70c08d1 Début de la seconde guerre mondiale - rattrapage
ce99651 Les &lt;span class="hljs-number"&gt;30&lt;/span&gt; glorieuses
61f6523 La seconde guerre mondiale - fin
b52fa42 La première guerre mondiale
8c310df La révolution industrielle
47901da Ajout des titres des parties
&lt;span class="hljs-number"&gt;5b56868&lt;/span&gt; Creation des fichiers du programme d'histoire
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 C’est cet historique que nous allons essayer de réordonner. On peut voir que les premiers commits correspondent au début du programme scolaire, puis ensuite Bob a été malade. Il a alors fait une pause, puis repris le cours dans l’ordre. Ensuite, il a rattrapé les cours manquants en recopiant les notes d’un autre élève, en partant du plus récent dans le programme au plus vieux.
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   L’historique montrée est antéchronologique, le commit le plus récent (celui que l’on vient de faire) est en haut de la liste, le plus vieux est en bas.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="le-dépôt-exemple"&gt;
 &lt;a aria-hidden="true" href="#le-dépôt-exemple"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le dépôt exemple
&lt;/h4&gt;
&lt;p&gt;
 Afin que vous puissiez faire des tests chez vous, je vous mets à disposition un dépôt git possédant cette situation initiale. Vous pouvez le récupérer dans
 &lt;a href="https://dl.dropboxusercontent.com/u/18967337/temp/tuto_git_rebase.zip"&gt;
  cette archive
 &lt;/a&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Dans ce dépôt, vous devez trouver deux branches qui ont pour noms Bob et Alice. La branche Bob possède les écrits de Bob, tandis que celle d’Alice possède quelques anecdotes qu’elle a voulu lui donner plus tard. Pour l’instant, concentrez-vous sur la branche de Bob.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-armasm"&gt;&lt;span class="hljs-symbol"&gt;git&lt;/span&gt; checkout &lt;span class="hljs-keyword"&gt;Bob
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous pouvez alors vérifier les commits et leur mauvais rangement. Vous devriez obtenir la liste que l’on a vue plus tôt.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-applescript"&gt;git &lt;span class="hljs-built_in"&gt;log&lt;/span&gt; &lt;span class="hljs-comment"&gt;--pretty=oneline --abbrev-commit&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   J’utiliserai la commande ci-dessus via un alias
   &lt;code&gt;
    git logo
   &lt;/code&gt;
   (pour "log oneline"). Vous pouvez le rajouter en éditant votre fichier
   &lt;code&gt;
    .gitconfig
   &lt;/code&gt;
   ou via la commande
   &lt;code&gt;
    git config --global alias.logo 'log --pretty=oneline --abbrev-commit'
   &lt;/code&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ici, la branche Bob peut-être assimilée à votre branche de bugfix ou de développement de
   &lt;em&gt;
    feature
   &lt;/em&gt;
   . La branche d’Alice sera ensuite vue comme upstream/dev, mais nous y reviendrons.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si git vous ennuie à cause des droits sur les fichiers (compatibilité entre Windows, Linux, etc.) alors entrez la commande suivante, qui vous permettra de désactiver la surveillance du changement des droits :
   &lt;code&gt;
    git config core.filemode false
   &lt;/code&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="les-objectifs"&gt;
 &lt;a aria-hidden="true" href="#les-objectifs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les objectifs
&lt;/h4&gt;
&lt;p&gt;
 Nos objectifs seront donc multiples. Afin de conserver un dépôt propre, nous allons effectuer une à une les opérations suivantes :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  mise dans l’ordre chronologique du cours des différents fichiers (car je suis maniaque) ;
 &lt;/li&gt;
 &lt;li&gt;
  fusion des commits consécutifs traitant du même fichier et de la même partie "logique" ;
 &lt;/li&gt;
 &lt;li&gt;
  fusion de la branche d’Alice pour "enrichir" notre branche de son contenu.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 À la fin, vous serez passés maîtres de la commande
 &lt;code&gt;
  rebase
 &lt;/code&gt;
 et de ses différents cas d’utilisations.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;h3 id="déplacer-des-commits"&gt;
 &lt;a aria-hidden="true" href="#déplacer-des-commits"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Déplacer des commits
&lt;/h3&gt;
&lt;p&gt;
 À l’heure actuelle, on a un historique un peu farfelu. Dans l’idéal, on aimerait que les éléments se suivent chronologiquement, voire que l’on ait uniquement un seul commit par période.
&lt;/p&gt;
&lt;p&gt;
 Ainsi, on va essayer d’obtenir le résultat suivant :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-maxima"&gt;----------- AVANT -----------
218bfcb Conclusion de la première guerre mondiale - rattrapage
b1cc9fd L'entre deux guerres
70c08d1 Début de la seconde guerre mondiale - rattrapage
ce99651 Les &lt;span class="hljs-number"&gt;30&lt;/span&gt; glorieuses
61f6523 La seconde guerre mondiale - fin
b52fa42 La première guerre mondiale
8c310df La révolution industrielle
47901da Ajout des titres des parties
&lt;span class="hljs-number"&gt;5b56868&lt;/span&gt; Creation des fichiers du programme d'histoire

----------- APRES -----------
ce99651 Les &lt;span class="hljs-number"&gt;30&lt;/span&gt; glorieuses
61f6523 La seconde guerre mondiale - fin
70c08d1 Début de la seconde guerre mondiale - rattrapage
b1cc9fd L'entre deux guerres
218bfcb Conclusion de la première guerre mondiale - rattrapage
b52fa42 La première guerre mondiale
8c310df La révolution industrielle
47901da Ajout des titres des parties
&lt;span class="hljs-number"&gt;5b56868&lt;/span&gt; Creation des fichiers du programme d'histoire
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Comme vous pouvez le constater, de nombreux commits ont littéralement changé de place ! C’est ça que nous allons faire ici, déplacer des commits !
&lt;/p&gt;
&lt;p&gt;
 Et aussi impressionnant que cela puisse paraître, il va suffire d’utiliser une seule commande à bon escient pour le faire :
 &lt;code&gt;
  git rebase
 &lt;/code&gt;
 . Mais attention, on ne l’utilise pas n’importe comment.
&lt;/p&gt;
&lt;p&gt;
 Pour l’utiliser, on va devoir lui spécifier le commit
 &lt;strong&gt;
  le plus ancien
 &lt;/strong&gt;
 devant rester tel quel. Dans notre cas, nous souhaitons tout remettre en ordre jusqu’à "La premiere guerre mondiale" (b52fa42) qui, lui, ne bouge pas. On va alors lancer le rebase
 &lt;strong&gt;
  en mode interactif
 &lt;/strong&gt;
 jusqu’à ce commit :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-stylus"&gt;git rebase -&lt;span class="hljs-selector-tag"&gt;i&lt;/span&gt; b52fa42^
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Attention à ne pas oublier l’option
   &lt;code&gt;
    -i
   &lt;/code&gt;
   pour le mode
   &lt;strong&gt;
    interactif
   &lt;/strong&gt;
   ainsi que le
   &lt;code&gt;
    ^
   &lt;/code&gt;
   après l’identifiant du commit ! Ce dernier sert à indiquer que l’on veut remonter jusqu’à ce commit
   &lt;em&gt;
    inclus
   &lt;/em&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Une nouvelle fenêtre s’ouvre alors avec plein de choses passionnantes :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-shell"&gt;pick b52fa42 La première guerre mondiale
pick 61f6523 La seconde guerre mondiale - fin
pick ce99651 Les 30 glorieuses
pick 70c08d1 Début de la seconde guerre mondiale - rattrapage
pick b1cc9fd L'entre deux guerres
pick 218bfcb Conclusion de la première guerre mondiale - rattrapage
&lt;span class="hljs-meta"&gt;
#&lt;/span&gt;&lt;span class="bash"&gt;&lt;span class="hljs-comment"&gt;# Rebase 8c310df..218bfcb onto 8c310df&lt;/span&gt;&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;/span&gt;&lt;span class="bash"&gt;&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;/span&gt;&lt;span class="bash"&gt;&lt;span class="hljs-comment"&gt;# Commands:&lt;/span&gt;&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;/span&gt;&lt;span class="bash"&gt;  p, pick = use commit&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;/span&gt;&lt;span class="bash"&gt;&lt;span class="hljs-comment"&gt;#  r, reword = use commit, but edit the commit message&lt;/span&gt;&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;/span&gt;&lt;span class="bash"&gt;  e, edit = use commit, but stop &lt;span class="hljs-keyword"&gt;for&lt;/span&gt; amending&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;/span&gt;&lt;span class="bash"&gt;&lt;span class="hljs-comment"&gt;#  s, squash = use commit, but meld into previous commit&lt;/span&gt;&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;/span&gt;&lt;span class="bash"&gt;  f, fixup = like &lt;span class="hljs-string"&gt;"squash"&lt;/span&gt;, but discard this commit&lt;span class="hljs-string"&gt;'s log message&lt;/span&gt;&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;/span&gt;&lt;span class="bash"&gt;#  x, exec = run command (the rest of the line) using shell&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;/span&gt;&lt;span class="bash"&gt;&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;/span&gt;&lt;span class="bash"&gt;# If you remove a line here THAT COMMIT WILL BE LOST.&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;/span&gt;&lt;span class="bash"&gt; However, if you remove everything, the rebase will be aborted.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Si vous comprenez l’anglais, vous avez peut-être déjà deviné comment faire. Sinon, voici la procédure.
&lt;/p&gt;
&lt;p&gt;
 Dans cette affichage, vous avez la liste des commits jusqu’au dernier que vous souhaitez garder tel quel. L’opération est maintenant simple, il va falloir déplacer les lignes pour les mettre dans l’ordre que vous voulez. L’ordre en question sera celui que l’on a vu juste au-dessus. Laissez les "pick" en début de ligne, ils sont là pour signifier que vous souhaitez utiliser le commit en question.
&lt;/p&gt;
&lt;p&gt;
 Vous avez réussi ? Très bien, vous devriez obtenir quelque chose comme ça avant de valider :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-stata"&gt;pick b52fa42 &lt;span class="hljs-keyword"&gt;La&lt;/span&gt; première guerre mondiale
pick 218bfcb Conclusion &lt;span class="hljs-keyword"&gt;de&lt;/span&gt; &lt;span class="hljs-keyword"&gt;la&lt;/span&gt; première guerre mondiale - rattrapage
pick b1cc9fd &lt;span class="hljs-keyword"&gt;L&lt;/span&gt;'entre deux guerres
pick 70c08d1 &lt;span class="hljs-keyword"&gt;D&lt;/span&gt;ébut &lt;span class="hljs-keyword"&gt;de&lt;/span&gt; &lt;span class="hljs-keyword"&gt;la&lt;/span&gt; seconde guerre mondiale - rattrapage
pick 61f6523 &lt;span class="hljs-keyword"&gt;La&lt;/span&gt; seconde guerre mondiale - fin
pick ce99651 Les 30 glorieuses

## Et &lt;span class="hljs-keyword"&gt;en&lt;/span&gt; dessous le blabla &lt;span class="hljs-keyword"&gt;pr&lt;/span&gt;écédent
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Sauvegardez puis quittez l’éditeur. Le rebase se lance alors automatiquement… et vous crie dessus, c’est un échec !
 &lt;img alt=":(" class="smiley" src="./static/smileys/triste.png"/&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Que s’est-il passé ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Si vous utilisez la commande
 &lt;code&gt;
  git status
 &lt;/code&gt;
 vous allez voir qu’il existe un conflit sur le fichier "la
 &lt;em&gt;
  seconde
 &lt;/em&gt;
 guerre_mondiale.md". En l’ouvrant, vous verrez des marqueurs
 &lt;code&gt;
  &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;
 &lt;/code&gt;
 ,
 &lt;code&gt;
  ======
 &lt;/code&gt;
 et
 &lt;code&gt;
  &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;
 &lt;/code&gt;
 que git a rajoutés pour vous signaler les endroits où il n’arrive pas à faire une chose logique.
&lt;/p&gt;
&lt;p&gt;
 C’est donc à vous de jouer en éditant manuellement le fichier, pour qu’il ait l’allure escomptée. En l’occurrence, c’est simplement une ligne blanche qui l’ennuie. Supprimez-là, ainsi que les marqueurs, puis sauvegarder le fichier.
&lt;/p&gt;
&lt;p&gt;
 Nous allons maintenant signaler à git que le conflit est résolu en faisant un :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-dockerfile"&gt;git &lt;span class="hljs-keyword"&gt;add&lt;/span&gt;&lt;span class="bash"&gt; la_seconde_guerre_mondiale.md
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Cela nous permet de rajouter le fichier dans l’index, puis on lui demande de continuer le rebase avec :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-kotlin"&gt;git rebase --&lt;span class="hljs-keyword"&gt;continue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Git vous demandera alors de confirmer le message de commit (ce que vous ferez), puis continuera son bonhomme de chemin.
&lt;/p&gt;
&lt;p&gt;
 Un autre conflit similaire apparait alors, résolvez-le de la même manière.
&lt;/p&gt;
&lt;p&gt;
 À la fin, git doit afficher le message
 &lt;code&gt;
  Successfully rebased and updated refs/heads/Bob.
 &lt;/code&gt;
 pour nous informer que tout va bien.
&lt;/p&gt;
&lt;p&gt;
 Si vous réaffichez votre historique, vos commits sont maintenant dans l’ordre ! Félicitations, voilà une bonne chose de faite !
&lt;/p&gt;
&lt;h3 id="fusionner-des-commits"&gt;
 &lt;a aria-hidden="true" href="#fusionner-des-commits"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Fusionner des commits
&lt;/h3&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Cette opération est souvent pratique quand vous écrivez la doc en plusieurs fois, et que vous voulez réunir tout les commits concernant cette dernière en un seul.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Cette fois-ci nous allons
 &lt;strong&gt;
  fusionner
 &lt;/strong&gt;
 des commits pour réduire ces derniers, et surtout les rendre cohérents ! (Parce qu’avoir un commit pour une faute d’orthographe, c’est désagréable !)
&lt;/p&gt;
&lt;p&gt;
 On va donc chercher à atteindre le schéma suivant :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-maxima"&gt;-------- AVANT --------
56701fc Les &lt;span class="hljs-number"&gt;30&lt;/span&gt; glorieuses
a63009c Début de la seconde guerre mondiale - rattrapage
752c8cd L'entre deux guerres
328d49e Conclusion de la première guerre mondiale - rattrapage
b52fa42 La première guerre mondiale
8c310df La révolution industrielle
47901da Ajout des titres des parties
&lt;span class="hljs-number"&gt;5b56868&lt;/span&gt; Creation des fichiers du programme d'histoire

-------- APRES --------
d55d7d3 Les &lt;span class="hljs-number"&gt;30&lt;/span&gt; glorieuses
&lt;span class="hljs-number"&gt;3107653&lt;/span&gt; La seconde guerre mondiale
ca137f6 L'entre deux guerres
ebfa63b La première guerre mondiale
8c310df La révolution industrielle
47901da Ajout des titres des parties
&lt;span class="hljs-number"&gt;5b56868&lt;/span&gt; Creation des fichiers du programme d'histoire
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Oui, nous allons aussi en profiter pour mettre à jour un message de commit !
&lt;/p&gt;
&lt;p&gt;
 Là encore, c’est la magie de la commande
 &lt;code&gt;
  rebase
 &lt;/code&gt;
 qui va nous être utile. Comme précédemment, on va la lancer sur le dernier commit qui ne bouge pas, donc
 &lt;code&gt;
  b52fa42 La première guerre mondiale
 &lt;/code&gt;
 . Ce qui nous donne :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-stylus"&gt;git rebase -&lt;span class="hljs-selector-tag"&gt;i&lt;/span&gt; b52fa42^
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 La machine se met en route et nous affiche le menu permettant de faire les modifications. Nous allons cette fois-ci lui dire de fusionner le commit 8f3d90c avec son prédécesseur et nous en profiterons pour éditer le message de commit de e4b80f96. On utilisera pour cela le mot-clé "fixup" ou "squash" pour fusionner (le dernier permet de changer le message de commit lors de la fusion), et nous utiliserons "reword" pour éditer juste le message du second commit à modifier.
&lt;/p&gt;
&lt;p&gt;
 Voici la séquence :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class='hljs language-hl_lines="2'&gt;pick b52fa42 La première guerre mondiale
fixup 328d49e Conclusion de la première guerre mondiale - rattrapage
pick 752c8cd L'entre deux guerres
reword a63009c Début de la seconde guerre mondiale - rattrapage
pick 56701fc Les 30 glorieuses
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Sauvegardez, quittez, puis laissez la magie opérer ! Lors du processus, l’éditeur devrait apparaître pour vous demander le nouveau commit pour l’opération de "reword".
&lt;/p&gt;
&lt;p&gt;
 Et voilà, c’est déjà fini pour ce morceau ! Plutôt simple, non ?
&lt;/p&gt;
&lt;h3 id="merger-une-autre-branche"&gt;
 &lt;a aria-hidden="true" href="#merger-une-autre-branche"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Merger une autre branche
&lt;/h3&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ce dernier cas est le cas habituel du merge de upstream/dev dans votre branche de travail, afin que git puisse merger votre PR. Ici, essayez d’imaginer la branche d’Alice en tant que upstream/dev.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Une dernière fonction bien pratique de l’outil rebase est le
 &lt;em&gt;
  merge
 &lt;/em&gt;
 (fusion) entre des branches. Ainsi, si vous travaillez sur une branche pour développer quelque chose, mais que vous voulez récupérer le contenu d’une autre branche pour mettre à jour la vôtre (vous synchroniser avec
 &lt;em&gt;
  master
 &lt;/em&gt;
 par exemple),
 &lt;code&gt;
  rebase
 &lt;/code&gt;
 peut vous y aider.
&lt;/p&gt;
&lt;p&gt;
 Cette fois-ci, on va se servir de rebase non pas en indiquant un commit mais en indiquant la branche que l’on aimerait récupérer dans notre travail. En l’occurrence, on va chercher à récupérer les modifications d’Alice (branche du même nom) qui a pris notre cours puis y a rajouté quelques anecdotes dans son coin.
&lt;/p&gt;
&lt;p&gt;
 Voici la petite commande à lancer :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-ebnf"&gt;&lt;span class="hljs-attribute"&gt;git rebase Alice&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Cette fois-ci, pas besoin du mode "interactif"
   &lt;code&gt;
    -i
   &lt;/code&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Évidemment, il peut arriver que des conflits se présentent, sinon ce n’est pas drôle… Et évidemment, j’en ai volontairement créé pour cette opération !
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
&lt;/p&gt;
&lt;p&gt;
 Essayez de les corriger avec l’éditeur, puis il suffit de faire un
 &lt;code&gt;
  git add &amp;lt;lefichier&amp;gt;
 &lt;/code&gt;
 suivi d’un
 &lt;code&gt;
  git rebase --continue
 &lt;/code&gt;
 pour continuer le rebase !
&lt;/p&gt;
&lt;p&gt;
 Vous voilà maintenant synchronisés avec la branche d’Alice.
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
&lt;/p&gt;
&lt;p&gt;
 Une dernière petite information pour terminer. Si jamais un rebase devient trop compliqué à gérer, vous pouvez toujours l’abandonner pour revenir à l’état d’avant le lancement de la commande. Pour cela, tapez simplement
 &lt;code&gt;
  git rebase --abort
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;h5 id="sources"&gt;
 &lt;a aria-hidden="true" href="#sources"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sources
&lt;/h5&gt;
&lt;ul&gt;
 &lt;li&gt;
  le logo d’illustration de ce tutoriel appartient à git ;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="http://git-scm.com/book/fr/v1/Utilitaires-Git-Réécrire-l-historique"&gt;
   une lecture intéressante
  &lt;/a&gt;
  .
 &lt;/li&gt;
&lt;/ul&gt;</content><category term="git"></category><category term="tuto"></category></entry><entry><title>Google Maps JavaScript API V3</title><link href="https://eskimon.fr/tuto-google-maps-javascript-api-v3" rel="alternate"></link><published>2016-05-28T05:24:00+02:00</published><updated>2016-05-28T05:24:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2016-05-28:/tuto-google-maps-javascript-api-v3</id><summary type="html">&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ce tutoriel a été initialement publié sur le Site du Zéro par aymensan sous licence CC-BY-NC-SA.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Dans le cadre de l’unité d’enseignement PRO (Projet) de la HEIG-VD (
 &lt;a href="http://www.heig-vd.ch/"&gt;
  Haute Ecole d’Ingénierie et de Gestion du Canton de Vaud
 &lt;/a&gt;
 ), ce tutoriel a pour but de fournir une introduction à …&lt;/p&gt;</summary><content type="html">&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ce tutoriel a été initialement publié sur le Site du Zéro par aymensan sous licence CC-BY-NC-SA.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Dans le cadre de l’unité d’enseignement PRO (Projet) de la HEIG-VD (
 &lt;a href="http://www.heig-vd.ch/"&gt;
  Haute Ecole d’Ingénierie et de Gestion du Canton de Vaud
 &lt;/a&gt;
 ), ce tutoriel a pour but de fournir une introduction à l’API Google Maps V3, qui à l’heure actuelle (31.05.10) vient de perdre sa dénomination "labs" ("labs" étant la dénomination Google pour "version béta").
&lt;/p&gt;
&lt;p&gt;
 Pour pouvoir suivre ce tutoriel, il faut avoir un minimum de connaissances en
 &lt;a href="http://www.siteduzero.com/tutoriel-3-8158-tout-sur-le-javascript.html"&gt;
  Javascript
 &lt;/a&gt;
 et
 &lt;a href="http://www.siteduzero.com/tutoriel-3-13666-apprenez-a-creer-votre-site-web.html"&gt;
  XHTML
 &lt;/a&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Voici les points qui sont abordés dans ce tutoriel :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Affichage d’une carte Google Maps
 &lt;/li&gt;
 &lt;li&gt;
  Création d’overlays (marqueurs, polygones et polylignes)
 &lt;/li&gt;
 &lt;li&gt;
  Gestion des événements souris
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ce tutoriel a légèrement été repris par Eskimon pour revoir quelques exemples, remettre au gout du jour quelques aspects et ajouter des exemples
   &lt;em&gt;
    live
   &lt;/em&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#affichage-dune-carte-google-maps"&gt;
    Affichage d’une carte Google Maps
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#options-de-la-carte"&gt;
     Options de la carte
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#création-doverlays"&gt;
    Création d’overlays
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#les-marqueurs"&gt;
     Les marqueurs
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#les-polylines"&gt;
     Les polylines
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#les-polygones"&gt;
     Les polygones
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#gestion-des-évènements-souris"&gt;
    Gestion des évènements souris
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#click-clic"&gt;
     'click' (clic)
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#dragend-fin-dun-glisser-déposer"&gt;
     'dragend' (fin d’un glisser-déposer)
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="affichage-dune-carte-google-maps"&gt;
 &lt;a aria-hidden="true" href="#affichage-dune-carte-google-maps"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Affichage d’une carte Google Maps
&lt;/h3&gt;
&lt;p&gt;
 Voici le code minimal pour créer une page HTML affichant une carte.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-meta"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;html&lt;/span&gt; &lt;span class="hljs-attr"&gt;lang&lt;/span&gt;=&lt;span class="hljs-string"&gt;"fr"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;charset&lt;/span&gt;=&lt;span class="hljs-string"&gt;"utf-8"&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;&amp;lt;!-- 
            Elément Google Maps indiquant que la carte doit être affiché 
            en plein écran et qu'elle ne peut pas 
            être redimensionnée par l'utilisateur
        --&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"viewport"&lt;/span&gt; &lt;span class="hljs-attr"&gt;content&lt;/span&gt;=&lt;span class="hljs-string"&gt;"initial-scale=1.0, user-scalable=no"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;&amp;lt;!--
            Inclusion de l'API Google MAPS
            Le paramètre "sensor" indique si cette application utilise 
            un capteur pour déterminer la position de l'utilisateur (smartphone)
            Cet include pourrait aussi etre fait a la fin du &amp;lt;body&amp;gt;
        --&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;script&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"text/javascript"&lt;/span&gt; &lt;span class="hljs-attr"&gt;src&lt;/span&gt;=&lt;span class="hljs-string"&gt;"http://maps.google.com/maps/api/js?sensor=false"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="null"&gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;&amp;lt;!-- Une feuille de style éventuel --&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;link&lt;/span&gt; &lt;span class="hljs-attr"&gt;rel&lt;/span&gt;=&lt;span class="hljs-string"&gt;"stylesheet"&lt;/span&gt; &lt;span class="hljs-attr"&gt;href&lt;/span&gt;=&lt;span class="hljs-string"&gt;"style.css"&lt;/span&gt;&amp;gt;&lt;/span&gt;

        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Tutoriel Google Maps&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;&amp;lt;!-- Le conteneur de notre carte --&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;id&lt;/span&gt;=&lt;span class="hljs-string"&gt;"carte"&lt;/span&gt; &lt;span class="hljs-attr"&gt;style&lt;/span&gt;=&lt;span class="hljs-string"&gt;"width:400px; height:500px"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;&amp;lt;!-- Le script qui va créer notre carte --&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;script&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"text/javascript"&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class="javascript"&gt;
            &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;initialiser&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;/span&gt;) &lt;/span&gt;{
                &lt;span class="hljs-comment"&gt;// Objet representant une coordonnée&lt;/span&gt;
                &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; latlng = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;46.71109&lt;/span&gt;, &lt;span class="hljs-number"&gt;1.7191036&lt;/span&gt;);
                &lt;span class="hljs-comment"&gt;/*
                    Objet contenant des propriétés avec des identificateurs 
                    prédéfinis dans Google Maps permettant de définir des 
                    options d'affichage de notre carte
                */&lt;/span&gt;
                &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; options = {
                    &lt;span class="hljs-attr"&gt;center&lt;/span&gt;: latlng,
                    &lt;span class="hljs-attr"&gt;zoom&lt;/span&gt;: &lt;span class="hljs-number"&gt;5&lt;/span&gt;,
                    &lt;span class="hljs-attr"&gt;mapTypeId&lt;/span&gt;: google.maps.MapTypeId.ROADMAP
                };
                
                &lt;span class="hljs-comment"&gt;/*
                    Constructeur de la carte qui prend en paramêtre le conteneur HTML
                    dans lequel la carte doit s'afficher et les options
                */&lt;/span&gt;
                &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; carte = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.Map(&lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.getElementById(&lt;span class="hljs-string"&gt;"carte"&lt;/span&gt;), options);
            }

            &lt;span class="hljs-comment"&gt;// On lance l'initialisation de notre carte&lt;/span&gt;
            initialiser();
        &lt;/span&gt;&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Les 3 éléments importants que l’on retrouve dans ce code sont
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
  l’importation de la librairie Google Maps grâce aux balises
  &lt;code&gt;
   &amp;lt;meta name="viewport" content="initial-scale=1.0, user-scalable=no" /&amp;gt;
  &lt;/code&gt;
  et
  &lt;code&gt;
   &amp;lt;script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"&amp;gt;&amp;lt;/script&amp;gt;
  &lt;/code&gt;
  ;
 &lt;/li&gt;
 &lt;li&gt;
  le positionnement dans le corps de la page HTML d’une balise
  &lt;code&gt;
   &amp;lt;div id="..."&amp;gt;
  &lt;/code&gt;
  avec un certain id (identificateur que l’on utilisera dans le code Javascript lors de l’instanciation de la carte Google Maps pour définir son emplacement) et enfin ;
 &lt;/li&gt;
 &lt;li&gt;
  l’instanciation d’un objet de classe
  &lt;code&gt;
   google.maps.Map
  &lt;/code&gt;
  représentant la carte qui sera affichée.
 &lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="options-de-la-carte"&gt;
 &lt;a aria-hidden="true" href="#options-de-la-carte"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Options de la carte
&lt;/h4&gt;
&lt;p&gt;
 Pour créer une carte, il faut nécessairement définir les options suivantes, comme nous avons pu le voir dans le code ci-dessus :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   center
  &lt;/code&gt;
  : centre de la carte
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   zoom
  &lt;/code&gt;
  : agrandissement de la carte
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   mapTypeId
  &lt;/code&gt;
  : type de la carte
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="table-wrapper"&gt;
 &lt;table class=" table table-bordered table-striped"&gt;
  &lt;thead&gt;
   &lt;tr&gt;
    &lt;th colspan="1" rowspan="1"&gt;
     &lt;p&gt;
      Nom
     &lt;/p&gt;
    &lt;/th&gt;
    &lt;th colspan="1" rowspan="1"&gt;
     &lt;p&gt;
      Signification
     &lt;/p&gt;
    &lt;/th&gt;
    &lt;th colspan="1" rowspan="1"&gt;
     &lt;p&gt;
      Valeurs
     &lt;/p&gt;
    &lt;/th&gt;
   &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
   &lt;tr&gt;
    &lt;td colspan="1" rowspan="1"&gt;
     &lt;p&gt;
      &lt;code&gt;
       center
      &lt;/code&gt;
     &lt;/p&gt;
    &lt;/td&gt;
    &lt;td colspan="1" rowspan="1"&gt;
     &lt;p&gt;
      centre de la carte
     &lt;/p&gt;
    &lt;/td&gt;
    &lt;td colspan="1" rowspan="1"&gt;
     &lt;p&gt;
      coordonnées en latitude et longitude
     &lt;/p&gt;
    &lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td colspan="1" rowspan="1"&gt;
     &lt;p&gt;
      &lt;code&gt;
       zoom
      &lt;/code&gt;
     &lt;/p&gt;
    &lt;/td&gt;
    &lt;td colspan="1" rowspan="1"&gt;
     &lt;p&gt;
      agrandissement de la carte
     &lt;/p&gt;
    &lt;/td&gt;
    &lt;td colspan="1" rowspan="1"&gt;
     &lt;p&gt;
      &lt;code&gt;
       0
      &lt;/code&gt;
      à
      &lt;code&gt;
       20
      &lt;/code&gt;
      (bornes comprises)
     &lt;/p&gt;
    &lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
    &lt;td colspan="1" rowspan="1"&gt;
     &lt;p&gt;
      &lt;code&gt;
       mapTypeId
      &lt;/code&gt;
     &lt;/p&gt;
    &lt;/td&gt;
    &lt;td colspan="1" rowspan="1"&gt;
     &lt;p&gt;
      type de la carte
     &lt;/p&gt;
    &lt;/td&gt;
    &lt;td colspan="1" rowspan="1"&gt;
     &lt;p&gt;
      &lt;code&gt;
       google.maps.MapTypeId.ROADMAP
      &lt;/code&gt;
      ,
      &lt;code&gt;
       google.maps.MapTypeId.SATELLITE
      &lt;/code&gt;
      ,
      &lt;code&gt;
       google.maps.MapTypeId.HYBRID
      &lt;/code&gt;
      ,
      &lt;code&gt;
       google.maps.MapTypeId.TERRAIN
      &lt;/code&gt;
     &lt;/p&gt;
    &lt;/td&gt;
   &lt;/tr&gt;
  &lt;/tbody&gt;
 &lt;/table&gt;
&lt;/div&gt;
&lt;p&gt;
 Table:Propriétés
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Dans Google Maps les coordonnées sont sous formes de latitude et de longitude. La librairie Google Maps met à disposition un constructeur permettant de créer un objet de classe
   &lt;code&gt;
    google.maps.LatLng(lat:number, lng:number)
   &lt;/code&gt;
   qui prend en paramètre des nombres représentant, respectivement, la latitude et la longitude.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voici d’autres options intéressantes que l’on peut spécifier pour une carte :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   disableDoubleClickZoom
  &lt;/code&gt;
  : Si sa valeur est mise à
  &lt;code&gt;
   true
  &lt;/code&gt;
  , cela désactive l’agrandissement en faisant un double-clic avec la souris.
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   draggable
  &lt;/code&gt;
  : Si sa valeur est mise à
  &lt;code&gt;
   true
  &lt;/code&gt;
  , cela désactive le fait de pouvoir faire glisser la carte en maintenant le clic sur elle.
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   scrollwheel
  &lt;/code&gt;
  : Si sa valeur est mise à
  &lt;code&gt;
   true
  &lt;/code&gt;
  , cela désactive l’agrandissement avec le scroll de la souris.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Par défaut, ces trois options ont la valeur
 &lt;code&gt;
  true
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Avec le code précédent, vous devriez obtenir un rendu similaire a celui-ci :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/8bbe9pkx/1/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="création-doverlays"&gt;
 &lt;a aria-hidden="true" href="#création-doverlays"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Création d’overlays
&lt;/h3&gt;
&lt;p&gt;
 Maintenant que l’on sait comment afficher une carte, il se peut que l’on ait besoin de disposer des éléments sur elle, pour, par exemple, indiquer un certain emplacement ou encore définir une zone géographique. Ceci peut se faire à l’aide des
 &lt;em&gt;
  overlays
 &lt;/em&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Les
 &lt;em&gt;
  overlays
 &lt;/em&gt;
 sont des éléments graphiques que l’ont peut poser ou dessiner sur une carte Google Maps.
&lt;/p&gt;
&lt;p&gt;
 Les
 &lt;em&gt;
  overlays
 &lt;/em&gt;
 auxquels on s’intéresse ici sont les suivants :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  les marqueurs qui permettent d’indiquer un point sur la carte à la manière d’un drapeau
 &lt;/li&gt;
 &lt;li&gt;
  les
  &lt;em&gt;
   polylines
  &lt;/em&gt;
  qui permettent, par exemple, de faire des tracés de vols d’avion
 &lt;/li&gt;
 &lt;li&gt;
  les polygones qui permettent de dessiner sur la carte une zone géographique
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="les-marqueurs"&gt;
 &lt;a aria-hidden="true" href="#les-marqueurs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les marqueurs
&lt;/h4&gt;
&lt;p&gt;
 Les marqueurs permettent de situer un point précis sur une carte.
&lt;/p&gt;
&lt;p&gt;
 Pour créer et afficher un marqueur, il faut au minimum spécifier une position (en latitude et longitude avec le constructeur
 &lt;code&gt;
  google.maps.LatLng()
 &lt;/code&gt;
 vu dans la partie précédente "Affichage d’une carte Google Maps") et la carte sur laquelle le marqueur doit être affiché.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-javascript"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;initialiser&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; latlng = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;46.779231&lt;/span&gt;, &lt;span class="hljs-number"&gt;6.659431&lt;/span&gt;);
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; options = {
        &lt;span class="hljs-attr"&gt;center&lt;/span&gt;: latlng,
        &lt;span class="hljs-attr"&gt;zoom&lt;/span&gt;: &lt;span class="hljs-number"&gt;5&lt;/span&gt;,
        &lt;span class="hljs-attr"&gt;mapTypeId&lt;/span&gt;: google.maps.MapTypeId.ROADMAP
    };
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; carte = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.Map(&lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.getElementById(&lt;span class="hljs-string"&gt;"carte"&lt;/span&gt;), options);
    
    &lt;span class="hljs-comment"&gt;/****************Nouveau code****************/&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;//création et placement du marqueur&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; marqueur = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.Marker({
        &lt;span class="hljs-attr"&gt;position&lt;/span&gt;: &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;44.1264415&lt;/span&gt;, &lt;span class="hljs-number"&gt;4.8036921&lt;/span&gt;),
    &lt;span class="hljs-attr"&gt;map&lt;/span&gt;: carte &lt;span class="hljs-comment"&gt;// la variable js représentant la carte&lt;/span&gt;
    });

    &lt;span class="hljs-comment"&gt;/********************************************/&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Utilisez le squelette HTML vu dans la partie précédente "Affichage d’une carte Google Maps" et remplacez le code de la fonction Javascript
   &lt;code&gt;
    initialiser()
   &lt;/code&gt;
   qui s’y trouve par le code ci-dessus. Faites de même pour tous les prochains exemples.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Ceci affiche un marqueur rouge que l’on voit sur la carte.
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/8bbe9pkx/2/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Il est possible de rendre le marqueur
 &lt;em&gt;
  draggable
 &lt;/em&gt;
 (c’est-à-dire permettre qu’on puisse le déplacer au moyen de la souris par un glisser-déposer). Pour ce faire, on peut soit, lors de la création du marqueur, spécifier dans les options
 &lt;code&gt;
  draggable: true
 &lt;/code&gt;
 (entre les accolades dans les paramètres du constructeur, ici
 &lt;code&gt;
  new google.maps.Marker({...})
 &lt;/code&gt;
 ), soit, après avoir créé le marqueur
 &lt;code&gt;
  marqueur
 &lt;/code&gt;
 , faire un
 &lt;code&gt;
  setDraggable(true)
 &lt;/code&gt;
 . Essayez dans l’exemple ci-dessus !
&lt;/p&gt;
&lt;p&gt;
 De la même manière, on peut aussi modifier l’image du marqueur par la propriété
 &lt;code&gt;
  icon: "./mon_image.png"
 &lt;/code&gt;
 ou la fonction
 &lt;code&gt;
  setIcon("./mon_image.png")
 &lt;/code&gt;
 en pointant sur une image placée dans le bon dossier.
&lt;/p&gt;
&lt;h4 id="les-polylines"&gt;
 &lt;a aria-hidden="true" href="#les-polylines"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les polylines
&lt;/h4&gt;
&lt;p&gt;
 Les
 &lt;em&gt;
  polylines
 &lt;/em&gt;
 permettent de dessiner des lignes droites attachées les unes aux autres sur la carte. Ceci peut permettre, par exemple, de dessiner un itinéraire sur la carte Google Maps.
&lt;/p&gt;
&lt;p&gt;
 Pour créer et dessiner un
 &lt;em&gt;
  polyline
 &lt;/em&gt;
 , il est nécessaire de définir son chemin, c’est-à-dire les coordonnées par lesquelles il passe. Pour ce faire, il faut créer un tableau dont les éléments sont des instances de la classe
 &lt;code&gt;
  google.maps.LatLng()
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Voici le tableau du tour de france que Clem va faire quand elle va rendre visite aux zesteurs :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-javascript"&gt;&lt;span class="hljs-comment"&gt;// chemin du tracé du futur polyline&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; tourdefrance = [
    &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;48.858859&lt;/span&gt;  ,  &lt;span class="hljs-number"&gt;2.3470599&lt;/span&gt;), &lt;span class="hljs-comment"&gt;// Paris&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;45.7579555&lt;/span&gt; ,  &lt;span class="hljs-number"&gt;4.8351209&lt;/span&gt;), &lt;span class="hljs-comment"&gt;// Lyon&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;47.238222&lt;/span&gt;  , &lt;span class="hljs-number"&gt;-1.5609655&lt;/span&gt;), &lt;span class="hljs-comment"&gt;// Nantes&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;48.1159156&lt;/span&gt; , &lt;span class="hljs-number"&gt;-1.6884545&lt;/span&gt;), &lt;span class="hljs-comment"&gt;// Rennes&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;50.6310675&lt;/span&gt; ,  &lt;span class="hljs-number"&gt;3.0471604&lt;/span&gt;), &lt;span class="hljs-comment"&gt;// Lille&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;48.858859&lt;/span&gt;  ,  &lt;span class="hljs-number"&gt;2.3470599&lt;/span&gt;)  &lt;span class="hljs-comment"&gt;// Paris&lt;/span&gt;
];
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Lorsque ceci est fait, il faut créer le
 &lt;em&gt;
  polyline
 &lt;/em&gt;
 en spécifiant pour la propriété
 &lt;code&gt;
  path
 &lt;/code&gt;
 le tableau déclaré ci-dessus.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-javascript"&gt;&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; traceTdF = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.Polyline({
    &lt;span class="hljs-attr"&gt;path&lt;/span&gt;: tourdefrance,     &lt;span class="hljs-comment"&gt;// chemin du tracé&lt;/span&gt;
    strokeColor: &lt;span class="hljs-string"&gt;"#d35400"&lt;/span&gt;, &lt;span class="hljs-comment"&gt;// couleur du tracé&lt;/span&gt;
    strokeOpacity: &lt;span class="hljs-number"&gt;1.0&lt;/span&gt;,     &lt;span class="hljs-comment"&gt;// opacité du tracé&lt;/span&gt;
    strokeWeight: &lt;span class="hljs-number"&gt;2&lt;/span&gt;         &lt;span class="hljs-comment"&gt;// grosseur du tracé&lt;/span&gt;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Enfin, afin d’afficher le tracé sur la carte, il faut utiliser la méthode
 &lt;code&gt;
  setMap()
 &lt;/code&gt;
 de notre objet
 &lt;code&gt;
  traceTdF
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-javascript"&gt;&lt;span class="hljs-comment"&gt;//lier le tracé à la carte&lt;/span&gt;
&lt;span class="hljs-comment"&gt;//ceci permet au tracé d'être affiché sur la carte&lt;/span&gt;
traceTdF.setMap(carte);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Au lieu de faire un
   &lt;code&gt;
    setMap()
   &lt;/code&gt;
   , on aurait pu, lors de la création du
   &lt;em&gt;
    polyline
   &lt;/em&gt;
   , spécifier la propriété
   &lt;code&gt;
    map
   &lt;/code&gt;
   dans les paramètres du constructeur
   &lt;code&gt;
    new google.maps.Polyline({...})
   &lt;/code&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Quand on ajoute une propriété dans les paramètres du constructeur, il ne faut pas oublier de vérifier que seule la dernière définition de propriété ne se termine pas par une virgule et qu’à la fin de toutes les autres une virgule est présente.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voici ce que le code de notre fonction
 &lt;code&gt;
  initialiser()
 &lt;/code&gt;
 donne au final :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-javascript"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;initialiser&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; latlng = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;46.779231&lt;/span&gt;, &lt;span class="hljs-number"&gt;6.659431&lt;/span&gt;);
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; options = {
        &lt;span class="hljs-attr"&gt;center&lt;/span&gt;: latlng,
        &lt;span class="hljs-attr"&gt;zoom&lt;/span&gt;: &lt;span class="hljs-number"&gt;5&lt;/span&gt;,
        &lt;span class="hljs-attr"&gt;mapTypeId&lt;/span&gt;: google.maps.MapTypeId.ROADMAP
    };
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; carte = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.Map(&lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.getElementById(&lt;span class="hljs-string"&gt;"carte"&lt;/span&gt;), options);
    
    &lt;span class="hljs-comment"&gt;/*************** Nouveau code ***************/&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;// redéfinition du centre de la carte&lt;/span&gt;
    carte.setCenter(&lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;48.21109&lt;/span&gt;, &lt;span class="hljs-number"&gt;1.7191036&lt;/span&gt;));

    &lt;span class="hljs-comment"&gt;// redéfinition du zoom&lt;/span&gt;
    carte.setZoom(&lt;span class="hljs-number"&gt;6&lt;/span&gt;);
    
    &lt;span class="hljs-comment"&gt;//chemin du tracé&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; tourdefrance = [
        &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;48.858859&lt;/span&gt;  ,  &lt;span class="hljs-number"&gt;2.3470599&lt;/span&gt;), &lt;span class="hljs-comment"&gt;// Paris&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;45.7579555&lt;/span&gt; ,  &lt;span class="hljs-number"&gt;4.8351209&lt;/span&gt;), &lt;span class="hljs-comment"&gt;// Lyon&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;47.238222&lt;/span&gt;  , &lt;span class="hljs-number"&gt;-1.5609655&lt;/span&gt;), &lt;span class="hljs-comment"&gt;// Nantes&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;48.1159156&lt;/span&gt; , &lt;span class="hljs-number"&gt;-1.6884545&lt;/span&gt;), &lt;span class="hljs-comment"&gt;// Rennes&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;50.6310675&lt;/span&gt; ,  &lt;span class="hljs-number"&gt;3.0471604&lt;/span&gt;), &lt;span class="hljs-comment"&gt;// Lille&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;48.858859&lt;/span&gt;  ,  &lt;span class="hljs-number"&gt;2.3470599&lt;/span&gt;)  &lt;span class="hljs-comment"&gt;// Paris&lt;/span&gt;
    ];
    
    &lt;span class="hljs-comment"&gt;// creation de l'objet Polyline&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; traceTdF = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.Polyline({
        &lt;span class="hljs-attr"&gt;path&lt;/span&gt;: tourdefrance,     &lt;span class="hljs-comment"&gt;// chemin du tracé&lt;/span&gt;
        strokeColor: &lt;span class="hljs-string"&gt;"#d35400"&lt;/span&gt;, &lt;span class="hljs-comment"&gt;// couleur du tracé&lt;/span&gt;
        strokeOpacity: &lt;span class="hljs-number"&gt;1.0&lt;/span&gt;,     &lt;span class="hljs-comment"&gt;// opacité du tracé&lt;/span&gt;
        strokeWeight: &lt;span class="hljs-number"&gt;2&lt;/span&gt;         &lt;span class="hljs-comment"&gt;// grosseur du tracé&lt;/span&gt;
    });
    
    &lt;span class="hljs-comment"&gt;// lier le tracé (le polyline) à la carte&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// ceci permet au tracé d'être affiché sur la carte&lt;/span&gt;
    traceTdF.setMap(carte);

    &lt;span class="hljs-comment"&gt;/********************************************/&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Vous pouvez voir que j’ai ajouté sous le commentaire "Nouveau code" deux autres instructions. J’aurais pu mettre tout ceci dans les options de la carte, mais j’ai préféré faire de cette manière pour bien faire la différence entre le code original de notre fonction
   &lt;code&gt;
    initialiser()
   &lt;/code&gt;
   et tout ce que nous venons d’ajouter.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Et voici le résultat :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/8bbe9pkx/3/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="les-polygones"&gt;
 &lt;a aria-hidden="true" href="#les-polygones"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les polygones
&lt;/h4&gt;
&lt;p&gt;
 Sur une carte Google Maps, on peut aussi dessiner des polygones. Un exemple d’utilité pratique serait de définir par ce biais un secteur ou une zone.
&lt;/p&gt;
&lt;p&gt;
 Créer un polygone sur la carte est extrêmement similaire à la création d’un
 &lt;em&gt;
  polyline
 &lt;/em&gt;
 que l’on vient de voir. Un peu comme avant, il faut :
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
  Créer un tableau contenant tous les sommets du polygone
 &lt;/li&gt;
 &lt;li&gt;
  Créer le polygone avec le constructeur
  &lt;code&gt;
   google.maps.Polygon()
  &lt;/code&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Afficher le polygone sur la carte
 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
 Voici ce que donne le code :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-javascript"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;initialiser&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; latlng = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;46.779231&lt;/span&gt;, &lt;span class="hljs-number"&gt;6.659431&lt;/span&gt;);
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; options = {
        &lt;span class="hljs-attr"&gt;center&lt;/span&gt;: latlng,
        &lt;span class="hljs-attr"&gt;zoom&lt;/span&gt;: &lt;span class="hljs-number"&gt;5&lt;/span&gt;,
        &lt;span class="hljs-attr"&gt;mapTypeId&lt;/span&gt;: google.maps.MapTypeId.ROADMAP
    };
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; carte = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.Map(&lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.getElementById(&lt;span class="hljs-string"&gt;"carte"&lt;/span&gt;), options);
    
    &lt;span class="hljs-comment"&gt;/*************** Nouveau code ***************/&lt;/span&gt;
    
    &lt;span class="hljs-comment"&gt;//sommets du polygone&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; tourdefrancePolygone = [
        &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;48.858859&lt;/span&gt;  ,  &lt;span class="hljs-number"&gt;2.3470599&lt;/span&gt;), &lt;span class="hljs-comment"&gt;// Paris&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;45.7579555&lt;/span&gt; ,  &lt;span class="hljs-number"&gt;4.8351209&lt;/span&gt;), &lt;span class="hljs-comment"&gt;// Lyon&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;47.238222&lt;/span&gt;  , &lt;span class="hljs-number"&gt;-1.5609655&lt;/span&gt;), &lt;span class="hljs-comment"&gt;// Nantes&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;48.1159156&lt;/span&gt; , &lt;span class="hljs-number"&gt;-1.6884545&lt;/span&gt;), &lt;span class="hljs-comment"&gt;// Rennes&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;50.6310675&lt;/span&gt; ,  &lt;span class="hljs-number"&gt;3.0471604&lt;/span&gt;)  &lt;span class="hljs-comment"&gt;// Lille&lt;/span&gt;
    ];

    lePolygone = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.Polygon({
        &lt;span class="hljs-attr"&gt;paths&lt;/span&gt;: tourdefrancePolygone, &lt;span class="hljs-comment"&gt;// sommets du polygone&lt;/span&gt;
        strokeColor: &lt;span class="hljs-string"&gt;"#d35400"&lt;/span&gt;,      &lt;span class="hljs-comment"&gt;// couleur des bords du polygone&lt;/span&gt;
        strokeOpacity: &lt;span class="hljs-number"&gt;0.8&lt;/span&gt;,          &lt;span class="hljs-comment"&gt;// opacité des bords du polygone&lt;/span&gt;
        strokeWeight: &lt;span class="hljs-number"&gt;2&lt;/span&gt;,             &lt;span class="hljs-comment"&gt;// épaisseur des bords du polygone&lt;/span&gt;
        fillColor: &lt;span class="hljs-string"&gt;"##f39c12"&lt;/span&gt;,       &lt;span class="hljs-comment"&gt;// couleur de remplissage du polygone&lt;/span&gt;
        fillOpacity: &lt;span class="hljs-number"&gt;0.35&lt;/span&gt;            &lt;span class="hljs-comment"&gt;// opacité de remplissage du polygone&lt;/span&gt;
    });

    &lt;span class="hljs-comment"&gt;//lier le polygone à la carte&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;//ceci permet au polygone d'être affiché sur la carte&lt;/span&gt;
    lePolygone.setMap(carte);

    &lt;span class="hljs-comment"&gt;/********************************************/&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Notez qu’il n’est pas nécessaire lors de la définition des sommets de la parcelle de définir le dernier sommet sur le premier afin de fermer le polygone ; le dernier sommet sera automatiquement relié au premier.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/8bbe9pkx/5/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="gestion-des-évènements-souris"&gt;
 &lt;a aria-hidden="true" href="#gestion-des-évènements-souris"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Gestion des évènements souris
&lt;/h3&gt;
&lt;p&gt;
 Il est possible avec Google Maps d’attacher des gestionnaires d’évènements à certains objets de Google Maps comme les cartes, les marqueurs, les polygones, etc.
&lt;/p&gt;
&lt;p&gt;
 Voici un tableau de quelques évènements que l’on peut gérer dans Google Maps :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="table-wrapper"&gt;
  &lt;table class=" table table-bordered table-striped"&gt;
   &lt;thead&gt;
    &lt;tr&gt;
     &lt;th colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       Indentificateur de l’évènement
      &lt;/p&gt;
     &lt;/th&gt;
     &lt;th colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       Généré quand on …
      &lt;/p&gt;
     &lt;/th&gt;
    &lt;/tr&gt;
   &lt;/thead&gt;
   &lt;tbody&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       &lt;code&gt;
        'click'
       &lt;/code&gt;
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       … clique avec la souris
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       &lt;code&gt;
        'rightclick'
       &lt;/code&gt;
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       … fait un clic-droit avec la souris
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       &lt;code&gt;
        'dblclick'
       &lt;/code&gt;
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       … fait un double-clic avec la souris
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       &lt;code&gt;
        'drag'
       &lt;/code&gt;
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       … déplace un objet au moyen de la souris par un glisser-déposer (généré plusieurs fois tout au long de cette action)
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       &lt;code&gt;
        'dragstart'
       &lt;/code&gt;
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       … une fois tout au début d’un déplacement d’un objet au moyen de la souris par un glisser-déposer
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       &lt;code&gt;
        'dragend'
       &lt;/code&gt;
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       … une fois tout à la fin d’un déplacement d’un objet au moyen de la souris par un glisser-déposer
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       &lt;code&gt;
        'mouseover'
       &lt;/code&gt;
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       … lorsque le pointeur de la souris entre sur la surface d’un objet Google Maps
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       &lt;code&gt;
        'mouseout'
       &lt;/code&gt;
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       … lorsque le pointeur de la souris sort de la surface d’un objet Google Maps
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
   &lt;/tbody&gt;
  &lt;/table&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Evènements dans Google Maps
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Créer un gestionnaire d’évènements se fait toujours de la même manière c’est pour cela qu’on ne fera que deux exemples : celui du
 &lt;code&gt;
  'click'
 &lt;/code&gt;
 et celui du
 &lt;code&gt;
  'drag'
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Voici ce à quoi le code de n’importe quel gestionnaire d’évènement ressemble :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-javascript"&gt;&lt;span class="hljs-comment"&gt;//'evenement' est l'identificateur de l'évènement (voir tableau ci-dessus)&lt;/span&gt;
&lt;span class="hljs-comment"&gt;//obj est l'objet duquel nous souhaitons traiter les évènements&lt;/span&gt;
google.maps.event.addListener(obj,&lt;span class="hljs-string"&gt;'evenement'&lt;/span&gt;, &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt;(&lt;span class="hljs-params"&gt;event&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;/*code qui doit s'executer lors de l'evenement*/&lt;/span&gt;
});
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   L’argument "event", dans le code ci-dessus, n’est utile que si l’on souhaite accèder à ses propriétés. Par exemple, la propiété latLng représentant une latitude et une longitude est disponiple pour un event de type MouseEvent passé par l’évènement clic.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="click-clic"&gt;
 &lt;a aria-hidden="true" href="#click-clic"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 'click' (clic)
&lt;/h4&gt;
&lt;p&gt;
 Reprenons le code que nous avions fait pour créer un marqueur dans la partie précédente "Création d’overlays" et ajoutons-y un gestionnaire d’évènements pour le clic sur le marqueur. Ce gestionnaire devra afficher un message d’alerte Javascript disant que le marqueur a été cliqué.
&lt;/p&gt;
&lt;p&gt;
 Voici à quoi le code ressemble :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-javascript"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;initialiser&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; latlng = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;46.779231&lt;/span&gt;, &lt;span class="hljs-number"&gt;6.659431&lt;/span&gt;);
    
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; options = {
        &lt;span class="hljs-attr"&gt;center&lt;/span&gt;: latlng,
        &lt;span class="hljs-attr"&gt;zoom&lt;/span&gt;: &lt;span class="hljs-number"&gt;19&lt;/span&gt;,
        &lt;span class="hljs-attr"&gt;mapTypeId&lt;/span&gt;: google.maps.MapTypeId.ROADMAP
    };
    
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; carte = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.Map(&lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.getElementById(&lt;span class="hljs-string"&gt;"carte"&lt;/span&gt;), options);

    &lt;span class="hljs-comment"&gt;//création du marqueur&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; marqueur = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.Marker({
        &lt;span class="hljs-attr"&gt;position&lt;/span&gt;: &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;46.779231&lt;/span&gt;, &lt;span class="hljs-number"&gt;6.659431&lt;/span&gt;),
        &lt;span class="hljs-attr"&gt;map&lt;/span&gt;: carte
    });

    &lt;span class="hljs-comment"&gt;/****************Nouveau code****************/&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;//création du marqueur&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; marqueur = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.Marker({
            &lt;span class="hljs-attr"&gt;position&lt;/span&gt;: &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;44.1264415&lt;/span&gt;, &lt;span class="hljs-number"&gt;4.8036921&lt;/span&gt;),
        &lt;span class="hljs-attr"&gt;map&lt;/span&gt;: carte
    });
    
    google.maps.event.addListener(marqueur, &lt;span class="hljs-string"&gt;'click'&lt;/span&gt;, &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;/span&gt;) &lt;/span&gt;{
        alert(&lt;span class="hljs-string"&gt;"Le marqueur a été cliqué."&lt;/span&gt;);&lt;span class="hljs-comment"&gt;//message d'alerte&lt;/span&gt;
    });

    &lt;span class="hljs-comment"&gt;/********************************************/&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/8bbe9pkx/6/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Avec les connaissances que nous avons à ce stade, nous pouvons écrire un code qui permette de créer des marqueurs dynamiquement sur la carte.
&lt;/p&gt;
&lt;p&gt;
 Reprenons de nouveau le code de la fonction
 &lt;code&gt;
  initialiser()
 &lt;/code&gt;
 du début de ce tutoriel et ajoutons-lui un gestionnaire d’événement clic associé cette fois-ci à la carte et non à un marqueur, puis mettons-y un code permettant de créer un marqueur (à chaque clic, donc) avec la position
 &lt;code&gt;
  event.latLng
 &lt;/code&gt;
 qui est une propriété de l'
 &lt;code&gt;
  event
 &lt;/code&gt;
 de type
 &lt;code&gt;
  MouseEvent
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Voici ce que donne le code :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-javascript"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;initialiser&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; latlng = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;46.779231&lt;/span&gt;, &lt;span class="hljs-number"&gt;6.659431&lt;/span&gt;);
    
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; options = {
        &lt;span class="hljs-attr"&gt;center&lt;/span&gt;: latlng,
        &lt;span class="hljs-attr"&gt;zoom&lt;/span&gt;: &lt;span class="hljs-number"&gt;19&lt;/span&gt;,
        &lt;span class="hljs-attr"&gt;mapTypeId&lt;/span&gt;: google.maps.MapTypeId.ROADMAP
    };
    
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; carte = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.Map(&lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.getElementById(&lt;span class="hljs-string"&gt;"carte"&lt;/span&gt;), options);

    &lt;span class="hljs-comment"&gt;/****************Nouveau code****************/&lt;/span&gt;
    
    &lt;span class="hljs-comment"&gt;//tableau contenant tous les marqueurs que nous créerons&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; tabMarqueurs = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; &lt;span class="hljs-built_in"&gt;Array&lt;/span&gt;();
    
    &lt;span class="hljs-comment"&gt;//notez la présence de l'argument "event" entre les parenthèses de "function()"&lt;/span&gt;
    google.maps.event.addListener(carte, &lt;span class="hljs-string"&gt;'click'&lt;/span&gt;, &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt;(&lt;span class="hljs-params"&gt;event&lt;/span&gt;) &lt;/span&gt;{
        tabMarqueurs.push(&lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.Marker({
            &lt;span class="hljs-attr"&gt;position&lt;/span&gt;: event.latLng,&lt;span class="hljs-comment"&gt;//coordonnée de la position du clic sur la carte&lt;/span&gt;
            map: carte&lt;span class="hljs-comment"&gt;//la carte sur laquelle le marqueur doit être affiché&lt;/span&gt;
        }));
    });
            
    &lt;span class="hljs-comment"&gt;/********************************************/&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Si vous testez ce code, vous pourrez voir qu’un marqueur est créé lors de chaque clic de la souris sur la carte.
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/8bbe9pkx/7/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="dragend-fin-dun-glisser-déposer"&gt;
 &lt;a aria-hidden="true" href="#dragend-fin-dun-glisser-déposer"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 'dragend' (fin d’un glisser-déposer)
&lt;/h4&gt;
&lt;p&gt;
 Pour illustrer la gestion de l’évènement
 &lt;code&gt;
  'dragend'
 &lt;/code&gt;
 , nous utiliserons de nouveau le code que nous avons fait pour la création d’un marqueur dans la partie "Création d’overlays".
&lt;/p&gt;
&lt;p&gt;
 L’exemple qui suit affiche, lorsque l’on déplace le marqueur, un message d’alerte Javascript indiquant la nouvelle coordonnée du marqueur.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-javascript"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;initialiser&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; latlng = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;46.779231&lt;/span&gt;, &lt;span class="hljs-number"&gt;6.659431&lt;/span&gt;);
    
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; options = {
        &lt;span class="hljs-attr"&gt;center&lt;/span&gt;: latlng,
        &lt;span class="hljs-attr"&gt;zoom&lt;/span&gt;: &lt;span class="hljs-number"&gt;19&lt;/span&gt;,
        &lt;span class="hljs-attr"&gt;mapTypeId&lt;/span&gt;: google.maps.MapTypeId.ROADMAP
    };
    
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; carte = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.Map(&lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.getElementById(&lt;span class="hljs-string"&gt;"carte"&lt;/span&gt;), options);
    
    &lt;span class="hljs-comment"&gt;/****************Nouveau code****************/&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;//création du marqueur&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; marqueur = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.Marker({
            &lt;span class="hljs-attr"&gt;position&lt;/span&gt;: &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; google.maps.LatLng(&lt;span class="hljs-number"&gt;44.1264415&lt;/span&gt;, &lt;span class="hljs-number"&gt;4.8036921&lt;/span&gt;),
        &lt;span class="hljs-attr"&gt;map&lt;/span&gt;: carte
    });
    
    &lt;span class="hljs-comment"&gt;//ne pas oublier de rendre le marqueur "déplaçable"&lt;/span&gt;
    marqueur.setDraggable(&lt;span class="hljs-literal"&gt;true&lt;/span&gt;);
    
    google.maps.event.addListener(marqueur, &lt;span class="hljs-string"&gt;'dragend'&lt;/span&gt;, &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt;(&lt;span class="hljs-params"&gt;event&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class="hljs-comment"&gt;//message d'alerte affichant la nouvelle position du marqueur&lt;/span&gt;
        alert(&lt;span class="hljs-string"&gt;"La nouvelle coordonnée du marqueur est : "&lt;/span&gt;+event.latLng);
    });

    &lt;span class="hljs-comment"&gt;/********************************************/&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/8bbe9pkx/8/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ce tutoriel a pu être créé essentiellement grâce à la documentation mis en ligne par Google qui se trouve sur le lien suivant :
   &lt;a href="https://developers.google.com/maps/documentation/javascript/tutorial?hl=FR"&gt;
    https://developers.google.com/maps/documentation/javascript/tutorial?hl=FR
   &lt;/a&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 N’ayant pas pour but d’être exhaustif, ce tutoriel permet néanmoins la familiarisation avec l’API Google Maps V3.
&lt;/p&gt;
&lt;p&gt;
 Pour pouvoir aller plus loin dans l’utilisation de Google Maps, il y a
 &lt;a href="https://developers.google.com/maps/documentation/javascript/tutorial?hl=FR"&gt;
  la documentation officielle de Google
 &lt;/a&gt;
 , mais qui n’est malheureusement pas disponible en français.
&lt;/p&gt;</content><category term="web"></category><category term="tuto"></category></entry><entry><title>Réaliser un télémètre à ultrasons</title><link href="https://eskimon.fr/arduino-r%C3%A9aliser-un-t%C3%A9l%C3%A9m%C3%A8tre-%C3%A0-ultrasons" rel="alternate"></link><published>2016-05-28T05:24:00+02:00</published><updated>2016-05-28T05:24:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2016-05-28:/arduino-réaliser-un-télémètre-à-ultrasons</id><summary type="html">&lt;p&gt;
 Lorsque l’on veut mesurer des distances, on utilise en général une règle ou un ruban mètre. Mais comment faire pour avoir une distance numerique en temps réel ?
&lt;/p&gt;
&lt;p&gt;
 Une réponse : utiliser la technologie des ultrasons pour réaliser un
 &lt;strong&gt;
  télémètre
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Bien que peu précis à l’échelle des centimètres, ces derniers …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Lorsque l’on veut mesurer des distances, on utilise en général une règle ou un ruban mètre. Mais comment faire pour avoir une distance numerique en temps réel ?
&lt;/p&gt;
&lt;p&gt;
 Une réponse : utiliser la technologie des ultrasons pour réaliser un
 &lt;strong&gt;
  télémètre
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Bien que peu précis à l’échelle des centimètres, ces derniers sont relativement fiables à l’échelle de la dizaine de centimètres. Les ultrasons étant des ondes sonores se propageant sous la forme d’un cône (ils sont peu directifs), ils font de très bons détecteurs d’obstacles.
&lt;/p&gt;
&lt;p&gt;
 Nous allons donc nous lancer dans la réalisation d’un petit télémètre à ultrasons via une Arduino et avec un affichage intégré sur un écran LCD (parce que la voie série, c’est un peu pénible pour se promener
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 ). Voici les prérequis pour suivre ce tutoriel :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  savoir se servir d’une Arduino ;
 &lt;/li&gt;
 &lt;li&gt;
  savoir utiliser un écran LCD alphanumérique avec l’Arduino.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 À la fin de ce tutoriel, vous serez en mesure de :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  utiliser un capteur HC-SR04 ;
 &lt;/li&gt;
 &lt;li&gt;
  comprendre et utiliser une information de type "temps de vol" ;
 &lt;/li&gt;
 &lt;li&gt;
  utiliser la fonction
  &lt;code&gt;
   pulseIn()
  &lt;/code&gt;
  pour mesurer une durée d’état sur une broche.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#rappel-sur-les-ultrasons"&gt;
    Rappel sur les ultrasons
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#une-onde-sonore-cest-quoi"&gt;
     Une onde sonore c’est quoi ?
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#principe-de-la-mesure"&gt;
     Principe de la mesure
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#mise-en-œuvre-du-télémètre"&gt;
    Mise en œuvre du télémètre
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#le-hc-sr04"&gt;
      Le HC-SR04
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#présentation-du-composant"&gt;
       Présentation du composant
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#branchement"&gt;
       Branchement
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#exploitons-le-capteur-avec-arduino"&gt;
      Exploitons le capteur avec Arduino
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#setup"&gt;
       Setup
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#loop"&gt;
       Loop
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#ajout-de-lécran-et-montage-final"&gt;
    Ajout de l’écran et montage final
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#faire-fonctionner-lécran-seul"&gt;
     Faire fonctionner l’écran seul
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#lécran-avec-le-télémètre"&gt;
     L’écran avec le télémètre
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#aller-plus-loin"&gt;
   Aller plus loin
  &lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="rappel-sur-les-ultrasons"&gt;
 &lt;a aria-hidden="true" href="#rappel-sur-les-ultrasons"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Rappel sur les ultrasons
&lt;/h3&gt;
&lt;p&gt;
 Faisons un peu de sciences et rappelons ce que sont des ultrasons.
&lt;/p&gt;
&lt;p&gt;
 Un ultrason est une onde sonore à haute fréquence. Par haute fréquence j’entends toutes les fréquences sonores inaudibles pour l’oreille humaine, soit celles au-delà de 20 kHz. Elles sont l’opposé des
 &lt;em&gt;
  infrasons
 &lt;/em&gt;
 qui sont les ondes sonores dont la fréquence est inférieure à la plus faible audible pour l’Homme et qui est de 20 Hz.
&lt;/p&gt;
&lt;p&gt;
 Bon, c’est bien beau mais cette histoire de fréquence ça ne nous en dit pas beaucoup plus !
&lt;/p&gt;
&lt;h4 id="une-onde-sonore-cest-quoi"&gt;
 &lt;a aria-hidden="true" href="#une-onde-sonore-cest-quoi"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Une onde sonore c’est quoi ?
&lt;/h4&gt;
&lt;p&gt;
 Une onde sonore est un phénomène physique de compression et décompression. Lorsqu’une vibration est produite (par n’importe quel objet qui vibre), l’air subit alors une onde de choc qui se traduit en mouvement des atomes. Il y a alors ce phénomène de compression et décompression (des "trous" dans l’air) que des récepteurs dans nos oreilles convertissent en bruit.
&lt;/p&gt;
&lt;p&gt;
 Plus les compressions sont proches et plus la fréquence est élevée. On parle alors de son aigu. Au contraire, plus les compressions sont éloignées et plus la fréquence est faible, on parle d’un son grave. Une fréquence s’exprime en Hertz et traduit la répétition d’un motif d’un phénomène durant une seconde. Par exemple si je cligne des yeux trois fois par seconde, on peut dire que je cligne des yeux à 3 Hz.
&lt;/p&gt;
&lt;p&gt;
 Dans le cas des ultrasons, les compressions/décompressions sont très courtes. En effet, le motif se répète plus de 20 000 fois par seconde, donc à plus de 20 kHz. En général, en électronique on utilise un
 &lt;em&gt;
  transducteur piézo
 &lt;/em&gt;
 pour générer cela. C’est une sorte de petit buzzer capable de vibrer très vite. Très souvent, les télémètres à ultrasons vibrent à une fréquence de 40 kHz.
&lt;/p&gt;
&lt;p&gt;
 Une dernière caractéristique des ondes sonores est leur capacité à être réfléchie par les obstacles. En effet, les ondes sonores ont tendance à "rebondir" sur les obstacles. On entend alors l’onde de départ et un peu plus tard la même avec un retard et une plus faible intensité. C’est exactement le même phénomène qu’un écho dans une pièce vide ou en montagne. L’onde sonore se déplace, rebondit sur les murs lisses et revient à votre oreille avec un retard entre le moment où vous avez parlé et celui où vous l’entendez (et une puissance sonore plus faible). En général, dans le domaine de l’acoustique et de la musique, on cherche à supprimer cette caractéristique en recouvrant les murs de matériaux spéciaux. Cependant, dans le cas d’une mesure de distance, on va exploiter cet effet.
&lt;/p&gt;
&lt;h4 id="principe-de-la-mesure"&gt;
 &lt;a aria-hidden="true" href="#principe-de-la-mesure"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Principe de la mesure
&lt;/h4&gt;
&lt;p&gt;
 Comme dit précédemment, on va tirer parti du fait que l’onde sonore rebondit sur les obstacles et revient souvent vers l’expéditeur. On va aussi exploiter une autre chose connue, sa vitesse !
&lt;/p&gt;
&lt;p&gt;
 En effet, la vitesse de déplacement d’une onde sonore dans l’air est connue depuis longtemps. Elle est d’environ 340 mètres par seconde à 25 degrés Celsius (plutôt lent comparé à la lumière et ses 300 000 km/s
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 ). À partir de là, si on sait quand l’onde est partie et quand on la reçoit de nouveau (après le rebond), on est en mesure de calculer un
 &lt;em&gt;
  temps de vol
 &lt;/em&gt;
 de l’onde. On a alors une durée, une vitesse, et on peut en déduire une distance !
&lt;/p&gt;
&lt;p&gt;
 Comme l’onde fait un aller-retour (le voyage depuis l’émission de l’onde, le rebond, puis le retour sur le récepteur), il faudra diviser le temps de vol par deux pour ne considérer qu’un trajet (l’aller ou le retour). Le calcul sera alors simple. Une vitesse s’exprime par une distance divisée par un temps
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        v
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mi&gt;
        d
       &lt;/mi&gt;
       &lt;mi mathvariant="normal"&gt;
        /
       &lt;/mi&gt;
       &lt;mi&gt;
        t
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       v = d/t
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.75em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      v
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      d
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      /
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      t
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 donc la distance sera la vitesse multipliée par le temps
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        d
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mi&gt;
        v
       &lt;/mi&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mi&gt;
        t
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       d = v \times t
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.69444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.77777em;vertical-align:-0.08333em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit"&gt;
      d
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      v
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      t
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Passons un peu à la pratique pour mieux comprendre !
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Un capteur à ultrasons" src="./images/uploaded/arduino-réaliser-un-télémètre-à-ultrasons/un-capteur-a-ultrasons.jpg"/&gt;
 &lt;figcaption&gt;
  Un capteur à ultrasons
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="mise-en-œuvre-du-télémètre"&gt;
 &lt;a aria-hidden="true" href="#mise-en-œuvre-du-télémètre"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Mise en œuvre du télémètre
&lt;/h3&gt;
&lt;p&gt;
 Le télémètre que nous allons utiliser est assez simple. Son nom est HC-SR04 et existe en différentes variations. Découvrons-le et voyons comment le faire fonctionner avec notre Arduino.
&lt;/p&gt;
&lt;h4 id="le-hc-sr04"&gt;
 &lt;a aria-hidden="true" href="#le-hc-sr04"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le HC-SR04
&lt;/h4&gt;
&lt;h5 id="présentation-du-composant"&gt;
 &lt;a aria-hidden="true" href="#présentation-du-composant"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Présentation du composant
&lt;/h5&gt;
&lt;p&gt;
 Le HC-SR04 est ce que l’on appelle communément un "Télémètre à ultrasons". Il est trouvable relativement facilement sur de nombreux sites de fournisseurs de composants électroniques. Les sites livrant depuis la Chine proposent des prix inférieurs à 5 euros en général.
&lt;/p&gt;
&lt;p&gt;
 Ce composant possède plusieurs petites choses. Tout d’abord, sur la face avant on peut voir l’émetteur US et son récepteur. Ce sont des petites cellules piézo-électriques qui vont soit vibrer lorsqu’une tension est appliquée (émetteur), soit au contraire produire une tension lorsque une vibration est reçue (récepteur).
&lt;/p&gt;
&lt;p&gt;
 Sur la face arrière on trouve plusieurs petits circuits permettant la génération du signal et le traitement de ce dernier. Ainsi, un composant va générer une onde de 40 kHz lors d’un "top départ" et la partie restante s’occupera de la mise en forme de la réception (amplification et filtrage) et de mettre en forme cela proprement sur une broche de sortie. Parlons d’ailleurs des broches. On en trouve 4.
&lt;/p&gt;
&lt;p&gt;
 Les premières sont comme toujours VCC et GND qui vont accueillir l’alimentation (respectivement 5V et masse). On trouve ensuite la broche "echo" sur laquelle sera présent le signal de sortie. Enfin, une broche nommée "Trig". Cela signifie "Trigger" soit "déclencheur" ou "gâchette". En mettant cette broche à l’état haut pendant 10µs vous allez déclencher le
 &lt;em&gt;
  ping
 &lt;/em&gt;
 pour la mesure. Un "ping" représente le lancement d’une onde ultrason. Pour reprendre l’exemple de l’écho dans la pièce vide, le ping correspondrait au moment où vous émettez un son en parlant.
&lt;/p&gt;
&lt;p&gt;
 Le signal de sortie est assez simple à exploiter. Il est initialement à 0, puis passe à 1 lorsque le
 &lt;em&gt;
  ping
 &lt;/em&gt;
 est envoyé. Il repasse ensuite à 0 quand l’écho est revenu au récepteur OU s’il n’y a pas de retour durant les 30ms après l’envoi (l’onde est alors considérée perdue).
&lt;/p&gt;
&lt;h5 id="branchement"&gt;
 &lt;a aria-hidden="true" href="#branchement"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Branchement
&lt;/h5&gt;
&lt;p&gt;
 Les branchements sont eux-même assez simples. Il suffira de relier 5V et GND à leurs broches respectives sur Arduino et mettre "Trig" et "Echo" sur des I/O numériques (8 et 9 par exemple). Pas la peine d’un schéma pour cela !
&lt;/p&gt;
&lt;h4 id="exploitons-le-capteur-avec-arduino"&gt;
 &lt;a aria-hidden="true" href="#exploitons-le-capteur-avec-arduino"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Exploitons le capteur avec Arduino
&lt;/h4&gt;
&lt;p&gt;
 Passons maintenant à la pratique avec Arduino. Le but ici sera d’être capable de faire une mesure de distance puis de l’afficher en millimètres dans la console de la voie série.
&lt;/p&gt;
&lt;h5 id="setup"&gt;
 &lt;a aria-hidden="true" href="#setup"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Setup
&lt;/h5&gt;
&lt;p&gt;
 On va comme toujours commencer par le setup. Pour une fois, pas de bibliothèque externe à rajouter, tout sera fait "à la main". Comme vu plus tôt, nous allons utiliser deux broches que je vais très justement nommer "USTrig" et "USEcho", pour le déclencheur (une sortie numérique) et le retour d’informations (une entrée numérique). Je vais ensuite préparer la voie série pour afficher les mesures.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; USTrig = &lt;span class="hljs-number"&gt;8&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// Déclencheur sur la broche 8&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; USEcho = &lt;span class="hljs-number"&gt;9&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// Réception sur la broche 9&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
    pinMode(USTrig, OUTPUT);
    pinMode(USEcho, INPUT);

    digitalWrite(USTrig, LOW);

    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Et c’est tout pour le setup !
&lt;/p&gt;
&lt;h5 id="loop"&gt;
 &lt;a aria-hidden="true" href="#loop"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Loop
&lt;/h5&gt;
&lt;p&gt;
 Les choses faciles sont réglées, passons aux choses amusantes et faisons des mesures !
&lt;/p&gt;
&lt;p&gt;
 Comme je le disais dans la présentation du composant, il y a une suite d’actions à faire pour mesurer la distance. Schématiquement cela se traduirait par la liste suivante :
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
  Un état haut de 10 microsecondes est mis sur la broche "Trig"
 &lt;/li&gt;
 &lt;li&gt;
  On remet à l’état bas la broche Trig
 &lt;/li&gt;
 &lt;li&gt;
  On lit la durée d’état haut sur la broche "Echo"
 &lt;/li&gt;
 &lt;li&gt;
  On divise cette durée par deux pour n’avoir qu’un trajet
 &lt;/li&gt;
 &lt;li&gt;
  On calcule la distance avec la formule
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         d
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mi&gt;
         v
        &lt;/mi&gt;
        &lt;mo&gt;
         ×
        &lt;/mo&gt;
        &lt;mi&gt;
         t
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        d = v \times t
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.69444em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.77777em;vertical-align:-0.08333em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit"&gt;
       d
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
       v
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mbin"&gt;
       ×
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       t
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/li&gt;
 &lt;li&gt;
  On affiche la distance
 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
 Toutes ces étapes sont en fait assez simples, à part peut-être la mesure de la durée. Heureusement, une fonction nommée
 &lt;a href="http://arduino.cc/en/Reference/pulseIn"&gt;
  &lt;code&gt;
   pulseIn()
  &lt;/code&gt;
 &lt;/a&gt;
 est la pour ça
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 . Cette dernière, qui est
 &lt;strong&gt;
  bloquante
 &lt;/strong&gt;
 , se chargera de mesurer combien de temps une broche reste dans un état (HIGH or LOW). Elle prend en paramètre le numéro de la broche et l’état à observer.
&lt;/p&gt;
&lt;p&gt;
 Voici alors un exemple de programme que l’on obtient :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;define&lt;/span&gt; VITESSE 340 &lt;span class="hljs-comment"&gt;//vitesse du son 340 m/s&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// setup()&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
   &lt;span class="hljs-comment"&gt;// 1. Un état haut de 10 microsecondes est mis sur la broche "Trig"&lt;/span&gt;
   digitalWrite(USTrig, HIGH);
   delayMicroseconds(&lt;span class="hljs-number"&gt;10&lt;/span&gt;); &lt;span class="hljs-comment"&gt;//on attend 10 µs&lt;/span&gt;
   &lt;span class="hljs-comment"&gt;// 2. On remet à l’état bas la broche Trig&lt;/span&gt;
   digitalWrite(USTrig, LOW);

   &lt;span class="hljs-comment"&gt;// 3. On lit la durée d’état haut sur la broche "Echo"&lt;/span&gt;
   &lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; duree = pulseIn(USEcho, HIGH);

   &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(duree &amp;gt; &lt;span class="hljs-number"&gt;30000&lt;/span&gt;)
   {
      &lt;span class="hljs-comment"&gt;// si la durée est supérieure à 30ms, l'onde est perdue&lt;/span&gt;
      Serial.println(&lt;span class="hljs-string"&gt;"Onde perdue, mesure échouée !"&lt;/span&gt;);
   }
   &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
   {
      &lt;span class="hljs-comment"&gt;// 4. On divise cette durée par deux pour n'avoir qu'un trajet&lt;/span&gt;
      duree = duree/&lt;span class="hljs-number"&gt;2&lt;/span&gt;;

      &lt;span class="hljs-comment"&gt;// 5. On calcule la distance avec la formule d=v*t&lt;/span&gt;
      &lt;span class="hljs-keyword"&gt;float&lt;/span&gt; temps = duree/&lt;span class="hljs-number"&gt;1000000.0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;//on met en secondes&lt;/span&gt;
      &lt;span class="hljs-keyword"&gt;float&lt;/span&gt; distance = temps*VITESSE; &lt;span class="hljs-comment"&gt;//on multiplie par la vitesse, d=t*v&lt;/span&gt;

      &lt;span class="hljs-comment"&gt;// 6. On affiche la distance&lt;/span&gt;
      Serial.print(&lt;span class="hljs-string"&gt;"Duree = "&lt;/span&gt;);
      Serial.println(temps); &lt;span class="hljs-comment"&gt;//affiche le temps de vol d'un trajet en secondes&lt;/span&gt;
      Serial.print(&lt;span class="hljs-string"&gt;"Distance = "&lt;/span&gt;);
      Serial.println(distance); &lt;span class="hljs-comment"&gt;//affiche la distance mesurée (en mètres)&lt;/span&gt;
   }

   &lt;span class="hljs-comment"&gt;// petite pause&lt;/span&gt;
   delay(&lt;span class="hljs-number"&gt;250&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Si vous voulez obtenir la distance en millimètres, il suffira de multiplier par 1000. Mais soyons malins, nous pouvons aussi optimiser en évitant une opération. Pour cela c’est simple, la ligne calculant le temps en seconde passe de :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; temps = duree/&lt;span class="hljs-number"&gt;1000000.0&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 à
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; temps = duree/&lt;span class="hljs-number"&gt;1000.0&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 puisque multiplier la distance par 1000 dans notre situation revient exactement à avoir un temps divisé par le même facteur (pour avoir l’information en centimètres, il aurait fallu utiliser un facteur 100 plutôt que 1000).
Je vous laisse poser les maths si vous voulez me croire sur parole
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 .
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si les mesures ne sont pas ultra-précises, essayez de modifier la constante de vitesse. Les ondes sont sensibles à la température ce qui influe sur leur vitesse. Nous verrons cela plus tard
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="ajout-de-lécran-et-montage-final"&gt;
 &lt;a aria-hidden="true" href="#ajout-de-lécran-et-montage-final"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Ajout de l’écran et montage final
&lt;/h3&gt;
&lt;p&gt;
 Tout va bien ? Les échos reviennent ? Alors place à la portabilité ! Dans cette dernière étape nous allons rajouter l’écran à notre nouvel outil.
&lt;/p&gt;
&lt;p&gt;
 Pour rajouter l’écran, commençons par vérifier le câblage nécessaire. L’écran nécessite 4 (ou 8 selon vos choix) fils de données (+ 2 de contrôle) et une alimentation. Cette dernière sera prise sur les broches 5V et GND de l’Arduino et les fils de données seront sur les broches 2 à 5. Les fils de contrôle EN et R/W seront sur les broches 6 et 7.
&lt;/p&gt;
&lt;h4 id="faire-fonctionner-lécran-seul"&gt;
 &lt;a aria-hidden="true" href="#faire-fonctionner-lécran-seul"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Faire fonctionner l’écran seul
&lt;/h4&gt;
&lt;p&gt;
 En science, lorsque l’on veut tester quelque chose on l’isole du reste. Ici c’est pareil ! Nous avons pu constater que notre télémètre fonctionne bien en le faisant marcher seul, nous allons faire de même en utilisant l’écran seul. Pour cela, nous allons simplement afficher une ligne de caractères.
&lt;/p&gt;
&lt;p&gt;
 On commence logiquement par le setup et ce qui va avec, notamment la bibliothèque
 &lt;code&gt;
  LiquidCrystal
 &lt;/code&gt;
 et un objet du même nom.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;"LiquidCrystal.h"&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// VÉRIFIEZ AVEC VOS PROPRES BROCHES&lt;/span&gt;
&lt;span class="hljs-function"&gt;LiquidCrystal &lt;span class="hljs-title"&gt;lcd&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;6&lt;/span&gt;,&lt;span class="hljs-number"&gt;7&lt;/span&gt;,&lt;span class="hljs-number"&gt;2&lt;/span&gt;,&lt;span class="hljs-number"&gt;3&lt;/span&gt;,&lt;span class="hljs-number"&gt;4&lt;/span&gt;,&lt;span class="hljs-number"&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;span class="hljs-comment"&gt;//liaison 4 bits de données&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
    lcd.begin(&lt;span class="hljs-number"&gt;2&lt;/span&gt;, &lt;span class="hljs-number"&gt;16&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// Initialisation de l’écran (2 lignes 16 caractères pour ma part)&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Une fois cela fait, on va afficher une simple ligne dans notre programme principal :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
    lcd.clear();
    lcd.home(); &lt;span class="hljs-comment"&gt;// Replace le curseur en haut à gauche&lt;/span&gt;
    lcd.print(&lt;span class="hljs-string"&gt;"-+ Eskimetre +-"&lt;/span&gt;);
    delay(&lt;span class="hljs-number"&gt;10000&lt;/span&gt;); &lt;span class="hljs-comment"&gt;//pause de 10 secondes inutile, juste pour éviter de rafraîchir sans arrêt&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Si le message s’affiche correctement, alors tout va bien et vous pouvez continuer !
&lt;/p&gt;
&lt;h4 id="lécran-avec-le-télémètre"&gt;
 &lt;a aria-hidden="true" href="#lécran-avec-le-télémètre"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’écran avec le télémètre
&lt;/h4&gt;
&lt;p&gt;
 Nous y voilà ! Le moment tant attendu où nous allons afficher les mesures sur l’écran ! Pour cela, commencez par rajouter sur votre montage le télémètre (broche 8 et 9) et fusionner les setup pour n’en faire qu’un sans la voie série. Vous devriez obtenir quelque chose comme ça :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;"LiquidCrystal.h"&lt;/span&gt;&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;define&lt;/span&gt; VITESSE 340&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// VÉRIFIEZ AVEC VOS PROPRES BROCHES&lt;/span&gt;
&lt;span class="hljs-function"&gt;LiquidCrystal &lt;span class="hljs-title"&gt;lcd&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;6&lt;/span&gt;,&lt;span class="hljs-number"&gt;7&lt;/span&gt;,&lt;span class="hljs-number"&gt;2&lt;/span&gt;,&lt;span class="hljs-number"&gt;3&lt;/span&gt;,&lt;span class="hljs-number"&gt;4&lt;/span&gt;,&lt;span class="hljs-number"&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;span class="hljs-comment"&gt;//liaison 4 bits de données&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; USTrig = &lt;span class="hljs-number"&gt;8&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// Déclencheur sur la broche 8&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; USEcho = &lt;span class="hljs-number"&gt;9&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// Réception sur la broche 9&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
    lcd.begin(&lt;span class="hljs-number"&gt;2&lt;/span&gt;, &lt;span class="hljs-number"&gt;16&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// Initialisation de l’écran (2 lignes 16 caractères pour ma part)&lt;/span&gt;

    pinMode(USTrig, OUTPUT);
    pinMode(USEcho, INPUT);

    lcd.print(&lt;span class="hljs-string"&gt;"-+ Eskimetre +-"&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Il faut ensuite fusionner le tout pour faire un affichage sur le LCD. Je vous propose d’exploiter les deux lignes pour afficher :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  En haut : la distance en millimètres (
  &lt;code&gt;
   int
  &lt;/code&gt;
  )
 &lt;/li&gt;
 &lt;li&gt;
  En bas : le temps en millisecondes (
  &lt;code&gt;
   int
  &lt;/code&gt;
  )
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// 1. Un état haut de 10 microsecondes est mis sur la broche "Trig"&lt;/span&gt;
   digitalWrite(USTrig, HIGH);
   delayMicroseconds(&lt;span class="hljs-number"&gt;10&lt;/span&gt;); &lt;span class="hljs-comment"&gt;//on attend 10 µs&lt;/span&gt;
   &lt;span class="hljs-comment"&gt;// 2. On remet à l'état bas la broche Trig&lt;/span&gt;
   digitalWrite(USTrig, LOW);

   &lt;span class="hljs-comment"&gt;// 3. On lit la durée d'état haut sur la broche "Echo"&lt;/span&gt;
   &lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; duree = pulseIn(USEcho, HIGH);

   &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(duree &amp;gt; &lt;span class="hljs-number"&gt;30000&lt;/span&gt;)
   {
      &lt;span class="hljs-comment"&gt;//si la durée est supérieure à 30ms, l'onde est perdue&lt;/span&gt;
      lcd.clear();
      lcd.home(); &lt;span class="hljs-comment"&gt;// Replace le curseur en haut à gauche&lt;/span&gt;
      lcd.print(&lt;span class="hljs-string"&gt;"Onde perdue :("&lt;/span&gt;);
      lcd.setCursor(&lt;span class="hljs-number"&gt;0&lt;/span&gt;,&lt;span class="hljs-number"&gt;1&lt;/span&gt;);
      lcd.print(&lt;span class="hljs-string"&gt;"Mesure echouee !"&lt;/span&gt;);
   }
   &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
   {
      &lt;span class="hljs-comment"&gt;// 4. On divise cette durée par deux pour n'avoir qu'un trajet&lt;/span&gt;
      duree = duree/&lt;span class="hljs-number"&gt;2&lt;/span&gt;;

      &lt;span class="hljs-comment"&gt;// 5. On calcul la distance avec la formule d=v*t&lt;/span&gt;
      &lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; distance = duree*(VITESSE/&lt;span class="hljs-number"&gt;1000.0&lt;/span&gt;); &lt;span class="hljs-comment"&gt;//on multiplie par la vitesse, d=t*v&lt;/span&gt;

      &lt;span class="hljs-comment"&gt;// 6. On affiche !&lt;/span&gt;
      lcd.clear();
      lcd.home(); &lt;span class="hljs-comment"&gt;// Replace le curseur en haut à gauche&lt;/span&gt;
      &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; message[&lt;span class="hljs-number"&gt;16&lt;/span&gt;] = &lt;span class="hljs-string"&gt;""&lt;/span&gt;;
      &lt;span class="hljs-built_in"&gt;sprintf&lt;/span&gt;(message, &lt;span class="hljs-string"&gt;" Dist : %4d mm"&lt;/span&gt;, distance);
      lcd.print(message);
      &lt;span class="hljs-built_in"&gt;sprintf&lt;/span&gt;(message, &lt;span class="hljs-string"&gt;"Temps : %4d us"&lt;/span&gt;, duree);
      lcd.setCursor(&lt;span class="hljs-number"&gt;0&lt;/span&gt;,&lt;span class="hljs-number"&gt;1&lt;/span&gt;);
      lcd.print(message);
   }
   delay(&lt;span class="hljs-number"&gt;250&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// Petite pause&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Il est pas beau ce télémètre
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 ? Voici ce que ça donne chez moi :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/n-fqDFQj6Bo" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Video : Mon télémètre
&lt;/p&gt;
&lt;p&gt;
 Et voici une version sur simulateur interactif (cliquez sur le HC-SR04 pour modifier la distance lue) :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/3NbcDdiiH1v" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="aller-plus-loin"&gt;
 &lt;a aria-hidden="true" href="#aller-plus-loin"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Aller plus loin
&lt;/h3&gt;
&lt;p&gt;
 Comme je l’ai brièvement mentionné plus tôt, la température a un impact sur la vitesse des ondes (ainsi que la pression et d’autres choses). Une amélioration de notre télémètre serait donc d’avoir une correction de la vitesse via une mesure de la température !
&lt;/p&gt;
&lt;p&gt;
 Pour débuter, prenons connaissance des données.
 &lt;a href="http://fr.wikipedia.org/wiki/Vitesse_du_son#Vitesse_du_son_dans_diff.C3.A9rents_milieux"&gt;
  Wikipédia nous dit
 &lt;/a&gt;
 que la vitesse de propagation du son dans l’air suit à peu près le tableau suivant :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Vitesse du son en fonction de la température" src="./images/uploaded/arduino-réaliser-un-télémètre-à-ultrasons/vitesse-du-son-en-fonction-de-la-temperature.png"/&gt;
 &lt;figcaption&gt;
  Vitesse du son en fonction de la température
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Si l’on fait un graphique avec ce tableau, on peut déduire les valeurs de la relation
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        V
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mi&gt;
        f
       &lt;/mi&gt;
       &lt;mo&gt;
        (
       &lt;/mo&gt;
       &lt;mi&gt;
        t
       &lt;/mi&gt;
       &lt;mo&gt;
        )
       &lt;/mo&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       V = f(t)
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.75em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
      V
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.10764em;"&gt;
      f
     &lt;/span&gt;
     &lt;span class="mopen"&gt;
      (
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      t
     &lt;/span&gt;
     &lt;span class="mclose"&gt;
      )
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 (vitesse en fonction de la température) qui est presque linéaire et donc peut être modélisée par une fonction affine. En faisant le calcul de la variation via les deux points les plus extrêmes du bout de droite, on obtient un coefficient de 0.6 m/s par degrés Celsius (
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mfrac&gt;
        &lt;mrow&gt;
         &lt;mn&gt;
          3
         &lt;/mn&gt;
         &lt;mn&gt;
          2
         &lt;/mn&gt;
         &lt;mn&gt;
          5
         &lt;/mn&gt;
         &lt;mi mathvariant="normal"&gt;
          .
         &lt;/mi&gt;
         &lt;mn&gt;
          4
         &lt;/mn&gt;
         &lt;mo&gt;
          −
         &lt;/mo&gt;
         &lt;mn&gt;
          3
         &lt;/mn&gt;
         &lt;mn&gt;
          4
         &lt;/mn&gt;
         &lt;mn&gt;
          9
         &lt;/mn&gt;
         &lt;mi mathvariant="normal"&gt;
          .
         &lt;/mi&gt;
         &lt;mn&gt;
          2
         &lt;/mn&gt;
        &lt;/mrow&gt;
        &lt;mrow&gt;
         &lt;mo&gt;
          −
         &lt;/mo&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
         &lt;mn&gt;
          0
         &lt;/mn&gt;
         &lt;mo&gt;
          −
         &lt;/mo&gt;
         &lt;mn&gt;
          3
         &lt;/mn&gt;
         &lt;mn&gt;
          0
         &lt;/mn&gt;
        &lt;/mrow&gt;
       &lt;/mfrac&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       \frac{325.4-349.2}{-10-30}
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.845108em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1.2484389999999999em;vertical-align:-0.403331em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mopen nulldelimiter"&gt;
      &lt;/span&gt;
      &lt;span class="mfrac"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.845108em;"&gt;
          &lt;span style="top:-2.655em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              −
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              1
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              0
             &lt;/span&gt;
             &lt;span class="mbin mtight"&gt;
              −
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              3
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              0
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.15em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="stretchy" style="height:0.2em;"&gt;
            &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
             &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
             &lt;/path&gt;
            &lt;/svg&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.394em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              3
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              2
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              5
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              .
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              4
             &lt;/span&gt;
             &lt;span class="mbin mtight"&gt;
              −
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              3
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              4
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              9
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              .
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              2
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.403331em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mclose nulldelimiter"&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 ). On observe aussi une ordonnée à l’origine (soit à 0 degré) de 331.5 mètres par seconde.
Tout cela nous donne la relation :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        V
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mi&gt;
        a
       &lt;/mi&gt;
       &lt;mi&gt;
        t
       &lt;/mi&gt;
       &lt;mo&gt;
        +
       &lt;/mo&gt;
       &lt;mi&gt;
        b
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       V = at+b
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.69444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.77777em;vertical-align:-0.08333em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
      V
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      a
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      t
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      +
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      b
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 (avec
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        V
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       V
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
      V
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 la vitesse en mètres par seconde et
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        t
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       t
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.61508em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.61508em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit"&gt;
      t
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 la température en degrés Celsius).
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        a
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       a
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.43056em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.43056em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit"&gt;
      a
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 vaudra ainsi 0.6 et
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        b
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       b
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.69444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.69444em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit"&gt;
      b
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 vaudra 331.5.
&lt;/p&gt;
&lt;p&gt;
 Je ne donnerai pas le détail du montage ni le code ici cependant. Je vous le laisse en tant qu’évolution/exercice si vous le souhaitez, en rajoutant un capteur de température au montage (un LM35 par exemple). Voici cependant la logique de code qu’il faudrait suivre pour implémenter cela :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// On fait la mesure de température&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;// On stocke la température en degrés Celsius dans "degres".&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;float&lt;/span&gt; degres;

    &lt;span class="hljs-comment"&gt;// puis on ajuste la vitesse en fonction de la température&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;float&lt;/span&gt; vitesse = &lt;span class="hljs-number"&gt;0.6&lt;/span&gt;*degres + &lt;span class="hljs-number"&gt;331.5&lt;/span&gt;;

    &lt;span class="hljs-comment"&gt;// et enfin, on fait tout le reste comme avant (mesure + affichage)&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// La seule différence sera que l'on utilisera la variable "vitesse" ...&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// ... au lieu de la constante VITESSE&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous avez maintenant un outil de mesure complètement fonctionnel. Il suffit de fabriquer un boîtier et de rajouter une batterie ou quelques piles pour avoir un module totalement autonome ! On pourrait aussi pousser le vice en utilisant une Arduino mini ou micro pour réduire encore un peu plus la taille du produit final !
&lt;/p&gt;</content><category term="arduino"></category></entry><entry><title>TP Arduino : Faire une animation Space Invaders sur LCD</title><link href="https://eskimon.fr/tp-arduino-faire-une-animation-space-invaders-sur-lcd" rel="alternate"></link><published>2016-05-28T05:24:00+02:00</published><updated>2016-05-28T05:24:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2016-05-28:/tp-arduino-faire-une-animation-space-invaders-sur-lcd</id><summary type="html">&lt;p&gt;
 Il y a quelques temps, j’avais participé à un petit atelier créatif de programmation pour réaliser une animation de fond d’écran sur le thème «
 &lt;em&gt;
  Space Invaders
 &lt;/em&gt;
 ». Le simple but était de s’amuser à coder pour faire bouger un
 &lt;em&gt;
  invader
 &lt;/em&gt;
 sur un écran. Comme il n’était pas …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Il y a quelques temps, j’avais participé à un petit atelier créatif de programmation pour réaliser une animation de fond d’écran sur le thème «
 &lt;em&gt;
  Space Invaders
 &lt;/em&gt;
 ». Le simple but était de s’amuser à coder pour faire bouger un
 &lt;em&gt;
  invader
 &lt;/em&gt;
 sur un écran. Comme il n’était pas précisé de quel écran il s’agissait, ni quelles étaient les limites de l’application, je me suis amusé à sortir du cadre « ordinateur = CPU + clavier + écran » et j’ai proposé une solution à base d’Arduino et d’un écran LCD alphanumérique.
&lt;/p&gt;
&lt;p&gt;
 Je vous propose dans ce petit tutoriel de voir comment j’ai développé ma solution visible sur la vidéo ci-dessous.
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/nyFxEGcdvZY" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si vous débutez sur Arduino, vous pouvez aller relire le chapitre concernant
   &lt;a href="https://zestedesavoir.com/tutoriels/686/arduino-premiers-pas-en-informatique-embarquee/748_laffichage-une-autre-maniere-dinteragir/"&gt;
    les écrans LCD et Arduino
   &lt;/a&gt;
   pour vous échauffer.
   &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#matériel-nécessaire-et-mise-en-route"&gt;
    Matériel nécessaire et mise en route
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#le-matériel"&gt;
     Le matériel
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#câbler-lensemble"&gt;
     Câbler l’ensemble
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#le-setup"&gt;
    Le setup
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#créer-les-invaders-dans-le-code"&gt;
     Créer les invaders dans le code
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#le-reste-du-setup"&gt;
     Le reste du setup
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#animation-et-code-complet"&gt;
   Animation et code complet
  &lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="matériel-nécessaire-et-mise-en-route"&gt;
 &lt;a aria-hidden="true" href="#matériel-nécessaire-et-mise-en-route"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Matériel nécessaire et mise en route
&lt;/h3&gt;
&lt;h4 id="le-matériel"&gt;
 &lt;a aria-hidden="true" href="#le-matériel"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le matériel
&lt;/h4&gt;
&lt;p&gt;
 Pour effectuer ce montage, pas besoin de grand-chose ! Il vous faudra simplement une carte Arduino (Uno dans mon cas) et un écran LCD. Et c’est tout !
&lt;/p&gt;
&lt;h4 id="câbler-lensemble"&gt;
 &lt;a aria-hidden="true" href="#câbler-lensemble"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Câbler l’ensemble
&lt;/h4&gt;
&lt;p&gt;
 Pour ce qui est du câblage, là encore, rien de compliqué. Si vous avez suivi le tutoriel Arduino sur les écrans LCD, il ne devrait pas y avoir de problème. C’est pourquoi je vous propose ici le schéma électronique qui présente comment brancher l’écran en mode « 4 bits » à l’Arduino.
&lt;/p&gt;
&lt;p&gt;
 Pour plus d’explications,
 &lt;a href="https://zestedesavoir.com/tutoriels/686/arduino-premiers-pas-en-informatique-embarquee/748_laffichage-une-autre-maniere-dinteragir/3443_les-ecrans-lcd/#3-10695_comment-on-sen-sert"&gt;
  le tuto est ici
 &lt;/a&gt;
 .
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Câblage écran LCD — schéma." src="./images/uploaded/tp-arduino-faire-une-animation-space-invaders-sur-lcd/cablage-ecran-lcd-schema.png"/&gt;
 &lt;figcaption&gt;
  Câblage écran LCD — schéma.
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Câblage écran LCD — montage." src="./images/uploaded/tp-arduino-faire-une-animation-space-invaders-sur-lcd/cablage-ecran-lcd-montage.png"/&gt;
 &lt;figcaption&gt;
  Câblage écran LCD — montage.
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="le-setup"&gt;
 &lt;a aria-hidden="true" href="#le-setup"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le setup
&lt;/h3&gt;
&lt;p&gt;
 L’initialisation des variables va avoir une certaine importance ici. En effet, le dessin du petit
 &lt;em&gt;
  invader
 &lt;/em&gt;
 &lt;img src="./images/uploaded/tp-arduino-faire-une-animation-space-invaders-sur-lcd/2985ef8e-5c24-46da-8771-0fa5ddef25aagif.gif"/&gt;
 n’existe bien entendu pas de base dans l’Arduino ou dans le jeu de caractères du LCD. Il va donc falloir lui « apprendre » à le dessiner. Pour rendre les choses un peu plus sympa, on va le dessiner de deux manières, comme sur le dessin précédent : une fois avec les « bras » baissés et une fois avec les « bras » levés.
&lt;/p&gt;
&lt;p&gt;
 Voici un point de vue sous forme de grille de l’envahisseur.
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;p&gt;
  &lt;img alt="*Invader* bras en bas." src="./images/uploaded/tp-arduino-faire-une-animation-space-invaders-sur-lcd/invader-bras-en-bas.png"/&gt;
  &lt;img alt="*Invader* bras en haut." src="./images/uploaded/tp-arduino-faire-une-animation-space-invaders-sur-lcd/invader-bras-en-haut.png"/&gt;
 &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
 Comme vous pouvez le voir, ces figures ont une taille de 10 pixels de large et 8 de haut, or un caractère affichable par l’écran ne peut avoir qu’une taille de 5 par 8.
Il va donc falloir découper l'
 &lt;strong&gt;
  invader
 &lt;/strong&gt;
 pour l’afficher en deux morceaux côte à côte comme montré avec la ligne rouge sur les images. Ce qui signifie qu’au final, on va créer non pas deux caractères, mais bien quatre. Un pour chacune des parties de chaque
 &lt;em&gt;
  invader
 &lt;/em&gt;
 . Si on avait voulu faire une animation avec trois étapes par
 &lt;em&gt;
  invader
 &lt;/em&gt;
 , il aurait fallu faire six caractères (et je vous rappelle que l’écran est limité à huit caractères personnalisés).
&lt;/p&gt;
&lt;h4 id="créer-les-invaders-dans-le-code"&gt;
 &lt;a aria-hidden="true" href="#créer-les-invaders-dans-le-code"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Créer les
 &lt;em&gt;
  invaders
 &lt;/em&gt;
 dans le code
&lt;/h4&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si vous ne vous vous souvenez plus trop comment faire des caractères personnalisés, n’hésitez pas à aller relire
   &lt;a href="https://zestedesavoir.com/tutoriels/686/arduino-premiers-pas-en-informatique-embarquee/748_laffichage-une-autre-maniere-dinteragir/3444_votre-premier-texte-sur-le-lcd/#3-10698_creer-un-caractere"&gt;
    le tutoriel
   &lt;/a&gt;
   .
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Maintenant que le dessin est prêt, nous allons devoir créer ces caractères dans le code à envoyer à l’Arduino. Ainsi, notre carte pourra « apprendre » à l’écran les nouveaux dessins. Pour cela, on utilise quatre tableaux d’octets (
 &lt;code&gt;
  byte
 &lt;/code&gt;
 ). Ils sont triés dans l’ordre, de telle façon que chaque paire (0–1 et 2–3) représente les parties gauche et droite de la figure. Chacun de ces tableaux représentera de manière binaire les images vues ci-dessus.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Partie gauche de l'invader bras baissés.&lt;/span&gt;
byte invader_low_left[&lt;span class="hljs-number"&gt;8&lt;/span&gt;] = {
  B00100,
  B00010,
  B00111,
  B01101,
  B11111,
  B10111,
  B10100,
  B00010
};
&lt;span class="hljs-comment"&gt;// Partie droite de l'invader bras baissés.&lt;/span&gt;
byte invader_low_right[&lt;span class="hljs-number"&gt;8&lt;/span&gt;] = {
  B00100,
  B01000,
  B11100,
  B10110,
  B11111,
  B11101,
  B00101,
  B01000
};
&lt;span class="hljs-comment"&gt;// Partie gauche de l'invader bras levés.&lt;/span&gt;
byte invader_high_left[&lt;span class="hljs-number"&gt;8&lt;/span&gt;] = {
  B00100,
  B10010,
  B10111,
  B11101,
  B11111,
  B01111,
  B00100,
  B01000
};
&lt;span class="hljs-comment"&gt;// Partie droite de l'invader bras levés.&lt;/span&gt;
byte invader_high_right[&lt;span class="hljs-number"&gt;8&lt;/span&gt;] = {
  B00100,
  B01001,
  B11101,
  B10111,
  B11111,
  B11110,
  B00100,
  B00010
};
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="le-reste-du-setup"&gt;
 &lt;a aria-hidden="true" href="#le-reste-du-setup"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le reste du
 &lt;em&gt;
  setup
 &lt;/em&gt;
&lt;/h4&gt;
&lt;p&gt;
 Voilà, le plus dur est fait, il ne nous reste plus qu’à intégrer les bricoles qui font que notre LCD va comprendre ce qu’on lui dit.
&lt;/p&gt;
&lt;p&gt;
 Pour cela, on va, dans l’ordre :
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
  Ajouter la librairie
  &lt;code&gt;
   &amp;lt;LiquidCrystal.h&amp;gt;
  &lt;/code&gt;
  en haut de notre fichier ;
 &lt;/li&gt;
 &lt;li&gt;
  Déclarer un objet
  &lt;code&gt;
   LiquidCrystal
  &lt;/code&gt;
  avec les bonnes broches à utiliser ;
 &lt;/li&gt;
 &lt;li&gt;
  Dans le
  &lt;code&gt;
   setup()
  &lt;/code&gt;
  , envoyer les quatre caractères au LCD (en mode « commande ») ;
 &lt;/li&gt;
 &lt;li&gt;
  Démarrer la communication avec le LCD (passage en mode « écriture ») ;
 &lt;/li&gt;
 &lt;li&gt;
  Démarrer le générateur de nombres aléatoires pour faire bouger l'
  &lt;em&gt;
   invader
  &lt;/em&gt;
  .
 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
 Cela pourra se traduire en code Arduino de la manière suivante.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// 1. On inclut la librairie LiquidCrystal.&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;LiquidCrystal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// 2. On crée un objet LiquidCrystal (nommé « lcd » dans notre cas).&lt;/span&gt;
&lt;span class="hljs-function"&gt;LiquidCrystal &lt;span class="hljs-title"&gt;lcd&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;8&lt;/span&gt;, &lt;span class="hljs-number"&gt;9&lt;/span&gt;, &lt;span class="hljs-number"&gt;5&lt;/span&gt;, &lt;span class="hljs-number"&gt;4&lt;/span&gt;, &lt;span class="hljs-number"&gt;3&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;/*
     Ne pas oublier de créer les quatre tableaux
     pour les caractère représentant les invaders
     (omis ici pour gagner de la place/visibilité).
  */&lt;/span&gt;

  &lt;span class="hljs-comment"&gt;// 3. On envoie les nouveaux caractères à l’écran.&lt;/span&gt;
  lcd.createChar(&lt;span class="hljs-number"&gt;0&lt;/span&gt;, invader_low_left);   &lt;span class="hljs-comment"&gt;// Apprend le caractère à l’écran LCD.&lt;/span&gt;
  lcd.createChar(&lt;span class="hljs-number"&gt;1&lt;/span&gt;, invader_low_right);  &lt;span class="hljs-comment"&gt;// Apprend le caractère à l’écran LCD.&lt;/span&gt;
  lcd.createChar(&lt;span class="hljs-number"&gt;2&lt;/span&gt;, invader_high_left);  &lt;span class="hljs-comment"&gt;// Apprend le caractère à l’écran LCD.&lt;/span&gt;
  lcd.createChar(&lt;span class="hljs-number"&gt;3&lt;/span&gt;, invader_high_right); &lt;span class="hljs-comment"&gt;// Apprend le caractère à l’écran LCD.&lt;/span&gt;

  &lt;span class="hljs-comment"&gt;// 4. On passe l’écran en mode « écriture ».&lt;/span&gt;
  lcd.begin(&lt;span class="hljs-number"&gt;16&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;);

  &lt;span class="hljs-comment"&gt;// 5. On démarre le générateur de nombres aléatoires.&lt;/span&gt;
  randomSeed(analogRead(&lt;span class="hljs-number"&gt;0&lt;/span&gt;)); &lt;span class="hljs-comment"&gt;// Initialise l’aléatoire avec une lecture analogique.&lt;/span&gt;

  &lt;span class="hljs-comment"&gt;// 6. Bonus, on dit coucou à l’utilisateur, puis on efface.&lt;/span&gt;
  lcd.write(&lt;span class="hljs-string"&gt;"Hello World!"&lt;/span&gt;);
  delay(&lt;span class="hljs-number"&gt;2000&lt;/span&gt;);
  lcd.clear();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Le code complet du
 &lt;em&gt;
  setup
 &lt;/em&gt;
 avec la création des caractères.
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// 1. On inclut la librairie LiquidCrystal.&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;LiquidCrystal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// 2. On crée un objet LiquidCrystal (nommé « lcd » dans notre cas).&lt;/span&gt;
&lt;span class="hljs-function"&gt;LiquidCrystal &lt;span class="hljs-title"&gt;lcd&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;8&lt;/span&gt;, &lt;span class="hljs-number"&gt;9&lt;/span&gt;, &lt;span class="hljs-number"&gt;5&lt;/span&gt;, &lt;span class="hljs-number"&gt;4&lt;/span&gt;, &lt;span class="hljs-number"&gt;3&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{

  &lt;span class="hljs-comment"&gt;// Partie gauche de l'invader bras baissés.&lt;/span&gt;
  byte invader_low_left[&lt;span class="hljs-number"&gt;8&lt;/span&gt;] = {
    B00100,
    B00010,
    B00111,
    B01101,
    B11111,
    B10111,
    B10100,
    B00010
  };
  &lt;span class="hljs-comment"&gt;// Partie droite de l'invader bras baissés.&lt;/span&gt;
  byte invader_low_right[&lt;span class="hljs-number"&gt;8&lt;/span&gt;] = {
    B00100,
    B01000,
    B11100,
    B10110,
    B11111,
    B11101,
    B00101,
    B01000
  };
  &lt;span class="hljs-comment"&gt;// Partie gauche de l'invader bras levés.&lt;/span&gt;
  byte invader_high_left[&lt;span class="hljs-number"&gt;8&lt;/span&gt;] = {
    B00100,
    B10010,
    B10111,
    B11101,
    B11111,
    B01111,
    B00100,
    B01000
  };
  &lt;span class="hljs-comment"&gt;// Partie droite de l'invader bras levés.&lt;/span&gt;
  byte invader_high_right[&lt;span class="hljs-number"&gt;8&lt;/span&gt;] = {
    B00100,
    B01001,
    B11101,
    B10111,
    B11111,
    B11110,
    B00100,
    B00010
  };

  &lt;span class="hljs-comment"&gt;// 3. On envoie les nouveaux caractères à l’écran.&lt;/span&gt;
  lcd.createChar(&lt;span class="hljs-number"&gt;0&lt;/span&gt;, invader_low_left);   &lt;span class="hljs-comment"&gt;// Apprend le caractère à l’écran LCD.&lt;/span&gt;
  lcd.createChar(&lt;span class="hljs-number"&gt;1&lt;/span&gt;, invader_low_right);  &lt;span class="hljs-comment"&gt;// Apprend le caractère à l’écran LCD.&lt;/span&gt;
  lcd.createChar(&lt;span class="hljs-number"&gt;2&lt;/span&gt;, invader_high_left);  &lt;span class="hljs-comment"&gt;// Apprend le caractère à l’écran LCD.&lt;/span&gt;
  lcd.createChar(&lt;span class="hljs-number"&gt;3&lt;/span&gt;, invader_high_right); &lt;span class="hljs-comment"&gt;// Apprend le caractère à l’écran LCD.&lt;/span&gt;

  &lt;span class="hljs-comment"&gt;// 4. On passe l’écran en mode « écriture ».&lt;/span&gt;
  lcd.begin(&lt;span class="hljs-number"&gt;16&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;);

  &lt;span class="hljs-comment"&gt;// 5. On démarre le générateur de nombres aléatoires.&lt;/span&gt;
  randomSeed(analogRead(&lt;span class="hljs-number"&gt;0&lt;/span&gt;)); &lt;span class="hljs-comment"&gt;// Initialise l’aléatoire avec une lecture analogique.&lt;/span&gt;

  &lt;span class="hljs-comment"&gt;// 6. Bonus, on dit coucou à l’utilisateur, puis on efface.&lt;/span&gt;
  lcd.write(&lt;span class="hljs-string"&gt;"Hello World!"&lt;/span&gt;);
  delay(&lt;span class="hljs-number"&gt;2000&lt;/span&gt;);
  lcd.clear();
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="animation-et-code-complet"&gt;
 &lt;a aria-hidden="true" href="#animation-et-code-complet"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Animation et code complet
&lt;/h3&gt;
&lt;p&gt;
 Maintenant que tout est mis en place, il ne reste plus qu’à réaliser l’animation proprement dite.
&lt;/p&gt;
&lt;p&gt;
 Pour faire les choses proprement, on va écrire une fonction
 &lt;code&gt;
  drawInvader()
 &lt;/code&gt;
 pour dessiner. Cette fonction prendra en paramètre la ligne et la colonne où l'
 &lt;em&gt;
  invader
 &lt;/em&gt;
 doit être dessiné, et bien sûr l’état de l'
 &lt;em&gt;
  invader
 &lt;/em&gt;
 (bras levés ou baissés).
Comme vous avez pu le voir dans le
 &lt;em&gt;
  setup
 &lt;/em&gt;
 , on va utiliser une fonction permettant de générer des nombres aléatoires pour déterminer la position du vaisseau. Cette fonction se nomme tout simplement
 &lt;code&gt;
  random()
 &lt;/code&gt;
 et prend en paramètre la borne inférieure (incluse) et la borne supérieure (non incluse) du nombre aléatoire à retourner (un
 &lt;code&gt;
  long
 &lt;/code&gt;
 ). Dans notre cas, en vertical, on veut pouvoir obtenir 0 ou 1, et en horizontal, 0 à 14 (car si on fait 15, la seconde moitié de l'
 &lt;em&gt;
  invader
 &lt;/em&gt;
 ne sera pas affichée
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 ). On va donc faire ce qui suit.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; ligne = random(&lt;span class="hljs-number"&gt;0&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;);
&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; colonne = random(&lt;span class="hljs-number"&gt;0&lt;/span&gt;, &lt;span class="hljs-number"&gt;15&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 La suite de la
 &lt;em&gt;
  loop
 &lt;/em&gt;
 &amp;lt;—COMMENT boucle serait vraiment mieux &amp;gt;&amp;lt; COMMENT—&amp;gt; est assez simple. Une fois que l’on a les coordonnées, on appelle la fonction
 &lt;code&gt;
  drawInvader
 &lt;/code&gt;
 une première fois avec l’état « bras baissés », on fait une petite pause, puis on refait l’appel avec les bras levés pour obtenir l’animation complète. De nouveau une petite pause, puis le cycle repart du début.
&lt;/p&gt;
&lt;p&gt;
 Voici le code complet de la boucle.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; ligne = random(&lt;span class="hljs-number"&gt;0&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;);
  &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; colonne = random(&lt;span class="hljs-number"&gt;0&lt;/span&gt;, &lt;span class="hljs-number"&gt;15&lt;/span&gt;);
  drawInvader(ligne, colonne, &lt;span class="hljs-number"&gt;0&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// État 0 : bras baissés.&lt;/span&gt;
  delay(&lt;span class="hljs-number"&gt;800&lt;/span&gt;);
  drawInvader(ligne, colonne, &lt;span class="hljs-number"&gt;1&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// État 1 : bras levés.&lt;/span&gt;
  delay(&lt;span class="hljs-number"&gt;800&lt;/span&gt;);
  lcd.clear();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   C’est bien beau mais
   &lt;code&gt;
    drawInvader
   &lt;/code&gt;
   dans tout ça ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Une difficulté ? Où ça ?
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 Si vous savez comment afficher un caractère personnalisé sur l’écran, alors il ne devrait y avoir aucun problème.
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
&lt;/p&gt;
&lt;p&gt;
 En effet, la suite logique des opérations sera la suivante :
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
  On efface l’écran ;
 &lt;/li&gt;
 &lt;li&gt;
  On place le curseur au bon endroit ;
 &lt;/li&gt;
 &lt;li&gt;
  On affiche la moitié gauche ;
 &lt;/li&gt;
 &lt;li&gt;
  On affiche la moitié droite (logiquement à la suite).
 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
 Et en code, voici ce que cela donnerait.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;drawInvader&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; ligne, &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; colonne, &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; etat)&lt;/span&gt;
&lt;/span&gt;{
  lcd.clear(); &lt;span class="hljs-comment"&gt;// Efface l’écran.&lt;/span&gt;
  lcd.setCursor(colonne, ligne);   &lt;span class="hljs-comment"&gt;// Se place au bon pixel.&lt;/span&gt;
  lcd.write((&lt;span class="hljs-keyword"&gt;uint8_t&lt;/span&gt;) (&lt;span class="hljs-number"&gt;0&lt;/span&gt;+etat*&lt;span class="hljs-number"&gt;2&lt;/span&gt;)); &lt;span class="hljs-comment"&gt;// Affiche la moitié gauche.&lt;/span&gt;
  lcd.write((&lt;span class="hljs-keyword"&gt;uint8_t&lt;/span&gt;) (&lt;span class="hljs-number"&gt;1&lt;/span&gt;+etat*&lt;span class="hljs-number"&gt;2&lt;/span&gt;)); &lt;span class="hljs-comment"&gt;// Affiche la moitié droite.&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 &lt;code&gt;
  etat
 &lt;/code&gt;
 sera la variable qui dira si les bras sont levés ou baissés. Comme les caractères sont enregistrés dans l’ordre (bras baissés gauche, bras baissés droite, bras levés gauche, bras levés droite), il suffit de faire une multiplication par 2 pour se situer au bon endroit. On ajoute 0 ou 1 si on envoie la moitié gauche ou droite (gauche : 0, droite : 1).
&lt;/p&gt;
&lt;p&gt;
 Et voila ! Vous avez maintenant tout le code pour faire une jolie animation
 &lt;em&gt;
  Space Invaders
 &lt;/em&gt;
 sur votre écran LCD et donner un petit côté années 80 à votre Arduino !
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;LiquidCrystal.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-function"&gt;LiquidCrystal &lt;span class="hljs-title"&gt;lcd&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;8&lt;/span&gt;, &lt;span class="hljs-number"&gt;9&lt;/span&gt;, &lt;span class="hljs-number"&gt;5&lt;/span&gt;, &lt;span class="hljs-number"&gt;4&lt;/span&gt;, &lt;span class="hljs-number"&gt;3&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{

  &lt;span class="hljs-comment"&gt;// Partie gauche de l'invader bras baissés.&lt;/span&gt;
  byte invader_low_left[&lt;span class="hljs-number"&gt;8&lt;/span&gt;] = {
    B00100,
    B00010,
    B00111,
    B01101,
    B11111,
    B10111,
    B10100,
    B00010
  };
  &lt;span class="hljs-comment"&gt;// Partie droite de l'invader bras baissés.&lt;/span&gt;
  byte invader_low_right[&lt;span class="hljs-number"&gt;8&lt;/span&gt;] = {
    B00100,
    B01000,
    B11100,
    B10110,
    B11111,
    B11101,
    B00101,
    B01000
  };
  &lt;span class="hljs-comment"&gt;// Partie gauche de l'invader bras levés.&lt;/span&gt;
  byte invader_high_left[&lt;span class="hljs-number"&gt;8&lt;/span&gt;] = {
    B00100,
    B10010,
    B10111,
    B11101,
    B11111,
    B01111,
    B00100,
    B01000
  };
  &lt;span class="hljs-comment"&gt;// Partie droite de l'invader bras levés.&lt;/span&gt;
  byte invader_high_right[&lt;span class="hljs-number"&gt;8&lt;/span&gt;] = {
    B00100,
    B01001,
    B11101,
    B10111,
    B11111,
    B11110,
    B00100,
    B00010
  };

  lcd.createChar(&lt;span class="hljs-number"&gt;0&lt;/span&gt;, invader_low_left);   &lt;span class="hljs-comment"&gt;// Apprend le caractère à l’écran LCD.&lt;/span&gt;
  lcd.createChar(&lt;span class="hljs-number"&gt;1&lt;/span&gt;, invader_low_right);  &lt;span class="hljs-comment"&gt;// Apprend le caractère à l’écran LCD.&lt;/span&gt;
  lcd.createChar(&lt;span class="hljs-number"&gt;2&lt;/span&gt;, invader_high_left);  &lt;span class="hljs-comment"&gt;// Apprend le caractère à l’écran LCD.&lt;/span&gt;
  lcd.createChar(&lt;span class="hljs-number"&gt;3&lt;/span&gt;, invader_high_right); &lt;span class="hljs-comment"&gt;// Apprend le caractère à l’écran LCD.&lt;/span&gt;

  lcd.begin(&lt;span class="hljs-number"&gt;16&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;);

  randomSeed(analogRead(&lt;span class="hljs-number"&gt;0&lt;/span&gt;)); &lt;span class="hljs-comment"&gt;// Initialise l’aléatoire avec une lecture analogique.&lt;/span&gt;

  lcd.write(&lt;span class="hljs-string"&gt;"Hello World!"&lt;/span&gt;);
  delay(&lt;span class="hljs-number"&gt;2000&lt;/span&gt;);
  lcd.clear();
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; ligne = random(&lt;span class="hljs-number"&gt;0&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;);
  &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; colonne = random(&lt;span class="hljs-number"&gt;0&lt;/span&gt;, &lt;span class="hljs-number"&gt;15&lt;/span&gt;);
  drawInvader(ligne, colonne, &lt;span class="hljs-number"&gt;0&lt;/span&gt;);
  delay(&lt;span class="hljs-number"&gt;800&lt;/span&gt;);
  drawInvader(ligne, colonne, &lt;span class="hljs-number"&gt;1&lt;/span&gt;);
  delay(&lt;span class="hljs-number"&gt;800&lt;/span&gt;);
  lcd.clear();
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;drawInvader&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; ligne, &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; colonne, &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; etat)&lt;/span&gt;
&lt;/span&gt;{
  lcd.clear(); &lt;span class="hljs-comment"&gt;// Efface l’écran.&lt;/span&gt;
  lcd.setCursor(colonne, ligne);   &lt;span class="hljs-comment"&gt;// Se place au bon pixel.&lt;/span&gt;
  lcd.write((&lt;span class="hljs-keyword"&gt;uint8_t&lt;/span&gt;) (&lt;span class="hljs-number"&gt;0&lt;/span&gt;+etat*&lt;span class="hljs-number"&gt;2&lt;/span&gt;)); &lt;span class="hljs-comment"&gt;// Affiche la moitié gauche.&lt;/span&gt;
  lcd.write((&lt;span class="hljs-keyword"&gt;uint8_t&lt;/span&gt;) (&lt;span class="hljs-number"&gt;1&lt;/span&gt;+etat*&lt;span class="hljs-number"&gt;2&lt;/span&gt;)); &lt;span class="hljs-comment"&gt;// Affiche la moitié droite.&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voici une démonstration interactive :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/5iymNgseWcN" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Bien sûr, comme pour tout code, des améliorations pourraient être faites. Par exemple, on pourrait utiliser des constantes avec des
 &lt;code&gt;
  #define
 &lt;/code&gt;
 pour éviter d’envoyer 0 ou 1 pour l’état. On écrirait ainsi
 &lt;code&gt;
  BAISSE
 &lt;/code&gt;
 ou
 &lt;code&gt;
  LEVE
 &lt;/code&gt;
 et ça serait déjà plus propre.
&lt;/p&gt;
&lt;p&gt;
 Si vous le souhaitez, en guise d’exercice d’approfondissement, vous pouvez essayer de rajouter une étape intermédiaire où les bras du vaisseau seront à l’horizontale. Attention, il faudra peut-être revoir l’ordre d’enregistrement des caractères dans la mémoire de l’écran, donc le calcul pour les appeler.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 Amusez-vous bien et n’hésitez pas à poser des questions ou faire des remarques en commentaires.
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Un gros merci à
   &lt;a href="https://zestedesavoir.com/membres/voir/Dominus Carnufex/"&gt;
    Dominus Carnufex
   &lt;/a&gt;
   qui, comme souvent sur mes contenus, à eu l’immense loisir de s’écorcher la rétine sur mes fautes
   &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;</content><category term="arduino"></category><category term="tp"></category></entry><entry><title>Ajouter un splash screen de boot sur sa RaspberryPi</title><link href="https://eskimon.fr/ajouter-un-splash-screen-de-boot-sur-sa-raspberrypi" rel="alternate"></link><published>2016-03-29T21:47:00+02:00</published><updated>2016-03-29T21:47:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2016-03-29:/ajouter-un-splash-screen-de-boot-sur-sa-raspberrypi</id><summary type="html">&lt;p&gt;
 Petite astuce pour afficher une image lors du boot de sa machine Linux (en l’occurence une RaspberryPi).
&lt;/p&gt;
&lt;p&gt;
 Tout d’abord, on installe le logiciel
 &lt;code&gt;
  fbi
 &lt;/code&gt;
 qui nous permet de faire de l’affichage d’image depuis le terminal:
 &lt;code&gt;
  sudo apt-get install fbi
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Ensuite, on édite le fichier
 &lt;code&gt;
  /etc/init …&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Petite astuce pour afficher une image lors du boot de sa machine Linux (en l’occurence une RaspberryPi).
&lt;/p&gt;
&lt;p&gt;
 Tout d’abord, on installe le logiciel
 &lt;code&gt;
  fbi
 &lt;/code&gt;
 qui nous permet de faire de l’affichage d’image depuis le terminal:
 &lt;code&gt;
  sudo apt-get install fbi
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Ensuite, on édite le fichier
 &lt;code&gt;
  /etc/init.d/rcS
 &lt;/code&gt;
 pour le faire ressembler à ça :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;&lt;span class="hljs-built_in"&gt;exec&lt;/span&gt; /etc/init.d/rc S &amp;amp;
chvt 6
clear
fbi -once -timeout 20 -noverbose -nocomments -noedit /home/pi/splash.png
chvt 1
clear
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Pour faire simple, on rajoute une esperluette à la première ligne pour que les scripts rc se lancent en tâche de fond. Ensuite, on bascule sur le terminal 6 que l’on nettoie. Enfin, on affiche l’image via fbi puis on finit par revenir sur le terminal 1 que l’on nettoie à son tour.
&lt;/p&gt;
&lt;p&gt;
 Cette bidouille est de loin celle qui affiche l’image de boot "au plus tôt" (comparé à d’autres méthodes à base de script à rajouter dans init.d).
&lt;/p&gt;
&lt;p&gt;
 Évidemment pour que ça marche il faut qu’il y est une image nommée
 &lt;code&gt;
  splash.png
 &lt;/code&gt;
 dans le répertoire home de l’utilisateur pi…
&lt;/p&gt;
&lt;p&gt;
 (Si vous avez toujours des messages de logs qui apparaissent, ajouter le terme "quiet" à la fin de la ligne dans le fichier
 &lt;code&gt;
  /boot/cmdline.txt
 &lt;/code&gt;
 )
&lt;/p&gt;</content><category term="memo"></category></entry><entry><title>Afficher une image avec Qt (zoom, déplacement, redimensionnement, tool-tip, menu contextuel ...)</title><link href="https://eskimon.fr/afficher-une-image-avec-qt-zoom-deplacement-redimensionnement-tool-tip-menu-contextuel" rel="alternate"></link><published>2015-09-13T12:19:00+02:00</published><updated>2015-09-13T12:19:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2015-09-13:/afficher-une-image-avec-qt-zoom-deplacement-redimensionnement-tool-tip-menu-contextuel</id><summary type="html">&lt;p&gt;
 J’ai récemment aidé un ami avec un peu de code. Il en est émergé un nouveau widget Qt basé sur QGraphicsView. Les fonctionnalités sont décrites après cette vidéo de démonstration :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/6HVfzBXfZoQ" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Cet article montre comment afficher une image avec QT. La classe rOg_image supporte les fonctionnalités suivantes:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  affiche un QImage …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;
 J’ai récemment aidé un ami avec un peu de code. Il en est émergé un nouveau widget Qt basé sur QGraphicsView. Les fonctionnalités sont décrites après cette vidéo de démonstration :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/6HVfzBXfZoQ" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Cet article montre comment afficher une image avec QT. La classe rOg_image supporte les fonctionnalités suivantes:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  affiche un QImage dans un widget,
 &lt;/li&gt;
 &lt;li&gt;
  affiche une image brute dans un widget,
 &lt;/li&gt;
 &lt;li&gt;
  supporte le redimensionnement intelligent,
 &lt;/li&gt;
 &lt;li&gt;
  zoom avant et arrière avec la molette,
 &lt;/li&gt;
 &lt;li&gt;
  déplacement de l’image avec le bouton gauche (dragging),
 &lt;/li&gt;
 &lt;li&gt;
  menu contextuel avec le bouton droit,
 &lt;/li&gt;
 &lt;li&gt;
  possibilité de surcharger la classe pour dessiner sur ou sous l’image (premier plan ou arrière plan),
 &lt;/li&gt;
 &lt;li&gt;
  possibilité de surcharger la classe pour afficher un tool-tip au passage de la souris.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 La classe peut-être téléchargée sur
 &lt;a href="http://www.lucidarme.me/?p=5568"&gt;
  le site de Philippe Lucidarme
 &lt;/a&gt;
 .
&lt;/p&gt;</content><category term="memo"></category><category term="Qt"></category></entry><entry><title>Découverte de l'Ethernet sur Arduino</title><link href="https://eskimon.fr/tuto-arduino-801-d%C3%A9couverte-de-lethernet-sur-arduino" rel="alternate"></link><published>2015-03-26T17:40:00+01:00</published><updated>2015-03-26T17:40:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2015-03-26:/tuto-arduino-801-découverte-de-lethernet-sur-arduino</id><summary type="html">&lt;p&gt;
 Pour accéder à internet et connecter notre Arduino au monde extérieur, nous allons utiliser le shield Ethernet. Ce dernier repose sur le protocole éponyme dont nous allons voir les fondements dans ce chapitre.
Vous allez donc pouvoir découvrir comment les choses fonctionnent au niveau du réseau puis nous finirons par …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Pour accéder à internet et connecter notre Arduino au monde extérieur, nous allons utiliser le shield Ethernet. Ce dernier repose sur le protocole éponyme dont nous allons voir les fondements dans ce chapitre.
Vous allez donc pouvoir découvrir comment les choses fonctionnent au niveau du réseau puis nous finirons par une présentation du shield Ethernet que nous allons utiliser.
&lt;/p&gt;
&lt;p&gt;
 Ce chapitre sera principalement composé de théorie et de culture générale, mais ça ne fait jamais de mal ! Je vous conseille de le lire pour que nous soyons bien sur la même longueur d’onde pour la suite. Les chapitres suivants permettront de rentrer un peu plus dans le vif du sujet avec la mise en pratique.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;a href="#un-réseau-informatique-cest-quoi"&gt;
   Un réseau informatique c’est quoi ?
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#le-shield-ethernet"&gt;
    Le shield Ethernet
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#le-cœur-du-traitement-le-wiznet-510"&gt;
     Le cœur du traitement : Le Wiznet 510
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#de-la-communication-à-droite-à-gauche"&gt;
      De la communication à droite à gauche…
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#carte-sd"&gt;
       Carte SD
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#un-peu-de-vocabulaire"&gt;
    Un peu de vocabulaire
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#architecture-serveurclient"&gt;
      Architecture Serveur/Client
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-serveur"&gt;
       Le Serveur
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-client"&gt;
       Le Client
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#des-adresses-pour-tout"&gt;
      Des adresses pour tout !
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#ip"&gt;
       IP
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#mac"&gt;
       MAC
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#dautres-notions-utiles"&gt;
      D’autres notions utiles
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#ports"&gt;
       Ports
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="un-réseau-informatique-cest-quoi"&gt;
 &lt;a aria-hidden="true" href="#un-réseau-informatique-cest-quoi"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un réseau informatique c’est quoi ?
&lt;/h3&gt;
&lt;p&gt;
 Internet, qu’est-ce que c’est au juste ? On en entend parler tout le temps et vous vous en servez probablement tous les jours, mais seriez-vous capable de le définir pour autant ? Essayons d’y voir plus clair…
&lt;/p&gt;
&lt;p&gt;
 Internet est un réseau de réseaux. C’est un support de transfert d’informations dans un sens le plus large possible. Afin d’organiser ces échanges, on utilise des
 &lt;strong&gt;
  protocoles
 &lt;/strong&gt;
 spécifiques pour chaque type de transfert. Ces protocoles sont ainsi adaptés à une tache en particulier. Le plus connu est certainement
 &lt;em&gt;
  http
 &lt;/em&gt;
 , soit
 &lt;em&gt;
  HyperText Transfert Protocol
 &lt;/em&gt;
 qui sert à naviguer sur des pages en se promenant via des liens. Ceux d’entre vous qui font du développement web connaissent aussi sûrement le
 &lt;em&gt;
  ftp
 &lt;/em&gt;
 ,
 &lt;em&gt;
  File Transfert Protocol
 &lt;/em&gt;
 (Protocole d’échanges de fichiers) qui permet de faire du transfert de fichiers uniquement.
&lt;/p&gt;
&lt;p&gt;
 Si l’on descend dans des considérations plus techniques, on peut s’intéresser au support de l’information, comment cette dernière voyage-t-elle. On découvrira alors les différents vecteurs de communication comme le WiFi ou l’Ethernet.
&lt;/p&gt;
&lt;p&gt;
 Chaque partie du réseau, que ce soit le medium de transfert de l’information ou le protocole final utilisé, peut être retrouvée dans ce que l’on appelle le modèle OSI (Open Systems Interconnection). Ce modèle possède 7 couches servant à définir le rôle de chacun des composants importants du réseau :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Les couches OSI" src="./images/uploaded/tuto-arduino-801-découverte-de-lethernet-sur-arduino/les-couches-osi.png"/&gt;
 &lt;figcaption&gt;
  Les couches OSI - (source
  &lt;a href="http://fr.wikipedia.org/wiki/Modèle_OSI"&gt;
   Wikipédia
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 L’Ethernet, que nous allons voir dans ce cours agit sur les couches 1 et 2, physique et liaison de données puisqu’il transforme et transporte les données dans un "format" électronique qui lui est spécifique.
&lt;/p&gt;
&lt;h3 id="le-shield-ethernet"&gt;
 &lt;a aria-hidden="true" href="#le-shield-ethernet"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le shield Ethernet
&lt;/h3&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Toute la documentation officielle du shield Ethernet peut être trouvée ici :
   &lt;a href="http://arduino.cc/en/Main/ArduinoEthernetShield"&gt;
    http://arduino.cc/en/Main/ArduinoEthernetShield
   &lt;/a&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Maintenant que nous y voyons plus clair dans ce qu’est un réseau, voyons un peu les caractéristiques du matériel que nous allons utiliser pour relier notre carte Arduino.
&lt;/p&gt;
&lt;p&gt;
 Il faut tout d’abord savoir que l’Arduino seule n’est PAS DU TOUT faite pour utiliser une liaison réseau comme l’Ethernet. Nous venons de le découvrir, il y a de nombreuses couches à respecter, protocoles à utiliser et paquets à réaliser. Le pauvre petit microcontrôleur de l’Arduino en serait bien incapable dans de bons délais, ce qui rendrait l’utilisation de la carte impossible.
&lt;/p&gt;
&lt;p&gt;
 C’est pourquoi l’Arduino va être épaulée par un shield qui se nomme très justement "shield Ethernet". Il est relativement simple à trouver et coûte moins d’une trentaine d’euros, comme sur le site de Farnell. Ce shield permettra alors de décharger l’Arduino de tout le traitement des couches réseau pour ne donner que les informations utiles à cette dernière.
Commençons l’autopsie…
&lt;/p&gt;
&lt;h4 id="le-cœur-du-traitement-le-wiznet-510"&gt;
 &lt;a aria-hidden="true" href="#le-cœur-du-traitement-le-wiznet-510"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le cœur du traitement : Le Wiznet 510
&lt;/h4&gt;
&lt;p&gt;
 Tout le traitement ou presque va être géré par la puce que vous pouvez voir sur le dessus de la carte. Ce circuit intégré possède la référence Wiznet 5100. C’est un composant qui est dédié au traitement par Ethernet. Une fois configuré, il se chargera de faire toute la communication. C’est-à-dire que vous n’aurez qu’à envoyer vos données au shield (via SPI, nous y reviendrons) et le shield se chargera de les encapsuler dans des trames et de les transmettre à l’adresse que vous souhaitez. De la même façon, si des données sont reçues il se chargera de les récupérer et les transmettre à l’Arduino pour que votre programme puisse les exploiter.
&lt;/p&gt;
&lt;p&gt;
 Ce composant possède une mémoire
 &lt;em&gt;
  buffer
 &lt;/em&gt;
 de 16 KB. C’est-à-dire que dans le cas d’un échange de données (téléchargement d’une page web par exemple) les données seront stockées ici le temps que l’Arduino les lise et les traite.
&lt;/p&gt;
&lt;p&gt;
 Le shield possède aussi plusieurs leds reliées au Wiznet dont voici le nom et le rôle :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  PWR: indique que la carte est alimentée ;
 &lt;/li&gt;
 &lt;li&gt;
  LINK: indique que la carte est connectée à un réseau. Cette led clignote lors de l’émission/réception de données ;
 &lt;/li&gt;
 &lt;li&gt;
  FULLD: cette led est allumée dans le cas d’une connexion full-duplex (émission et réception simultanées) ;
 &lt;/li&gt;
 &lt;li&gt;
  100M: allumée si le réseau peut aller à 100 Mb/s (vitesse max. du composant), éteinte dans le cas d’un réseau à 10 Mb/s ;
 &lt;/li&gt;
 &lt;li&gt;
  RX: clignote lors de la réception de données ;
 &lt;/li&gt;
 &lt;li&gt;
  TX: clignote lors de l’envoi de données ;
 &lt;/li&gt;
 &lt;li&gt;
  COLL: clignote si des collisions de données sont détectées.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="de-la-communication-à-droite-à-gauche"&gt;
 &lt;a aria-hidden="true" href="#de-la-communication-à-droite-à-gauche"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 De la communication à droite à gauche…
&lt;/h4&gt;
&lt;p&gt;
 Le shield Ethernet, on s’en doute, communique principalement par … Ethernet ! Mais ce n’est pas tout. Il lui faut aussi échanger avec l’Arduino pour pouvoir recevoir une configuration, savoir quelle page aller chercher ou encore transmettre des informations reçues. Pour toutes ces opérations, la transmission se fera par une liaison que nous ne connaissons pas encore :
 &lt;strong&gt;
  SPI
 &lt;/strong&gt;
 (
 &lt;em&gt;
  Serial Protocol Interface
 &lt;/em&gt;
 ).
&lt;/p&gt;
&lt;p&gt;
 Cette transmission, nous allons découvrir comment l’utiliser via la librairie Ethernet dans cette partie. Nous n’allons cependant pas rentrer dans les détails puisque ce n’est pas le but de cette partie.
&lt;/p&gt;
&lt;h5 id="carte-sd"&gt;
 &lt;a aria-hidden="true" href="#carte-sd"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Carte SD
&lt;/h5&gt;
&lt;p&gt;
 Sur le shield vous avez sûrement vu l’emplacement pour la carte SD. Cette dernière servira à stocker/charger des pages ou des données quelconques. Cette carte se sert elle aussi de la connexion SPI que je viens d’évoquer. On devra donc utiliser une broche comme "Slave Select" (sélection de cible) pour déclarer au système à quel composant on s’adresse, soit l’Ethernet, soit la SD.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Le shield Ethernet Arduino" src="./images/uploaded/tuto-arduino-801-découverte-de-lethernet-sur-arduino/le-shield-ethernet-arduino.jpg"/&gt;
 &lt;figcaption&gt;
  Le shield Ethernet Arduino - (CC-BY,
  &lt;a href="http://arduino.cc/en/uploads/Main/ArduinoEthernetShield_R3_Front_450px.jpg"&gt;
   arduino.cc
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="un-peu-de-vocabulaire"&gt;
 &lt;a aria-hidden="true" href="#un-peu-de-vocabulaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un peu de vocabulaire
&lt;/h3&gt;
&lt;h4 id="architecture-serveurclient"&gt;
 &lt;a aria-hidden="true" href="#architecture-serveurclient"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Architecture Serveur/Client
&lt;/h4&gt;
&lt;p&gt;
 Dans le monde magique d’internet, des ordinateurs se parlent entre eux. Cependant, on retrouve deux rôles particuliers : les clients et les serveurs. Bien que souvent exclusif, il peut cependant arriver qu’une machine serve aux deux. Mais voyons plus en détail ces rôles.
&lt;/p&gt;
&lt;h5 id="le-serveur"&gt;
 &lt;a aria-hidden="true" href="#le-serveur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le Serveur
&lt;/h5&gt;
&lt;p&gt;
 Le travail du serveur est de … servir une information. Cette dernière peut être une page web ou un service quelconque. Par exemple, quand vous allez sur un site web, c’est un "serveur HTTP" (serveur web) qui sera chargé de vous répondre en vous renvoyant la bonne page. Autre exemple, dans votre établissement (scolaire ou professionnel), si une imprimante est branchée sur le réseau alors c’est un serveur d’impression qui sera utilisé pour convertir votre demande "imprime-moi la page 42 du pdf Arduino d’Eskimon" en une tâche dans le monde réel.
&lt;/p&gt;
&lt;p&gt;
 Vous vous en doutez sûrement, des serveurs il en existe pour plein de choses différentes ! Web, e-mail, impression… Quand nous utiliserons notre Arduino pour
 &lt;em&gt;
  offrir/servir
 &lt;/em&gt;
 une donnée, on dira alors qu’elle est en fonctionnement de "serveur". On aura donc un "Serveur Arduino" en quelque sorte (qui pourra être un simple serveur web par exemple).
&lt;/p&gt;
&lt;h5 id="le-client"&gt;
 &lt;a aria-hidden="true" href="#le-client"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le Client
&lt;/h5&gt;
&lt;p&gt;
 Si vous avez compris les paragraphes précédents, alors vous avez sûrement deviné le rôle du client. Comme dans la vie réelle, le client est celui qui va demander une information ou un service. Dans la vie de tous les jours, vous utilisez sûrement au quotidien un navigateur internet. Eh bien ce dernier est un client pour un serveur web. Il fera alors des demandes au serveur, ce dernier les renverra et le client les interprétera.
&lt;/p&gt;
&lt;p&gt;
 Il existe autant de types de clients qu’il y a de types de serveurs. À chaque service, sa tâche !
&lt;/p&gt;
&lt;h4 id="des-adresses-pour-tout"&gt;
 &lt;a aria-hidden="true" href="#des-adresses-pour-tout"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Des adresses pour tout !
&lt;/h4&gt;
&lt;p&gt;
 Dans ce tutoriel, nous allons rencontrer deux types d'
 &lt;strong&gt;
  adresses
 &lt;/strong&gt;
 , l’IP et la MAC. Voyons de quoi il s’agit.
&lt;/p&gt;
&lt;h5 id="ip"&gt;
 &lt;a aria-hidden="true" href="#ip"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 IP
&lt;/h5&gt;
&lt;p&gt;
 L’adresse IP, Internet Protocol, représente l’adresse à l’échelle du réseau, qu’il soit global ou local. Dans le monde physique, vous possédez une adresse pour recevoir du courrier. Dans le monde de l’internet, c’est pareil. Quand des paquets de données sont échangés entre serveur et client, ces derniers possèdent une adresse pour savoir où les délivrer.
&lt;/p&gt;
&lt;p&gt;
 À l’échelle globale, votre connexion possède une adresse IP dite
 &lt;em&gt;
  publique
 &lt;/em&gt;
 . C’est cette dernière qui sert à échanger avec le monde extérieur. En revanche, quand vous êtes connecté à votre box internet ou un routeur quelconque, vous possédez alors une adresse IP
 &lt;em&gt;
  locale
 &lt;/em&gt;
 . Cette dernière est très souvent de la forme 192.168.0.xxx. C’est votre box/routeur qui servira d’aiguillage entre les paquets qui sont destinés à votre ordinateur ou votre Arduino (ou n’importe quel autre équipement sur le même réseau).
&lt;/p&gt;
&lt;h5 id="mac"&gt;
 &lt;a aria-hidden="true" href="#mac"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 MAC
&lt;/h5&gt;
&lt;p&gt;
 L’adresse MAC, Media Access Control, représente une adresse physique, matérielle, de votre matériel. Elle est propre à votre ordinateur/carte réseau. Elle est normalement unique à n’importe quel matériel réseau. Mais elle est aussi falsifiable, donc l’unicité ne peut être garantie globalement.
&lt;/p&gt;
&lt;h4 id="dautres-notions-utiles"&gt;
 &lt;a aria-hidden="true" href="#dautres-notions-utiles"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 D’autres notions utiles
&lt;/h4&gt;
&lt;h5 id="ports"&gt;
 &lt;a aria-hidden="true" href="#ports"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Ports
&lt;/h5&gt;
&lt;p&gt;
 Comme on le voyait un peu plus tôt, différentes applications serveur peuvent fonctionner sur une même machine. MAIS, ils sont tous cachés derrière la même adresse IP. Comment donc séparer les paquets qui vont au serveur web de ceux qui vont au serveur e-mail par exemple ? Une solution pourrait être d’ajouter une information dans le paquet pour préciser l’application de destination. Et bien c’est presque ça. En effet, chaque paquet se verra attribuer un
 &lt;em&gt;
  port
 &lt;/em&gt;
 de destination qui est celui sur lequel l’application fonctionne.
&lt;/p&gt;
&lt;p&gt;
 Pour imager, essayez d’imaginer la liaison Internet comme une autoroute avec de très nombreuses voies. Les paquets sont les voitures circulant sur cette autoroute. Chaque port sera alors une voie dédiée. Ainsi, le serveur web serait la voie de droite, le serveur mail celle du milieu et le serveur Arduino la voie de gauche. Et comme ça tout le monde arrive à bon port, le serveur au bout de la voie a juste à s’occuper de ses paquets et non pas ceux des autres applications !
&lt;/p&gt;
&lt;p&gt;
 Maintenant que les bases sont posées, nous allons pouvoir partir à l’aventure et la conquête du monde par l’Internet ! Place à la grande mode de "L’Internet des objets" !
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Arduino et Ethernet : client</title><link href="https://eskimon.fr/tuto-arduino-802-arduino-et-ethernet-client" rel="alternate"></link><published>2015-03-26T14:22:00+01:00</published><updated>2015-03-26T14:22:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2015-03-26:/tuto-arduino-802-arduino-et-ethernet-client</id><summary type="html">&lt;p&gt;
 Commençons doucement à découvrir ce shield en utilisant notre Arduino comme
 &lt;strong&gt;
  client
 &lt;/strong&gt;
 .
Dans ce chapitre, nous allons découvrir comment faire en sorte que notre Arduino aille interroger un site internet pour obtenir une information de sa part.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ici nous allons interroger un site internet, mais cela aurait très bien pu …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;
 Commençons doucement à découvrir ce shield en utilisant notre Arduino comme
 &lt;strong&gt;
  client
 &lt;/strong&gt;
 .
Dans ce chapitre, nous allons découvrir comment faire en sorte que notre Arduino aille interroger un site internet pour obtenir une information de sa part.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ici nous allons interroger un site internet, mais cela aurait très bien pu être un autre service, sur un autre port (vous allez comprendre)
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Afin de bien comprendre, je vous propose tout d’abord quelques explications sur le protocole HTTP et comment se passe un échange de données (requête + réponse).
&lt;/p&gt;
&lt;p&gt;
 Ensuite, nous verrons comment mettre en œuvre le shield et faire en sorte qu’il puisse accéder au monde extérieur.
&lt;/p&gt;
&lt;p&gt;
 Enfin, nous mettrons tout en œuvre pour faire une simple requête sur un moteur de recherche.
&lt;/p&gt;
&lt;p&gt;
 Pour terminer, je vous propose un petit exercice qui permettra de voir un cas d’utilisation : le "monitoring" d’un serveur.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#client-et-requêtes-http"&gt;
    Client et requêtes HTTP
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#un-client-ça-fait-quoi"&gt;
     Un client, ça fait quoi ?
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#une-requête-http-cest-quoi"&gt;
      Une requête HTTP, c’est quoi ?
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#Émission"&gt;
       Émission
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#réception"&gt;
       Réception
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#utilisation-du-shield-comme-client"&gt;
    Utilisation du shield comme client
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#préparation-minimale"&gt;
     Préparation minimale
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#démarrer-le-shield"&gt;
      Démarrer le shield
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-dhcp"&gt;
       le DHCP
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#envoyer-une-requête"&gt;
      Envoyer une requête
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#requête-simple"&gt;
       Requête simple
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#requête-avec-paramètre"&gt;
       Requête avec paramètre
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#lire-une-réponse"&gt;
      Lire une réponse
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#code-complet"&gt;
       Code complet
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#faire-des-requêtes-en-continu"&gt;
      Faire des requêtes en continu
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-code-complet"&gt;
       Le code complet
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#lintérêt-dun-client"&gt;
      L’intérêt d’un client
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#télécharger-une-configuration"&gt;
       Télécharger une configuration
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#enregistrer-des-données-en-ligne"&gt;
       Enregistrer des données en ligne
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#sûrement-plein-dautres-choses"&gt;
       Sûrement plein d’autres choses !
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#exercice-lire-luptime-de-eskimonfr"&gt;
    Exercice, lire l’uptime de Eskimon.fr
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#consigne"&gt;
     Consigne
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="client-et-requêtes-http"&gt;
 &lt;a aria-hidden="true" href="#client-et-requêtes-http"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Client et requêtes HTTP
&lt;/h3&gt;
&lt;p&gt;
 Faisons un petit retour étendu sur la notion de client et surtout découvrons plus en détail en quoi consiste exactement une requête HTTP.
&lt;/p&gt;
&lt;h4 id="un-client-ça-fait-quoi"&gt;
 &lt;a aria-hidden="true" href="#un-client-ça-fait-quoi"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un client, ça fait quoi ?
&lt;/h4&gt;
&lt;p&gt;
 Le rôle du client est finalement assez simple. Son but sera d’aller chercher des informations pour les afficher à un utilisateur ou effectuer une action particulière. D’une manière générale, le client sera celui qui traite l’information que le serveur envoie.
&lt;/p&gt;
&lt;p&gt;
 Prenons l’exemple du navigateur web. C’est un
 &lt;em&gt;
  client
 &lt;/em&gt;
 . Lorsque vous l’utilisez, vous allez générer des
 &lt;em&gt;
  requêtes
 &lt;/em&gt;
 vers des serveurs et ces derniers vont ensuite renvoyer un tas d’informations (la page web). Le navigateur va alors les traiter pour vous les afficher sous une forme agréable et prévue par le développeur web.
&lt;/p&gt;
&lt;p&gt;
 Finalement, c’est simple d’être client, ça consiste juste à demander des choses et attendre qu’elles arrivent
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 !
&lt;/p&gt;
&lt;p&gt;
 Les termes "client" et "serveur" (et même "requête") sont d’ailleurs très bien choisis car ils illustrent très bien les mêmes rôles que leur équivalent "dans la vraie vie".
&lt;/p&gt;
&lt;h4 id="une-requête-http-cest-quoi"&gt;
 &lt;a aria-hidden="true" href="#une-requête-http-cest-quoi"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Une requête HTTP, c’est quoi ?
&lt;/h4&gt;
&lt;p&gt;
 Des requêtes HTTP il en existe de plusieurs types. Les plus classiques sont sûrement les GET et les POST, mais on retrouve aussi les PUT, DELETE, HEAD… Pour faire simple, nous allons uniquement nous intéresser à la première car c’est celle qui est utilisée la plupart du temps !
&lt;/p&gt;
&lt;h5 id="Émission"&gt;
 &lt;a aria-hidden="true" href="#Émission"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Émission
&lt;/h5&gt;
&lt;p&gt;
 Dans la spécification du protocole HTTP, on apprend que GET nous permet de demander une ressource en lecture seule. On aura simplement besoin de spécifier une page cible et ensuite le serveur HTTP de cette page nous renverra la ressource ou un code d’erreur en cas de problème. On peut passer des arguments/options à la fin de l’adresse que l’on interroge pour demander des choses plus particulières au serveur.
&lt;/p&gt;
&lt;p&gt;
 Par exemple, si vous êtes sur la page d’accueil de Google et que vous faites une recherche sur "Arduino", votre navigateur fera la requête suivante :
 &lt;code&gt;
  GET /search?q=arduino HTTP/1.0
 &lt;/code&gt;
 . Il interroge donc la page principale "/" (racine) et envoie l’argument "search?q=arduino". Le reste définit le protocole utilisé.
&lt;/p&gt;
&lt;h5 id="réception"&gt;
 &lt;a aria-hidden="true" href="#réception"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Réception
&lt;/h5&gt;
&lt;p&gt;
 Une fois la requête faite, le serveur interrogé va vous renvoyer une réponse. Cette réponse peut être découpée en deux choses : l’en-tête (header) et le contenu. On pourrait comparer cela à un envoi de colis. L’en-tête possèderait les informations sur le colis (destinataires, etc.) et le contenu est ce qui est à l’intérieur du colis.
&lt;/p&gt;
&lt;p&gt;
 Typiquement, dans une réponse minimaliste, on lira les informations suivantes :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Le code de réponse de la requête (200 si tout s’est bien passé) ;
 &lt;/li&gt;
 &lt;li&gt;
  Le type MIME du contenu renvoyé (
  &lt;code&gt;
   text/html
  &lt;/code&gt;
  dans le cas d’une page web) ;
 &lt;/li&gt;
 &lt;li&gt;
  Une ligne blanche/vide ;
 &lt;/li&gt;
 &lt;li&gt;
  Le contenu.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Les deux premières lignes font partie du header, puis après viendra le contenu.
&lt;/p&gt;
&lt;p&gt;
 Si l’on veut chercher des informations, en général on le fera dans le contenu.
&lt;/p&gt;
&lt;h3 id="utilisation-du-shield-comme-client"&gt;
 &lt;a aria-hidden="true" href="#utilisation-du-shield-comme-client"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utilisation du shield comme client
&lt;/h3&gt;
&lt;p&gt;
 Maintenant que l’on en sait un peu plus, on va pouvoir faire des requêtes et aller interroger le monde…
&lt;/p&gt;
&lt;h4 id="préparation-minimale"&gt;
 &lt;a aria-hidden="true" href="#préparation-minimale"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Préparation minimale
&lt;/h4&gt;
&lt;p&gt;
 Pour commencer, il va falloir configurer notre module Ethernet pour qu’il puisse travailler correctement. Pour cela, il va falloir lui donner une adresse MAC et une adresse IP (qui peut être automatique, nous y reviendrons). On va utiliser 4 variables différentes :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Un tableau de
  &lt;code&gt;
   byte
  &lt;/code&gt;
  (ou char) pour les 6 octets de l’adresse MAC ;
 &lt;/li&gt;
 &lt;li&gt;
  Un objet
  &lt;code&gt;
   IPAddress
  &lt;/code&gt;
  avec l’adresse IP que l’on assigne au module ;
 &lt;/li&gt;
 &lt;li&gt;
  Un objet
  &lt;code&gt;
   EthernetClient
  &lt;/code&gt;
  qui nous servira à faire la communication ;
 &lt;/li&gt;
 &lt;li&gt;
  Une chaîne de caractères représentant le nom du serveur à interroger.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   L’adresse MAC doit normalement être écrite sur un autocollant au dos de votre shield (sinon inventez-en une !)
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 De manière programmatoire, on aura les variables ci-dessous.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Ces deux bibliothèques sont indispensables pour le shield&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;SPI.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;Ethernet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// L'adresse MAC du shield&lt;/span&gt;
byte mac[] = { &lt;span class="hljs-number"&gt;0x90&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xA2&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xDA&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x0E&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xA5&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x7E&lt;/span&gt; };
&lt;span class="hljs-comment"&gt;// L'adresse IP que prendra le shield&lt;/span&gt;
&lt;span class="hljs-function"&gt;IPAddress &lt;span class="hljs-title"&gt;ip&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;192&lt;/span&gt;,&lt;span class="hljs-number"&gt;168&lt;/span&gt;,&lt;span class="hljs-number"&gt;0&lt;/span&gt;,&lt;span class="hljs-number"&gt;143&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// L'objet qui nous servira à la communication&lt;/span&gt;
EthernetClient client;
&lt;span class="hljs-comment"&gt;// Le serveur à interroger&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; serveur[] = &lt;span class="hljs-string"&gt;"leserveur.com"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="démarrer-le-shield"&gt;
 &lt;a aria-hidden="true" href="#démarrer-le-shield"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Démarrer le shield
&lt;/h4&gt;
&lt;p&gt;
 Maintenant que nous avons nos variables, nous allons pouvoir démarrer notre shield dans le
 &lt;code&gt;
  setup()
 &lt;/code&gt;
 . Pour cela, il suffira d’appeler une fonction bien nommée :
 &lt;code&gt;
  begin()
 &lt;/code&gt;
 , eh oui, comme pour la voie série ! Cette fonction prendra deux paramètres, l’adresse MAC et l’adresse IP à utiliser. C’est aussi simple que cela !
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Ces deux bibliothèques sont indispensables pour le shield&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;SPI.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;Ethernet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// L'adresse MAC du shield&lt;/span&gt;
byte mac[] = { &lt;span class="hljs-number"&gt;0x90&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xA2&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xDA&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x0E&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xA5&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x7E&lt;/span&gt; };
&lt;span class="hljs-comment"&gt;// L'adresse IP que prendra le shield&lt;/span&gt;
&lt;span class="hljs-function"&gt;IPAddress &lt;span class="hljs-title"&gt;ip&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;192&lt;/span&gt;,&lt;span class="hljs-number"&gt;168&lt;/span&gt;,&lt;span class="hljs-number"&gt;0&lt;/span&gt;,&lt;span class="hljs-number"&gt;143&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// L'objet qui nous servira à la communication&lt;/span&gt;
EthernetClient client;
&lt;span class="hljs-comment"&gt;// Le serveur à interroger&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; serveur[] = &lt;span class="hljs-string"&gt;"perdu.com"&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; setup() {
  &lt;span class="hljs-comment"&gt;// On demarre la voie série pour déboguer&lt;/span&gt;
  Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);

  &lt;span class="hljs-comment"&gt;// On démarre le shield Ethernet&lt;/span&gt;
  Ethernet.begin(mac, ip);
  &lt;span class="hljs-comment"&gt;// Donne une seconde au shield pour s'initialiser&lt;/span&gt;
  delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Simple non ?
&lt;/p&gt;
&lt;h5 id="le-dhcp"&gt;
 &lt;a aria-hidden="true" href="#le-dhcp"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 le DHCP
&lt;/h5&gt;
&lt;p&gt;
 Si vous bricolez à domicile, il est fort probable que vous soyez en train d’utiliser un routeur ou votre box internet. Bien souvent, ces derniers ont par défaut la fonction DHCP activée. Cette technologie permet de donner une adresse IP automatiquement à tous les équipements qui se connectent au réseau. Ainsi, plus besoin de le faire manuellement !
&lt;/p&gt;
&lt;p&gt;
 Du coup, on peut faire évoluer notre script d’initialisation pour prendre en compte cela.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Ces deux bibliothèques sont indispensables pour le shield&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;SPI.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;Ethernet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// L'adresse MAC du shield&lt;/span&gt;
byte mac[] = { &lt;span class="hljs-number"&gt;0x90&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xA2&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xDA&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x0E&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xA5&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x7E&lt;/span&gt; };
&lt;span class="hljs-comment"&gt;// L'adresse IP que prendra le shield&lt;/span&gt;
&lt;span class="hljs-function"&gt;IPAddress &lt;span class="hljs-title"&gt;ip&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;192&lt;/span&gt;,&lt;span class="hljs-number"&gt;168&lt;/span&gt;,&lt;span class="hljs-number"&gt;0&lt;/span&gt;,&lt;span class="hljs-number"&gt;143&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// L'objet qui nous servira a la communication&lt;/span&gt;
EthernetClient client;
&lt;span class="hljs-comment"&gt;// Le serveur à interroger&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; serveur[] = &lt;span class="hljs-string"&gt;"perdu.com"&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// On démarre la voie série pour déboguer&lt;/span&gt;
  Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);

  &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; erreur = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
  &lt;span class="hljs-comment"&gt;// On démarre le shield Ethernet SANS adresse IP (donc donnée via DHCP)&lt;/span&gt;
  erreur = Ethernet.begin(mac);

  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (erreur == &lt;span class="hljs-number"&gt;0&lt;/span&gt;) {
    Serial.println(&lt;span class="hljs-string"&gt;"Parametrage avec ip fixe..."&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// si une erreur a eu lieu cela signifie que l'attribution DHCP&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// ne fonctionne pas. On initialise donc en forçant une IP&lt;/span&gt;
    Ethernet.begin(mac, ip);
  }
  Serial.println(&lt;span class="hljs-string"&gt;"Init..."&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Donne une seconde au shield pour s'initialiser&lt;/span&gt;
  delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
  Serial.println(&lt;span class="hljs-string"&gt;"Pret !"&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="envoyer-une-requête"&gt;
 &lt;a aria-hidden="true" href="#envoyer-une-requête"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Envoyer une requête
&lt;/h4&gt;
&lt;p&gt;
 Une fois que le shield est prêt, nous allons pouvoir commencer à l’utiliser ! Accrochez-vous, les choses amusantes commencent !
&lt;/p&gt;
&lt;h5 id="requête-simple"&gt;
 &lt;a aria-hidden="true" href="#requête-simple"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Requête simple
&lt;/h5&gt;
&lt;p&gt;
 Pour débuter, il va falloir générer une requête pour interroger un serveur dans l’espoir d’obtenir une réponse. Je vous propose de commencer par une chose simple, récupérer une page web très sommaire, celle de
 &lt;a href="http://perdu.com"&gt;
  http://perdu.com
 &lt;/a&gt;
 !
&lt;/p&gt;
&lt;p&gt;
 C’est là que notre variable "client" de type
 &lt;code&gt;
  EthernetClient
 &lt;/code&gt;
 entre enfin en jeu. C’est cette dernière qui va s’occuper des interactions avec la page. Nous allons utiliser sa méthode
 &lt;code&gt;
  connect()
 &lt;/code&gt;
 pour aller nous connecter à un site puis ensuite nous ferons appel à sa méthode
 &lt;code&gt;
  println()
 &lt;/code&gt;
 pour construire notre requête et l’envoyer.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// ... Initialisation précédente ...&lt;/span&gt;

  &lt;span class="hljs-comment"&gt;// On connecte notre Arduino sur "perdu.com" et le port 80 (defaut pour l'http)&lt;/span&gt;
  erreur = client.connect(serveur, &lt;span class="hljs-number"&gt;80&lt;/span&gt;);

  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(erreur == &lt;span class="hljs-number"&gt;1&lt;/span&gt;) {
      &lt;span class="hljs-comment"&gt;// Pas d'erreur ? on continue !&lt;/span&gt;
      Serial.println(&lt;span class="hljs-string"&gt;"Connexion OK, envoi en cours..."&lt;/span&gt;);

      &lt;span class="hljs-comment"&gt;// On construit l'en-tête de la requête&lt;/span&gt;
      client.println(&lt;span class="hljs-string"&gt;"GET / HTTP/1.1"&lt;/span&gt;);
      client.println(&lt;span class="hljs-string"&gt;"Host: perdu.com"&lt;/span&gt;);
      client.println(&lt;span class="hljs-string"&gt;"Connection: close"&lt;/span&gt;);
      client.println();
  } &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; {
    &lt;span class="hljs-comment"&gt;// La connexion a échoué :(&lt;/span&gt;
    Serial.println(&lt;span class="hljs-string"&gt;"Echec de la connexion"&lt;/span&gt;);
    &lt;span class="hljs-keyword"&gt;switch&lt;/span&gt;(erreur) {
      &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;-1&lt;/span&gt;):
        Serial.println(&lt;span class="hljs-string"&gt;"Time out"&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
      &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;-2&lt;/span&gt;):
        Serial.println(&lt;span class="hljs-string"&gt;"Serveur invalide"&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
      &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;-3&lt;/span&gt;):
        Serial.println(&lt;span class="hljs-string"&gt;"Tronque"&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
      &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;-4&lt;/span&gt;):
        Serial.println(&lt;span class="hljs-string"&gt;"Reponse invalide"&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(&lt;span class="hljs-number"&gt;1&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// Problème = on bloque&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Étudions un peu ces quelques lignes.
&lt;/p&gt;
&lt;p&gt;
 Tout d’abord, on va essayer de connecter notre client au serveur de "perdu.com" sur son port 80 qui est le port par défaut du protocole HTTP :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;client.connect(&lt;span class="hljs-string"&gt;"perdu.com"&lt;/span&gt;, &lt;span class="hljs-number"&gt;80&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ensuite, une fois que la connexion semble correcte, on va construire notre requête pas à pas.
Tout d’abord, on explique vouloir faire un
 &lt;code&gt;
  GET
 &lt;/code&gt;
 sur la racine ("/") du site et le tout sous le protocole HTTP version 1.1.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;client.println(&lt;span class="hljs-string"&gt;"GET / HTTP/1.1"&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ensuite, on redéclare le site qui devra faire (héberger, "host" en anglais) la réponse. En l’occurrence on reste sur perdu.com.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;client.println(&lt;span class="hljs-string"&gt;"Host: perdu.com"&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Puis, on signale au serveur que la connexion sera fermée lorsque les données sont transférées.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;client.println(&lt;span class="hljs-string"&gt;"Connection: close"&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Enfin, pour prévenir que l’on vient de finir d’écrire notre en-tête (
 &lt;em&gt;
  header
 &lt;/em&gt;
 ), on envoie une ligne blanche.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;client.println();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 J’ai ensuite rajouté un traitement des erreurs pour savoir ce qui se passe en cas de problème.
&lt;/p&gt;
&lt;h5 id="requête-avec-paramètre"&gt;
 &lt;a aria-hidden="true" href="#requête-avec-paramètre"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Requête avec paramètre
&lt;/h5&gt;
&lt;p&gt;
 Et si l’on voulait passer des informations complémentaires à la page ? Eh bien c’est simple, il suffira juste de modifier la requête GET en lui rajoutant les informations !
Par exemple, admettons que sur perdu.com il y ait une page de recherche "recherche.php" qui prenne un paramètre "m" comme mot-clé de recherche. On aurait alors :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;client.println(&lt;span class="hljs-string"&gt;"GET /recherche.php?m=monmot HTTP/1.1"&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ce serait équivalent alors à aller demander la page "perdu.com/recherche.php?m=monmot", soit la page "recherche.php" avec comme argument de recherche "m" le mot "monmot".
&lt;/p&gt;
&lt;h4 id="lire-une-réponse"&gt;
 &lt;a aria-hidden="true" href="#lire-une-réponse"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Lire une réponse
&lt;/h4&gt;
&lt;p&gt;
 Lorsque la requête est envoyée (après le saut de ligne), le serveur va nous répondre en nous renvoyant la ressource demandée. En l’occurrence se sera la page d’accueil de perdu.com. Eh bien vous savez quoi ? On fera exactement comme avec une voie série. On commencera par regarder si des données sont arrivées, et si c’est le cas, on les lira une à une pour en faire ensuite ce que l’on veut (recomposer des lignes, chercher des choses dedans…)
&lt;/p&gt;
&lt;p&gt;
 Dans l’immédiat, contentons-nous de tout afficher sur la voie série !
&lt;/p&gt;
&lt;p&gt;
 Première étape, vérifier que nous avons bien reçu quelque chose. Pour cela, comme avec Serial, on va utiliser la méthode
 &lt;code&gt;
  available()
 &lt;/code&gt;
 qui nous retourne le nombre de caractères disponibles à la lecture.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;client.available()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Si des choses sont disponibles, on les lit une par une (comment ? Avec
 &lt;code&gt;
  read()
 &lt;/code&gt;
 bien sûr !
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 ) et les envoie en même temps à la voie série :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; carlu = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// on lit les caractères s'il y en a de disponibles&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(client.available()) {
  carlu = client.read();
  Serial.print(carlu);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Enfin, quand tout a été lu, on va vérifier l’état de notre connexion et fermer notre client si la connexion est terminée.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Si on est bien déconnecté.&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (!client.connected()) {
  Serial.println();
  Serial.println(&lt;span class="hljs-string"&gt;"Deconnexion !"&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// On ferme le client&lt;/span&gt;
  client.stop();
  &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(&lt;span class="hljs-number"&gt;1&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// On ne fait plus rien&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Globalement, voici le code pour lire une réponse :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
  &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; carlu = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
  &lt;span class="hljs-comment"&gt;// on lit les caractères s'il y en a de disponibles&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(client.available()) {
    carlu = client.read();
    Serial.print(carlu);
  }

  &lt;span class="hljs-comment"&gt;// Si on est bien déconnecté.&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (!client.connected()) {
    Serial.println();
    Serial.println(&lt;span class="hljs-string"&gt;"Deconnexion !"&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// On ferme le client&lt;/span&gt;
    client.stop();
    &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(&lt;span class="hljs-number"&gt;1&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// On ne fait plus rien&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Avez-vous remarqué, plutôt que de lire tous les caractères avec un
   &lt;code&gt;
    while
   &lt;/code&gt;
   , on n’en lira qu’un seul à la fois par tour dans
   &lt;code&gt;
    loop()
   &lt;/code&gt;
   . C’est un choix de design, avec un while cela marcherait aussi !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="code-complet"&gt;
 &lt;a aria-hidden="true" href="#code-complet"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Code complet
&lt;/h5&gt;
&lt;p&gt;
 En résumé, voici le code complet de la lecture de la page "perdu.com"
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Ces deux bibliothèques sont indispensables pour le shield&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;SPI.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;Ethernet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// L'adresse MAC du shield&lt;/span&gt;
byte mac[] = { &lt;span class="hljs-number"&gt;0x90&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xA2&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xDA&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x0E&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xA5&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x7E&lt;/span&gt; };
&lt;span class="hljs-comment"&gt;// L'adresse IP que prendra le shield&lt;/span&gt;
&lt;span class="hljs-function"&gt;IPAddress &lt;span class="hljs-title"&gt;ip&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;192&lt;/span&gt;,&lt;span class="hljs-number"&gt;168&lt;/span&gt;,&lt;span class="hljs-number"&gt;0&lt;/span&gt;,&lt;span class="hljs-number"&gt;143&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// L'objet qui nous servira à la communication&lt;/span&gt;
EthernetClient client;
&lt;span class="hljs-comment"&gt;// Le serveur à interroger&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; serveur[] = &lt;span class="hljs-string"&gt;"perdu.com"&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// On démarre la voie série pour déboguer&lt;/span&gt;
  Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);

  &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; erreur = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
  &lt;span class="hljs-comment"&gt;// On démarre le shield Ethernet SANS adresse IP (donc donnée via DHCP)&lt;/span&gt;
  erreur = Ethernet.begin(mac);

  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (erreur == &lt;span class="hljs-number"&gt;0&lt;/span&gt;) {
    Serial.println(&lt;span class="hljs-string"&gt;"Parametrage avec ip fixe..."&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// si une erreur a eu lieu cela signifie que l'attribution DHCP&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// ne fonctionne pas. On initialise donc en forçant une IP&lt;/span&gt;
    Ethernet.begin(mac, ip);
  }
  Serial.println(&lt;span class="hljs-string"&gt;"Init..."&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Donne une seconde au shield pour s'initialiser&lt;/span&gt;
  delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
  Serial.println(&lt;span class="hljs-string"&gt;"Pret !"&lt;/span&gt;);

  &lt;span class="hljs-comment"&gt;// On connecte notre Arduino sur "perdu.com" et le port 80 (defaut pour l'http)&lt;/span&gt;
  erreur = client.connect(serveur, &lt;span class="hljs-number"&gt;80&lt;/span&gt;);

  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(erreur == &lt;span class="hljs-number"&gt;1&lt;/span&gt;) {
      &lt;span class="hljs-comment"&gt;// Pas d'erreur ? on continue !&lt;/span&gt;
      Serial.println(&lt;span class="hljs-string"&gt;"Connexion OK, envoi en cours..."&lt;/span&gt;);

      &lt;span class="hljs-comment"&gt;// On construit l'en-tête de la requête&lt;/span&gt;
      client.println(&lt;span class="hljs-string"&gt;"GET / HTTP/1.1"&lt;/span&gt;);
      client.println(&lt;span class="hljs-string"&gt;"Host: perdu.com"&lt;/span&gt;);
      client.println(&lt;span class="hljs-string"&gt;"Connection: close"&lt;/span&gt;);
      client.println();
  } &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; {
    &lt;span class="hljs-comment"&gt;// La connexion a échoué :(&lt;/span&gt;
    Serial.println(&lt;span class="hljs-string"&gt;"Echec de la connexion"&lt;/span&gt;);
    &lt;span class="hljs-keyword"&gt;switch&lt;/span&gt;(erreur) {
      &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;-1&lt;/span&gt;):
        Serial.println(&lt;span class="hljs-string"&gt;"Time out"&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
      &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;-2&lt;/span&gt;):
        Serial.println(&lt;span class="hljs-string"&gt;"Serveur invalide"&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
      &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;-3&lt;/span&gt;):
        Serial.println(&lt;span class="hljs-string"&gt;"Tronque"&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
      &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;-4&lt;/span&gt;):
        Serial.println(&lt;span class="hljs-string"&gt;"Reponse invalide"&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(&lt;span class="hljs-number"&gt;1&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// On bloque la suite&lt;/span&gt;
  }
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
  &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; carlu = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
  &lt;span class="hljs-comment"&gt;// on lit les caractères s'il y en a de disponibles&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(client.available()) {
    carlu = client.read();
    Serial.print(carlu);
  }

  &lt;span class="hljs-comment"&gt;// Si on est bien déconnecté.&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (!client.connected()) {
    Serial.println();
    Serial.println(&lt;span class="hljs-string"&gt;"Deconnexion !"&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// On ferme le client&lt;/span&gt;
    client.stop();
    &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(&lt;span class="hljs-number"&gt;1&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// On ne fait plus rien&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Et voici le résultat que vous devez obtenir dans votre terminal série. Remarquez la présence du header de la réponse que l’on reçoit.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-text"&gt;HTTP/1.1 200 OK
Date: Thu, 26 Mar 2015 16:14:15 GMT
Server: Apache
Last-Modified: Tue, 02 Mar 2010 18:52:21 GMT
ETag: "cc-480d5dd98a340"
Accept-Ranges: bytes
Content-Length: 204
Vary: Accept-Encoding
Connection: close
Content-Type: text/html

&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;Vous Etes Perdu ?&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&amp;lt;h1&amp;gt;Perdu sur l'Internet ?&amp;lt;/h1&amp;gt;&amp;lt;h2&amp;gt;Pas de panique, on va vous aider&amp;lt;/h2&amp;gt;&amp;lt;strong&amp;gt;&amp;lt;pre&amp;gt;    * &amp;lt;----- vous &amp;amp;ecirc;tes ici&amp;lt;/pre&amp;gt;&amp;lt;/strong&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="faire-des-requêtes-en-continu"&gt;
 &lt;a aria-hidden="true" href="#faire-des-requêtes-en-continu"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Faire des requêtes en continu
&lt;/h4&gt;
&lt;p&gt;
 Faire une requête en début de programme c’est bien, mais ce serait mieux de pouvoir la faire quand on veut. Faire évoluer notre programme ne va pourtant pas être si simple…
&lt;/p&gt;
&lt;p&gt;
 Pour commencer, on va ajouter quelques nouvelles variables. La première servira à se souvenir de quand date (via
 &lt;code&gt;
  millis()
 &lt;/code&gt;
 ) la dernière requête faite. Ce sera donc un
 &lt;code&gt;
  long()
 &lt;/code&gt;
 . La seconde sera une constante servant à indiquer le temps minimal devant s’écouler entre deux requêtes. Enfin, la dernière variable sera un booléen servant de
 &lt;em&gt;
  flag
 &lt;/em&gt;
 pour indiquer l’état de la connexion (ouverte ou fermée) entre deux tours de boucle
 &lt;code&gt;
  loop()
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// moment de la dernière requête&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;long&lt;/span&gt; derniereRequete = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// temps minimum entre deux requêtes&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; updateInterval = &lt;span class="hljs-number"&gt;10000&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// mémorise l'état de la connexion entre deux tours de loop&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;bool&lt;/span&gt; etaitConnecte = &lt;span class="hljs-literal"&gt;false&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ensuite, on va créer une fonction sobrement nommée
 &lt;code&gt;
  requete()
 &lt;/code&gt;
 qui se chargera de construire et envoyer la requête. Aucune nouveauté là-dedans, c’est le code que vous connaissez déjà.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;requete&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// On connecte notre Arduino sur "perdu.com" et le port 80 (defaut pour l'http)&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; erreur = client.connect(serveur, &lt;span class="hljs-number"&gt;80&lt;/span&gt;);

  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(erreur == &lt;span class="hljs-number"&gt;1&lt;/span&gt;) {
      &lt;span class="hljs-comment"&gt;// Pas d'erreur ? on continue !&lt;/span&gt;
      Serial.println(&lt;span class="hljs-string"&gt;"Connexion OK, envoi en cours..."&lt;/span&gt;);

      &lt;span class="hljs-comment"&gt;// On construit l'en-tête de la requête&lt;/span&gt;
      client.println(&lt;span class="hljs-string"&gt;"GET / HTTP/1.1"&lt;/span&gt;);
      client.println(&lt;span class="hljs-string"&gt;"Host: perdu.com"&lt;/span&gt;);
      client.println(&lt;span class="hljs-string"&gt;"Connection: close"&lt;/span&gt;);
      client.println();

      &lt;span class="hljs-comment"&gt;// On enregistre le moment d'envoi de la dernière requête&lt;/span&gt;
      derniereRequete = millis();
  } &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; {
    &lt;span class="hljs-comment"&gt;// La connexion a échoué :(&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// On ferme notre client&lt;/span&gt;
    client.stop();
    &lt;span class="hljs-comment"&gt;// On avertit l'utilisateur&lt;/span&gt;
    Serial.println(&lt;span class="hljs-string"&gt;"Echec de la connexion"&lt;/span&gt;);
    &lt;span class="hljs-keyword"&gt;switch&lt;/span&gt;(erreur) {
      &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;-1&lt;/span&gt;):
        Serial.println(&lt;span class="hljs-string"&gt;"Time out"&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
      &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;-2&lt;/span&gt;):
        Serial.println(&lt;span class="hljs-string"&gt;"Serveur invalide"&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
      &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;-3&lt;/span&gt;):
        Serial.println(&lt;span class="hljs-string"&gt;"Tronque"&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
      &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;-4&lt;/span&gt;):
        Serial.println(&lt;span class="hljs-string"&gt;"Reponse invalide"&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 La seule différence ici est que l’on ferme le client si la connexion a un problème et aussi on enregistre le moment auquel a été faite la requête.
&lt;/p&gt;
&lt;p&gt;
 Bien. Maintenant, il faut revoir notre loop.
&lt;/p&gt;
&lt;p&gt;
 Le début ne change pas, on récupère/affiche les caractères s’ils sont disponibles.
&lt;/p&gt;
&lt;p&gt;
 Ensuite, on avait l’étape de fermeture du client si la connexion est fermée. Dans notre cas actuel, on ne doit pas l’arrêter n’importe quand, car sinon une connexion pourrait de nouveau avoir lieu sans que celle-là soit finie. On va donc la fermer QUE si elle était déjà fermée à la toute fin du tour précédent. Voici comme cela peut-être représenté :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// traite les caractères&lt;/span&gt;
  &lt;span class="hljs-comment"&gt;// ...&lt;/span&gt;

  &lt;span class="hljs-comment"&gt;// SI on était connecté au tour précédent&lt;/span&gt;
  &lt;span class="hljs-comment"&gt;// ET que maintenant on est plus connecté&lt;/span&gt;
  &lt;span class="hljs-comment"&gt;// ALORS on ferme la connexion&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (etaitConnecte &amp;amp;&amp;amp; !client.connected()) {
    Serial.println();
    Serial.println(&lt;span class="hljs-string"&gt;"Deconnexion !"&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// On ferme le client&lt;/span&gt;
    client.stop();
  }

  &lt;span class="hljs-comment"&gt;// ...&lt;/span&gt;
  &lt;span class="hljs-comment"&gt;// bricole, traite, calcul, manigance, complote...&lt;/span&gt;
  &lt;span class="hljs-comment"&gt;// ...&lt;/span&gt;

  &lt;span class="hljs-comment"&gt;// enregistre l’état de la connexion (ouvert ou fermé)&lt;/span&gt;
  etaitConnecte = client.connected();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Maintenant, il ne nous reste plus qu’à redéclencher une requête si nos dix secondes se sont écoulées et que la précédente connexion a fini de travailler :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Si on est déconnecté&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// et que cela fait plus de xx secondes qu'on a pas fait de requête&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(!client.connected() &amp;amp;&amp;amp; ((millis() - derniereRequete) &amp;gt; updateInterval)) {
  requete();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 C’est tout clair ? Ci-dessous le code complet pour vous aider à y voir un peu mieux dans l’ensemble
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 .
&lt;/p&gt;
&lt;h5 id="le-code-complet"&gt;
 &lt;a aria-hidden="true" href="#le-code-complet"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le code complet
&lt;/h5&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Ces deux bibliothèques sont indispensables pour le shield&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;SPI.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;Ethernet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// L'adresse MAC du shield&lt;/span&gt;
byte mac[] = { &lt;span class="hljs-number"&gt;0x90&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xA2&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xDA&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x0E&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xA5&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x7E&lt;/span&gt; };
&lt;span class="hljs-comment"&gt;// L'adresse IP que prendra le shield&lt;/span&gt;
&lt;span class="hljs-function"&gt;IPAddress &lt;span class="hljs-title"&gt;ip&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;192&lt;/span&gt;,&lt;span class="hljs-number"&gt;168&lt;/span&gt;,&lt;span class="hljs-number"&gt;0&lt;/span&gt;,&lt;span class="hljs-number"&gt;143&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// L'objet qui nous servira a la communication&lt;/span&gt;
EthernetClient client;
&lt;span class="hljs-comment"&gt;// Le serveur à interroger&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; serveur[] = &lt;span class="hljs-string"&gt;"perdu.com"&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// pour lire les caractères&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; carlu = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// moment de la dernière requête&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;long&lt;/span&gt; derniereRequete = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// temps minimum entre deux requêtes&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; updateInterval = &lt;span class="hljs-number"&gt;10000&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// mémorise l'état de la connexion entre deux tours de loop&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;bool&lt;/span&gt; etaitConnecte = &lt;span class="hljs-literal"&gt;false&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// On démarre la voie série pour déboguer&lt;/span&gt;
  Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);

  &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; erreur = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
  &lt;span class="hljs-comment"&gt;// On démarre le shield Ethernet SANS adresse IP (donc donnée via DHCP)&lt;/span&gt;
  erreur = Ethernet.begin(mac);

  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (erreur == &lt;span class="hljs-number"&gt;0&lt;/span&gt;) {
    Serial.println(&lt;span class="hljs-string"&gt;"Parametrage avec ip fixe..."&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// si une erreur a eu lieu cela signifie que l'attribution DHCP&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// ne fonctionne pas. On initialise donc en forçant une IP&lt;/span&gt;
    Ethernet.begin(mac, ip);
  }
  Serial.println(&lt;span class="hljs-string"&gt;"Init..."&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Donne une seconde au shield pour s'initialiser&lt;/span&gt;
  delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
  Serial.println(&lt;span class="hljs-string"&gt;"Pret !"&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// on lit les caractères s'il y en a de disponibles&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(client.available()) {
    carlu = client.read();
    Serial.print(carlu);
  }

  &lt;span class="hljs-comment"&gt;// SI on était connecté au tour précédent&lt;/span&gt;
  &lt;span class="hljs-comment"&gt;// ET que maintenant on est plus connecté&lt;/span&gt;
  &lt;span class="hljs-comment"&gt;// ALORS on ferme la connexion&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (etaitConnecte &amp;amp;&amp;amp; !client.connected()) {
    Serial.println();
    Serial.println(&lt;span class="hljs-string"&gt;"Deconnexion !"&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// On ferme le client&lt;/span&gt;
    client.stop();
  }

  &lt;span class="hljs-comment"&gt;// Si on est déconnecté&lt;/span&gt;
  &lt;span class="hljs-comment"&gt;// et que cela fait plus de xx secondes qu'on a pas fait de requête&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(!client.connected() &amp;amp;&amp;amp; ((millis() - derniereRequete) &amp;gt; updateInterval)) {
    requete();
  }

  &lt;span class="hljs-comment"&gt;// enregistre l'état de la connexion (ouvert ou fermé)&lt;/span&gt;
  etaitConnecte = client.connected();
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;requete&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// On connecte notre Arduino sur "perdu.com" et le port 80 (defaut pour l'http)&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; erreur = client.connect(serveur, &lt;span class="hljs-number"&gt;80&lt;/span&gt;);

  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(erreur == &lt;span class="hljs-number"&gt;1&lt;/span&gt;) {
      &lt;span class="hljs-comment"&gt;// Pas d'erreur ? on continue !&lt;/span&gt;
      Serial.println(&lt;span class="hljs-string"&gt;"Connexion OK, envoi en cours..."&lt;/span&gt;);

      &lt;span class="hljs-comment"&gt;// On construit l'en-tête de la requête&lt;/span&gt;
      client.println(&lt;span class="hljs-string"&gt;"GET / HTTP/1.1"&lt;/span&gt;);
      client.println(&lt;span class="hljs-string"&gt;"Host: perdu.com"&lt;/span&gt;);
      client.println(&lt;span class="hljs-string"&gt;"Connection: close"&lt;/span&gt;);
      client.println();

      &lt;span class="hljs-comment"&gt;// On enregistre le moment d'envoi de la dernière requête&lt;/span&gt;
      derniereRequete = millis();
  } &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; {
    &lt;span class="hljs-comment"&gt;// La connexion a échoué :(&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// On ferme notre client&lt;/span&gt;
    client.stop();
    &lt;span class="hljs-comment"&gt;// On avertit l'utilisateur&lt;/span&gt;
    Serial.println(&lt;span class="hljs-string"&gt;"Echec de la connexion"&lt;/span&gt;);
    &lt;span class="hljs-keyword"&gt;switch&lt;/span&gt;(erreur) {
      &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;-1&lt;/span&gt;):
        Serial.println(&lt;span class="hljs-string"&gt;"Time out"&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
      &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;-2&lt;/span&gt;):
        Serial.println(&lt;span class="hljs-string"&gt;"Serveur invalide"&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
      &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;-3&lt;/span&gt;):
        Serial.println(&lt;span class="hljs-string"&gt;"Tronque"&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
      &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;-4&lt;/span&gt;):
        Serial.println(&lt;span class="hljs-string"&gt;"Reponse invalide"&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="lintérêt-dun-client"&gt;
 &lt;a aria-hidden="true" href="#lintérêt-dun-client"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’intérêt d’un client
&lt;/h4&gt;
&lt;p&gt;
 En lisant tout ça, vous vous dites peut-être qu’utiliser le shield Ethernet en mode client est un peu inutile. C’est vrai, après tout on ne peut même pas afficher les pages reçues !
&lt;/p&gt;
&lt;p&gt;
 Cependant, avec un peu d’imagination on pourrait facilement voir des utilisations plus que pratiques !
&lt;/p&gt;
&lt;h5 id="télécharger-une-configuration"&gt;
 &lt;a aria-hidden="true" href="#télécharger-une-configuration"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Télécharger une configuration
&lt;/h5&gt;
&lt;p&gt;
 La première idée par exemple pourrait être de mettre à disposition des fichiers de paramètres à l’Arduino. Imaginons par exemple que je fais une application qui dépend des saisons. Mon application pourrait utiliser des moteurs et des capteurs pour faire certaines actions, mais ces dernières pourraient être différentes en fonction du moment de l’année. Plutôt que de stocker 4 ensembles de paramètres dans l’Arduino, cette dernière pourrait vérifier régulièrement en ligne (en interrogeant un petit script que nous aurions fait) pour savoir si quelque chose doit changer. Et voilà, configuration à distance !
&lt;/p&gt;
&lt;h5 id="enregistrer-des-données-en-ligne"&gt;
 &lt;a aria-hidden="true" href="#enregistrer-des-données-en-ligne"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Enregistrer des données en ligne
&lt;/h5&gt;
&lt;p&gt;
 J’ai souvent lu sur des forums que des gens aimeraient pouvoir sauvegarder des choses dans une base de données. Bien entendu, l’Arduino seule ne peut pas le faire, gérer une BDD est bien trop compliqué pour elle. En revanche, elle pourrait facilement interroger des pages en insérant des paramètres dans sa requête. La page qui reçoit alors la requête lirait ce paramètre et s’occuperait de sauvegarder les infos.
Par exemple, on pourrait imaginer la requête
 &lt;code&gt;
  http://mapageweb.com/enregistrer.php?&amp;amp;analog1=123&amp;amp;analog2=28&amp;amp;millis=123456
 &lt;/code&gt;
 . Cette requête possède deux paramètres,
 &lt;strong&gt;
  analog1
 &lt;/strong&gt;
 et
 &lt;strong&gt;
  analog2
 &lt;/strong&gt;
 qui pourraient être les valeurs des entrées analogiques et un dernier "millis" qui pourrait être la valeur de millis() d’Arduino. Notre page "enregistrer.php" ferait alors la sauvegarde dans sa base de données !
Pour construire une telle requête, le code suivant devrait faire l’affaire :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// On construit l'en-tête de la requête&lt;/span&gt;
client.print(&lt;span class="hljs-string"&gt;"GET /enregistrer.php/?analog1="&lt;/span&gt;); &lt;span class="hljs-comment"&gt;//attention, pas de saut de ligne !&lt;/span&gt;
client.print(analogRead(A1));
client.print(&lt;span class="hljs-string"&gt;"&amp;amp;analog2="&lt;/span&gt;);
client.print(analogRead(A2));
client.print(&lt;span class="hljs-string"&gt;"&amp;amp;millis="&lt;/span&gt;);
client.print(millis());
&lt;span class="hljs-comment"&gt;// On finit par le protocole&lt;/span&gt;
client.println(&lt;span class="hljs-string"&gt;" HTTP/1.1"&lt;/span&gt;); &lt;span class="hljs-comment"&gt;//ce coup-ci, saut de ligne pour valider !&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// on aurait alors :&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// "GET /enregistrer.php/?analog1=&amp;lt;valeur-de-A1&amp;gt;&amp;amp;analog2=&amp;lt;valeur-de-A2&amp;gt;&amp;amp;millis=&amp;lt;valeur-de-millis()&amp;gt; HTTP/1.1"&lt;/span&gt;
client.println(&lt;span class="hljs-string"&gt;"Host: mapageweb.com"&lt;/span&gt;);
client.println(&lt;span class="hljs-string"&gt;"Connection: close"&lt;/span&gt;);
client.println();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="sûrement-plein-dautres-choses"&gt;
 &lt;a aria-hidden="true" href="#sûrement-plein-dautres-choses"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sûrement plein d’autres choses !
&lt;/h5&gt;
&lt;p&gt;
 Il existe surement un paquet d’autres idées auquel je n’ai pas pensé !
&lt;/p&gt;
&lt;h3 id="exercice-lire-luptime-de-eskimonfr"&gt;
 &lt;a aria-hidden="true" href="#exercice-lire-luptime-de-eskimonfr"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Exercice, lire l’uptime de Eskimon.fr
&lt;/h3&gt;
&lt;p&gt;
 Pour finir ce chapitre je vous propose un petit exercice, allez lire l’uptime (temps écoulé depuis la mise en route du système) de mon blog, eskimon.fr.
&lt;/p&gt;
&lt;h4 id="consigne"&gt;
 &lt;a aria-hidden="true" href="#consigne"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Consigne
&lt;/h4&gt;
&lt;p&gt;
 Pour cela, je vous ai concocté une petite page juste pour vous qui renvoie uniquement cette information, sans tout le bazar HTTP qui va avec une page classique. Vous obtiendrez ainsi simplement le header de la requête et la valeur brute de l’uptime.
&lt;/p&gt;
&lt;p&gt;
 La page à interroger pour votre requête est :
 &lt;code&gt;
  http://eskimon.fr/public/arduino.php
 &lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
 Essayer de modifier votre code pour afficher cette information
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;p&gt;
 Vous êtes maintenant en mesure de vous balader sur Internet pour aller y chercher des informations. Bienvenue dans l’IoT, l’Internet of Things !
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Arduino et Ethernet : serveur</title><link href="https://eskimon.fr/tuto-arduino-803-arduino-et-ethernet-serveur" rel="alternate"></link><published>2015-01-16T17:52:00+01:00</published><updated>2015-01-16T17:52:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2015-01-16:/tuto-arduino-803-arduino-et-ethernet-serveur</id><summary type="html">&lt;p&gt;
 Dans ce chapitre, l’Arduino sera maintenant responsable de l’envoi des données vers le monde extérieur. On dit qu’elle agit en serveur. Ce sera donc un outil externe (logiciel particulier, navigateur etc) qui viendra l’interroger et à ce moment-là, elle renverra les informations demandées. On pourra aussi …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Dans ce chapitre, l’Arduino sera maintenant responsable de l’envoi des données vers le monde extérieur. On dit qu’elle agit en serveur. Ce sera donc un outil externe (logiciel particulier, navigateur etc) qui viendra l’interroger et à ce moment-là, elle renverra les informations demandées. On pourra aussi, via un site externe, lui envoyer des ordres pour faire des actions.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;a href="#préparer-larduino"&gt;
   Préparer l’Arduino
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#répondre-et-servir-des-données"&gt;
   Répondre et servir des données
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#agir-sur-une-requête-plus-précise"&gt;
    Agir sur une requête plus précise
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#répondre-à-la-requête"&gt;
     Répondre à la requête
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#lire-la-requête"&gt;
      Lire la requête
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#préparation"&gt;
       Préparation
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#récuperer-lurl"&gt;
       Récuperer l’URL
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#interpréter-lurl"&gt;
       Interpréter l’URL
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#agir-sur-les-broches"&gt;
       Agir sur les broches
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#on-assemble-"&gt;
       On assemble !!
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#code-complet"&gt;
     Code complet
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#sortir-de-son-réseau-privé"&gt;
    Sortir de son réseau privé
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#le-souci"&gt;
     Le souci
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#la-solution"&gt;
     La solution
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#faire-une-interface-pour-dialoguer-avec-son-arduino"&gt;
   Faire une interface pour dialoguer avec son Arduino
  &lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="préparer-larduino"&gt;
 &lt;a aria-hidden="true" href="#préparer-larduino"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Préparer l’Arduino
&lt;/h3&gt;
&lt;p&gt;
 L’utilisation de l’Arduino en mode serveur est sûrement plus courante que celle en client. Cette partie devrait donc particulièrement vous intéresser.
Deux grands rôles peuvent être accomplis :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  L’envoi de données
  &lt;em&gt;
   à la demande
  &lt;/em&gt;
  (l’utilisateur vient demander les données quand il les veut) ;
 &lt;/li&gt;
 &lt;li&gt;
  La réception d’ordre pour effectuer des actions.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Ces deux rôles ne sont pas exclusifs, ils peuvent tout à fait cohabiter. Mais dans un premier temps, reparlons un peu de ce qu’est un serveur.
&lt;/p&gt;
&lt;p&gt;
 Nous l’avons vu dans le premier chapitre, un serveur est chargé de réceptionner du trafic, l’interpréter puis agir en conséquence. Pour cela, il possède un
 &lt;strong&gt;
  port
 &lt;/strong&gt;
 particulier qui lui est dédié. Chaque octet arrivant sur ce port lui est donc destiné. On dit que le serveur
 &lt;strong&gt;
  écoute
 &lt;/strong&gt;
 sur un
 &lt;strong&gt;
  port
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 C’est donc à partir de cela que nous allons pouvoir mettre en place notre serveur !
&lt;/p&gt;
&lt;p&gt;
 Comme pour le client, il va falloir commencer par les options du shield (MAC, IP…) afin que ce dernier puisse se connecter à votre box/routeur.
On retrouve donc un setup similaire au chapitre précédent :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Ces deux bibliothèques sont indispensables pour le shield&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;SPI.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;Ethernet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// L'adresse MAC du shield&lt;/span&gt;
byte mac[] = { &lt;span class="hljs-number"&gt;0x90&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xA2&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xDA&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x0E&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xA5&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x7E&lt;/span&gt; };
&lt;span class="hljs-comment"&gt;// L'adresse IP que prendra le shield&lt;/span&gt;
&lt;span class="hljs-function"&gt;IPAddress &lt;span class="hljs-title"&gt;ip&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;192&lt;/span&gt;,&lt;span class="hljs-number"&gt;168&lt;/span&gt;,&lt;span class="hljs-number"&gt;0&lt;/span&gt;,&lt;span class="hljs-number"&gt;143&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// On démarre la voie série pour déboguer&lt;/span&gt;
  Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);

  &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; erreur = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
  &lt;span class="hljs-comment"&gt;// On démarre le shield Ethernet SANS adresse IP (donc donnée via DHCP)&lt;/span&gt;
  erreur = Ethernet.begin(mac);

  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (erreur == &lt;span class="hljs-number"&gt;0&lt;/span&gt;) {
    Serial.println(&lt;span class="hljs-string"&gt;"Parametrage avec ip fixe..."&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// si une erreur a eu lieu cela signifie que l'attribution DHCP&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// ne fonctionne pas. On initialise donc en forçant une IP&lt;/span&gt;
    Ethernet.begin(mac, ip);
  }
  Serial.println(&lt;span class="hljs-string"&gt;"Init..."&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Donne une seconde au shield pour s'initialiser&lt;/span&gt;
  delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
  Serial.print(&lt;span class="hljs-string"&gt;"Pret !"&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Bien. Au chapitre précédent cependant nous avions des variables concernant le
 &lt;em&gt;
  client
 &lt;/em&gt;
 . Ici, de manière similaire nous aurons donc des variables concernant le
 &lt;strong&gt;
  serveur
 &lt;/strong&gt;
 .
La première et unique nouvelle chose sera donc une variable de type
 &lt;code&gt;
  EthernetServer
 &lt;/code&gt;
 qui prendra un paramètre : le port d’écoute. J’ai choisi 4200 de manière un peu aléatoire, car je sais qu’il n’est pas utilisé sur mon réseau. Une liste des ports les plus souvent utilisés peut être
 &lt;a href="http://fr.wikipedia.org/wiki/Liste_de_ports_logiciels"&gt;
  trouvée sur Wikipédia
 &lt;/a&gt;
 .
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Initialise notre serveur&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// Ce dernier écoutera sur le port 4200&lt;/span&gt;
&lt;span class="hljs-function"&gt;EthernetServer &lt;span class="hljs-title"&gt;serveur&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;4200&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Puis, à la fin de notre setup, il faudra démarrer le serveur avec la commande suivante :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;serveur.begin();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 En résumé, on aura donc le code suivant pour l’initialisation :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Ces deux bibliothèques sont indispensables pour le shield&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;SPI.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;Ethernet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// L'adresse MAC du shield&lt;/span&gt;
byte mac[] = { &lt;span class="hljs-number"&gt;0x90&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xA2&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xDA&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x0E&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xA5&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x7E&lt;/span&gt; };
&lt;span class="hljs-comment"&gt;// L'adresse IP que prendra le shield&lt;/span&gt;
&lt;span class="hljs-function"&gt;IPAddress &lt;span class="hljs-title"&gt;ip&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;192&lt;/span&gt;,&lt;span class="hljs-number"&gt;168&lt;/span&gt;,&lt;span class="hljs-number"&gt;0&lt;/span&gt;,&lt;span class="hljs-number"&gt;143&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// Initialise notre serveur&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// Ce dernier écoutera sur le port 4200&lt;/span&gt;
&lt;span class="hljs-function"&gt;EthernetServer &lt;span class="hljs-title"&gt;serveur&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;4200&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// On démarre la voie série pour déboguer&lt;/span&gt;
  Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);

  &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; erreur = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
  &lt;span class="hljs-comment"&gt;// On démarre le shield Ethernet SANS adresse IP (donc donnée via DHCP)&lt;/span&gt;
  erreur = Ethernet.begin(mac);

  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (erreur == &lt;span class="hljs-number"&gt;0&lt;/span&gt;) {
    Serial.println(&lt;span class="hljs-string"&gt;"Parametrage avec ip fixe..."&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// si une erreur a eu lieu cela signifie que l'attribution DHCP&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// ne fonctionne pas. On initialise donc en forçant une IP&lt;/span&gt;
    Ethernet.begin(mac, ip);
  }
  Serial.println(&lt;span class="hljs-string"&gt;"Init..."&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Donne une seconde au shield pour s'initialiser&lt;/span&gt;
  delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// On lance le serveur&lt;/span&gt;
  serveur.begin();
  Serial.print(&lt;span class="hljs-string"&gt;"Pret !"&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Et voilà, votre serveur Arduino est en train de surveiller ce qui se passe sur le réseau !
&lt;/p&gt;
&lt;h3 id="répondre-et-servir-des-données"&gt;
 &lt;a aria-hidden="true" href="#répondre-et-servir-des-données"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Répondre et servir des données
&lt;/h3&gt;
&lt;p&gt;
 Maintenant que le serveur est prêt et attend qu’on lui parle, on va pouvoir coder la partie "communication avec le demandeur".
La première étape va être de vérifier si un client attend une réponse de la part de notre serveur. On va donc retrouver notre objet EthernetClient vu au chapitre précédent et une fonction du serveur que l’on aurait presque pu deviner :
 &lt;code&gt;
  available()
 &lt;/code&gt;
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Regarde si un client est connecté et attend une réponse&lt;/span&gt;
EthernetClient client = serveur.available();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ensuite les choix sont simples. Soit un client (donc une application externe) est connecté avec l’Arduino et veut interagir, soit il n’y a personne et donc on ne fait… rien (ou autre chose). Pour cela, on va simplement regarder si client vaut autre chose que zéro. Si c’est le cas, alors on traite les données.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (client) {
  &lt;span class="hljs-comment"&gt;// Quelqu'un est connecté !&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Maintenant, on va faire au plus simple. On va considérer que l’on renvoie toujours les mêmes informations : la valeur de l’entrée analogique 0 et la variable millis(), quelle que soit la requête du client. On va alors se retrouver dans le cas similaire au chapitre précédent ou il faudra simplement construire une requête pour renvoyer des données.
Comme j’aime les choses simples, j’ai décidé de ne pas renvoyer une page web (trop verbeux), mais juste du texte au
 &lt;a href="http://fr.wikipedia.org/wiki/JavaScript_Object_Notation"&gt;
  format JSON
 &lt;/a&gt;
 qui est simple à lire et à fabriquer.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Le HTML demande
   &lt;strong&gt;
    BEAUCOUP
   &lt;/strong&gt;
   trop de contenu texte à envoyer pour afficher une information utile. Soyons clairs, un système embarqué comme Arduino n’est
   &lt;strong&gt;
    pas fait pour afficher des pages web
   &lt;/strong&gt;
   , il faut pouvoir renvoyer des informations de manière
   &lt;strong&gt;
    simple et concise
   &lt;/strong&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Il faudra comme pour le client commencer par renvoyer un header. Le nôtre sera simple et possèdera seulement deux informations : le protocole utilisé avec le code de retour (encore http 1.1 et 200 pour dire que tout s’est bien passé) ainsi que le type mime du contenu renvoyé (en l’occurrence "application/json"). Si vous renvoyez de l’html, ce serait "text/html" par exemple.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Tout d'abord le code de réponse 200 = réussite&lt;/span&gt;
client.println(&lt;span class="hljs-string"&gt;"HTTP/1.1 200 OK"&lt;/span&gt;);
&lt;span class="hljs-comment"&gt;// Puis le type mime du contenu renvoyé, du json&lt;/span&gt;
client.println(&lt;span class="hljs-string"&gt;"Content-Type: application/json"&lt;/span&gt;);
&lt;span class="hljs-comment"&gt;// Et c'est tout !&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// On envoie une ligne vide pour signaler la fin du header&lt;/span&gt;
client.println();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Une fois le header envoyé, on construit et envoie notre réponse json. C’est assez simple, il suffit de bien former le texte en envoyant les données dans le bon ordre avec les bons marqueurs.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Puis on commence notre JSON par une accolade ouvrante&lt;/span&gt;
client.println(&lt;span class="hljs-string"&gt;"{"&lt;/span&gt;);
&lt;span class="hljs-comment"&gt;// On envoi la première clé : "uptime"&lt;/span&gt;
client.print(&lt;span class="hljs-string"&gt;"\t\"uptime (ms)\": "&lt;/span&gt;);
&lt;span class="hljs-comment"&gt;// Puis la valeur de l'uptime&lt;/span&gt;
client.print(millis());
&lt;span class="hljs-comment"&gt;//Une petite virgule pour séparer les deux clés&lt;/span&gt;
client.println(&lt;span class="hljs-string"&gt;","&lt;/span&gt;);
&lt;span class="hljs-comment"&gt;// Et on envoie la seconde nommée "analog 0"&lt;/span&gt;
client.print(&lt;span class="hljs-string"&gt;"\t\"analog 0\": "&lt;/span&gt;);
client.println(analogRead(A0));
&lt;span class="hljs-comment"&gt;// Et enfin on termine notre JSON par une accolade fermante&lt;/span&gt;
client.println(&lt;span class="hljs-string"&gt;"}"&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 On a presque fini !
&lt;/p&gt;
&lt;p&gt;
 Une fois la réponse envoyée, on va faire une toute petite pause pour laisser le temps aux données de partir et enfin on fera le canal de communication avec le client.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Donne le temps au client de prendre les données&lt;/span&gt;
delay(&lt;span class="hljs-number"&gt;10&lt;/span&gt;);
&lt;span class="hljs-comment"&gt;// Ferme la connexion avec le client&lt;/span&gt;
client.stop();
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Et voilà !
&lt;/p&gt;
&lt;p&gt;
 Il est maintenant temps de tester. Branchez votre Arduino, connectez-la au réseau et allez sur la page ip:port que vous avez paramétrée avec votre navigateur (en l’occurrence
 &lt;a href="http://192.168.0.143:4200/"&gt;
  http://192.168.0.143:4200/
 &lt;/a&gt;
 pour moi). Si tout se passe bien, aux valeurs près vous obtiendrez quelque chose de similaire à ceci :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-javascript"&gt;{
    &lt;span class="hljs-string"&gt;"uptime (ms)"&lt;/span&gt;: &lt;span class="hljs-number"&gt;18155&lt;/span&gt;,
    &lt;span class="hljs-string"&gt;"analog 0"&lt;/span&gt;: &lt;span class="hljs-number"&gt;386&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Génial, non ?
&lt;/p&gt;
&lt;p&gt;
 Voici le code complet pour faire tout cela :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Ces deux bibliothèques sont indispensables pour le shield&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;SPI.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;Ethernet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// L'adresse MAC du shield&lt;/span&gt;
byte mac[] = { &lt;span class="hljs-number"&gt;0x90&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xA2&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xDA&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x0E&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xA5&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x7E&lt;/span&gt; };
&lt;span class="hljs-comment"&gt;// L'adresse IP que prendra le shield&lt;/span&gt;
&lt;span class="hljs-function"&gt;IPAddress &lt;span class="hljs-title"&gt;ip&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;192&lt;/span&gt;,&lt;span class="hljs-number"&gt;168&lt;/span&gt;,&lt;span class="hljs-number"&gt;0&lt;/span&gt;,&lt;span class="hljs-number"&gt;143&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// Initialise notre serveur&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// Ce dernier écoutera sur le port 4200&lt;/span&gt;
&lt;span class="hljs-function"&gt;EthernetServer &lt;span class="hljs-title"&gt;serveur&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;4200&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// On démarre la voie série pour déboguer&lt;/span&gt;
  Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);

  &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; erreur = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
  &lt;span class="hljs-comment"&gt;// On démarre le shield Ethernet SANS adresse IP (donc donnée via DHCP)&lt;/span&gt;
  erreur = Ethernet.begin(mac);

  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (erreur == &lt;span class="hljs-number"&gt;0&lt;/span&gt;) {
    Serial.println(&lt;span class="hljs-string"&gt;"Parametrage avec ip fixe..."&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// si une erreur a eu lieu cela signifie que l'attribution DHCP&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// ne fonctionne pas. On initialise donc en forçant une IP&lt;/span&gt;
    Ethernet.begin(mac, ip);
  }
  Serial.println(&lt;span class="hljs-string"&gt;"Init..."&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Donne une seconde au shield pour s'initialiser&lt;/span&gt;
  delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// On lance le serveur&lt;/span&gt;
  serveur.begin();
  Serial.print(&lt;span class="hljs-string"&gt;"Pret !"&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// Regarde si un client est connecté et attend une réponse&lt;/span&gt;
  EthernetClient client = serveur.available();
  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (client) {
    &lt;span class="hljs-comment"&gt;// Quelqu'un est connecté !&lt;/span&gt;
    Serial.print(&lt;span class="hljs-string"&gt;"On envoi !"&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// On fait notre en-tête&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// Tout d'abord le code de réponse 200 = réussite&lt;/span&gt;
    client.println(&lt;span class="hljs-string"&gt;"HTTP/1.1 200 OK"&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// Puis le type mime du contenu renvoyé, du json&lt;/span&gt;
    client.println(&lt;span class="hljs-string"&gt;"Content-Type: application/json"&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// Et c'est tout !&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// On envoie une ligne vide pour signaler la fin du header&lt;/span&gt;
    client.println();

    &lt;span class="hljs-comment"&gt;// Puis on commence notre JSON par une accolade ouvrante&lt;/span&gt;
    client.println(&lt;span class="hljs-string"&gt;"{"&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// On envoie la première clé : "uptime"&lt;/span&gt;
    client.print(&lt;span class="hljs-string"&gt;"\t\"uptime (ms)\": "&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// Puis la valeur de l'uptime&lt;/span&gt;
    client.print(millis());
    &lt;span class="hljs-comment"&gt;//Une petite virgule pour séparer les deux clés&lt;/span&gt;
    client.println(&lt;span class="hljs-string"&gt;","&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// Et on envoie la seconde nommée "analog 0"&lt;/span&gt;
    client.print(&lt;span class="hljs-string"&gt;"\t\"analog 0\": "&lt;/span&gt;);
    client.println(analogRead(A0));
    &lt;span class="hljs-comment"&gt;// Et enfin on termine notre JSON par une accolade fermante&lt;/span&gt;
    client.println(&lt;span class="hljs-string"&gt;"}"&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// Donne le temps au client de prendre les données&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;10&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// Ferme la connexion avec le client&lt;/span&gt;
    client.stop();
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   S’il faut encore vous convaincre, sachez que cet exemple affiche environ 50 caractères, donc 50 octets (plus le header) à envoyer. La même chose en HTML proprement formaté aurait demandé au grand minimum le double.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="agir-sur-une-requête-plus-précise"&gt;
 &lt;a aria-hidden="true" href="#agir-sur-une-requête-plus-précise"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Agir sur une requête plus précise
&lt;/h3&gt;
&lt;p&gt;
 Nous savons maintenant envoyer des données vers notre shield, mais il pourrait être sympa de pouvoir en interpréter et ainsi interagir avec le shield. Voyons voir comment, mais avant tout un petit avertissement :
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   On ne va pas se mentir, faire cela demande un peu de bidouille car il faut être à l’aise avec la manipulation de chaîne de caractères. Ce type de code est difficilement généralisable ce qui signifie qu’il faut bien souvent développer pour son cas précis. Ce qui sera exposé ici sera donc un "exemple d’application pour faire comprendre".
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Notre objectif va être simple, on doit être capable de recevoir et interpréter les choses suivantes :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Un premier paramètre sera "b" signifiant "broches". Il indiquera l’état des broches 3, 4, 5. Si une broche est dans la liste, alors elle est à 1, sinon 0
 &lt;/li&gt;
 &lt;li&gt;
  Un second paramètre sera "p" et indiquera le rapport cyclique (entier entre 0 et 255) d’une pwm sur la broche 6.
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   Enfin, dans tous les cas on renvoie un json possédant les informations suivantes :
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    L’uptime de l’Arduino (millis)
   &lt;/li&gt;
   &lt;li&gt;
    L’état des broches 3, 4 et 5
   &lt;/li&gt;
   &lt;li&gt;
    La valeur de la PWM de la broche 6
   &lt;/li&gt;
   &lt;li&gt;
    La lecture analogique de la broche A0
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Démarrons par la fin et avec les choses simples, une fonction pour renvoyer le json.
&lt;/p&gt;
&lt;p&gt;
 En cadeau voici le schéma !
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Ethernet, montage" src="./images/uploaded/tuto-arduino-803-arduino-et-ethernet-serveur/ethernet-montage.png"/&gt;
 &lt;figcaption&gt;
  Ethernet, montage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Ethernet, schéma" src="./images/uploaded/tuto-arduino-803-arduino-et-ethernet-serveur/ethernet-schema.png"/&gt;
 &lt;figcaption&gt;
  Ethernet, schéma
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="répondre-à-la-requête"&gt;
 &lt;a aria-hidden="true" href="#répondre-à-la-requête"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Répondre à la requête
&lt;/h4&gt;
&lt;p&gt;
 On l’a vu plus tôt, répondre à une requête n’est pas très compliqué et construire un json non plus. Je vais donc simplement vous poster le code de la fonction
 &lt;code&gt;
  repondre()
 &lt;/code&gt;
 avec des commentaires en espérant que cela suffise. Rien de nouveau par rapport aux choses vues ci-dessus.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;repondre&lt;/span&gt;&lt;span class="hljs-params"&gt;(EthernetClient client)&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// La fonction prend un client en argument&lt;/span&gt;

  Serial.println(&lt;span class="hljs-string"&gt;"\nRepondre"&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// debug&lt;/span&gt;
  &lt;span class="hljs-comment"&gt;// On fait notre en-tête&lt;/span&gt;
  &lt;span class="hljs-comment"&gt;// Tout d'abord le code de réponse 200 = réussite&lt;/span&gt;
  client.println(&lt;span class="hljs-string"&gt;"HTTP/1.1 200 OK"&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Puis le type mime du contenu renvoyé, du json&lt;/span&gt;
  client.println(&lt;span class="hljs-string"&gt;"Content-Type: application/json"&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Autorise le cross origin&lt;/span&gt;
  client.println(&lt;span class="hljs-string"&gt;"Access-Control-Allow-Origin: *"&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Et c'est tout !&lt;/span&gt;
  &lt;span class="hljs-comment"&gt;// On envoi une ligne vide pour signaler la fin du header&lt;/span&gt;
  client.println();

  &lt;span class="hljs-comment"&gt;// Puis on commence notre JSON par une accolade ouvrante&lt;/span&gt;
  client.println(&lt;span class="hljs-string"&gt;"{"&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// On envoie la première clé : "uptime"&lt;/span&gt;
  client.print(&lt;span class="hljs-string"&gt;"\t\"uptime\": "&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Puis la valeur de l'uptime&lt;/span&gt;
  client.print(millis());
  &lt;span class="hljs-comment"&gt;//Une petite virgule pour séparer les deux clés&lt;/span&gt;
  client.println(&lt;span class="hljs-string"&gt;","&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Et on envoie la seconde nommée "analog 0"&lt;/span&gt;
  client.print(&lt;span class="hljs-string"&gt;"\t\"A0\": "&lt;/span&gt;);
  client.print(analogRead(A0));
  client.println(&lt;span class="hljs-string"&gt;","&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Puis la valeur de la PWM sur la broche 6&lt;/span&gt;
  client.print(&lt;span class="hljs-string"&gt;"\t\"pwm\": "&lt;/span&gt;);
  client.print(pwm, DEC);
  client.println(&lt;span class="hljs-string"&gt;","&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Dernières valeurs, les broches (elles-mêmes dans un tableau)&lt;/span&gt;
  client.println(&lt;span class="hljs-string"&gt;"\t\"broches\": {"&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// La broche 3&lt;/span&gt;
  client.print(&lt;span class="hljs-string"&gt;"\t\t\"3\": "&lt;/span&gt;);
  client.print(digitalRead(&lt;span class="hljs-number"&gt;3&lt;/span&gt;));
  client.println(&lt;span class="hljs-string"&gt;","&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// La broche 4&lt;/span&gt;
  client.print(&lt;span class="hljs-string"&gt;"\t\t\"4\": "&lt;/span&gt;);
  client.print(digitalRead(&lt;span class="hljs-number"&gt;4&lt;/span&gt;));
  client.println(&lt;span class="hljs-string"&gt;","&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// La broche 5&lt;/span&gt;
  client.print(&lt;span class="hljs-string"&gt;"\t\t\"5\": "&lt;/span&gt;);
  client.println(digitalRead(&lt;span class="hljs-number"&gt;5&lt;/span&gt;));
  client.println(&lt;span class="hljs-string"&gt;"\t}"&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Et enfin on termine notre JSON par une accolade fermante&lt;/span&gt;
  client.println(&lt;span class="hljs-string"&gt;"}"&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="lire-la-requête"&gt;
 &lt;a aria-hidden="true" href="#lire-la-requête"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Lire la requête
&lt;/h4&gt;
&lt;p&gt;
 Lorsque l’on reçoit une requête, il faut la traiter. Avez-vous essayé de faire un
 &lt;code&gt;
  Serial.print()
 &lt;/code&gt;
 des caractères reçus lors des demandes ? Vous pouvez remarquer que la première ligne est toujours "GET /… HTTP/1.1". Avec
 &lt;code&gt;
  GET
 &lt;/code&gt;
 qui est "l’action",
 &lt;code&gt;
  /...
 &lt;/code&gt;
 l’url demandée et
 &lt;code&gt;
  HTTP/1.1
 &lt;/code&gt;
 le protocole utilisé, on a tout ce qu’il faut pour (ré)agir ! Par exemple, si on reçoit la requête
 &lt;code&gt;
  GET /?b=3,4&amp;amp;p=42 HTTP/1.1
 &lt;/code&gt;
 , on aura "juste" à traiter la demande pour extraire le numéro des broches à allumer (3 et 4 mais pas 5) et la valeur du rapport cyclique à appliquer pour la PWM (42).
Voyons comment faire.
&lt;/p&gt;
&lt;h5 id="préparation"&gt;
 &lt;a aria-hidden="true" href="#préparation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Préparation
&lt;/h5&gt;
&lt;p&gt;
 Tout d’abord, on va réserver un tableau de caractères pour le traitement des données. Dans notre cas, 100 caractères devraient largement faire l’affaire. On va aussi déclarer quelques variables pour stocker l’état des broches à changer.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; *url = (&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; *)&lt;span class="hljs-built_in"&gt;malloc&lt;/span&gt;(&lt;span class="hljs-number"&gt;100&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// L'url reçue à stocker&lt;/span&gt;
&lt;span class="hljs-comment"&gt;//char url[100]; // équivalent à la ligne du dessus mais qui ne semble pas vouloir fonctionner&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; index = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// index indiquant où l'on est rendu dans la chaine&lt;/span&gt;
boolean etats[&lt;span class="hljs-number"&gt;3&lt;/span&gt;] = {LOW, LOW, LOW}; &lt;span class="hljs-comment"&gt;// L'état des 3 sorties&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; pwm = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// La valeur de la pwm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Une fois cela fait, nous allons devoir passer à la récupération de la première chaîne envoyée par le client.
&lt;/p&gt;
&lt;h5 id="récuperer-lurl"&gt;
 &lt;a aria-hidden="true" href="#récuperer-lurl"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Récuperer l’URL
&lt;/h5&gt;
&lt;p&gt;
 C’est parti, faisons notre loop ! On va commencer comme avant, en allant lire la présence d’un client.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// Regarde si un client est connecté et attend une réponse&lt;/span&gt;
  EthernetClient client = serveur.available();
  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (client) {
    url = &lt;span class="hljs-string"&gt;""&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// on remet à zéro notre chaîne tampon&lt;/span&gt;
    index = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    &lt;span class="hljs-comment"&gt;// traitement&lt;/span&gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Si un client est présent, on va regarder s’il a des données à nous donner tant qu’il est connecté (car s’il ne se déconnecte pas, pas la peine de perdre du temps avec lui !).
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// Regarde si un client est connecté et attend une réponse&lt;/span&gt;
  EthernetClient client = serveur.available();
  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (client) { &lt;span class="hljs-comment"&gt;// Un client est là ?&lt;/span&gt;
    url = &lt;span class="hljs-string"&gt;""&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// on remet à zéro notre chaîne tampon&lt;/span&gt;
    index = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(client.connected()) { &lt;span class="hljs-comment"&gt;// Tant que le client est connecté&lt;/span&gt;
      &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(client.available()) { &lt;span class="hljs-comment"&gt;// A-t-il des choses à dire ?&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// traitement des infos du client&lt;/span&gt;
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Maintenant que l’on sait que le client est là et nous parle, on va l’écouter en lisant les caractères reçus.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// Regarde si un client est connecté et attend une réponse&lt;/span&gt;
  EthernetClient client = serveur.available();
  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (client) { &lt;span class="hljs-comment"&gt;// Un client est là ?&lt;/span&gt;
    url = &lt;span class="hljs-string"&gt;""&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// on remet à zéro notre chaîne tampon&lt;/span&gt;
    index = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(client.connected()) { &lt;span class="hljs-comment"&gt;// Tant que le client est connecté&lt;/span&gt;
      &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(client.available()) { &lt;span class="hljs-comment"&gt;// A-t-il des choses à dire ?&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// traitement des infos du client&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; carlu = client.read(); &lt;span class="hljs-comment"&gt;//on lit ce qu'il raconte&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(carlu != &lt;span class="hljs-string"&gt;'\n'&lt;/span&gt;) { &lt;span class="hljs-comment"&gt;// On est en fin de chaîne ?&lt;/span&gt;
          &lt;span class="hljs-comment"&gt;// non ! alors on stocke le caractère&lt;/span&gt;
          url[index] = carlu;
          index++;
        } &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; {
          &lt;span class="hljs-comment"&gt;// on a fini de lire ce qui nous intéresse&lt;/span&gt;
          &lt;span class="hljs-comment"&gt;// on marque la fin de l'url (caractère de fin de chaîne)&lt;/span&gt;
          url[index] = &lt;span class="hljs-string"&gt;'';
          // + TRAITEMENT
          // on quitte le while
          break;
        }
      }
    }
    // Donne le temps au client de prendre les données
    delay(10);
    // Ferme la connexion avec le client
    client.stop();
  }
}
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="interpréter-lurl"&gt;
 &lt;a aria-hidden="true" href="#interpréter-lurl"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Interpréter l’URL
&lt;/h5&gt;
&lt;p&gt;
 Maintenant que nous avons la chaîne du client, il faut l’interpréter pour lire les valeurs des paramètres.
Tout d’abord, on commencera par remettre les anciens paramètres à zéro. Ensuite, on va parcourir les caractères à la recherche de marqueur connu : b et p. Ce n’est pas ce qu’il y a de plus simple, mais vous allez voir avec un peu de méthode on y arrive !
Rappel : Nous cherchons à interpréter
 &lt;code&gt;
  GET /?b=3,4&amp;amp;p=42 HTTP/1.1
 &lt;/code&gt;
&lt;/p&gt;
&lt;p&gt;
 PS : le code est "volontairement" un peu plus lourd, car je fais des tests évitant les problèmes si quelqu’un écrit une URL un peu farfelue (sans le "b" ou le "p").
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;boolean &lt;span class="hljs-title"&gt;interpreter&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// On commence par mettre à zéro tous les états&lt;/span&gt;
  etats[&lt;span class="hljs-number"&gt;0&lt;/span&gt;] = LOW;
  etats[&lt;span class="hljs-number"&gt;1&lt;/span&gt;] = LOW;
  etats[&lt;span class="hljs-number"&gt;2&lt;/span&gt;] = LOW;
  pwm = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

  &lt;span class="hljs-comment"&gt;// Puis maintenant on va chercher les caractères/marqueurs un par un.&lt;/span&gt;
  index = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// Index pour se promener dans la chaîne (commence à 4 pour enlever "GET "&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(url[index&lt;span class="hljs-number"&gt;-1&lt;/span&gt;] != &lt;span class="hljs-string"&gt;'b'&lt;/span&gt; &amp;amp;&amp;amp; url[index] != &lt;span class="hljs-string"&gt;'='&lt;/span&gt;) { &lt;span class="hljs-comment"&gt;// On commence par chercher le "b="&lt;/span&gt;
    index++; &lt;span class="hljs-comment"&gt;// Passe au caractère suivant&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(index == &lt;span class="hljs-number"&gt;100&lt;/span&gt;) {
      &lt;span class="hljs-comment"&gt;// On est rendu trop loin !&lt;/span&gt;
      Serial.println(&lt;span class="hljs-string"&gt;"Oups, probleme dans la recherche de 'b='"&lt;/span&gt;);
      &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-literal"&gt;false&lt;/span&gt;;
    }
  }
  &lt;span class="hljs-comment"&gt;// Puis on lit jusqu’à trouver le '&amp;amp;' séparant les broches de pwm&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(url[index] != &lt;span class="hljs-string"&gt;'&amp;amp;'&lt;/span&gt;) { &lt;span class="hljs-comment"&gt;// On cherche le '&amp;amp;'&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(url[index] &amp;gt;= &lt;span class="hljs-string"&gt;'3'&lt;/span&gt; &amp;amp;&amp;amp; url[index] &amp;lt;= &lt;span class="hljs-string"&gt;'5'&lt;/span&gt;) {
      &lt;span class="hljs-comment"&gt;// On a trouvé un chiffre identifiant une broche&lt;/span&gt;
      &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; broche = url[index]-&lt;span class="hljs-string"&gt;'0'&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// On ramène ça au format décimal&lt;/span&gt;
      etats[broche&lt;span class="hljs-number"&gt;-3&lt;/span&gt;] = HIGH; &lt;span class="hljs-comment"&gt;// Puis on met la broche dans un futur état haut&lt;/span&gt;
    }
    index++; &lt;span class="hljs-comment"&gt;// Passe au caractère suivant&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(index == &lt;span class="hljs-number"&gt;100&lt;/span&gt;) {
      &lt;span class="hljs-comment"&gt;// On est rendu trop loin !&lt;/span&gt;
      Serial.println(&lt;span class="hljs-string"&gt;"Oups, probleme dans la lecture des broches"&lt;/span&gt;);
      &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-literal"&gt;false&lt;/span&gt;;
    }
    &lt;span class="hljs-comment"&gt;// NOTE : Les virgules séparatrices sont ignorées&lt;/span&gt;
  }
  &lt;span class="hljs-comment"&gt;// On a les broches, reste plus que la valeur de la PWM&lt;/span&gt;
  &lt;span class="hljs-comment"&gt;// On cherche le "p="&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(url[index&lt;span class="hljs-number"&gt;-1&lt;/span&gt;] != &lt;span class="hljs-string"&gt;'p'&lt;/span&gt; &amp;amp;&amp;amp; url[index] != &lt;span class="hljs-string"&gt;'='&lt;/span&gt; &amp;amp;&amp;amp; index&amp;lt;&lt;span class="hljs-number"&gt;100&lt;/span&gt;) {
    index++; &lt;span class="hljs-comment"&gt;// Passe au caractère suivant&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(index == &lt;span class="hljs-number"&gt;100&lt;/span&gt;) {
      &lt;span class="hljs-comment"&gt;// On est rendu trop loin !&lt;/span&gt;
      Serial.println(&lt;span class="hljs-string"&gt;"Oups, probleme dans la recherche de 'p='"&lt;/span&gt;);
      &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-literal"&gt;false&lt;/span&gt;;
    }
  }
  &lt;span class="hljs-comment"&gt;// Maintenant, on va fouiller jusqu'a trouver un espace&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(url[index] != &lt;span class="hljs-string"&gt;' '&lt;/span&gt;) { &lt;span class="hljs-comment"&gt;// On cherche le ' ' final&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(url[index] &amp;gt;= &lt;span class="hljs-string"&gt;'0'&lt;/span&gt; &amp;amp;&amp;amp; url[index] &amp;lt;= &lt;span class="hljs-string"&gt;'9'&lt;/span&gt;) {
      &lt;span class="hljs-comment"&gt;// On a trouve un chiffre !&lt;/span&gt;
      &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; val = url[index]-&lt;span class="hljs-string"&gt;'0'&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// On ramene ca au format decimal&lt;/span&gt;
      pwm = (pwm*&lt;span class="hljs-number"&gt;10&lt;/span&gt;) + val; &lt;span class="hljs-comment"&gt;// On stocke dans la pwm&lt;/span&gt;
    }
    index++; &lt;span class="hljs-comment"&gt;// Passe au caractère suivant&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(index == &lt;span class="hljs-number"&gt;100&lt;/span&gt;) {
      &lt;span class="hljs-comment"&gt;// On est rendu trop loin !&lt;/span&gt;
      Serial.println(&lt;span class="hljs-string"&gt;"Oups, probleme dans la lecture de la pwm"&lt;/span&gt;);
      &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-literal"&gt;false&lt;/span&gt;;
    }
    &lt;span class="hljs-comment"&gt;// NOTE : Les virgules séparatrices sont ignorées&lt;/span&gt;
  }
  &lt;span class="hljs-comment"&gt;// Rendu ici, on a trouvé toutes les informations utiles !&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-literal"&gt;true&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="agir-sur-les-broches"&gt;
 &lt;a aria-hidden="true" href="#agir-sur-les-broches"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Agir sur les broches
&lt;/h5&gt;
&lt;p&gt;
 Lorsque toutes les valeurs sont reçues et interprétées, il ne reste plus qu’à les appliquer à nos broches. Vu ce que l’on vient de faire, c’est de loin le plus facile !
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;action&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// On met à jour nos broches&lt;/span&gt;
  digitalWrite(&lt;span class="hljs-number"&gt;3&lt;/span&gt;, etats[&lt;span class="hljs-number"&gt;0&lt;/span&gt;]);
  digitalWrite(&lt;span class="hljs-number"&gt;4&lt;/span&gt;, etats[&lt;span class="hljs-number"&gt;1&lt;/span&gt;]);
  digitalWrite(&lt;span class="hljs-number"&gt;5&lt;/span&gt;, etats[&lt;span class="hljs-number"&gt;2&lt;/span&gt;]);
  &lt;span class="hljs-comment"&gt;// Et la PWM&lt;/span&gt;
  analogWrite(&lt;span class="hljs-number"&gt;6&lt;/span&gt;, pwm);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="on-assemble-"&gt;
 &lt;a aria-hidden="true" href="#on-assemble-"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 On assemble !!
&lt;/h5&gt;
&lt;p&gt;
 Il ne reste plus qu’à enchaîner toutes nos fonctions pour avoir un code complet !!
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// Regarde si un client est connecté et attend une réponse&lt;/span&gt;
  EthernetClient client = serveur.available();
  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (client) { &lt;span class="hljs-comment"&gt;// Un client est là ?&lt;/span&gt;
    Serial.println(&lt;span class="hljs-string"&gt;"Ping !"&lt;/span&gt;);
    url = &lt;span class="hljs-string"&gt;""&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// on remet à zéro notre chaîne tampon&lt;/span&gt;
    index = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(client.connected()) { &lt;span class="hljs-comment"&gt;// Tant que le client est connecté&lt;/span&gt;
      &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(client.available()) { &lt;span class="hljs-comment"&gt;// A-t-il des choses à dire ?&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// traitement des infos du client&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; carlu = client.read(); &lt;span class="hljs-comment"&gt;//on lit ce qu'il raconte&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(carlu != &lt;span class="hljs-string"&gt;'\n'&lt;/span&gt;) { &lt;span class="hljs-comment"&gt;// On est en fin de chaîne ?&lt;/span&gt;
          &lt;span class="hljs-comment"&gt;// non ! alors on stocke le caractère&lt;/span&gt;
          Serial.print(carlu);
          url[index] = carlu;
          index++;
        } &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; {
          &lt;span class="hljs-comment"&gt;// on a fini de lire ce qui nous intéresse&lt;/span&gt;
          &lt;span class="hljs-comment"&gt;// on marque la fin de l'url (caractère de fin de chaîne)&lt;/span&gt;
          url[index] = &lt;span class="hljs-string"&gt;'\0'&lt;/span&gt;;
          boolean ok = interpreter(); &lt;span class="hljs-comment"&gt;// essaie d'interpréter la chaîne&lt;/span&gt;
          &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(ok) {
            &lt;span class="hljs-comment"&gt;// tout s'est bien passé = on met à jour les broches&lt;/span&gt;
            action();
          }
          &lt;span class="hljs-comment"&gt;// et dans tout les cas on répond au client&lt;/span&gt;
          repondre(client);
          &lt;span class="hljs-comment"&gt;// on quitte le while&lt;/span&gt;
          &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
        }
      }
    }
    &lt;span class="hljs-comment"&gt;// Donne le temps au client de prendre les données&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;10&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// Ferme la connexion avec le client&lt;/span&gt;
    client.stop();
    Serial.println(&lt;span class="hljs-string"&gt;"Pong !"&lt;/span&gt;);
  }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="code-complet"&gt;
 &lt;a aria-hidden="true" href="#code-complet"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Code complet
&lt;/h4&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Ces deux bibliothèques sont indispensables pour le shield&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;SPI.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;Ethernet.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// L'adresse MAC du shield&lt;/span&gt;
byte mac[] = { &lt;span class="hljs-number"&gt;0x90&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xA2&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xDA&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x0E&lt;/span&gt;, &lt;span class="hljs-number"&gt;0xA5&lt;/span&gt;, &lt;span class="hljs-number"&gt;0x7E&lt;/span&gt; };
&lt;span class="hljs-comment"&gt;// L'adresse IP que prendra le shield&lt;/span&gt;
&lt;span class="hljs-function"&gt;IPAddress &lt;span class="hljs-title"&gt;ip&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;192&lt;/span&gt;,&lt;span class="hljs-number"&gt;168&lt;/span&gt;,&lt;span class="hljs-number"&gt;0&lt;/span&gt;,&lt;span class="hljs-number"&gt;143&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// Initialise notre serveur&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// Ce dernier écoutera sur le port 4200&lt;/span&gt;
&lt;span class="hljs-function"&gt;EthernetServer &lt;span class="hljs-title"&gt;serveur&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;4200&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; *url = (&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; *)&lt;span class="hljs-built_in"&gt;malloc&lt;/span&gt;(&lt;span class="hljs-number"&gt;100&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// L'url recu à stocker&lt;/span&gt;
&lt;span class="hljs-comment"&gt;//char url[100];&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; index = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// index indiquant où l'on est rendu dans la chaîne&lt;/span&gt;
boolean etats[&lt;span class="hljs-number"&gt;3&lt;/span&gt;] = {LOW, LOW, LOW}; &lt;span class="hljs-comment"&gt;// L'état des 3 sorties&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; pwm = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// La valeur de la pwm&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// On démarre la voie série pour déboguer&lt;/span&gt;
  Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);

  &lt;span class="hljs-comment"&gt;// Configure et initialise les broches&lt;/span&gt;
  pinMode(&lt;span class="hljs-number"&gt;3&lt;/span&gt;, OUTPUT); digitalWrite(&lt;span class="hljs-number"&gt;3&lt;/span&gt;, LOW);
  pinMode(&lt;span class="hljs-number"&gt;4&lt;/span&gt;, OUTPUT); digitalWrite(&lt;span class="hljs-number"&gt;4&lt;/span&gt;, LOW);
  pinMode(&lt;span class="hljs-number"&gt;5&lt;/span&gt;, OUTPUT); digitalWrite(&lt;span class="hljs-number"&gt;5&lt;/span&gt;, LOW);
  pinMode(&lt;span class="hljs-number"&gt;6&lt;/span&gt;, OUTPUT); analogWrite(&lt;span class="hljs-number"&gt;6&lt;/span&gt;, &lt;span class="hljs-number"&gt;0&lt;/span&gt;);

  &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; erreur = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
  &lt;span class="hljs-comment"&gt;// On démarre le shield Ethernet SANS adresse ip (donc donnée via DHCP)&lt;/span&gt;
  erreur = Ethernet.begin(mac);

  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (erreur == &lt;span class="hljs-number"&gt;0&lt;/span&gt;) {
    Serial.println(&lt;span class="hljs-string"&gt;"Parametrage avec ip fixe..."&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// si une erreur a eu lieu cela signifie que l'attribution DHCP&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// ne fonctionne pas. On initialise donc en forçant une IP&lt;/span&gt;
    Ethernet.begin(mac, ip);
  }
  Serial.println(&lt;span class="hljs-string"&gt;"Init..."&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Donne une seconde au shield pour s'initialiser&lt;/span&gt;
  delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// On lance le serveur&lt;/span&gt;
  serveur.begin();
  Serial.println(&lt;span class="hljs-string"&gt;"Pret !"&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// Regarde si un client est connecté et attend une réponse&lt;/span&gt;
  EthernetClient client = serveur.available();
  &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (client) { &lt;span class="hljs-comment"&gt;// Un client est là ?&lt;/span&gt;
    Serial.println(&lt;span class="hljs-string"&gt;"Ping !"&lt;/span&gt;);
    url = &lt;span class="hljs-string"&gt;""&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// on remet à zéro notre chaîne tampon&lt;/span&gt;
    index = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(client.connected()) { &lt;span class="hljs-comment"&gt;// Tant que le client est connecté&lt;/span&gt;
      &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(client.available()) { &lt;span class="hljs-comment"&gt;// A-t-il des choses à dire ?&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// traitement des infos du client&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; carlu = client.read(); &lt;span class="hljs-comment"&gt;//on lit ce qu'il raconte&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(carlu != &lt;span class="hljs-string"&gt;'\n'&lt;/span&gt;) { &lt;span class="hljs-comment"&gt;// On est en fin de chaîne ?&lt;/span&gt;
          &lt;span class="hljs-comment"&gt;// non ! alors on stocke le caractère&lt;/span&gt;
          Serial.print(carlu);
          url[index] = carlu;
          index++;
        } &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; {
          &lt;span class="hljs-comment"&gt;// on a fini de lire ce qui nous intéresse&lt;/span&gt;
          &lt;span class="hljs-comment"&gt;// on marque la fin de l'url (caractère de fin de chaîne)&lt;/span&gt;
          url[index] = &lt;span class="hljs-string"&gt;'\0'&lt;/span&gt;;
          boolean ok = interpreter(); &lt;span class="hljs-comment"&gt;// essaie d'interpréter la chaîne&lt;/span&gt;
          &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(ok) {
            &lt;span class="hljs-comment"&gt;// tout s'est bien passé = on met à jour les broches&lt;/span&gt;
            action();
          }
          &lt;span class="hljs-comment"&gt;// et dans tout les cas on répond au client&lt;/span&gt;
          repondre(client);
          &lt;span class="hljs-comment"&gt;// on quitte le while&lt;/span&gt;
          &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
        }
      }
    }
    &lt;span class="hljs-comment"&gt;// Donne le temps au client de prendre les données&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;10&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// Ferme la connexion avec le client&lt;/span&gt;
    client.stop();
    Serial.println(&lt;span class="hljs-string"&gt;"Pong !"&lt;/span&gt;);
  }
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;rafraichir&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// Rafraichit l'etat des broches / PWM&lt;/span&gt;
  digitalWrite(&lt;span class="hljs-number"&gt;3&lt;/span&gt;, etats[&lt;span class="hljs-number"&gt;0&lt;/span&gt;]);
  digitalWrite(&lt;span class="hljs-number"&gt;4&lt;/span&gt;, etats[&lt;span class="hljs-number"&gt;1&lt;/span&gt;]);
  digitalWrite(&lt;span class="hljs-number"&gt;5&lt;/span&gt;, etats[&lt;span class="hljs-number"&gt;2&lt;/span&gt;]);
  analogWrite(&lt;span class="hljs-number"&gt;6&lt;/span&gt;, pwm);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;repondre&lt;/span&gt;&lt;span class="hljs-params"&gt;(EthernetClient client)&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// La fonction prend un client en argument&lt;/span&gt;

  Serial.println(&lt;span class="hljs-string"&gt;"\nRepondre"&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// debug&lt;/span&gt;
  &lt;span class="hljs-comment"&gt;// On fait notre en-tête&lt;/span&gt;
  &lt;span class="hljs-comment"&gt;// Tout d'abord le code de réponse 200 = réussite&lt;/span&gt;
  client.println(&lt;span class="hljs-string"&gt;"HTTP/1.1 200 OK"&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Puis le type mime du contenu renvoyé, du json&lt;/span&gt;
  client.println(&lt;span class="hljs-string"&gt;"Content-Type: application/json"&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Autorise le cross origin&lt;/span&gt;
  client.println(&lt;span class="hljs-string"&gt;"Access-Control-Allow-Origin: *"&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Et c'est tout !&lt;/span&gt;
  &lt;span class="hljs-comment"&gt;// On envoi une ligne vide pour signaler la fin du header&lt;/span&gt;
  client.println();

  &lt;span class="hljs-comment"&gt;// Puis on commence notre JSON par une accolade ouvrante&lt;/span&gt;
  client.println(&lt;span class="hljs-string"&gt;"{"&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// On envoie la première clé : "uptime"&lt;/span&gt;
  client.print(&lt;span class="hljs-string"&gt;"\t\"uptime\": "&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Puis la valeur de l'uptime&lt;/span&gt;
  client.print(millis());
  &lt;span class="hljs-comment"&gt;//Une petite virgule pour séparer les deux clés&lt;/span&gt;
  client.println(&lt;span class="hljs-string"&gt;","&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Et on envoie la seconde nommée "analog 0"&lt;/span&gt;
  client.print(&lt;span class="hljs-string"&gt;"\t\"A0\": "&lt;/span&gt;);
  client.print(analogRead(A0));
  client.println(&lt;span class="hljs-string"&gt;","&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Puis la valeur de la PWM sur la broche 6&lt;/span&gt;
  client.print(&lt;span class="hljs-string"&gt;"\t\"pwm\": "&lt;/span&gt;);
  client.print(pwm, DEC);
  client.println(&lt;span class="hljs-string"&gt;","&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Dernières valeurs, les broches (elles mêmes dans un tableau)&lt;/span&gt;
  client.println(&lt;span class="hljs-string"&gt;"\t\"broches\": {"&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// La broche 3&lt;/span&gt;
  client.print(&lt;span class="hljs-string"&gt;"\t\t\"3\": "&lt;/span&gt;);
  client.print(digitalRead(&lt;span class="hljs-number"&gt;3&lt;/span&gt;));
  client.println(&lt;span class="hljs-string"&gt;","&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// La broche 4&lt;/span&gt;
  client.print(&lt;span class="hljs-string"&gt;"\t\t\"4\": "&lt;/span&gt;);
  client.print(digitalRead(&lt;span class="hljs-number"&gt;4&lt;/span&gt;));
  client.println(&lt;span class="hljs-string"&gt;","&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// La broche 5&lt;/span&gt;
  client.print(&lt;span class="hljs-string"&gt;"\t\t\"5\": "&lt;/span&gt;);
  client.println(digitalRead(&lt;span class="hljs-number"&gt;5&lt;/span&gt;));
  client.println(&lt;span class="hljs-string"&gt;"\t}"&lt;/span&gt;);
  &lt;span class="hljs-comment"&gt;// Et enfin on termine notre JSON par une accolade fermante&lt;/span&gt;
  client.println(&lt;span class="hljs-string"&gt;"}"&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;boolean &lt;span class="hljs-title"&gt;interpreter&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// On commence par mettre à zéro tous les états&lt;/span&gt;
  etats[&lt;span class="hljs-number"&gt;0&lt;/span&gt;] = LOW;
  etats[&lt;span class="hljs-number"&gt;1&lt;/span&gt;] = LOW;
  etats[&lt;span class="hljs-number"&gt;2&lt;/span&gt;] = LOW;
  pwm = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

  &lt;span class="hljs-comment"&gt;// Puis maintenant on va chercher les caractères/marqueurs un par un.&lt;/span&gt;
  index = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// Index pour se promener dans la chaîne (commence à 4 pour enlever "GET "&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(url[index&lt;span class="hljs-number"&gt;-1&lt;/span&gt;] != &lt;span class="hljs-string"&gt;'b'&lt;/span&gt; &amp;amp;&amp;amp; url[index] != &lt;span class="hljs-string"&gt;'='&lt;/span&gt;) { &lt;span class="hljs-comment"&gt;// On commence par chercher le "b="&lt;/span&gt;
    index++; &lt;span class="hljs-comment"&gt;// Passe au caractère suivant&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(index == &lt;span class="hljs-number"&gt;100&lt;/span&gt;) {
      &lt;span class="hljs-comment"&gt;// On est rendu trop loin !&lt;/span&gt;
      Serial.println(&lt;span class="hljs-string"&gt;"Oups, probleme dans la recherche de 'b='"&lt;/span&gt;);
      &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-literal"&gt;false&lt;/span&gt;;
    }
  }
  &lt;span class="hljs-comment"&gt;// Puis on lit jusqu’à trouver le '&amp;amp;' séparant les broches de pwm&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(url[index] != &lt;span class="hljs-string"&gt;'&amp;amp;'&lt;/span&gt;) { &lt;span class="hljs-comment"&gt;// On cherche le '&amp;amp;'&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(url[index] &amp;gt;= &lt;span class="hljs-string"&gt;'3'&lt;/span&gt; &amp;amp;&amp;amp; url[index] &amp;lt;= &lt;span class="hljs-string"&gt;'5'&lt;/span&gt;) {
      &lt;span class="hljs-comment"&gt;// On a trouvé un chiffre identifiant une broche&lt;/span&gt;
      &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; broche = url[index]-&lt;span class="hljs-string"&gt;'0'&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// On ramène ça au format décimal&lt;/span&gt;
      etats[broche&lt;span class="hljs-number"&gt;-3&lt;/span&gt;] = HIGH; &lt;span class="hljs-comment"&gt;// Puis on met la broche dans un futur état haut&lt;/span&gt;
    }
    index++; &lt;span class="hljs-comment"&gt;// Passe au caractère suivant&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(index == &lt;span class="hljs-number"&gt;100&lt;/span&gt;) {
      &lt;span class="hljs-comment"&gt;// On est rendu trop loin !&lt;/span&gt;
      Serial.println(&lt;span class="hljs-string"&gt;"Oups, probleme dans la lecture des broches"&lt;/span&gt;);
      &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-literal"&gt;false&lt;/span&gt;;
    }
    &lt;span class="hljs-comment"&gt;// NOTE : Les virgules séparatrices sont ignorées&lt;/span&gt;
  }
  &lt;span class="hljs-comment"&gt;// On a les broches, reste plus que la valeur de la PWM&lt;/span&gt;
  &lt;span class="hljs-comment"&gt;// On cherche le "p="&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(url[index&lt;span class="hljs-number"&gt;-1&lt;/span&gt;] != &lt;span class="hljs-string"&gt;'p'&lt;/span&gt; &amp;amp;&amp;amp; url[index] != &lt;span class="hljs-string"&gt;'='&lt;/span&gt; &amp;amp;&amp;amp; index&amp;lt;&lt;span class="hljs-number"&gt;100&lt;/span&gt;) {
    index++; &lt;span class="hljs-comment"&gt;// Passe au caractère suivant&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(index == &lt;span class="hljs-number"&gt;100&lt;/span&gt;) {
      &lt;span class="hljs-comment"&gt;// On est rendu trop loin !&lt;/span&gt;
      Serial.println(&lt;span class="hljs-string"&gt;"Oups, probleme dans la recherche de 'p='"&lt;/span&gt;);
      &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-literal"&gt;false&lt;/span&gt;;
    }
  }
  &lt;span class="hljs-comment"&gt;// Maintenant, on va fouiller jusqu'a trouver un espace&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(url[index] != &lt;span class="hljs-string"&gt;' '&lt;/span&gt;) { &lt;span class="hljs-comment"&gt;// On cherche le ' ' final&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(url[index] &amp;gt;= &lt;span class="hljs-string"&gt;'0'&lt;/span&gt; &amp;amp;&amp;amp; url[index] &amp;lt;= &lt;span class="hljs-string"&gt;'9'&lt;/span&gt;) {
      &lt;span class="hljs-comment"&gt;// On a trouve un chiffre !&lt;/span&gt;
      &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; val = url[index]-&lt;span class="hljs-string"&gt;'0'&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// On ramene ca au format decimal&lt;/span&gt;
      pwm = (pwm*&lt;span class="hljs-number"&gt;10&lt;/span&gt;) + val; &lt;span class="hljs-comment"&gt;// On stocke dans la pwm&lt;/span&gt;
    }
    index++; &lt;span class="hljs-comment"&gt;// Passe au caractère suivant&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(index == &lt;span class="hljs-number"&gt;100&lt;/span&gt;) {
      &lt;span class="hljs-comment"&gt;// On est rendu trop loin !&lt;/span&gt;
      Serial.println(&lt;span class="hljs-string"&gt;"Oups, probleme dans la lecture de la pwm"&lt;/span&gt;);
      &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-literal"&gt;false&lt;/span&gt;;
    }
    &lt;span class="hljs-comment"&gt;// NOTE : Les virgules séparatrices sont ignorées&lt;/span&gt;
  }
  &lt;span class="hljs-comment"&gt;// Rendu ici, on a trouvé toutes les informations utiles !&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-literal"&gt;true&lt;/span&gt;;
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;action&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
  &lt;span class="hljs-comment"&gt;// On met à jour nos broches&lt;/span&gt;
  digitalWrite(&lt;span class="hljs-number"&gt;3&lt;/span&gt;, etats[&lt;span class="hljs-number"&gt;0&lt;/span&gt;]);
  digitalWrite(&lt;span class="hljs-number"&gt;4&lt;/span&gt;, etats[&lt;span class="hljs-number"&gt;1&lt;/span&gt;]);
  digitalWrite(&lt;span class="hljs-number"&gt;5&lt;/span&gt;, etats[&lt;span class="hljs-number"&gt;2&lt;/span&gt;]);
  &lt;span class="hljs-comment"&gt;// Et la PWM&lt;/span&gt;
  analogWrite(&lt;span class="hljs-number"&gt;6&lt;/span&gt;, pwm);
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="sortir-de-son-réseau-privé"&gt;
 &lt;a aria-hidden="true" href="#sortir-de-son-réseau-privé"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sortir de son réseau privé
&lt;/h3&gt;
&lt;p&gt;
 À ce stade, nous arrivons à récupérer des informations et donner des ordres à notre Arduino. Cependant, on est bloqué dans notre réseau local. En effet, si vous essayez d’y accéder depuis un autre ordinateur à l’autre bout du monde, il est fort probable que cela ne marche pas…
&lt;/p&gt;
&lt;p&gt;
 Pour pallier cela, il va falloir faire un peu d’administration réseau. Je vais couvrir la démarche ici mais ne rentrerai pas trop dans les détails, car ce n’est pas non plus le but de ce tutoriel. Je partirai aussi du principe que vous êtes à votre domicile et utilisez une box ou un routeur que vous pouvez administrer.
&lt;/p&gt;
&lt;p&gt;
 L’opération que nous allons faire ici s’appelle une redirection NAT (Network address translation). Mais tout d’abord, essayons de comprendre le problème.
&lt;/p&gt;
&lt;h4 id="le-souci"&gt;
 &lt;a aria-hidden="true" href="#le-souci"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le souci
&lt;/h4&gt;
&lt;p&gt;
 Le problème dans l’état actuel c’est que votre box laisse passer le trafic vers l’extérieur, accepte les réponses, mais ne tolère pas trop qu’on accède directement à son adresse sur n’importe quel port. En effet, après tout c’est logique. Imaginez que vous avez plusieurs équipements connectés a votre routeur/box. Si vous essayez d’y accéder depuis l’extérieur, comment cette dernière saura à quel matériel vous souhaitez accéder ?
&lt;/p&gt;
&lt;p&gt;
 Dans votre réseau local, chaque appareil à sa propre adresse IP qui le représente
 &lt;strong&gt;
  localement
 &lt;/strong&gt;
 . Cette adresse est très souvent de la forme 192.168.0.xyz. Vous pourriez avoir par exemple votre téléphone en 192.168.0.142, votre ordinateur en 192.168.0.158 et votre Arduino en 192.168.0.199. Votre box (qui gère ce réseau local) possède quant à elle une IP
 &lt;strong&gt;
  publique
 &lt;/strong&gt;
 . C’est cette IP qui la représente aux yeux du monde. Admettons, pour l’exemple, que cette adresse soit 42.128.12.13 (trouvez la vôtre avec un service comme my-ip.com). Si vous cherchez à accéder à l’adresse publique avec le port 4200 en espérant atteindre votre Arduino vous serez déçus. En effet, vous allez bien atteindre votre box, mais cette dernière n’aura aucune idée de quel équipement doit être interrogé ! Est-ce votre ordinateur ? Votre smartphone ? Votre Arduino ?
&lt;/p&gt;
&lt;p&gt;
 Il va donc falloir lui expliquer…
&lt;/p&gt;
&lt;h4 id="la-solution"&gt;
 &lt;a aria-hidden="true" href="#la-solution"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La solution
&lt;/h4&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Chaque constructeur de box/routeur possède sa propre interface. Je vais essayer d’être le plus générique possible pour que les explications parlent au plus grand nombre, mais ne m’en voulez pas si toutes les dénominations ne sont pas exactement comme chez vous !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Et cette explication s’appelle une redirection
 &lt;strong&gt;
  NAT
 &lt;/strong&gt;
 , ou redirection de port. En faisant cela, vous expliquerez à votre box que "tout le trafic qui arrive sur ce port particulier doit être envoyé sur cet équipement local" (et vous pouvez même rerouter le trafic pour le changer de port si vous voulez).
&lt;/p&gt;
&lt;p&gt;
 Mettons cela en place. Pour cela, commencez par aller dans l’interface d’administration de votre box (souvent c’est à l’adresse 192.168.0.1). Vous devez être dans le réseau local de la box pour le faire ! Ensuite, il vous faudra trouver la partie parlant de "NAT" ou de "redirection de port".
Une fois dans cette dernière, il va falloir demander à ce que tout ce qui rentre dans le port 4200 (ou la plage 4200–4200) soit redirigé vers l’équipement "Arduino" (Wiznet) ou son adresse IP locale si vous la connaissez et que vous l’avez déjà imposée au routeur comme fixe.
&lt;/p&gt;
&lt;p&gt;
 Vous aurez alors quelque chose comme ça :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Réglages NAT" src="./images/uploaded/tuto-arduino-803-arduino-et-ethernet-serveur/reglages-nat.jpg"/&gt;
 &lt;figcaption&gt;
  Réglages NAT
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Sauvegardez et éventuellement redémarrez votre box (normalement ce n’est pas nécessaire, mais sur du vieux matériel ça peut arriver…). Maintenant, démarrez votre Arduino avec un des programmes ci-dessus et essayez d’accéder à votre adresse publique et le port 4200 avec un navigateur internet. Normalement, l’Arduino devrait répondre comme si vous l’interrogiez avec son adresse locale !
&lt;/p&gt;
&lt;h3 id="faire-une-interface-pour-dialoguer-avec-son-arduino"&gt;
 &lt;a aria-hidden="true" href="#faire-une-interface-pour-dialoguer-avec-son-arduino"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Faire une interface pour dialoguer avec son Arduino
&lt;/h3&gt;
&lt;p&gt;
 Pour terminer ce tutoriel, je vous propose de réaliser une petite interface de pilotage de l’Arduino via internet. Pour cela, on va garder le programme que nous avions dans l’Arduino pour le paragraphe concernant les requêtes avancées, et nous nous contenterons de simplement faire de l’HTML et du JavaScript. Le HTML servira à faire l’interface et le JavaScript fera les interactions via des requêtes ajax.
&lt;/p&gt;
&lt;p&gt;
 Avant toute chose, je vous ai menti ! Il faut en fait rajouter une petite ligne dans notre code de la fonction
 &lt;code&gt;
  repondre()
 &lt;/code&gt;
 faite plus tôt. En effet, pour des raisons de sécurité les requêtes ajax ne peuvent pas aller d’un domaine à un autre (donc de "n’importe où sur le web" à "votre Arduino"). Il faut donc rajouter une ligne dans le header renvoyé pour signaler que l’on autorise le "cross-domain".
Rajoutez donc cette ligne juste après le "content-type" :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Autorise le cross origin&lt;/span&gt;
client.println(&lt;span class="hljs-string"&gt;"Access-Control-Allow-Origin: *"&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Maintenant que cela est fait, nous allons créer une structure HTML toute simple pour avoir nos boutons.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-html"&gt;&lt;span class="hljs-meta"&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;html&lt;/span&gt; &lt;span class="hljs-attr"&gt;lang&lt;/span&gt;=&lt;span class="hljs-string"&gt;"fr"&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meta&lt;/span&gt; &lt;span class="hljs-attr"&gt;charset&lt;/span&gt;=&lt;span class="hljs-string"&gt;"utf-8"&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;Interface de pilotage Arduino&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt; 
  &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;div&lt;/span&gt; &lt;span class="hljs-attr"&gt;class&lt;/span&gt;=&lt;span class="hljs-string"&gt;"main"&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
        Adresse publique du shield : &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;br&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        http://&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;input&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"text"&lt;/span&gt; &lt;span class="hljs-attr"&gt;id&lt;/span&gt;=&lt;span class="hljs-string"&gt;"ip"&lt;/span&gt; &lt;span class="hljs-attr"&gt;value&lt;/span&gt;=&lt;span class="hljs-string"&gt;"123.123.123.123"&lt;/span&gt; &lt;span class="hljs-attr"&gt;size&lt;/span&gt;=&lt;span class="hljs-string"&gt;"15"&lt;/span&gt;/&amp;gt;&lt;/span&gt;
        : &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;input&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"text"&lt;/span&gt; &lt;span class="hljs-attr"&gt;id&lt;/span&gt;=&lt;span class="hljs-string"&gt;"port"&lt;/span&gt; &lt;span class="hljs-attr"&gt;value&lt;/span&gt;=&lt;span class="hljs-string"&gt;"4200"&lt;/span&gt; &lt;span class="hljs-attr"&gt;size&lt;/span&gt;=&lt;span class="hljs-string"&gt;"5"&lt;/span&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;hr&lt;/span&gt; /&amp;gt;&lt;/span&gt;
      &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;input&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"checkbox"&lt;/span&gt; &lt;span class="hljs-attr"&gt;id&lt;/span&gt;=&lt;span class="hljs-string"&gt;"broche3"&lt;/span&gt; &lt;span class="hljs-attr"&gt;name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"broche3"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;label&lt;/span&gt; &lt;span class="hljs-attr"&gt;for&lt;/span&gt;=&lt;span class="hljs-string"&gt;"broche3"&lt;/span&gt;&amp;gt;&lt;/span&gt;Activer Broche 3.&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;
        Etat : &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;input&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"radio"&lt;/span&gt; &lt;span class="hljs-attr"&gt;id&lt;/span&gt;=&lt;span class="hljs-string"&gt;"etat3"&lt;/span&gt; &lt;span class="hljs-attr"&gt;disabled&lt;/span&gt; /&amp;gt;&lt;/span&gt;
      &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;input&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"checkbox"&lt;/span&gt; &lt;span class="hljs-attr"&gt;id&lt;/span&gt;=&lt;span class="hljs-string"&gt;"broche4"&lt;/span&gt; &lt;span class="hljs-attr"&gt;name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"broche4"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;label&lt;/span&gt; &lt;span class="hljs-attr"&gt;for&lt;/span&gt;=&lt;span class="hljs-string"&gt;"broche4"&lt;/span&gt;&amp;gt;&lt;/span&gt;Activer Broche 4.&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;
        Etat : &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;input&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"radio"&lt;/span&gt; &lt;span class="hljs-attr"&gt;id&lt;/span&gt;=&lt;span class="hljs-string"&gt;"etat4"&lt;/span&gt; &lt;span class="hljs-attr"&gt;disabled&lt;/span&gt; /&amp;gt;&lt;/span&gt;
      &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;input&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"checkbox"&lt;/span&gt; &lt;span class="hljs-attr"&gt;id&lt;/span&gt;=&lt;span class="hljs-string"&gt;"broche5"&lt;/span&gt; &lt;span class="hljs-attr"&gt;name&lt;/span&gt;=&lt;span class="hljs-string"&gt;"broche5"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
        &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;label&lt;/span&gt; &lt;span class="hljs-attr"&gt;for&lt;/span&gt;=&lt;span class="hljs-string"&gt;"broche5"&lt;/span&gt;&amp;gt;&lt;/span&gt;Activer Broche 5.&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;
        Etat : &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;input&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"radio"&lt;/span&gt; &lt;span class="hljs-attr"&gt;id&lt;/span&gt;=&lt;span class="hljs-string"&gt;"etat5"&lt;/span&gt; &lt;span class="hljs-attr"&gt;disabled&lt;/span&gt; /&amp;gt;&lt;/span&gt;
      &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
        PWM : 0&lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;input&lt;/span&gt; &lt;span class="hljs-attr"&gt;type&lt;/span&gt;=&lt;span class="hljs-string"&gt;"range"&lt;/span&gt; &lt;span class="hljs-attr"&gt;min&lt;/span&gt;=&lt;span class="hljs-string"&gt;"0"&lt;/span&gt; &lt;span class="hljs-attr"&gt;max&lt;/span&gt;=&lt;span class="hljs-string"&gt;"255"&lt;/span&gt; &lt;span class="hljs-attr"&gt;id&lt;/span&gt;=&lt;span class="hljs-string"&gt;"pwm"&lt;/span&gt; /&amp;gt;&lt;/span&gt;255
      &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
        A0 : &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;meter&lt;/span&gt; &lt;span class="hljs-attr"&gt;min&lt;/span&gt;=&lt;span class="hljs-string"&gt;"0"&lt;/span&gt; &lt;span class="hljs-attr"&gt;max&lt;/span&gt;=&lt;span class="hljs-string"&gt;"1023"&lt;/span&gt; &lt;span class="hljs-attr"&gt;id&lt;/span&gt;=&lt;span class="hljs-string"&gt;"a0"&lt;/span&gt; /&amp;gt;&lt;/span&gt;
      &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;button&lt;/span&gt; &lt;span class="hljs-attr"&gt;id&lt;/span&gt;=&lt;span class="hljs-string"&gt;"envoyer"&lt;/span&gt;&amp;gt;&lt;/span&gt;Executer !&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;button&lt;/span&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
        Millis : &lt;span class="hljs-tag"&gt;&amp;lt;&lt;span class="hljs-name"&gt;span&lt;/span&gt; &lt;span class="hljs-attr"&gt;id&lt;/span&gt;=&lt;span class="hljs-string"&gt;"millis"&lt;/span&gt;&amp;gt;&lt;/span&gt;0&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;span&lt;/span&gt;&amp;gt;&lt;/span&gt; ms
      &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class="hljs-tag"&gt;&amp;lt;/&lt;span class="hljs-name"&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;figure&gt;
 &lt;img alt="Interface HTML" src="./images/uploaded/tuto-arduino-803-arduino-et-ethernet-serveur/interface-html.jpg"/&gt;
 &lt;figcaption&gt;
  Interface HTML
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ensuite, un peu de JavaScript nous permettra les interactions. L’ensemble est grosso modo divisé en deux fonctions importantes.
 &lt;code&gt;
  setup()
 &lt;/code&gt;
 qui sera exécuté lorsque la page est prête puis
 &lt;code&gt;
  executer()
 &lt;/code&gt;
 qui sera appelée à chaque fois que vous cliquez sur le bouton. Cette dernière fera alors une requête à votre Arduino et attendra la réponse json. La fonction
 &lt;code&gt;
  afficher()
 &lt;/code&gt;
 utilisera alors les informations pour changer les composants html.
&lt;/p&gt;
&lt;p&gt;
 Comme vous pouvez le constater, toute la partie affichage est gérée de manière quasi complètement indépendante de l’Arduino. Cela va nous permettre de transmettre un minimum de données et garder une souplesse maximale sur l’affichage. Si demain vous décidez de changer l’interface voire carrément de faire une application dans un autre langage, vous n’aurez pas besoin de toucher à votre Arduino car les données sont envoyées dans un format générique.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-javascript"&gt;&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; broches = []; &lt;span class="hljs-comment"&gt;// Tableau de broches&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; etats = []; &lt;span class="hljs-comment"&gt;// Tableau d'etat des broches&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; pwm;
&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; a0;
&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; millis;
&lt;span class="hljs-keyword"&gt;var&lt;/span&gt; adresse = &lt;span class="hljs-string"&gt;"http://82.143.160.118:4200/"&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// L'url+port de votre shield&lt;/span&gt;

&lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.addEventListener(&lt;span class="hljs-string"&gt;'DOMContentLoaded'&lt;/span&gt;, setup, &lt;span class="hljs-literal"&gt;false&lt;/span&gt;);

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// fonction qui va lier les variables à leur conteneur HTML&lt;/span&gt;
    broches[&lt;span class="hljs-number"&gt;3&lt;/span&gt;] = &lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.getElementById(&lt;span class="hljs-string"&gt;"broche3"&lt;/span&gt;);
    broches[&lt;span class="hljs-number"&gt;4&lt;/span&gt;] = &lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.getElementById(&lt;span class="hljs-string"&gt;"broche4"&lt;/span&gt;);
    broches[&lt;span class="hljs-number"&gt;5&lt;/span&gt;] = &lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.getElementById(&lt;span class="hljs-string"&gt;"broche5"&lt;/span&gt;);
    etats[&lt;span class="hljs-number"&gt;3&lt;/span&gt;] = &lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.getElementById(&lt;span class="hljs-string"&gt;"etat3"&lt;/span&gt;);
    etats[&lt;span class="hljs-number"&gt;4&lt;/span&gt;] = &lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.getElementById(&lt;span class="hljs-string"&gt;"etat4"&lt;/span&gt;);
    etats[&lt;span class="hljs-number"&gt;5&lt;/span&gt;] = &lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.getElementById(&lt;span class="hljs-string"&gt;"etat5"&lt;/span&gt;);
    pwm = &lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.getElementById(&lt;span class="hljs-string"&gt;"pwm"&lt;/span&gt;);
    a0 = &lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.getElementById(&lt;span class="hljs-string"&gt;"a0"&lt;/span&gt;);
    millis = &lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.getElementById(&lt;span class="hljs-string"&gt;"millis"&lt;/span&gt;);
    
    &lt;span class="hljs-comment"&gt;// La fonction concernant le bouton&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; bouton = &lt;span class="hljs-built_in"&gt;document&lt;/span&gt;.getElementById(&lt;span class="hljs-string"&gt;"envoyer"&lt;/span&gt;);
    bouton.addEventListener(&lt;span class="hljs-string"&gt;'click'&lt;/span&gt;, executer, &lt;span class="hljs-literal"&gt;false&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;executer&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// Fonction qui va créer l'url avec les paramètres puis&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// envoyer la requête&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; requete = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; XMLHttpRequest(); &lt;span class="hljs-comment"&gt;// créer un objet de requête&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;var&lt;/span&gt; url = adresse;
    url += &lt;span class="hljs-string"&gt;"?b="&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(i=&lt;span class="hljs-number"&gt;3&lt;/span&gt;; i &amp;lt;= &lt;span class="hljs-number"&gt;5&lt;/span&gt;; i++) { &lt;span class="hljs-comment"&gt;// Pour les broches 3 à 5 de notre tableau&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(broches[i].checked) &lt;span class="hljs-comment"&gt;// si la case est cochée&lt;/span&gt;
            url += i + &lt;span class="hljs-string"&gt;","&lt;/span&gt;;
    }
    &lt;span class="hljs-comment"&gt;// enlève la dernière virgule si elle existe&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(url[url.length&lt;span class="hljs-number"&gt;-1&lt;/span&gt;] === &lt;span class="hljs-string"&gt;','&lt;/span&gt;)
        url = url.substring(&lt;span class="hljs-number"&gt;0&lt;/span&gt;, url.length&lt;span class="hljs-number"&gt;-1&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// Puis on ajoute la pwm&lt;/span&gt;
    url += &lt;span class="hljs-string"&gt;"&amp;amp;p="&lt;/span&gt; + pwm.value;
    &lt;span class="hljs-built_in"&gt;console&lt;/span&gt;.log(url) &lt;span class="hljs-comment"&gt;// Pour debugguer l'url formée    &lt;/span&gt;
    requete.open(&lt;span class="hljs-string"&gt;"GET"&lt;/span&gt;, url, &lt;span class="hljs-literal"&gt;true&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// On construit la requête&lt;/span&gt;
    requete.send(&lt;span class="hljs-literal"&gt;null&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// On envoie !&lt;/span&gt;
    requete.onreadystatechange = &lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;/span&gt;) &lt;/span&gt;{ &lt;span class="hljs-comment"&gt;// on attend le retour&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (requete.readyState == &lt;span class="hljs-number"&gt;4&lt;/span&gt;) { &lt;span class="hljs-comment"&gt;// Revenu !&lt;/span&gt;
            &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (requete.status == &lt;span class="hljs-number"&gt;200&lt;/span&gt;) {&lt;span class="hljs-comment"&gt;// Retour s'est bien passé !&lt;/span&gt;
                &lt;span class="hljs-comment"&gt;// fonction d'affichage (ci-dessous)&lt;/span&gt;
                afficher(requete.responseText);
            } &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; { &lt;span class="hljs-comment"&gt;// Retour s'est mal passé :(&lt;/span&gt;
                alert(requete.status, requete.statusText);
            }
        }
    };
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;function&lt;/span&gt; &lt;span class="hljs-title"&gt;afficher&lt;/span&gt;(&lt;span class="hljs-params"&gt;json&lt;/span&gt;) &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// Affiche l'état des broches/pwm/millis revenu en json&lt;/span&gt;
    donnees = &lt;span class="hljs-built_in"&gt;JSON&lt;/span&gt;.parse(json);
    &lt;span class="hljs-built_in"&gt;console&lt;/span&gt;.log(donnees);
    
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(i=&lt;span class="hljs-number"&gt;3&lt;/span&gt;; i &amp;lt;= &lt;span class="hljs-number"&gt;5&lt;/span&gt;; i++) { &lt;span class="hljs-comment"&gt;// Pour les broches 3 à 5 de notre tableau&lt;/span&gt;
        etats[i].checked = donnees[&lt;span class="hljs-string"&gt;"broches"&lt;/span&gt;][i];
    }
    pwm.value = &lt;span class="hljs-built_in"&gt;parseInt&lt;/span&gt;(donnees[&lt;span class="hljs-string"&gt;"pwm"&lt;/span&gt;]);
    a0.value = &lt;span class="hljs-built_in"&gt;parseInt&lt;/span&gt;(donnees[&lt;span class="hljs-string"&gt;"A0"&lt;/span&gt;]);
    millis.textContent = donnees[&lt;span class="hljs-string"&gt;"uptime"&lt;/span&gt;];
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 En cadeau de fin, une version utilisable en ligne de cette interface :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="iframe-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="560" src="https://jsfiddle.net/f6c2kc11/7/embedded/result,js,html,css/" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Pour l’utiliser, il suffit simplement de modifier l’url de base avec votre IP publique et le port utilisé par l’Arduino.
&lt;/p&gt;
&lt;p&gt;
 Magie de l’internet, votre Arduino fait maintenant partie de la grande sphère de l’IoT, le phénomène très à la mode de l’Internet of Things. Qu’allez-vous bien pouvoir envoyer comme informations dorénavant ?
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/9j_j5Q-MZ_0" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Les outils du bon bricoleur</title><link href="https://eskimon.fr/les-outils-du-bon-bricoleur" rel="alternate"></link><published>2014-07-22T12:00:00+02:00</published><updated>2014-07-22T12:00:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2014-07-22:/les-outils-du-bon-bricoleur</id><summary type="html">&lt;p&gt;
 Ça y est, c’est l’été, les vacances sont là et vous allez enfin avoir du temps pour bricoler ! Mais avant de se jeter corps
et âme dans le monde merveilleux du
 &lt;abbr title="Do It Yourself"&gt;
  DIY
 &lt;/abbr&gt;
 , il serait bon de s’équiper ! Passons en revue dans cet article les quelques outils qui …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Ça y est, c’est l’été, les vacances sont là et vous allez enfin avoir du temps pour bricoler ! Mais avant de se jeter corps
et âme dans le monde merveilleux du
 &lt;abbr title="Do It Yourself"&gt;
  DIY
 &lt;/abbr&gt;
 , il serait bon de s’équiper ! Passons en revue dans cet article les quelques outils qui devraient se trouver
dans toutes caisses à outils de l’électronicien amateur !
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#les-outils-à-usages-divers"&gt;
    Les outils à usages divers
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#petits-outils-courants"&gt;
      Petits outils courants
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#tournevis"&gt;
       Tournevis
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;p&gt;
       &lt;a href="#clés"&gt;
        Clés
       &lt;/a&gt;
      &lt;/p&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;a href="#la-clé-allen-ou-clé-6-pans"&gt;
         La clé Allen (ou clé 6 pans)
        &lt;/a&gt;
       &lt;/li&gt;
       &lt;li&gt;
        &lt;a href="#la-clé-torx-ou-clé-étoile"&gt;
         La clé Torx (ou clé étoile)
        &lt;/a&gt;
       &lt;/li&gt;
       &lt;li&gt;
        &lt;a href="#la-clé-plate"&gt;
         La clé plate
        &lt;/a&gt;
       &lt;/li&gt;
       &lt;li&gt;
        &lt;a href="#la-clé-à-pipedouillecliquet"&gt;
         La clé à pipe/douille/cliquet
        &lt;/a&gt;
       &lt;/li&gt;
      &lt;/ul&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;p&gt;
       &lt;a href="#pinces"&gt;
        Pinces
       &lt;/a&gt;
      &lt;/p&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;a href="#les-pinces-plates"&gt;
         Les pinces plates
        &lt;/a&gt;
       &lt;/li&gt;
       &lt;li&gt;
        &lt;a href="#la-pince-coupante"&gt;
         La pince coupante
        &lt;/a&gt;
       &lt;/li&gt;
       &lt;li&gt;
        &lt;a href="#la-pince-à-dénuder"&gt;
         La pince à dénuder
        &lt;/a&gt;
       &lt;/li&gt;
       &lt;li&gt;
        &lt;a href="#la-pince-à-sertir"&gt;
         La pince à sertir
        &lt;/a&gt;
       &lt;/li&gt;
       &lt;li&gt;
        &lt;a href="#la-pince-brucelles"&gt;
         La pince brucelles
        &lt;/a&gt;
       &lt;/li&gt;
      &lt;/ul&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#dautres-outils-pratiques"&gt;
      D’autres outils pratiques
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#sécurité"&gt;
       Sécurité
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;p&gt;
       &lt;a href="#confort-et-outils"&gt;
        Confort et outils++
       &lt;/a&gt;
      &lt;/p&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;a href="#se-simplifier-la-vie"&gt;
         Se simplifier la vie
        &lt;/a&gt;
       &lt;/li&gt;
       &lt;li&gt;
        &lt;a href="#outils-dusinage"&gt;
         Outils d’usinage
        &lt;/a&gt;
       &lt;/li&gt;
      &lt;/ul&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#spécifiques-à-lélectronique"&gt;
    Spécifiques à l’électronique
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#test-et-prototypage"&gt;
      Test et prototypage
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#faire-son-montage-et-le-tester"&gt;
       Faire son montage et le tester
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-soudure"&gt;
       La soudure
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#lartillerie-lourde"&gt;
      L’artillerie lourde !
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#lélectronique"&gt;
       L’électronique
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-mécanique"&gt;
       La mécanique
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="les-outils-à-usages-divers"&gt;
 &lt;a aria-hidden="true" href="#les-outils-à-usages-divers"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les outils à usages divers
&lt;/h3&gt;
&lt;h4 id="petits-outils-courants"&gt;
 &lt;a aria-hidden="true" href="#petits-outils-courants"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Petits outils courants
&lt;/h4&gt;
&lt;p&gt;
 Parmi la liste des outils incontournables du bricolage, certains sont réellement faciles à trouver dans plein de magasins
(Leroy Merlin, Castorama etc). En voici une petite liste…
&lt;/p&gt;
&lt;h5 id="tournevis"&gt;
 &lt;a aria-hidden="true" href="#tournevis"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Tournevis
&lt;/h5&gt;
&lt;p&gt;
 Les tournevis ! Vous en avez tous déjà vu et sûrement manipulé. Ils sont indispensables et portent bien leurs noms. Aucune
excuse pour ne pas en avoir une paire toujours à portée de main. Ils vous seront très pratiques dès qu’il s’agira de démonter
quelque chose ou de resserrer un boîtier par exemple. On en trouve de très nombreux, dans les matériaux, les tailles et les
formes. Pour faire de l’électronique, je vous conseille d’avoir au moins plusieurs tailles de tournevis plats et quelques
tournevis cruciformes. Si vous faites des montages avec des petits potentiomètres de réglages, vous serez sûrement amenés
à utiliser des tournevis en plastique. Leur gros avantage est bien sûr qu’ils ne conduisent pas l’électricité, donc si vous
ripez en faisant votre réglage vous ne risquez pas de créer un court-circuit ! Il existe aussi des tournevis possédant un
indicateur lumineux dans le manche. Ces derniers sont forts pratiques pour tester la présence d’une tension dans un circuit.
Enfin, il est facile de trouver des tournevis à embout échangeable. Vous pouvez alors facilement changer de forme/taille
d’embout pour vous adapter à diverses situations.
&lt;/p&gt;
&lt;h5 id="clés"&gt;
 &lt;a aria-hidden="true" href="#clés"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Clés
&lt;/h5&gt;
&lt;p&gt;
 Passons maintenant aux clés. Bien sur je ne parle pas des clefs pour rentrer dans votre atelier, mais bien des clés pour
pouvoir serrer vos boulons et autres écrous. Parmi la grande famille de ces dernières, voici quelques unes que l’on retrouve
très souvent.
&lt;/p&gt;
&lt;h6 id="la-clé-allen-ou-clé-6-pans"&gt;
 &lt;a aria-hidden="true" href="#la-clé-allen-ou-clé-6-pans"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La clé Allen (ou clé 6 pans)
&lt;/h6&gt;
&lt;p&gt;
 Facile à distinguer, c’est une pièce de métal coudée en L qui possède… 6 faces (d’où le nom de clé 6 pans). Elle est utilisée
pour serrer des vis possédant une tête creuse de la même forme. Le nom de clé "Allen" vient du nom de la marque éponyme qui
a mis en œuvre cette dernière.
&lt;/p&gt;
&lt;h6 id="la-clé-torx-ou-clé-étoile"&gt;
 &lt;a aria-hidden="true" href="#la-clé-torx-ou-clé-étoile"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La clé Torx (ou clé étoile)
&lt;/h6&gt;
&lt;p&gt;
 Comme pour la clé 6 pans, c’est la caractéristique mécanique qui lui donne son nom. Elle possède une forme en étoile et s’adapte
là encore aux vis possédant une tête creuse de la même forme. Cette clé fut inventée par le constructeur automobile Renault.
&lt;/p&gt;
&lt;h6 id="la-clé-plate"&gt;
 &lt;a aria-hidden="true" href="#la-clé-plate"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La clé plate
&lt;/h6&gt;
&lt;p&gt;
 Les clés plates font partie des incontournables. On en trouve de toutes tailles et elles servent à serrer des écrous ou des
boulons. Prenez en quelques unes, elles ne coutent pas une fortune et sont toujours pratiques !
&lt;/p&gt;
&lt;h6 id="la-clé-à-pipedouillecliquet"&gt;
 &lt;a aria-hidden="true" href="#la-clé-à-pipedouillecliquet"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La clé à pipe/douille/cliquet
&lt;/h6&gt;
&lt;p&gt;
 La clé a pipe est similaire à la clé plate à ceci prêt qu’elle a la forme d’une pipe. Sa prise en main facilite le mouvement
et donc donne plus de force pour agir sur le boulon/écrou. La clé à douille est similaire, elle utilise des "douilles" qui
ne sont rien d’autres que des embouts interchangeables pour agir sur la visserie. Enfin, la clé à cliquet est une clé à douille
mais possédant un mécanisme particulier lui permettant de faire des mouvements de vissage/dévissage rapide puisque la douille
n’a pas à être retirée du boulon/écrou entre chaque mouvement.
&lt;/p&gt;
&lt;h5 id="pinces"&gt;
 &lt;a aria-hidden="true" href="#pinces"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Pinces
&lt;/h5&gt;
&lt;p&gt;
 Parlons maintenant des pinces. Comme pour les autres outils, il en existe de toutes les formes et toutes les couleurs…
Seules certaines d’entre elles vont nous intéresser…
&lt;/p&gt;
&lt;h6 id="les-pinces-plates"&gt;
 &lt;a aria-hidden="true" href="#les-pinces-plates"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les pinces plates
&lt;/h6&gt;
&lt;p&gt;
 Comme son nom l’indique, cette pince est… plate. Elle est souvent utilisée pour serrer deux choses entre elles ou pour
maintenir quelque chose le temps d’une opération. Par exemple pour refermer un bout de métal ou pour maintenir un fil en
train d’être soudé (et ainsi ne pas se brûler).
&lt;/p&gt;
&lt;h6 id="la-pince-coupante"&gt;
 &lt;a aria-hidden="true" href="#la-pince-coupante"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La pince coupante
&lt;/h6&gt;
&lt;p&gt;
 Là encore le nom est évocateur. Elle va nous servir tout simplement à couper des fils. Cependant n’allez pas couper des fils
avec une section (un diamètre) trop grosse sous peine d’endommager l’outil.
&lt;/p&gt;
&lt;h6 id="la-pince-à-dénuder"&gt;
 &lt;a aria-hidden="true" href="#la-pince-à-dénuder"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La pince à dénuder
&lt;/h6&gt;
&lt;p&gt;
 Toujours des noms très clairs, cette dernière servira à dénuder vos fils. Autrement dit elle coupera
 &lt;strong&gt;
  proprement
 &lt;/strong&gt;
 l’isolant
plastique sur le bout de votre fil qui pourra ensuite être simplement étamé, soudé ou vissé sur un connecteur. Elle est plutôt
facultative dans le sens où le dénudage peut être fait avec une pince coupante, des ciseaux ou un couteau, mais ce sera moins
rapide qu’avec cet outil dédié.
&lt;/p&gt;
&lt;h6 id="la-pince-à-sertir"&gt;
 &lt;a aria-hidden="true" href="#la-pince-à-sertir"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La pince à sertir
&lt;/h6&gt;
&lt;p&gt;
 Allant souvent de paire avant la pince à dénuder, cet outil vous permettra de
 &lt;strong&gt;
  sertir
 &lt;/strong&gt;
 vos fils dénudés sur vos connecteurs.
Cela vous garantit que votre fil sera bien fixé et maintenu sur sa cosse et ainsi qu’il ne risque pas de s’arracher du connecteur
final dès que vous allez tirer un peu dessus. Là encore elle est facultative, cette opération pouvant être réalisée (de manière
plus galère) avec une pince plate et de la patience. Son coût peut aussi être un frein à l’achat…
&lt;/p&gt;
&lt;h6 id="la-pince-brucelles"&gt;
 &lt;a aria-hidden="true" href="#la-pince-brucelles"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La pince brucelles
&lt;/h6&gt;
&lt;p&gt;
 Cette dernière est toute simple et a une application bien particulière. Elle ressemble un peu à une pince à épiler à la différence
qu’elle se termine en pointe et ne coupe pas. Elle est utile pour manipuler des composants montés en surface (CMS) qui sont
difficiles à prendre à la main et à positionner correctement.
&lt;/p&gt;
&lt;h4 id="dautres-outils-pratiques"&gt;
 &lt;a aria-hidden="true" href="#dautres-outils-pratiques"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 D’autres outils pratiques
&lt;/h4&gt;
&lt;p&gt;
 Une fois votre caisse à outils équipée avec les outils minimum de tout bon bricoleur (le kit de survie), nous pouvons commencer
à en rajouter quelques uns, pour du confort ou de la sécurité.
&lt;/p&gt;
&lt;h5 id="sécurité"&gt;
 &lt;a aria-hidden="true" href="#sécurité"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sécurité
&lt;/h5&gt;
&lt;p&gt;
 Commençons par la sécurité puisque c’est important ! Si vous commencez à fabriquer vos propres cartes électroniques, vous
allez manipuler des produits toxiques et corrosifs. Le minimum est donc de prendre une paire de gants afin d’éviter les éventuelles
éclaboussures avec la peau (qui pourraient vous laisser des taches par exemple voire bien pire). Qui dit gant, dit aussi
lunettes (car les éclaboussures ne sont pas difficiles, elles se contenteront de vous attaquer là où c’est possible
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 ).
Les lunettes sont aussi très pratiques quand il s’agit de faire des perçages (un copeau dans l’œil est vite arrivé). D’une
manière générale : Protégez-vous ! N’oubliez pas ce que nous dit la loi de Murphy (ou loi de l’emmerdement maximal) : C’est
la seule fois où vous ne porterez pas de protection que l’accident arrivera !
&lt;/p&gt;
&lt;h5 id="confort-et-outils"&gt;
 &lt;a aria-hidden="true" href="#confort-et-outils"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Confort et outils++
&lt;/h5&gt;
&lt;h6 id="se-simplifier-la-vie"&gt;
 &lt;a aria-hidden="true" href="#se-simplifier-la-vie"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Se simplifier la vie
&lt;/h6&gt;
&lt;p&gt;
 Il arrive souvent que l’on ait des taches un peu fastidieuses à faire à la main. Par exemple étamer un simple fil (action
qui consiste à recouvrir d’étain le cuivre d’un fil). Pour cela il vous faut tenir le fil, tenir l’étain et manipuler le
fer à souder pour déposer l’étain sur le fil. Nul doute qu’une troisième main serait fort pratique ! C’est justement le nom
de l’outil suivant. La troisième main se présente sous la forme d’un support avec une pince ou deux et éventuellement une
loupe. Le support est leste pour bien rester en place lorsque vous manipulez. Grâce aux pinces vous pouvez facilement placer
des composants dans l’orientation qui vous arrange le plus pour faire vos bricoles ! Dans le même ordre d’idée on retrouve
l’étau. Cet ustensile est plus dédié au serrage ou au maintien bien en place pendant un usinage. Placez une pièce entre les
mâchoires, serrez, c’est maintenu ! Vous pouvez alors laisser le tout en place (pour coller deux pièces par exemple) ou commencer
à percer/limer/etc de manière stable, propre et sécurisée. Il existe différents moyens de fixer l’étau à votre établi. Certains
sont par un système de ventouse, d’autres se fixent par une vis de serrage.
&lt;/p&gt;
&lt;h6 id="outils-dusinage"&gt;
 &lt;a aria-hidden="true" href="#outils-dusinage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Outils d’usinage
&lt;/h6&gt;
&lt;p&gt;
 Pour faire des ajustements mécaniques sur des pièces, il est utile d’avoir de quoi usiner. Parmi ces outils on retrouve la
perceuse (portative ou colonne) qui vous permettra de trouer à volonté, la fraiseuse pour faire des ajustements de surface
ou encore une bonne vieille lime pour ébavurer des découpes ou arrondir des angles un peu trop francs et dangereux.
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  Rappel sécurité
 &lt;/strong&gt;
 , lorsque vous utilisez des outils électro-portatifs (comme une perceuse), veillez à toujours bien
bloquer la pièce qui va recevoir le traitement. Vous ne souhaitez pas la voir commencer à tourner et risquer de partir dans
le décor. De même, des lunettes pour éviter les copeaux dans les yeux sont les bienvenues !
&lt;/p&gt;
&lt;h3 id="spécifiques-à-lélectronique"&gt;
 &lt;a aria-hidden="true" href="#spécifiques-à-lélectronique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Spécifiques à l’électronique
&lt;/h3&gt;
&lt;h4 id="test-et-prototypage"&gt;
 &lt;a aria-hidden="true" href="#test-et-prototypage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Test et prototypage
&lt;/h4&gt;
&lt;p&gt;
 Bricoler c’est bien, mais parlons un peu de ce qui nous regroupe sur ce blog, l’électronique et l’embarqué !
&lt;/p&gt;
&lt;h5 id="faire-son-montage-et-le-tester"&gt;
 &lt;a aria-hidden="true" href="#faire-son-montage-et-le-tester"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Faire son montage et le tester
&lt;/h5&gt;
&lt;p&gt;
 Si vous avez lu le tuto Arduino vous devez déjà connaitre tout ça, mais repassons une petite couche là dessus tout de même…
Pour faire un montage rapide et de prototypage pour tester quelque chose, la breadboard reste un choix idéal. Il est facile
d’y enficher des composants pour faire des tests. Afin d’optimiser le tout, je vous conseille l’acquisition d’une bobine
de fil mono-brin. Ce dernier est plus simple que le multibrin pour rentrer dans les trous de la breadboard. Il existe aussi
des kits de fils pour breadboard de tailles et couleurs différentes pour faire des montages propres. Une fois votre montage
fait vous allez vouloir le tester pour trouver où l’électronique ne fonctionne pas. L’utilisation d’un multimètre permettant
de mesurer la tension, l’intensité ou encore possédant des fonctions de testeur de diodes et de mesure de résistances est
rapidement indispensable. Ils ne coutent pas cher et se trouvent facilement. Enfin, lorsque votre montage est terminé et
fonctionnel vous pourriez avoir envie de l’embarquer sur une carte électronique pour fixer les composants. Si vous ne pouvez
pas réaliser vos propres cartes et/ou ne souhaitez pas dépenser des fortunes pour les réaliser, vous pouvez toujours souder
vos composants sur des "plaques à trous" (aussi appelées veroboard). Tous ces composants sont simples à trouver sur Internet,
comme sur
 &lt;a href="http://fr.farnell.com/"&gt;
  le site de Farnell
 &lt;/a&gt;
 par exemple.
&lt;/p&gt;
&lt;h5 id="la-soudure"&gt;
 &lt;a aria-hidden="true" href="#la-soudure"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La soudure
&lt;/h5&gt;
&lt;p&gt;
 Puisqu’on parle de soudure voyons un peu tout ce qui y touche… Bien entendu, tout commence par le fer. Pour des travaux
d’électronique, un fer d’une trentaine de watts sera suffisant. Il doit être capable de chauffer entre 300 et 400°C si vous
voulez que l’étain fonde. Bien entendu, il en existe pour tous les prix, allant du simple fer à 10€ à la station réglable
qui en coûtera plus d’une centaine. Choisissez en fonction de vos moyens et de vos prétentions mais gardez en tête que les
moins chers vont chauffer lentement ou atteindre difficilement une température suffisante. De manière générale, essayez d’éviter
les fers de type "pistolets". Le fer à souder ne sert pas à grand chose s’il est seul, il vous faudra aussi investir dans
une bobine d’étain (fil à souder) qui peut contenir ou non du plomb (plus simple à souder, par contre à utiliser dans un
endroit aéré car les vapeurs ne sont pas très bonnes pour l’organisme). De la tresse à dessouder ou une pompe à dessouder
peuvent aussi s’avérer utile.
&lt;/p&gt;
&lt;h4 id="lartillerie-lourde"&gt;
 &lt;a aria-hidden="true" href="#lartillerie-lourde"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’artillerie lourde !
&lt;/h4&gt;
&lt;p&gt;
 Parlons maintenant des outils avancés. Attention, ces derniers coûtent souvent assez chers. Heureusement ils ne sont pas
indispensables pour débuter !
&lt;/p&gt;
&lt;h5 id="lélectronique"&gt;
 &lt;a aria-hidden="true" href="#lélectronique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’électronique
&lt;/h5&gt;
&lt;p&gt;
 Parmi les outils d’analyse, test et diagnostique on trouve l’incontournable oscilloscope. Ce dernier est fort pratique pour
analyser l’évolution d’un signal au cours du temps, qu’il s’agisse de l’évolution de la décharge d’un condensateur (analogique)
ou l’observation des bits dans une transmission série (numérique). Il est possible de trouver de vieux oscilloscopes analogiques
pour pas trop cher, mais souvent les oscilloscopes numériques sont plus sympas à utiliser. Petit frère de l’oscilloscope
mais orienté "numérique seulement", l’analyseur logique. Cet appareil sert la plupart du temps à l’analyse de plusieurs signaux
en parallèle (comme un bus de donnée avec horloge et données par exemple). Il peut aussi servir à vérifier que la logique
d’entrées/sorties d’un composant programmable est bonne. Ces deux outils précédents servent à faire des mesures. Ils peuvent
être très bien complétés par un outil servant à générer des signaux pour tester la réaction d’un circuit. C’est le cas du
GBF (Générateur Basse Fréquence) qui va servir à générer des signaux à la forme et fréquence que vous voulez (triangle, sinusoïde,
créneau…).
&lt;/p&gt;
&lt;h5 id="la-mécanique"&gt;
 &lt;a aria-hidden="true" href="#la-mécanique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La mécanique
&lt;/h5&gt;
&lt;p&gt;
 Parmi les choses à la mode dans le monde du bricolage, on parle beaucoup des imprimantes 3D. À partir d’un ruban de plastique
ces machines sont capables de produire de petites pièces avec un rendu assez impressionnant. Cependant, vous vous en doutez,
le prix est lui aussi impressionnant. La plupart des modèles tournent autour des 500 euros sans compter les consommables.
Je ne suis pas expert sur ce sujet, mais si cela vous intéresse Google regorge de ressources à ce propos tant la mode est
présente. On parle aussi souvent des CNC (Computer Numerical Control). Ce terme bien vague regroupe globalement les machines
d’usinage pilotées par ordinateur. Dans le monde amateur, lorsque l’on parle de "CNC (3 axes)" on fait référence à une machine
capable de se déplacer sur un plan et de percer ou fraiser des pièces.
&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;
 Vous voilà maintenant renseignés pour vous équiper et vous occuper ! Cet article n’est bien entendu pas à prendre au pied
de la lettre, des ajustements sont souvent nécessaires entre ce qui existe et ce dont vous avez réellement besoin.
Cependant, il est toujours agréable d’avoir quelques outils de base sous la main pour bricoler. Il n’y a rien de
plus frustrant que de ne pas avoir le bon tournevis pour avancer
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 !
&lt;/p&gt;</content><category term="bricolage"></category><category term="diy"></category><category term="outils"></category></entry><entry><title>Les suites de design électroniques</title><link href="https://eskimon.fr/les-suites-de-design-electroniques" rel="alternate"></link><published>2014-05-21T13:00:00+02:00</published><updated>2014-05-21T13:00:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2014-05-21:/les-suites-de-design-electroniques</id><summary type="html">&lt;p&gt;
 Prenons un peu de temps aujourd’hui pour partir à la découverte de quelques logiciels pouvant être utiles à tout bricoleur
faisant des circuits électroniques : les suites de création de PCB ! Je vous en ai sélectionné quelques unes, toutes
gratuites et allant du niveau débutant jusqu’à une compétence plus …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Prenons un peu de temps aujourd’hui pour partir à la découverte de quelques logiciels pouvant être utiles à tout bricoleur
faisant des circuits électroniques : les suites de création de PCB ! Je vous en ai sélectionné quelques unes, toutes
gratuites et allant du niveau débutant jusqu’à une compétence plus professionnelle.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;a href="#fritzing"&gt;
   Fritzing
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#kicad"&gt;
   Kicad
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#designspark"&gt;
   DesignSpark
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#eagle"&gt;
   Eagle
  &lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="fritzing"&gt;
 &lt;a aria-hidden="true" href="#fritzing"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Fritzing
&lt;/h3&gt;
&lt;figure&gt;
 &lt;img alt="Fritzing" src="./images/uploaded/les-suites-de-design-electroniques/fritzing.png"/&gt;
 &lt;figcaption&gt;
  Fritzing
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 On commence doucement avec un logiciel auquel sont habitués les lecteurs du tuto Arduino :
 &lt;a href="http://fritzing.org/home/"&gt;
  Fritzing
 &lt;/a&gt;
 ! En effet, cet outil a un avantage assez rare, il dispose d’un rendu type "dessin" très appréciable pour faire
des schémas simples et visuels pour des débutants. Il permet ainsi de voir "quel fil va où ?!". C’est une fonction assez
unique dans le monde des outils d’électronique (que les autres logiciels présentés dans cet article ne proposeront pas).
Un autre atout est sa prise en main aisée et rapide même pour un néophyte. Enfin, il est assez complet en terme d’outils
pour prétendre pouvoir réaliser des schémas électroniques et des typons. Mais (car il y a un mais), tout cela vient à un
prix. En effet, le côté obscur de l’user-friendly est bien sûr qu’il devient plus délicat de faire des choses un peu plus
poussées. La bibliothèque de composants de base n’est pas très fournie (très orientée Arduino) et l’outil de schéma électronique
est perfectible (fil qui ne s’aligne pas proprement, pas de label, etc…). Ce logiciel est donc très bien pour faire des
schémas simples ou visuels, mais sera vite limité pour quelqu’un voulant faire quelque chose de plus poussé. Enfin, il est
bon de savoir que le programme est multi-plateforme (pratique !) et Open Source.
 &lt;em&gt;
  N’ayant pas testé la fonction de création de PCB, je ne jugerai pas cette dernière.
 &lt;/em&gt;
&lt;/p&gt;
&lt;h3 id="kicad"&gt;
 &lt;a aria-hidden="true" href="#kicad"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Kicad
&lt;/h3&gt;
&lt;figure&gt;
 &lt;img alt="Kicad" src="./images/uploaded/les-suites-de-design-electroniques/kicad.png"/&gt;
 &lt;figcaption&gt;
  Kicad
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Commençons tout de suite à parler de ce qui le démarque des autres : C’est un outil français !
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 Voilà, fin du chauvinisme,
parlons un peu du logiciel… Voici un lien vers la page de ce dernier :
 &lt;a href="http://www.kicad-pcb.org/"&gt;
  http://www.kicad-pcb.org/
 &lt;/a&gt;
 Tout d’abord, sachez qu’il a été développé pour être fourni de manière gratuite dès le début. Plutôt un bon point et du coup
il est facile de trouver de l’aide dessus sur Internet. Son interface est similaire à celle que l’on peut trouver sur d’autres
programmes du même calibre. Là on parle bien de logiciel pour personnes un peu plus habituées à l’électronique puisqu’il
n’y a plus de glisser-déposer de dessins sur une feuille. Ici c’est du schéma électronique, du vrai, et ce sera comme ça
aussi pour les autres logiciels dessous. En plus du schéma électronique, on peut bien sûr réaliser un PCB (typon). Ce dernier
peut d’ailleurs être visualisé en 3D si les modèles des composants sont fournis. Je ne sais pas trop pourquoi, je n’ai jamais
trop accroché à ce soft. L’interface est pourtant similaire à celle de ses confrères et les fonctionnalités aussi mais je
n’ai pas trop d’idées sur ce qui me freine… Je ne pourrai donc pas trop vous parler plus en détail ! Là encore, c’est un
logiciel multi-plateforme.
&lt;/p&gt;
&lt;h3 id="designspark"&gt;
 &lt;a aria-hidden="true" href="#designspark"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 DesignSpark
&lt;/h3&gt;
&lt;figure&gt;
 &lt;img alt="Design Spark" src="./images/uploaded/les-suites-de-design-electroniques/design-spark.jpg"/&gt;
 &lt;figcaption&gt;
  Design Spark
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Au suivant !
 &lt;a href="http://www.rs-online.com/designspark/electronics/"&gt;
  DesignSpark
 &lt;/a&gt;
 ("l’étincelle du design" ou "l’étincelle de la création" si l’on voulait traduire). Derrière ce nom éloquent
se cache un programme codé par les ingénieurs de chez RadioSpares. Oui oui, je parle bien du fournisseur de composants. En
effet, RS a décidé de proposer son propre outil et de fonder une communauté autour afin de fédérer des utilisateurs et probablement
ainsi étendre son marché. Et ça marche ! Le logiciel n’est pas désagréable à utiliser (demande un peu de prise en main car
les raccourcis claviers sont différents des autres logiciels) et est plutôt clair et fonctionnel. La bibliothèque de composants
de base est correctement fournie et, gros point positif, le logiciel embarque un outil de création de composant plutôt pas
mal fait du tout et facile à utiliser. Il devient ainsi simple de créer un composant depuis une datasheet. Comme pour le
précédent, on retrouve une vue 3D si le composant possède un modèle. Sinon rien de plus à redire, il respecte les mêmes codes
et conventions que ses concurrents. Un point noir cependant pour moi qui travaille sous Linux : il n’est disponible que pour
Windows et l’équipe n’a apparemment pas prévu de portage. Dommage à l’heure où une majeure partie des bidouilleurs/bricoleurs
se retrouve sous des systèmes comme Ubuntu.
&lt;/p&gt;
&lt;h3 id="eagle"&gt;
 &lt;a aria-hidden="true" href="#eagle"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Eagle
&lt;/h3&gt;
&lt;figure&gt;
 &lt;img alt="Eagle" src="./images/uploaded/les-suites-de-design-electroniques/eagle.jpg"/&gt;
 &lt;figcaption&gt;
  Eagle
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Passons au dernier programme de cet article
 &lt;a href="http://www.cadsoftusa.com/download-eagle/freeware/"&gt;
  Eagle
 &lt;/a&gt;
 . Ce logiciel est à l’origine dédié au marché des professionnels. Il est donc nécessaire d’avoir une licence (chère)
pour l’utiliser à volonté. Cependant, devant l’ampleur du phénomène "Maker", l’éditeur à décidé de proposer une version gratuite
et sans limite dans le temps ou dans les fonctionnalités. Ou presque. Les seules limites sont représentées par l’utilisation
d’une seule feuille par schéma et on ne peut faire que des typons de deux couches (ce qui est la limite de faisabilité pour
un process "fait main"). On ne peut aussi que créer un PCB de 100mm par 80mm. Au delà de ces limites, on se retrouve avec
un logiciel pleinement fonctionnel, professionnel et assez bien fourni. On retrouve les mêmes fonctions que sur les deux
précédents (schéma, typon, 3D…). Point intéressant, c’est ce programme qui est utilisé par Arduino et LadyAda. On retrouve
donc de nombreux schémas électroniques et typons fournis par ces derniers que les bricoleurs peuvent ensuite reprendre pour
leur propre utilisation. Enfin, il est multi-plateforme, enfin presque. Il se sert d’une sorte d’émulation Windows pour fonctionner
sous Linux mais ce n’est pas vraiment handicapant.
&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;
 Il existe bien sûr plein d’autres logiciels et je ne peux pas faire une liste exhaustive ne pouvant pas tous les tester et
n’étant pas non plus électronicien de métier je ne saurais faire une analyse vraiment poussée de chacun de ces logiciels.
Le mieux encore est de tester et de découvrir ce qui vous convient le plus. Cependant, pour des "grands débutants"
j’aurais tendance à conseiller Fritzing si vous l’utilisez
 &lt;strong&gt;
  avec rigueur
 &lt;/strong&gt;
 . En effet, rien de pire que de lire un schéma dont les fils partent dans tous les sens. Pour
les personnes moins effrayées par les symboles de l’électronique, je vous encourage à vous tourner vers des logiciels
comme Eagle dans sa version gratuite. Ce dernier est en effet très utilisé dans le monde professionnel et il est
(très) fréquent de trouver des librairies d’utilisateur Arduino et autres outils DIY fait par des gens compétents.
&lt;/p&gt;</content><category term="electronique"></category><category term="test"></category></entry><entry><title>[TEST] ElectroDroid</title><link href="https://eskimon.fr/test-electrodroid" rel="alternate"></link><published>2014-05-07T09:00:00+02:00</published><updated>2014-05-07T09:00:00+02:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2014-05-07:/test-electrodroid</id><summary type="html">&lt;p&gt;
 Salut les bricoleurs !
&lt;/p&gt;
&lt;p&gt;
 Aujourd’hui je vous propose une petite revue d’une application bien pratique pour les électroniciens : ElectroDroid.
Comme son nom l’indique (plus ou moins), c’est une application dédiée aux smartphones équipés de l’OS Android.
&lt;/p&gt;
&lt;p&gt;
 Ce logiciel est un excellent mélange entre des fiches-mémos (personne …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Salut les bricoleurs !
&lt;/p&gt;
&lt;p&gt;
 Aujourd’hui je vous propose une petite revue d’une application bien pratique pour les électroniciens : ElectroDroid.
Comme son nom l’indique (plus ou moins), c’est une application dédiée aux smartphones équipés de l’OS Android.
&lt;/p&gt;
&lt;p&gt;
 Ce logiciel est un excellent mélange entre des fiches-mémos (personne ne veut retenir le code couleur des résistances par cœur
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 ) et une caisse à outils mathématiques grâce à son ensemble de calculateurs complets pour les montages ou composants les plus courants.
&lt;/p&gt;
&lt;h3 id="les-mémos"&gt;
 &lt;a aria-hidden="true" href="#les-mémos"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les mémos
&lt;/h3&gt;
&lt;figure&gt;
 &lt;img alt="[Brochage de l'USB](http://eskimon.fr/wp-content/uploads/2014/02/8-Brochage-de-lUSB-175x300.png)" src="./images/uploaded/test-electrodroid/brochage-de-lusbhttpeskimonfrwp-contentuploads2014028-brochage-de-lusb-175x300png.png"/&gt;
 &lt;figcaption&gt;
  [Brochage de l'USB](http://eskimon.fr/wp-content/uploads/2014/02/8-Brochage-de-lUSB-175x300.png)
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Parmi la liste des outils, on retrouve de nombreuses fiches aides-mémoires. Une grande partie est classée dans une rubrique "brochage" et reprend l’ensemble des connecteurs publics ou propriétaires et énumère les noms de chacune des broches (USB, SCART, HDMI, Arduino UNO…).
On trouve aussi en tant qu’outils complémentaires (à ajouter en plus du logiciel de base) des listings de microcontrôleurs reprenant les caractéristiques de ces derniers ou encore des détails sur le brochage de certains circuits intégrés. Ces modules sont cependant à installer en plus de l’application de base.
Enfin, on peut aussi trouver une fiche contenant les préfixes numériques et les puissances décimales respectives (méga, kilo, milli…) ainsi qu’une fiche contenant les abréviations des unités du système international et leur nom littéral … en anglais (peut-être traduit un jour ?). Une occasion rêvée de travailler un peu votre anglais technique
 &lt;img alt=":-°" class="smiley" src="./static/smileys/siffle.png"/&gt;
 .
&lt;/p&gt;
&lt;h3 id="les-outils-de-calcul"&gt;
 &lt;a aria-hidden="true" href="#les-outils-de-calcul"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les outils de calcul
&lt;/h3&gt;
&lt;figure&gt;
 &lt;img alt="[NE555](http://eskimon.fr/wp-content/uploads/2014/02/6-NE555-175x300.png)" src="./images/uploaded/test-electrodroid/ne555httpeskimonfrwp-contentuploads2014026-ne555-175x300png.png"/&gt;
 &lt;figcaption&gt;
  [NE555](http://eskimon.fr/wp-content/uploads/2014/02/6-NE555-175x300.png)
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 C’est là le cœur de l’application et son plus grand intérêt. En effet, cette dernière regroupe un très grand nombre d’outils pour vous faciliter la vie. On commence par les couleurs des résistances et des inductances qui possèdent chacune un outil très intuitif pour déduire la valeur du composant. Il suffit de cliquer sur les anneaux pour voir s’afficher la valeur !
Trouver des résistances c’est bien, les utiliser c’est mieux ! C’est pourquoi l’application regorge de calculateurs divers. Du monostable aux filtres (RC, LC, RL) en passant par les traditionnels diviseurs de tension et calcul de résistance pour LED, tout y passe ou presque. De plus, chaque outil de calcul est accompagné d’un schéma électronique clair pour savoir quelle variable vous modifiez. Bref, c’est bien fait, on ne perd jamais de temps à comprendre comment l’outil fonctionne même si c’est la première fois que l’on s’en sert ! Et c’est bien là un objectif réussi : gagner du temps !
Les techniciens les plus avertis pourront cependant regretter l’absence d’outils plus avancés comme la polarisation d’un transistor ou la gestion de filtre d’ordre 2 ou plus avec leur diagramme de Bode/phase associée par exemple. Mais l’application évolue, pourquoi pas un jour ?
&lt;/p&gt;
&lt;h3 id="autres-fonctions"&gt;
 &lt;a aria-hidden="true" href="#autres-fonctions"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Autres fonctions
&lt;/h3&gt;
&lt;p&gt;
 Parmi les autres bricoles que l’on peut trouver il mérite de nommer les listes de composants standards (série E6, E12, E24, E48, E96 et E192) ainsi qu’un tableau de condensateurs les plus courants. On retrouve aussi les datablock de quelques composants 7400 bien que la majorité vous renvoie vers Wikipedia.
&lt;/p&gt;
&lt;h3 id="en-conclusion"&gt;
 &lt;a aria-hidden="true" href="#en-conclusion"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 En conclusion
&lt;/h3&gt;
&lt;p&gt;
 Cette application fait donc partie des applis à posséder sur son smartphone si vous faites souvent de l’électronique et des montages sur le pouce. Ses outils de calculs et ses fiches mémos peuvent vous faire gagner du temps plutôt que de devoir sortir une feuille, votre crayon et la calculatrice !
De plus sa compatibilité depuis au moins 2.3 et son petit poids de 5,6 Mo ne fera pas de mal à votre appareil
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 . Bref, aucune excuse de ne pas l’avoir !
S’il fallait absolument donner un point négatif, ce serait celui de la traduction incomplète. Quitte à avoir une application traduite, autant qu’elle le soit de bout en bout. C’est dommage, ce n’est pas le cas ici mais cela n’empêche en rien son utilisation par une personne qui a une connaissance faible de l’anglais.
&lt;/p&gt;
&lt;p&gt;
 Et voici le lien pour l’installer :
 &lt;a href="https://play.google.com/store/apps/details?id=it.android.demi.elettronica"&gt;
  ElectroDroid sur le Play Store
 &lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
 Il existe aussi une version payante (2€) de l’application qui semble apporter quelques fonctions supplémentaires et supprime le bandeau de publicité présent en bas de l’application. Si vous voulez supporter le développement et l’auteur de l’application ne vous gênez pas !
 &lt;em&gt;
  Sachez cependant que je n’ai aucun lien avec lui ou son application, j’ai juste apprécié le produit et voulais vous en faire part
  &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 &lt;/em&gt;
&lt;/p&gt;</content><category term="test"></category><category term="application"></category><category term="electronique"></category></entry><entry><title>Alimenter une Arduino sans USB</title><link href="https://eskimon.fr/tuto-arduino-903-alimenter-une-arduino-sans-usb" rel="alternate"></link><published>2014-03-22T09:00:00+01:00</published><updated>2014-03-22T09:00:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2014-03-22:/tuto-arduino-903-alimenter-une-arduino-sans-usb</id><summary type="html">&lt;p&gt;
 Vous vous êtes peut-être déjà demandé comment faire pour devenir indépendant de votre ordinateur en terme d’alimentation afin de pouvoir utiliser votre super programme partout ? Eh bien voici quelques solutions qui peuvent être appliquées !
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#principe-et-pré-requis"&gt;
    Principe et pré-requis
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#alimenter-la-carte-arduino-avec-une-source-de-tension-5v"&gt;
     Alimenter la carte Arduino avec une source de tension 5V
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#salimenter-avec-autre-chose"&gt;
     S …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;
 Vous vous êtes peut-être déjà demandé comment faire pour devenir indépendant de votre ordinateur en terme d’alimentation afin de pouvoir utiliser votre super programme partout ? Eh bien voici quelques solutions qui peuvent être appliquées !
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#principe-et-pré-requis"&gt;
    Principe et pré-requis
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#alimenter-la-carte-arduino-avec-une-source-de-tension-5v"&gt;
     Alimenter la carte Arduino avec une source de tension 5V
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#salimenter-avec-autre-chose"&gt;
     S’alimenter avec autre chose
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#solutions"&gt;
    Solutions
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#avec-une-pile-9v"&gt;
     Avec une pile 9V
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#avec-plusieurs-piles-15v"&gt;
     Avec plusieurs piles 1.5V
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#avec-une-alimentation-presque-quelconque"&gt;
     Avec une alimentation (presque) quelconque
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#dautres-solutions"&gt;
     D’autres solutions ?
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="principe-et-pré-requis"&gt;
 &lt;a aria-hidden="true" href="#principe-et-pré-requis"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Principe et pré-requis
&lt;/h3&gt;
&lt;p&gt;
 La carte Arduino possède un
 &lt;strong&gt;
  régulateur
 &lt;/strong&gt;
 de tension pour fournir le 5V nécessaire au microcontrôleur lorsque celui-ci est alimenté via une source externe. Ce dernier est capable de transformer une source de tension continue "élevée" (dans notre cas supérieur à 5V) en tension plus faible et
 &lt;strong&gt;
  régulée
 &lt;/strong&gt;
 à 5V. Attention, tout n’est cependant pas possible, il y a des limites à respecter dont nous allons parler plus tard pour ne pas tout griller.
&lt;/p&gt;
&lt;p&gt;
 Le régulateur est capable de fournir au maximum 1 ampère en sortie. Souvent, lorsque l’on début ou que l’on prototype, on se contente de faire des montages et de les laisser connecté à l’ordinateur. La carte est donc directement alimentée via l’USB en 5V (limité au meilleur des cas à un maximum de 500mA). Mais s’en est assez ! Nous voulons plus d’indépendance pour pouvoir emmener nos montages partout ! Il existe pour cela plusieurs solutions que l’on peut ranger en deux catégories : Celles qui nous fournissent du 5V directement et celles qui nous fournissent une tension plus élevée…
&lt;/p&gt;
&lt;h4 id="alimenter-la-carte-arduino-avec-une-source-de-tension-5v"&gt;
 &lt;a aria-hidden="true" href="#alimenter-la-carte-arduino-avec-une-source-de-tension-5v"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Alimenter la carte Arduino avec une source de tension 5V
&lt;/h4&gt;
&lt;p&gt;
 Les sources de 5V sont monnaie courante de nos jours. On en retrouve par exemple énormément avec tous les appareils mobiles qui demande une alimentation USB pour être rechargé (chargeur de portable, "power pack" pour faire une batterie d’appoint…). Une fois que vous possédez cette dernière, il ne reste plus qu’à la relier à l’Arduino. Pour cela, on va passer au-delà du régulateur et amener directement la tension sur la borne "+5V" (et bien sûr sur le GND). Il est aussi possible d’adapter un câble USB pour amener cette tension sur le connecteur USB (et ainsi limiter les erreurs possibles de branchement). C’est la solution la plus simple.
&lt;/p&gt;
&lt;h4 id="salimenter-avec-autre-chose"&gt;
 &lt;a aria-hidden="true" href="#salimenter-avec-autre-chose"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 S’alimenter avec autre chose
&lt;/h4&gt;
&lt;p&gt;
 Si nous n’avons pas à disposition une source de tension 5V, il va falloir passer par le régulateur intégré à la carte pour l’obtenir. Comme le précise la documentation officielle, une tension de 7 à 12V est recommandée et les limites acceptées sont entre 6 et 20V. À 6V la carte risque de mal fonctionner (reset intempestif) et à 20V le régulateur va beaucoup chauffer et risque de mourir prématurément.
&lt;/p&gt;
&lt;p&gt;
 Pour amener notre tension externe, nous avons deux solutions :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  La première est d’utiliser la fiche ronde et noire, qui se situe près de l’entrée USB. Cette fiche, que l’on appelle un
  &lt;strong&gt;
   connecteur jack
  &lt;/strong&gt;
  femelle, fait 2.1mm de diamètre et possède deux connecteurs. L’un est une sorte de "pointe" qui est au milieu. Ce sera le pôle positif. L’autre est plaqué contre le bord intérieur du connecteur et fera connexion avec la masse.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Ce connecteur se dessine par le symbole électronique suivant :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Symbole du centre positif" src="./images/uploaded/tuto-arduino-903-alimenter-une-arduino-sans-usb/symbole-du-centre-positif.png"/&gt;
 &lt;figcaption&gt;
  Symbole du centre positif
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
 &lt;li&gt;
  L’autre solution consiste à amener directement nos fils sur les broches Vin et Gnd. Je ne recommande cependant pas cette méthode qui augmente les risques d’erreurs de manipulation et donc de court-circuit (qui se résulteront par la mort du régulateur voire plus).
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Maintenant que les présentations sont faites, il ne reste plus qu’à relier une source d’énergie et l’Arduino ensemble
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 .
&lt;/p&gt;
&lt;h3 id="solutions"&gt;
 &lt;a aria-hidden="true" href="#solutions"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Solutions
&lt;/h3&gt;
&lt;h4 id="avec-une-pile-9v"&gt;
 &lt;a aria-hidden="true" href="#avec-une-pile-9v"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Avec une pile 9V
&lt;/h4&gt;
&lt;p&gt;
 Lorsqu’on réfléchit à retirer la laisse USB de notre carte Arduino, l’une des premières idées est surement d’utiliser une pile 9V. En effet, cette dernière comporte plusieurs avantages :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  On en trouve facilement
 &lt;/li&gt;
 &lt;li&gt;
  Encombrante mais pas trop
 &lt;/li&gt;
 &lt;li&gt;
  Coût raisonnable
 &lt;/li&gt;
 &lt;li&gt;
  Sa tension est pile dans l’intervalle recommandé de [7V - 12V]
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Maintenant, le plus dur reste à faire : relier la pile et la carte Arduino. Problème, la pile possède deux plots bizarroïdes et l’Arduino a le fameux jack femelle. Pour pouvoir les relier il va donc falloir bricoler un peu. Du côté de la pile, on utilisera le connecteur suivant (récupérable sur pas mal de vieux jouets) :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Un support de pile 9V" src="./images/uploaded/tuto-arduino-903-alimenter-une-arduino-sans-usb/un-support-de-pile-9v.jpg"/&gt;
 &lt;figcaption&gt;
  Un support de pile 9V
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Du coté Arduino, nous l’avons vu plus tôt, il faudra un connecteur jack mâle. En les reliant ensemble (avec un domino, de la soudure, breadboard…) tout en respectant les couleurs vous aurez enfin la joie de pouvoir libérer votre Arduino du joug terrible de l’ordinateur et son câble USB
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 !
&lt;/p&gt;
&lt;p&gt;
 Il existe aussi des versions toutes faites de ce câble chez certains [web]marchands sous la forme suivante :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Support de pile relié au jack d'alimentation Arduino" src="./images/uploaded/tuto-arduino-903-alimenter-une-arduino-sans-usb/support-de-pile-relie-au-jack-dalimentation-arduino.jpg"/&gt;
 &lt;figcaption&gt;
  Support de pile relié au jack d'alimentation Arduino
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="avec-plusieurs-piles-15v"&gt;
 &lt;a aria-hidden="true" href="#avec-plusieurs-piles-15v"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Avec plusieurs piles 1.5V
&lt;/h4&gt;
&lt;p&gt;
 Comme nous l’avons vue un peu plus tôt, le régulateur 5V de l’Arduino exige au grand minimum 6V pour fonctionner. En utilisant des piles rondes de type AAA ou AA, on pourrait en mettre plusieurs en série (4 par exemple) pour obtenir les fameux 6V. Génial non ? Eh bien pas tant que ça. En effet, il y a un souci. Le 6V est le minimum vital pour le régulateur. Autrement, dit si la tension fluctue un peu il risque de ne pas pouvoir faire son travail correctement et le microcontrôleur va faire des resets n’importe quand. De plus, lorsque les piles sont neuves cela peut aller, mais dès qu’elles vont être un peu utilisées, la tension à leurs bornes ne sera plus réellement 1.5V mais légèrement inférieure, ce qui risque d’augmenter le problème mentionné ci-dessus. Une solution : utiliser une cinquième pile pour porter le total à 7.5V. Ainsi, même quand les piles commencent à se décharger il reste un peu de marge pour que le régulateur fasse correctement son travail. Si vous voulez jouer la prudence, vous pouvez carrément en rajouter une sixième !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Comme pour la pile 9V, il va falloir bricoler pour pouvoir relier un support de pile de ce type au jack rond de l’Arduino (encore une fois : attention aux polarités !) :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Support de pile AA" src="./images/uploaded/tuto-arduino-903-alimenter-une-arduino-sans-usb/support-de-pile-aa.png"/&gt;
 &lt;figcaption&gt;
  Support de pile AA
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="avec-une-alimentation-presque-quelconque"&gt;
 &lt;a aria-hidden="true" href="#avec-une-alimentation-presque-quelconque"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Avec une alimentation (presque) quelconque
&lt;/h4&gt;
&lt;p&gt;
 Il y a quelques temps, j’avais un disque dur externe. Malheureusement, une mésaventure se terminant par une chute en fonctionnement lui a fait rendre l’âme
 &lt;img alt=":(" class="smiley" src="./static/smileys/triste.png"/&gt;
 . Je me suis donc retrouvé avec un câble USB type B (bien utile avec l’Arduino) et une alimentation inutile. Inutile ? pas tant que ça ! Il s’avère (coup de chance) que l’extrémité du câble de l’alimentation rentre parfaitement dans la prise femelle du jack d’alimentation de l’Arduino. Un rapide coup d’oeil sur le bloc d’alimentation secteur me donne les caractéristiques qui m’intéressent :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Entrée : 100 - 240V alternatif 50–60 Hz (plutôt standard)
 &lt;/li&gt;
 &lt;li&gt;
  Sortie :
  &lt;strong&gt;
   12 V
  &lt;/strong&gt;
  , 1.5 A continu. BINGO !
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Me voilà avec une alimentation prête pour une nouvelle vie ! Un rapide coup d’œil sur le boitier pour m’assurer que le positif est bien au centre du jack (symbole ci-dessous) et c’est terminé !
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Symbole du centre positif" src="./images/uploaded/tuto-arduino-903-alimenter-une-arduino-sans-usb/symbole-du-centre-positif.png"/&gt;
 &lt;figcaption&gt;
  Symbole du centre positif
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Le chargeur recyclé" src="./images/uploaded/tuto-arduino-903-alimenter-une-arduino-sans-usb/le-chargeur-recycle.png"/&gt;
 &lt;figcaption&gt;
  Le chargeur recyclé
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ce chargeur, capable de débiter 1.5A sous 12V, serait même capable de fournir assez d’énergie pour alimenter un petit moteur via un shield moteur en reprenant directement les 12V sur la broche Vin par exemple
   &lt;sup id="fnref-1-czgzZlwL6"&gt;
    &lt;a class="footnote-ref" href="#fn-1-czgzZlwL6"&gt;
     1
    &lt;/a&gt;
   &lt;/sup&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="dautres-solutions"&gt;
 &lt;a aria-hidden="true" href="#dautres-solutions"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 D’autres solutions ?
&lt;/h4&gt;
&lt;p&gt;
 Les idées proposées ci-dessus ne sont pas les seuls. Vous en avez peut-être d’autres qui pourraient-être utilisées. En fait, n’importe quelle source d’énergie est viable, rappelez-vous juste qu’elle doit être en mesure de fournir plus de 7V continu et dans la mesure du possible moins de 12V (mais si ça fait 15V ce n’est pas dramatique non plus, le régulateur chauffera juste un peu plus). Parmi quelques idées en vrac on pourrait trouver :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Une batterie de voiture (environ 12V)
 &lt;/li&gt;
 &lt;li&gt;
  La prise allume-cigare de la voiture (11 à 13V selon que la voiture est à l’arrêt ou en marche)
 &lt;/li&gt;
 &lt;li&gt;
  Des panneaux solaires ?
 &lt;/li&gt;
 &lt;li&gt;
  Une dynamo ? (avec un pont de diode et un condensateur pour filtrer)
 &lt;/li&gt;
 &lt;li&gt;
  Soyez créatif ! (et n’hésitez pas à venir en parler en commentaire pour faire part de vos idées et expériences
  &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
  )
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnotes"&gt;
 &lt;hr/&gt;
 &lt;ol&gt;
  &lt;li id="fn-1-czgzZlwL6"&gt;
   &lt;p&gt;
    Attention, la broche est tout de même limitée à un ampère nominal car protégée par une diode pouvant laisser passer 1A dans des conditions normales de fonctionnement.
   &lt;/p&gt;
   &lt;a class="footnote-backref" href="#fnref-1-czgzZlwL6" title="Retourner au texte de la note 1"&gt;
    ↩
   &lt;/a&gt;
  &lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Des capteurs plus évolués</title><link href="https://eskimon.fr/tuto-arduino-503-des-capteurs-plus-%C3%A9volu%C3%A9s" rel="alternate"></link><published>2014-03-05T08:00:00+01:00</published><updated>2014-03-05T08:00:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2014-03-05:/tuto-arduino-503-des-capteurs-plus-évolués</id><summary type="html">&lt;p&gt;
 Comme nous avons pu le voir plus tôt, certains capteurs transmettent l’information sous forme d’une donnée électrique qui varie : la résistance ou la tension.
Cependant, certains capteurs envoient l’information de manière "codée", afin qu’elle soit plus résistante au bruit (perturbations) et garantir le signal transmis. Parmi …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Comme nous avons pu le voir plus tôt, certains capteurs transmettent l’information sous forme d’une donnée électrique qui varie : la résistance ou la tension.
Cependant, certains capteurs envoient l’information de manière "codée", afin qu’elle soit plus résistante au bruit (perturbations) et garantir le signal transmis. Parmi ces méthodes de transmission, on retrouve l’utilisation d’une PWM, de la fréquence ou d’un protocole de communication.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#capteur-à-sortie-en-modulation-de-largeur-dimpulsion-pwm"&gt;
    Capteur à sortie en modulation de largeur d’impulsion (PWM)
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#principe"&gt;
     Principe
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#utilisation"&gt;
      Utilisation
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#dans-la-pratique-avec-arduino"&gt;
       Dans la pratique avec Arduino
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#simulation-de-lexemple"&gt;
       Simulation de l’exemple
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#Étude-de-cas-le-capteur-de-distance-srf05"&gt;
     Étude de cas : le capteur de distance SRF05
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#capteur-à-signal-de-sortie-de-fréquence-variable"&gt;
    Capteur à signal de sortie de fréquence variable
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#exemple--exercice"&gt;
      Exemple / Exercice
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;p&gt;
       &lt;a href="#principe-1"&gt;
        Principe
       &lt;/a&gt;
      &lt;/p&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;a href="#la-fonction-tone"&gt;
         La fonction tone()
        &lt;/a&gt;
       &lt;/li&gt;
      &lt;/ul&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#correction"&gt;
       Correction
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#capteur-utilisant-un-protocole-de-communication"&gt;
    Capteur utilisant un protocole de communication
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#quelques-protocoles-de-communication"&gt;
      Quelques protocoles de communication
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#voie-série--uart"&gt;
       Voie série / UART
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#i2c"&gt;
       I2C
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#spi"&gt;
       SPI
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#protocole-propriétaire"&gt;
       Protocole propriétaire
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="capteur-à-sortie-en-modulation-de-largeur-dimpulsion-pwm"&gt;
 &lt;a aria-hidden="true" href="#capteur-à-sortie-en-modulation-de-largeur-dimpulsion-pwm"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Capteur à sortie en modulation de largeur d’impulsion (PWM)
&lt;/h3&gt;
&lt;h4 id="principe"&gt;
 &lt;a aria-hidden="true" href="#principe"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Principe
&lt;/h4&gt;
&lt;p&gt;
 Vous vous souvenez de la PWM ? Nous l’avons utilisée dans le chapitre sur
 &lt;a href="https://zestedesavoir.com/tutoriels/537/arduino-premiers-pas-en-informatique-embarquee/745/les-grandeurs-analogiques/3432/et-les-sorties-analogiques-enfin-presque/"&gt;
  les sorties analogiques
 &lt;/a&gt;
 . Dans ce type de signal, l’information est présente dans la durée de l’état haut par rapport à l’état bas. Ici, notre capteur va donc de la même façon coder l’information via une durée d’état (mais elle ne sera pas forcément relative à son état antagoniste). Il est donc nécessaire de connaitre les caractéristiques du capteur pour pouvoir interpréter le signal correctement.
&lt;/p&gt;
&lt;p&gt;
 En effet, si on prend le signal sans rien savoir du capteur, comment déterminer ce que 20ms d’état haut signifie par exemple ?
Pour cela, ce type de composant doit toujours être utilisé avec sa documentation technique, afin de déterminer des paramètres comme ses bornes inférieure et supérieure de mesure. Mais c’est aussi vrai pour les autres (si vous tombez sur une résistance variable sans rien en connaître, vous devrez vous farcir une belle séance d’étalonnage pour l’identifier !).
&lt;/p&gt;
&lt;h4 id="utilisation"&gt;
 &lt;a aria-hidden="true" href="#utilisation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utilisation
&lt;/h4&gt;
&lt;p&gt;
 Prenons un cas simple. Imaginons que nous avons un capteur de température qui nous renvoie l’information suivante :
 &lt;em&gt;
  "La température en °C Celsius est proportionnelle à la durée d’état haut. La plage de mesure va de 0°C à 75°C pour une durée d’état haut de 0ms à 20ms"
 &lt;/em&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Nous avons donc une relation proportionnelle entre une température et une durée. Nous pouvons alors déduire une règle mathématique pour faire la conversion degrésdurée.
&lt;/p&gt;
&lt;p&gt;
 En effet, on a les équivalences suivantes :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msup&gt;
         &lt;mn&gt;
          0
         &lt;/mn&gt;
         &lt;mo&gt;
          ∘
         &lt;/mo&gt;
        &lt;/msup&gt;
        &lt;mi&gt;
         C
        &lt;/mi&gt;
        &lt;mo&gt;
         ⇔
        &lt;/mo&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mi&gt;
         m
        &lt;/mi&gt;
        &lt;mi&gt;
         s
        &lt;/mi&gt;
        &lt;mo&gt;
         ⇔
        &lt;/mo&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mi mathvariant="normal"&gt;
         %
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        0^{\circ}C \Leftrightarrow 0ms \Leftrightarrow 0\%
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.75em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.80556em;vertical-align:-0.05556em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord"&gt;
        0
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.674115em;"&gt;
           &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mtight"&gt;
               ∘
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.07153em;"&gt;
       C
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       ⇔
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       m
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       s
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       ⇔
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       %
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mn&gt;
         7
        &lt;/mn&gt;
        &lt;msup&gt;
         &lt;mn&gt;
          5
         &lt;/mn&gt;
         &lt;mo&gt;
          ∘
         &lt;/mo&gt;
        &lt;/msup&gt;
        &lt;mi&gt;
         C
        &lt;/mi&gt;
        &lt;mo&gt;
         ⇔
        &lt;/mo&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mi&gt;
         m
        &lt;/mi&gt;
        &lt;mi&gt;
         s
        &lt;/mi&gt;
        &lt;mo&gt;
         ⇔
        &lt;/mo&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mi mathvariant="normal"&gt;
         %
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        75^{\circ}C \Leftrightarrow 20ms \Leftrightarrow 100\%
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.75em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.80556em;vertical-align:-0.05556em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       7
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord"&gt;
        5
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.674115em;"&gt;
           &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mtight"&gt;
               ∘
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.07153em;"&gt;
       C
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       ⇔
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       m
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       s
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       ⇔
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       1
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       %
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Une simple règle de trois nous donne :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        x
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mfrac&gt;
        &lt;mrow&gt;
         &lt;mn&gt;
          7
         &lt;/mn&gt;
         &lt;mn&gt;
          5
         &lt;/mn&gt;
        &lt;/mrow&gt;
        &lt;mrow&gt;
         &lt;mn&gt;
          2
         &lt;/mn&gt;
         &lt;mn&gt;
          0
         &lt;/mn&gt;
        &lt;/mrow&gt;
       &lt;/mfrac&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        3
       &lt;/mn&gt;
       &lt;mi mathvariant="normal"&gt;
        .
       &lt;/mi&gt;
       &lt;mn&gt;
        7
       &lt;/mn&gt;
       &lt;msup&gt;
        &lt;mn&gt;
         5
        &lt;/mn&gt;
        &lt;mo&gt;
         ∘
        &lt;/mo&gt;
       &lt;/msup&gt;
       &lt;mi&gt;
        C
       &lt;/mi&gt;
       &lt;mi mathvariant="normal"&gt;
        /
       &lt;/mi&gt;
       &lt;mi&gt;
        m
       &lt;/mi&gt;
       &lt;mi&gt;
        s
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       x = \frac{75}{20} = 3.75^{\circ}C/ms
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.845108em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit"&gt;
      x
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mopen nulldelimiter"&gt;
      &lt;/span&gt;
      &lt;span class="mfrac"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.845108em;"&gt;
          &lt;span style="top:-2.6550000000000002em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              2
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              0
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.15em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="stretchy" style="height:0.2em;"&gt;
            &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
             &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
             &lt;/path&gt;
            &lt;/svg&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.394em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              7
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              5
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.345em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mclose nulldelimiter"&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      3
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      .
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      7
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord"&gt;
       5
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.674115em;"&gt;
          &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              ∘
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.07153em;"&gt;
      C
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      /
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      m
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      s
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 ce qui signifie que pour chaque milliseconde, on a 3.75°C .
&lt;/p&gt;
&lt;p&gt;
 Voyons maintenant comment l’utiliser…
&lt;/p&gt;
&lt;h5 id="dans-la-pratique-avec-arduino"&gt;
 &lt;a aria-hidden="true" href="#dans-la-pratique-avec-arduino"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Dans la pratique avec Arduino
&lt;/h5&gt;
&lt;p&gt;
 Bon, c’est pas mal on a le côté théorique de la chose, mais ça ne nous dit toujours pas comment on va l’exploiter avec notre Arduino. En effet, générer une PWM on sait faire, mais mesurer une durée d’état haut ça on ne sait pas !
Et bien rassurez-vous, comme d’habitude c’est assez simple. En effet, il existe une fonction dans le framework Arduino qui sert exactement à cela, mesurer une durée d’état haut ou bas.
&lt;/p&gt;
&lt;p&gt;
 Cette fonction s’appelle
 &lt;a href="http://arduino.cc/en/Reference/pulseIn"&gt;
  &lt;code&gt;
   pulseIn()
  &lt;/code&gt;
 &lt;/a&gt;
 . Elle prend simplement en paramètres la broche sur laquelle vous voulez faire la mesure et l’état que vous voulez mesurer (HIGH ou LOW). En option, un troisième paramètre permettra de spécifier un "timeout", un temps maximal à attendre avant de décider que la mesure n’est pas possible. Si le timeout est de 2 secondes et que l’état à mesurer n’a pas commencé 2 secondes après l’appel de la fonction, alors cette dernière retournera 0. Dernier détail, l’intervalle de mesure de la fonction est de 10µs à 3 minutes et renvoie un
 &lt;code&gt;
  unsigned long
 &lt;/code&gt;
 représentant la durée de l’état en
 &lt;strong&gt;
  microsecondes
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Voilà, vous savez tout pour utiliser cette fonction ! Il ne faut pas oublier cependant que la broche sur laquelle nous allons faire la mesure doit être placée en INPUT lors du setup()
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Reprenons maintenant l’exemple commencé ci-dessus.
&lt;/p&gt;
&lt;p&gt;
 Pour mesurer la température, nous allons mesurer l’état haut en sachant que celui-ci sera proportionnel à la température. Un code simple serait donc :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; capteur = &lt;span class="hljs-number"&gt;2&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// en admettant que le capteur de température soit sur la broche 2&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
   pinMode(capteur, INPUT);
   Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// pour afficher la température&lt;/span&gt;
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
   &lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; duree = pulseIn(capteur, HIGH, &lt;span class="hljs-number"&gt;25000&lt;/span&gt;);
   &lt;span class="hljs-comment"&gt;// dans notre exemple la valeur est dans l'intervalle [0, 20000]&lt;/span&gt;
   &lt;span class="hljs-keyword"&gt;float&lt;/span&gt; temperature = duree*&lt;span class="hljs-number"&gt;0.00375&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// 3.75 °C par ms donc 0.00375 °C par µs&lt;/span&gt;

   &lt;span class="hljs-comment"&gt;/* Dans notre cas, on n'utilise pas "map()" car la fonction fait des arrondis,
   ce qui risquerait de nous faire perdre de l'informations */&lt;/span&gt;

   Serial.print(&lt;span class="hljs-string"&gt;"Duree lue : "&lt;/span&gt;);
   Serial.println(duree, DEC);
   Serial.print(&lt;span class="hljs-string"&gt;"Temperature : "&lt;/span&gt;);
   Serial.println(temperature);

   delay(&lt;span class="hljs-number"&gt;200&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// pour ne pas spammer la voie série&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Mise en pratique de
  &lt;code&gt;
   pulseIn
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="simulation-de-lexemple"&gt;
 &lt;a aria-hidden="true" href="#simulation-de-lexemple"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Simulation de l’exemple
&lt;/h5&gt;
&lt;p&gt;
 Si comme moi vous n’avez pas de capteur retournant une PWM, voici un petit montage tout simple permettant de tester ce concept.
&lt;/p&gt;
&lt;p&gt;
 Pour cela, nous allons utiliser une PWM de l’Arduino ! En effet, on sait depuis le chapitre
 &lt;a href="https:// zestedesavoir.com/tutoriels/537/arduino-premiers-pas-en-informatique-embarquee/745/les-grandeurs-analogiques/3432/et-les-sorties-analogiques-enfin-presque/"&gt;
  Sorties analogiques
 &lt;/a&gt;
 faire varier un rapport cyclique dans une PWM, on va donc l’appliquer ici pour tester
 &lt;code&gt;
  pulseIn()
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Pour cela, reliez une broche PWM à la broche qui vous sert de capteur puis essayez de réaliser ce que l’on vient de voir.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   La fréquence de la PWM via Arduino est d’environ 490Hz, ce qui signifie que la durée d’état haut pourra varier entre 0ms et 2,04ms
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; capteur = &lt;span class="hljs-number"&gt;2&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// broche capteur&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; emetteur = &lt;span class="hljs-number"&gt;3&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// broche PWM&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
   pinMode(capteur, INPUT);
   pinMode(emetteur, OUTPUT);

   Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
   analogWrite(emetteur, &lt;span class="hljs-number"&gt;127&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// test avec une valeur moyenne : environ 1ms&lt;/span&gt;
   &lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; duree = pulseIn(capteur, HIGH);

   Serial.print(&lt;span class="hljs-string"&gt;"Duree : "&lt;/span&gt;);
   Serial.println(duree, DEC); &lt;span class="hljs-comment"&gt;// vérifie qu'on a bien la durée attendue&lt;/span&gt;

   delay(&lt;span class="hljs-number"&gt;250&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Simulation d’un capteur PWM et exploitation de
  &lt;code&gt;
   pulseIn
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="Étude-de-cas-le-capteur-de-distance-srf05"&gt;
 &lt;a aria-hidden="true" href="#Étude-de-cas-le-capteur-de-distance-srf05"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Étude de cas : le capteur de distance SRF05
&lt;/h4&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Un tutoriel plus complet sur ce capteur peut être trouvé ici :
   &lt;a href="https://zestedesavoir.com/tutoriels/539/realiser-un-telemetre-a-ultrasons/"&gt;
    https://zestedesavoir.com/tutoriels/539/realiser-un-telemetre-a-ultrasons/
   &lt;/a&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Prenons un exemple, le télémètre ultrason SRF05 dont la doc. technique a été retranscrite
 &lt;a href="http://www.robot-electronics.co.uk/htm/srf05tech.htm"&gt;
  ici
 &lt;/a&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Ce composant est l’exemple classique du capteur renvoyant un créneau codant l’information. En effet, ce dernier mesure ce que l’on appelle un
 &lt;strong&gt;
  temps de vol
 &lt;/strong&gt;
 . Explications !
Le SRF05 est un télémètre ultra-son. Pour mesurer une distance, il compte le temps que met une onde pour faire un aller-retour. Un chronomètre est déclenché lors du départ de l’onde et est arrêté lorsque l’on détecte le retour de l’onde (une fois que celle-ci a "rebondi" sur un obstacle). Puisque l’on connait la vitesse de propagation (V) de l’onde dans l’air, on peut déterminer la distance (d) nous séparant de l’objet. On a donc la formule :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        v
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mfrac&gt;
        &lt;mrow&gt;
         &lt;mi&gt;
          d
         &lt;/mi&gt;
        &lt;/mrow&gt;
        &lt;mrow&gt;
         &lt;mi&gt;
          t
         &lt;/mi&gt;
        &lt;/mrow&gt;
       &lt;/mfrac&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       v = \frac{d}{t}
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.8801079999999999em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1.2251079999999999em;vertical-align:-0.345em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      v
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mopen nulldelimiter"&gt;
      &lt;/span&gt;
      &lt;span class="mfrac"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.8801079999999999em;"&gt;
          &lt;span style="top:-2.6550000000000002em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mathit mtight"&gt;
              t
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.15em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="stretchy" style="height:0.2em;"&gt;
            &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
             &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
             &lt;/path&gt;
            &lt;/svg&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.394em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mathit mtight"&gt;
              d
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.345em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mclose nulldelimiter"&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 soit
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        d
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mi&gt;
        t
       &lt;/mi&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mi&gt;
        v
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       d = t \times v
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.69444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.77777em;vertical-align:-0.08333em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit"&gt;
      d
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      t
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      v
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 .
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Le temps mesuré correspond à l’aller ET au retour de l’onde, on a donc deux fois la distance. Il ne faudra pas oublier de diviser le résultat par deux pour obtenir la distance réelle qui nous sépare de l’objet.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Comme expliqué dans la documentation, pour utiliser le sonar il suffit de générer un état haut pendant 10 µs puis ensuite mesurer l’état haut généré par le sonar.
&lt;/p&gt;
&lt;p&gt;
 Ce dernier représente le temps que met l’onde à faire son aller-retour. Si l’onde met plus de 30ms à faire son voyage, elle est alors considérée comme perdue et la ligne repasse à LOW.
&lt;/p&gt;
&lt;p&gt;
 Et voilà, vous avez maintenant toutes les informations pour faire un petit programme d’essai pour utiliser ce sonar.
&lt;/p&gt;
&lt;p&gt;
 Ah, une dernière information… La vitesse d’une onde sonore dans l’air à 15°C est de 340 mètres par seconde. Ça pourrait être utile !
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;define&lt;/span&gt; VITESSE 340 &lt;span class="hljs-comment"&gt;// vitesse du son 340 m/s&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; declencheur = &lt;span class="hljs-number"&gt;2&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// la broche servant à déclencher la mesure&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; capteur = &lt;span class="hljs-number"&gt;3&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// la broche qui va lire la mesure&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
   pinMode(declencheur, OUTPUT);
   pinMode(capteur, INPUT);

   digitalWrite(declencheur, LOW);
   Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
   digitalWrite(declencheur, HIGH);
   delayMicroseconds(&lt;span class="hljs-number"&gt;10&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// on attend 10 µs&lt;/span&gt;
   digitalWrite(declencheur, LOW);

   &lt;span class="hljs-comment"&gt;// puis on récupère la mesure&lt;/span&gt;
   &lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; duree = pulseIn(capteur, HIGH);

   &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(duree &amp;gt; &lt;span class="hljs-number"&gt;30000&lt;/span&gt;)
   {
      &lt;span class="hljs-comment"&gt;// si la durée est supérieure à 30ms, l'onde est perdue&lt;/span&gt;
      Serial.println(&lt;span class="hljs-string"&gt;"Onde perdue, mesure echouee !"&lt;/span&gt;);
   }
   &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
   {
      &lt;span class="hljs-comment"&gt;// l'onde est revenue ! on peut faire le calcul&lt;/span&gt;
      &lt;span class="hljs-comment"&gt;// on divise par 2 pour n'avoir qu'un trajet (plutôt que l'aller-retour)&lt;/span&gt;
      duree = duree/&lt;span class="hljs-number"&gt;2&lt;/span&gt;;
      &lt;span class="hljs-keyword"&gt;float&lt;/span&gt; temps = duree/&lt;span class="hljs-number"&gt;1000000.0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// on met en secondes&lt;/span&gt;
      &lt;span class="hljs-keyword"&gt;float&lt;/span&gt; distance = temps*VITESSE; &lt;span class="hljs-comment"&gt;// on multiplie par la vitesse, d=t*v&lt;/span&gt;

      Serial.print(&lt;span class="hljs-string"&gt;"Duree = "&lt;/span&gt;);
      Serial.println(temps); &lt;span class="hljs-comment"&gt;// affiche le temps de vol d'un trajet en secondes&lt;/span&gt;
      Serial.print(&lt;span class="hljs-string"&gt;"Distance = "&lt;/span&gt;);
      Serial.println(distance); &lt;span class="hljs-comment"&gt;// affiche la distance mesurée&lt;/span&gt;
   }

   delay(&lt;span class="hljs-number"&gt;250&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Utilisation d’un capteur à ultrasons
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/vB4oMEFHZSo" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="capteur-à-signal-de-sortie-de-fréquence-variable"&gt;
 &lt;a aria-hidden="true" href="#capteur-à-signal-de-sortie-de-fréquence-variable"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Capteur à signal de sortie de fréquence variable
&lt;/h3&gt;
&lt;p&gt;
 Voyons maintenant un autre type de sortie très similaire à celui vu ci-dessus, la fréquence. Les capteurs de ce type vont donc vous délivrer une fréquence variable en fonction de la valeur mesurée. Je ne vais pas vous mentir, je n’ai pas d’exemple en tête !
Cependant, il est facile d’imaginer comment les utiliser en prenant en compte ce que l’on vient de voir pour le capteur renvoyant une PWM.
&lt;/p&gt;
&lt;p&gt;
 En effet, considérons un capteur nous envoyant un signal de type "créneau" à une fréquence
 &lt;em&gt;
  f
 &lt;/em&gt;
 . Un créneau possède en théorie une durée d’état haut égale à la durée de l’état bas. Si on fait donc une mesure de cette durée d’état haut via
 &lt;code&gt;
  pulseIn()
 &lt;/code&gt;
 vue précédemment, on peut aisément déduire la période (T) du signal (qui sera égale à deux fois la valeur lue) et ainsi la fréquence puisque
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        f
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mi mathvariant="normal"&gt;
        /
       &lt;/mi&gt;
       &lt;mi&gt;
        T
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       f = 1/T
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.75em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.10764em;"&gt;
      f
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      /
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
      T
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 De manière programmatoire, on obtiendra donc le code suivant :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; capteur = &lt;span class="hljs-number"&gt;2&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// broche sur laquelle est branchée le capteur&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
   pinMode(capteur, INPUT);

   Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
   &lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; duree = pulseIn(capteur, HIGH); &lt;span class="hljs-comment"&gt;// ou LOW, ce serait pareil !&lt;/span&gt;
   duree = duree*&lt;span class="hljs-number"&gt;2&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// pour avoir la période complète&lt;/span&gt;

   &lt;span class="hljs-comment"&gt;// hop! on calcule la fréquence !&lt;/span&gt;
   &lt;span class="hljs-keyword"&gt;float&lt;/span&gt; frequence = &lt;span class="hljs-number"&gt;1.0&lt;/span&gt;/duree;
   &lt;span class="hljs-comment"&gt;// passe la fréquence en Hz (car la période était mesurée en µs)&lt;/span&gt;
   frequence = frequence*&lt;span class="hljs-number"&gt;1000000&lt;/span&gt;;
   Serial.print(&lt;span class="hljs-string"&gt;"Frequence = "&lt;/span&gt;);
   Serial.println(frequence);

   delay(&lt;span class="hljs-number"&gt;250&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Mesurer une fréquence
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="exemple--exercice"&gt;
 &lt;a aria-hidden="true" href="#exemple--exercice"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Exemple / Exercice
&lt;/h4&gt;
&lt;p&gt;
 Afin de mettre tout cela en pratique, je vous propose un petit exercice pour mettre en œuvre ce dernier point. Peu de matériel est à prévoir.
&lt;/p&gt;
&lt;h5 id="principe-1"&gt;
 &lt;a aria-hidden="true" href="#principe-1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Principe
&lt;/h5&gt;
&lt;p&gt;
 Pour cet exercice, je vous propose d’émuler le comportement d’un capteur générant une fréquence variable.
&lt;/p&gt;
&lt;p&gt;
 Nous allons utiliser un potentiomètre qui va nous servir de "variateur". Ensuite nous allons utiliser une fonction propre à Arduino pour générer une fréquence particulière qui sera l’image multipliée par 10 de la valeur mesurée du potentiomètre. Enfin, nous allons "reboucler" la sortie "fréquence" sur une entrée quelconque sur laquelle nous mesurerons cette fréquence.
&lt;/p&gt;
&lt;p&gt;
 C’est clair ? J’espère !
&lt;/p&gt;
&lt;h6 id="la-fonction-tone"&gt;
 &lt;a aria-hidden="true" href="#la-fonction-tone"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La fonction tone()
&lt;/h6&gt;
&lt;p&gt;
 Pour faire cette exercice vous connaissez déjà tout à une chose près : Comment générer une fréquence. Pour cela, je vous propose de partir à la découverte de la fonction
 &lt;code&gt;
  tone()
 &lt;/code&gt;
 . Cette dernière génère une fréquence sur une broche, n’importe laquelle. Elle prend en paramètre la broche sur laquelle le signal doit être émis ainsi que la fréquence à émettre. Par exemple, pour faire une fréquence de 100Hz sur la broche 3 on fera simplement :
 &lt;code&gt;
  tone(3, 100);
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Un troisième argument peut-être utilisé. Ce dernier sert à indiquer la durée pendant laquelle le signal doit être émis. Si on omet cet argument, la fréquence sera toujours générée jusqu’à l’appel de la fonction antagoniste
 &lt;code&gt;
  noTone()
 &lt;/code&gt;
 à laquelle on passe en paramètre la broche sur laquelle le signal doit être arrêté.
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   L’utilisation de la fonction tone interfère avec le module PWM des broches 3 et 11. Gardez-le en mémoire
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
   . Cette fonction ne peut pas non plus descendre en dessous de 31Hz.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous avez toutes les informations, maintenant à vous de jouer !
&lt;/p&gt;
&lt;h5 id="correction"&gt;
 &lt;a aria-hidden="true" href="#correction"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Correction
&lt;/h5&gt;
&lt;p&gt;
 Voici ma correction commentée. Comme il n’y a rien de réellement compliqué, je ne vais pas faire des lignes d’explications et vous laisser simplement avec le code et ses commentaires
 &lt;img alt=":diable:" class="smiley" src="./static/smileys/diable.png"/&gt;
 !
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; potar = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// potentiomètre sur la broche A0;&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; emetteur = &lt;span class="hljs-number"&gt;8&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// fréquence émise sur la broche 8&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; recepteur = &lt;span class="hljs-number"&gt;2&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// fréquence mesurée sur la broche 2&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
   pinMode(emetteur, OUTPUT);
   pinMode(recepteur, INPUT);

   Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
   &lt;span class="hljs-comment"&gt;// fait la lecture analogique (intervalle [0;1023] )&lt;/span&gt;
   &lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; mesure = &lt;span class="hljs-number"&gt;100&lt;/span&gt;;

   &lt;span class="hljs-comment"&gt;// applique la mesure comme fréquence (intervalle [0;10230] )&lt;/span&gt;
   tone(emetteur, mesure*&lt;span class="hljs-number"&gt;10&lt;/span&gt;);

   &lt;span class="hljs-comment"&gt;// mesure la demi-période&lt;/span&gt;
   &lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; periode = pulseIn(recepteur, HIGH);
   &lt;span class="hljs-comment"&gt;// pour avoir une période complète on multiplie par 2&lt;/span&gt;
   periode = periode*&lt;span class="hljs-number"&gt;2&lt;/span&gt;;
   &lt;span class="hljs-comment"&gt;// transforme en fréquence&lt;/span&gt;
   &lt;span class="hljs-keyword"&gt;float&lt;/span&gt; frequence = &lt;span class="hljs-number"&gt;1.0&lt;/span&gt;/periode;
   &lt;span class="hljs-comment"&gt;// passe la fréquence en Hz (car la période était mesurée en µs)&lt;/span&gt;
   frequence = frequence*&lt;span class="hljs-number"&gt;1000000&lt;/span&gt;;

   Serial.print(&lt;span class="hljs-string"&gt;"Mesure : "&lt;/span&gt;);
   Serial.println(mesure, DEC);
   Serial.print(&lt;span class="hljs-string"&gt;"Periode : "&lt;/span&gt;);
   Serial.println(periode, DEC);
   Serial.print(&lt;span class="hljs-string"&gt;"Frequence : "&lt;/span&gt;);
   Serial.println(frequence);

   delay(&lt;span class="hljs-number"&gt;250&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Générateur et mesure de fréquence, correction
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="capteur-utilisant-un-protocole-de-communication"&gt;
 &lt;a aria-hidden="true" href="#capteur-utilisant-un-protocole-de-communication"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Capteur utilisant un protocole de communication
&lt;/h3&gt;
&lt;p&gt;
 Certains capteurs ne renvoient pas l’information sous forme "physique" dans le sens où ils ne renvoient pas quelque chose de mesurable directement, comme un temps ou une tension. Non, ces derniers préfèrent envoyer l’information encapsulée bien au chaud dans une trame d’un protocole de communication.
&lt;/p&gt;
&lt;p&gt;
 Le gros intérêt de cette méthode est très probablement la résistance au "bruit". Je ne parle bien sûr pas des cris des enfants du voisin ou les klaxons dans la rue mais bien de bruit électronique. Ce dernier est partout et peut avoir des conséquences ennuyeuses sur vos mesures. Transmettre l’information par un protocole de communication est donc un moyen fiable de garantir que la donnée arrivera de manière intègre jusqu’au destinataire. De plus, on peut facilement coupler cette transmission avec un protocole de vérification simple ou compliqué (comme la vérification de parité ou un calcul de CRC).
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Cette partie ne va pas vous enseigner comment utiliser chacun des moyens de communication que nous allons voir. En effet, il s’agit plutôt d’une introduction/ouverture sur l’existence de ces derniers. Ils seront traités de manière indépendante dans des chapitres dédiés comme le fût
   &lt;a href="https://zestedesavoir.com/tutoriels/686/arduino-premiers-pas-en-informatique-embarquee/744_la-communication-avec-arduino/"&gt;
    la voie série
   &lt;/a&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="quelques-protocoles-de-communication"&gt;
 &lt;a aria-hidden="true" href="#quelques-protocoles-de-communication"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Quelques protocoles de communication
&lt;/h4&gt;
&lt;h5 id="voie-série--uart"&gt;
 &lt;a aria-hidden="true" href="#voie-série--uart"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Voie série / UART
&lt;/h5&gt;
&lt;p&gt;
 Ce protocole vous devez déjà le connaître par cœur puisque nous l’utilisons presque dans tous les chapitres ! Il s’agit en effet de la voie série via
 &lt;code&gt;
  Serial
 &lt;/code&gt;
 . Rien de réellement compliqué donc tellement vous êtes habitués à le voir !
Ceci est une liaison point-à-point, donc seuls deux composants (l’Arduino et le capteur) peuvent être reliés entre eux directement. Elle est généralement bi-directionnelle, ce qui signifie que les deux composants reliés peuvent émettre en même temps.
&lt;/p&gt;
&lt;h5 id="i2c"&gt;
 &lt;a aria-hidden="true" href="#i2c"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 I2C
&lt;/h5&gt;
&lt;p&gt;
 Le protocole I²C (
 &lt;em&gt;
  Inter-Integrated Circuit
 &lt;/em&gt;
 ) ou TWI (
 &lt;em&gt;
  Two Wire Interface
 &lt;/em&gt;
 ) permet d’établir une liaison de type "maître/esclave". L’Arduino sera maître et le capteur l’esclave (l’Arduino peut aussi être un esclave dans certains cas). Ainsi, l’Arduino émettra les ordres pour faire les demandes de données et le capteur, lorsqu’il recevra cet ordre, la renverra.
&lt;/p&gt;
&lt;p&gt;
 Ce protocole utilise 3 fils. Un pour la masse et ainsi avoir un référentiel commun, un servant à émettre un signal d’horloge (SCL) et un dernier portant les données synchronisées avec l’horloge (SDA).
&lt;/p&gt;
&lt;p&gt;
 Chez Arduino, il existe une librairie pour utiliser l’I2C, elle s’appelle
 &lt;code&gt;
  Wire
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 On peut placer plusieurs esclaves à la suite. Un code d’adresse est alors utilisé pour décider à quel composant le maître fait une requête.
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/5_ZEJNjwF1Q" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="spi"&gt;
 &lt;a aria-hidden="true" href="#spi"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 SPI
&lt;/h5&gt;
&lt;p&gt;
 Le SPI (Serial Peripheral Interface) est une sorte de combo entre la voie série et l’I2C. Elle prend le meilleur des deux mondes.
&lt;/p&gt;
&lt;p&gt;
 Comme en voie série, la liaison est bi-directionnelle et point-à-point
 &lt;sup id="fnref-1-G6WcliROu"&gt;
  &lt;a class="footnote-ref" href="#fn-1-G6WcliROu"&gt;
   1
  &lt;/a&gt;
 &lt;/sup&gt;
 . Cela signifie que Arduino et le capteur sont reliés directement entre eux et ne peuvent que parler entre eux. Cela signifie aussi que les deux peuvent s’envoyer des données simultanément.
&lt;/p&gt;
&lt;p&gt;
 Comme en I2C, la liaison est de type maître/esclave. L’un fait une demande à l’autre, le maître transmet l’horloge à l’esclave pour transmettre les données.
&lt;/p&gt;
&lt;p&gt;
 Cette transmission utilise 4 fils. Une masse pour le référentiel commun, un fil d’horloge (SCLK), un fil nommé MOSI (
 &lt;em&gt;
  Master Output, Slave Input
 &lt;/em&gt;
 , données partant de l’Arduino et allant vers le capteur) et MISO (
 &lt;em&gt;
  Master Input, Slave Output
 &lt;/em&gt;
 , données partant du capteur et allant vers l’Arduino).
&lt;/p&gt;
&lt;p&gt;
 Chez Arduino, il existe une librairie pour utiliser le SPI, elle s’appelle …
 &lt;code&gt;
  SPI
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;h5 id="protocole-propriétaire"&gt;
 &lt;a aria-hidden="true" href="#protocole-propriétaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Protocole propriétaire
&lt;/h5&gt;
&lt;p&gt;
 Ici pas de solution miracle, il faudra manger de la documentation technique (très formateur !). En effet, si le constructeur décide d’implémenter un protocole à sa sauce alors ce sera à vous de vous plier et de coder pour réussir à l’implémenter et l’utiliser.
&lt;/p&gt;
&lt;p&gt;
 Vous savez maintenant tout sur les capteurs, votre Arduino peut maintenant "sentir" le monde qui l’entoure comme promis en introduction de cette partie. Mais ce n’est pas fini, il existe un grand nombre de capteurs, beaucoup trop important pour en faire une liste exhaustive dans un tutoriel comme celui-ci.
Maintenant que vous pouvez percevoir le monde, passons à la suite en essayant d’interagir avec ce dernier grâce à l’utilisation des moteurs.
&lt;/p&gt;
&lt;div class="footnotes"&gt;
 &lt;hr/&gt;
 &lt;ol&gt;
  &lt;li id="fn-1-G6WcliROu"&gt;
   &lt;p&gt;
    Afin d’améliorer cette voie série, il existe une autre broche nommée SS (Slave Select) permettant de choisir à quel composant le maître parle. Ainsi la liaison n’est plus limitée à un esclave seulement.
   &lt;/p&gt;
   &lt;a class="footnote-backref" href="#fnref-1-G6WcliROu" title="Retourner au texte de la note 1"&gt;
    ↩
   &lt;/a&gt;
  &lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Différents types de mesures</title><link href="https://eskimon.fr/tuto-arduino-502-diff%C3%A9rents-types-de-mesures" rel="alternate"></link><published>2014-02-26T10:00:00+01:00</published><updated>2014-02-26T10:00:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2014-02-26:/tuto-arduino-502-différents-types-de-mesures</id><summary type="html">&lt;p&gt;
 Pour commencer ce chapitre sur les capteurs, j’ai rassemblé un petit nombre de capteurs qui sont très utilisés en robotique et en domotique. Vous pourrez ainsi comprendre certains concepts généraux tout en ayant accès à une base de connaissance qui puisse vous aider lorsque vous aurez besoin de mettre …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Pour commencer ce chapitre sur les capteurs, j’ai rassemblé un petit nombre de capteurs qui sont très utilisés en robotique et en domotique. Vous pourrez ainsi comprendre certains concepts généraux tout en ayant accès à une base de connaissance qui puisse vous aider lorsque vous aurez besoin de mettre en place vos projets personnels. On va commencer en douceur avec les capteurs logiques, aussi appelés
 &lt;strong&gt;
  Tout Ou Rien
 &lt;/strong&gt;
 (TOR). Puis on continuera vers les capteurs utilisant des transducteurs à résistance de sortie variable. On verra ensuite des capteurs un peu particuliers puis pour finir des capteurs un peu compliqués. C’est parti !
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#tout-ou-rien-un-capteur-qui-sait-ce-quil-veut"&gt;
    Tout Ou Rien, un capteur qui sait ce qu’il veut
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#deux-états"&gt;
     Deux états
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#le-capteur-ils-ou-interrupteur-à-lames-souples"&gt;
      Le capteur ILS ou Interrupteur à Lames Souples
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-principe-du-tor"&gt;
       Le principe du TOR
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#champ-magnétique"&gt;
       Champ magnétique
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#câblage"&gt;
       Câblage
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#capteur-logique-prêt-à-lemploi"&gt;
     Capteur logique prêt à l’emploi
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#capteurs-à-résistance-de-sortie-variable"&gt;
    Capteurs à résistance de sortie variable
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#la-photo-résistance"&gt;
      La photo-résistance
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#petit-aperçu"&gt;
       Petit aperçu
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#propriété"&gt;
       Propriété
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#rappel-sur-le-pont-diviseur-de-tension"&gt;
       Rappel sur le pont diviseur de tension
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#utilisation-n°1"&gt;
       Utilisation n°1
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#utilisation-n°2"&gt;
       Utilisation n°2
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#un-peu-de-programmation"&gt;
     Un peu de programmation
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#un-programme-plus-évolué"&gt;
      Un programme plus évolué
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#préparation"&gt;
       Préparation
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-programme"&gt;
       Le programme
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#un-autre-petit-robot-mobile"&gt;
     Un autre petit robot mobile
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#capteurs-à-tension-de-sortie-variable"&gt;
    Capteurs à tension de sortie variable
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#lélément-piézoélectrique"&gt;
      L’élément piézoélectrique
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#constitution"&gt;
       Constitution
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#propriété-1"&gt;
       Propriété
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#utilisation"&gt;
       Utilisation
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#montage"&gt;
     Montage
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#programme"&gt;
      Programme
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#fonction-setup"&gt;
       Fonction setup()
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#fonction-principale"&gt;
       Fonction principale
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#seuil-de-tension"&gt;
       Seuil de tension
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#la-réversibilité-de-lélément-piézoélectrique"&gt;
      La réversibilité de l’élément piézoélectrique
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#faire-vibrer-lélément-piézoélectrique"&gt;
       Faire vibrer l’élément piézoélectrique !
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#une-fonction-encore-toute-prête"&gt;
       Une fonction encore toute prête
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#la-tension-comme-image-du-courant-avec-les-photodiodes-et-phototransistors"&gt;
     La tension comme image du courant avec les photodiodes et phototransistors
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#Étalonner-son-capteur"&gt;
    Étalonner son capteur
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-capteur-utilisé"&gt;
       Le capteur utilisé
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#la-méthode"&gt;
      La méthode
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#prise-de-mesures"&gt;
       Prise de mesures
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#réalisation-de-la-caractéristique"&gt;
       Réalisation de la caractéristique
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#adaptation-dans-le-code"&gt;
       Adaptation dans le code
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="tout-ou-rien-un-capteur-qui-sait-ce-quil-veut"&gt;
 &lt;a aria-hidden="true" href="#tout-ou-rien-un-capteur-qui-sait-ce-quil-veut"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Tout Ou Rien, un capteur qui sait ce qu’il veut
&lt;/h3&gt;
&lt;p&gt;
 On va donc commencer par voir quelques capteurs dont la sortie est un état logique qui indique un état :
 &lt;strong&gt;
  Ouvert
 &lt;/strong&gt;
 ou
 &lt;strong&gt;
  Fermé
 &lt;/strong&gt;
 . Ces capteurs sont appelés des capteur Tout Ou Rien, capteurs
 &lt;strong&gt;
  logiques
 &lt;/strong&gt;
 ou encore capteurs à
 &lt;strong&gt;
  rupture de tension
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;h4 id="deux-états"&gt;
 &lt;a aria-hidden="true" href="#deux-états"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Deux états
&lt;/h4&gt;
&lt;figure&gt;
 &lt;img alt="Schéma d'un capteur normalement ouvert" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/schema-dun-capteur-normalement-ouvert.jpg"/&gt;
 &lt;figcaption&gt;
  Schéma d'un capteur normalement ouvert
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Schéma d'un capteur normalement fermé" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/schema-dun-capteur-normalement-ferme.jpg"/&gt;
 &lt;figcaption&gt;
  Schéma d'un capteur normalement fermé
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Lorsque le capteur est dit ouvert (ou
 &lt;em&gt;
  open
 &lt;/em&gt;
 en anglais), le courant ne passe pas entre ses bornes.
&lt;/p&gt;
&lt;p&gt;
 S’il s’agit de la
 &lt;strong&gt;
  position de repos
 &lt;/strong&gt;
 , c’est à dire lorsque le capteur ne capte pas la grandeur qu’il doit capter, on dit alors que le capteur a un contact de type
 &lt;strong&gt;
  Normalement Ouvert
 &lt;/strong&gt;
 (ou
 &lt;em&gt;
  Normally Open
 &lt;/em&gt;
 en anglais). Tandis que si le capteur est dit fermé (ou
 &lt;em&gt;
  close
 &lt;/em&gt;
 en anglais), le courant peut passer entre ses bornes. S’il s’agit cette fois de sa position de repos, alors on dit qu’il possède un contact
 &lt;strong&gt;
  Normalement Fermé
 &lt;/strong&gt;
 (ou
 &lt;em&gt;
  Normally Closed
 &lt;/em&gt;
 ).
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   J’ai schématisé les contacts par des interrupteurs reliés à deux bornes (les carrés à droite) du capteur.
C’est le principe d’un capteur TOR (Tout Ou Rien), mais ce n’est pas forcément des interrupteurs qu’il y a dedans, on va le voir bientôt.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="le-capteur-ils-ou-interrupteur-à-lames-souples"&gt;
 &lt;a aria-hidden="true" href="#le-capteur-ils-ou-interrupteur-à-lames-souples"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le capteur ILS ou Interrupteur à Lames Souples
&lt;/h4&gt;
&lt;h5 id="le-principe-du-tor"&gt;
 &lt;a aria-hidden="true" href="#le-principe-du-tor"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le principe du TOR
&lt;/h5&gt;
&lt;p&gt;
 Une question qui vous est peut-être passée par la tête : mais comment ce capteur peut mesurer une grandeur physique avec seulement deux états en sortie ? C’est assez facile à comprendre.
&lt;/p&gt;
&lt;p&gt;
 Imaginons, dans le cadre d’un de vos projets personnels, que vous ayez l’intention de faire descendre les volets électriques lorsqu’il fait nuit. Vous allez alors avoir recours à un capteur de luminosité qui vous donnera une image, par une autre grandeur physique, de l’intensité lumineuse mesurée.
Hors, vous ne voulez pas que ce capteur vous dise s’il fait un peu jour ou un peu nuit, ou entre les deux… Non, il vous faut une réponse qui soit OUI ou NON il fait nuit.
Vous aurez donc besoin d’un capteur TOR. Alors, il en existe qui sont capables de donner une réponse TOR, mais lorsque l’on utilisera un transducteur, on devra gérer ça nous même avec Arduino et un peu d’électronique.
&lt;/p&gt;
&lt;h5 id="champ-magnétique"&gt;
 &lt;a aria-hidden="true" href="#champ-magnétique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Champ magnétique
&lt;/h5&gt;
&lt;p&gt;
 Ne prenez pas peur, je vais simplement vous présenter le capteur ILS qui utilise le champ magnétique pour fonctionner.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 En effet, ce capteur, est un capteur TOR qui détecte la présence de champ magnétique. Il est composé de deux lames métalliques souples et sensibles au champ magnétique.
&lt;/p&gt;
&lt;p&gt;
 Lorsqu’un champ magnétique est proche du capteur, par exemple un aimant, eh bien les deux lames se mettent en contact et laissent alors passer le courant électrique. D’une façon beaucoup plus simple, c’est relativement semblable à un interrupteur mais qui est actionné par un champ magnétique. Photo d’un interrupteur ILS et image, extraites du site
 &lt;a href="http://fr.wikipedia.org/wiki/Interrupteur_à_lames_souples"&gt;
  Wikipédia
 &lt;/a&gt;
 :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Interrupteur à lames souples (reed), montrant les contacts" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/interrupteur-a-lames-souples-reed-montrant-les-contacts.jpg"/&gt;
 &lt;figcaption&gt;
  Interrupteur à lames souples (reed) - (CC-BY-SA,
  &lt;a href="http://commons.wikimedia.org/wiki/File:Interrupteur_reed.jpg"&gt;
   Timothée Cognard
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Action de l'aimant sur l'interrupteur" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/action-de-laimant-sur-linterrupteur.gif"/&gt;
 &lt;figcaption&gt;
  Action de l’aimant sur l’interrupteur - (CC-0)
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Dès que l’on approche un aimant, à partir d’un certain seuil de champ magnétique, le capteur agit. Il devient alors un contact fermé et reprend sa position de repos, contact NO, dès que l’on retire le champ magnétique. Ce type de capteur est très utilisé en sécurité dans les alarmes de maison. On les trouve essentiellement au niveau des portes et fenêtres pour détecter leur ouverture.
&lt;/p&gt;
&lt;h5 id="câblage"&gt;
 &lt;a aria-hidden="true" href="#câblage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Câblage
&lt;/h5&gt;
&lt;p&gt;
 Le câblage de ce capteur peut être procédé de différentes manières. On peut en effet l’utiliser de façon à ce que le courant ne passe pas lorsque rien ne se passe, ou bien qu’il ne passe pas lorsqu’il est actionné.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Représentation schématique" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/representation-schematique.jpg"/&gt;
 &lt;figcaption&gt;
  Représentation schématique
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Représentation schématique" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/representation-schematique.jpg"/&gt;
 &lt;figcaption&gt;
  Représentation schématique
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ol&gt;
 &lt;li&gt;
  Dans le premier cas, la sortie vaut HIGH quand l’ILS est au repos et LOW lorsqu’il est actionné par un champ magnétique.
 &lt;/li&gt;
 &lt;li&gt;
  Sur la deuxième image, le câblage est différent et fait en sorte que la sortie soit à LOW lorsque le contact ILS est au repos et passe à HIGH dès qu’il est actionné par un champ magnétique.
 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
 Un petit programme tout simple qui permet de voir si l’ILS est actionné ou non, selon le schéma utilisé :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; entree_ils = &lt;span class="hljs-number"&gt;2&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// utilisation de la broche numérique numéro 2 comme entrée pour le capteur ILS&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; led_indication = &lt;span class="hljs-number"&gt;13&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// utilisation de la LED de la carte pour indiquer si l'ILS est activé ou non&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; configuration_ils = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// ou 1, dépend du câblage de l'ILS selon les schémas précédents&lt;/span&gt;
&lt;span class="hljs-comment"&gt;/*
0 pour le premier schéma (gauche)
1 pour le deuxième schéma (droite)
*/&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// définition des broches utilisées&lt;/span&gt;
    pinMode(entree_ils, INPUT);
    pinMode(led_indication, OUTPUT);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(configuration_ils) &lt;span class="hljs-comment"&gt;// si c'est le deuxième schéma&lt;/span&gt;
    {
        &lt;span class="hljs-comment"&gt;// la LED est éteinte lorsque l'ILS est au repos&lt;/span&gt;
        digitalWrite(led_indication, digitalRead(entree_ils));
    }
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;span class="hljs-comment"&gt;// si c'est le premier schéma&lt;/span&gt;
    {
        &lt;span class="hljs-comment"&gt;// la LED est allumée lorsque l'ILS est au repos&lt;/span&gt;
        digitalWrite(led_indication, !digitalRead(entree_ils));
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Test des ILS
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="capteur-logique-prêt-à-lemploi"&gt;
 &lt;a aria-hidden="true" href="#capteur-logique-prêt-à-lemploi"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Capteur logique prêt à l’emploi
&lt;/h4&gt;
&lt;p&gt;
 Bon, là ça va être très très court, puisque vous savez déjà faire ! Les capteurs tout prêts que l’on peut acheter dans le commerce et qui fournissent un état de sortie logique (LOW ou HIGH) sont utilisables tels quels.
&lt;/p&gt;
&lt;p&gt;
 Il suffit de connecter la sortie du capteur sur une entrée numérique de la carte Arduino et de lire dans le programme l’état sur cette broche. Vous saurez donc en un rien de temps ce que le capteur indique. On peut citer pour exemple les capteurs de mouvements.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Le programme précédent, utilisé avec l’ILS, est aussi utilisable avec un capteur logique quelconque. Après, à vous de voir ce que vous voudrez faire avec vos capteurs.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/jthTJ6Zb9ZU" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/-TBJrIJldFw" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="capteurs-à-résistance-de-sortie-variable"&gt;
 &lt;a aria-hidden="true" href="#capteurs-à-résistance-de-sortie-variable"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Capteurs à résistance de sortie variable
&lt;/h3&gt;
&lt;h4 id="la-photo-résistance"&gt;
 &lt;a aria-hidden="true" href="#la-photo-résistance"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La photo-résistance
&lt;/h4&gt;
&lt;p&gt;
 Nous y voilà, on va enfin voir le transducteur dont j’arrête pas de vous parler depuis tout à l’heure : la photo-résistance ! Je vois que vous commenciez à être impatients.
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
&lt;/p&gt;
&lt;h5 id="petit-aperçu"&gt;
 &lt;a aria-hidden="true" href="#petit-aperçu"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Petit aperçu
&lt;/h5&gt;
&lt;p&gt;
 La photo-résistance est un composant électronique qui est de type transducteur. Il est donc capable de donner une image de la grandeur physique mesurée, la lumière ou précisément la luminosité, grâce à une autre grandeur physique, la résistance.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Une photorésistance" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/une-photoresistance.jpg"/&gt;
 &lt;figcaption&gt;
  Une photorésistance - (CC-0)
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 On trouve généralement ce composant en utilisation domotique, pour… devinez quoi ?! … faire monter ou descendre les volets électriques d’une habitation !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
&lt;/p&gt;
&lt;p&gt;
 Mais on peut également le retrouver en robotique, par exemple pour créer un robot suiveur de ligne noire. Enfin on le trouve aussi dans beaucoup d’autres applications, vous saurez trouver vous-mêmes où est-ce que vous l’utiliserez, je vous fais confiance de ce point de vue là.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;h5 id="propriété"&gt;
 &lt;a aria-hidden="true" href="#propriété"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Propriété
&lt;/h5&gt;
&lt;p&gt;
 La photo-résistance suit une relation toute simple entre sa résistance et la luminosité :
&lt;/p&gt;
&lt;p&gt;
 &lt;span class="inlineMath inlineMathDouble"&gt;
  &lt;span class="katex-display"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         R
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mi&gt;
         f
        &lt;/mi&gt;
        &lt;mo&gt;
         (
        &lt;/mo&gt;
        &lt;mi&gt;
         E
        &lt;/mi&gt;
        &lt;mo&gt;
         )
        &lt;/mo&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        R = f(E)
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.75em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.00773em;"&gt;
       R
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.10764em;"&gt;
       f
      &lt;/span&gt;
      &lt;span class="mopen"&gt;
       (
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
       E
      &lt;/span&gt;
      &lt;span class="mclose"&gt;
       )
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         R
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        R
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.00773em;"&gt;
       R
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  la résistance en Ohm (
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi mathvariant="normal"&gt;
         Ω
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        \Omega
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       Ω
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  )
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         E
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        E
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
       E
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  l’intensité lumineuse en
  &lt;a href="http://fr.wikipedia.org/wiki/Lux_(unité)"&gt;
   lux
  &lt;/a&gt;
  (lx)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Plus l’intensité lumineuse est élevée, plus la résistance diminue. À l’inverse, plus il fait sombre, plus la résistance augmente.
&lt;/p&gt;
&lt;p&gt;
 Malheureusement, les photo-résistances ne sont pas des transducteurs très précis. Ils ont notamment des problèmes de linéarité, un temps de réponse qui peut être élevé et une grande tolérance au niveau de la résistance. Nous les utiliserons donc pour des applications qui ne demandent que peu de rigueur. Ce qui ira bien pour ce qu’on veut en faire.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Symbole de la photorésistance" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/symbole-de-la-photoresistance.png"/&gt;
 &lt;figcaption&gt;
  Symbole de la photorésistance
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Une
 &lt;a href="http://fr.wikipedia.org/wiki/Photorésistance"&gt;
  photorésistance
 &lt;/a&gt;
 est une résistance qui possède une valeur de base en Ohm. C’est à dire qu’elle est calibrée pour avoir une valeur, par exemple 47 kOhm, à un certain seuil de luminosité. À ce seuil on peut donc mesurer cette valeur, suivant la tolérance qu’affiche la photo-résistance. Si la luminosité augmente, la résistance de base n’est plus vraie et chute. En revanche, dans le noir, la résistance augmente bien au delà de la résistance de base.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Génial !! J’en veux, j’en veux ! Comment on l’utilise ?
   &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 La photorésistance est principalement utilisée dans un montage en pont diviseur de tension. Vous le connaissez ce montage, c’est exactement le même principe de fonctionnement que le potentiomètre.
Sauf que ce ne sera pas vous qui allez modifier le curseur mais la photorésistance qui, selon la luminosité, va donner une valeur ohmique différente. Ce qui aura pour effet d’avoir une influence sur la tension en sortie du pont diviseur.
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/TAIiehoMuJs" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="rappel-sur-le-pont-diviseur-de-tension"&gt;
 &lt;a aria-hidden="true" href="#rappel-sur-le-pont-diviseur-de-tension"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Rappel sur le pont diviseur de tension
&lt;/h5&gt;
&lt;p&gt;
 Je vous rappelle le montage d’un pont diviseur de tension :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Pont diviseur de tension" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/pont-diviseur-de-tension.png"/&gt;
 &lt;figcaption&gt;
  Pont diviseur de tension
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 La formule associée est la suivante :
&lt;/p&gt;
&lt;p&gt;
 &lt;span class="inlineMath inlineMathDouble"&gt;
  &lt;span class="katex-display"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          V
         &lt;/mi&gt;
         &lt;mi&gt;
          s
         &lt;/mi&gt;
        &lt;/msub&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          V
         &lt;/mi&gt;
         &lt;mi&gt;
          e
         &lt;/mi&gt;
        &lt;/msub&gt;
        &lt;mfrac&gt;
         &lt;mrow&gt;
          &lt;msub&gt;
           &lt;mi&gt;
            R
           &lt;/mi&gt;
           &lt;mn&gt;
            2
           &lt;/mn&gt;
          &lt;/msub&gt;
         &lt;/mrow&gt;
         &lt;mrow&gt;
          &lt;msub&gt;
           &lt;mi&gt;
            R
           &lt;/mi&gt;
           &lt;mn&gt;
            1
           &lt;/mn&gt;
          &lt;/msub&gt;
          &lt;mo&gt;
           +
          &lt;/mo&gt;
          &lt;msub&gt;
           &lt;mi&gt;
            R
           &lt;/mi&gt;
           &lt;mn&gt;
            2
           &lt;/mn&gt;
          &lt;/msub&gt;
         &lt;/mrow&gt;
        &lt;/mfrac&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        V_s = V_e \frac{R_2}{R_1 + R_2}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:1.36033em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:2.19633em;vertical-align:-0.8360000000000001em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
        V
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.151392em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mathit mtight"&gt;
              s
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
        V
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.151392em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mathit mtight"&gt;
              e
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mopen nulldelimiter"&gt;
       &lt;/span&gt;
       &lt;span class="mfrac"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:1.36033em;"&gt;
           &lt;span style="top:-2.3139999999999996em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord"&gt;
              &lt;span class="mord mathit" style="margin-right:0.00773em;"&gt;
               R
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
                  &lt;span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"&gt;
                   &lt;span class="pstrut" style="height:2.7em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size6 size3 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     1
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.15em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
             &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
             &lt;/span&gt;
             &lt;span class="mbin"&gt;
              +
             &lt;/span&gt;
             &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
             &lt;/span&gt;
             &lt;span class="mord"&gt;
              &lt;span class="mord mathit" style="margin-right:0.00773em;"&gt;
               R
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
                  &lt;span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"&gt;
                   &lt;span class="pstrut" style="height:2.7em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size6 size3 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     2
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.15em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.15em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="stretchy" style="height:0.2em;"&gt;
             &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
              &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
              &lt;/path&gt;
             &lt;/svg&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.677em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord"&gt;
              &lt;span class="mord mathit" style="margin-right:0.00773em;"&gt;
               R
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
                  &lt;span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"&gt;
                   &lt;span class="pstrut" style="height:2.7em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size6 size3 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     2
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.15em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.8360000000000001em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       &lt;span class="mclose nulldelimiter"&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Cette formule s’applique
   &lt;strong&gt;
    uniquement
   &lt;/strong&gt;
   dans le cas où la sortie Vs ne délivre pas de courant (cas des entrées numériques ou analogiques d’un microcontrôleur par exemple).
Dans le cas où il y a justement un courant qui sort de ce pont, cela modifie la valeur de la tension de sortie. C’est comme si vous rajoutiez une résistance en parallèle de la sortie.
Cela a donc pour effet de donner un résistance R2 équivalente plus faible et donc de changer la tension (en appliquant la formule).
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Reprenons le tableau présentant quelques exemples :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Schéma équivalent
      &lt;/th&gt;
      &lt;th&gt;
       Position du curseur
      &lt;/th&gt;
      &lt;th&gt;
       Tension sur la broche C
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;img alt="Curseur à la moitié" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/curseur-a-la-moitie.jpg"/&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Curseur à
       &lt;strong&gt;
        la moitié
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;msub&gt;
              &lt;mi&gt;
               V
              &lt;/mi&gt;
              &lt;mrow&gt;
               &lt;mi&gt;
                s
               &lt;/mi&gt;
               &lt;mi&gt;
                i
               &lt;/mi&gt;
               &lt;mi&gt;
                g
               &lt;/mi&gt;
               &lt;mi&gt;
                n
               &lt;/mi&gt;
               &lt;mi&gt;
                a
               &lt;/mi&gt;
               &lt;mi&gt;
                l
               &lt;/mi&gt;
              &lt;/mrow&gt;
             &lt;/msub&gt;
             &lt;mo&gt;
              =
             &lt;/mo&gt;
             &lt;mo&gt;
              (
             &lt;/mo&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;mo&gt;
              −
             &lt;/mo&gt;
             &lt;mfrac&gt;
              &lt;mrow&gt;
               &lt;mn&gt;
                5
               &lt;/mn&gt;
               &lt;mn&gt;
                0
               &lt;/mn&gt;
              &lt;/mrow&gt;
              &lt;mrow&gt;
               &lt;mn&gt;
                1
               &lt;/mn&gt;
               &lt;mn&gt;
                0
               &lt;/mn&gt;
               &lt;mn&gt;
                0
               &lt;/mn&gt;
              &lt;/mrow&gt;
             &lt;/mfrac&gt;
             &lt;mo&gt;
              )
             &lt;/mo&gt;
             &lt;mo&gt;
              ×
             &lt;/mo&gt;
             &lt;mn&gt;
              5
             &lt;/mn&gt;
             &lt;mo&gt;
              =
             &lt;/mo&gt;
             &lt;mn&gt;
              2
             &lt;/mn&gt;
             &lt;mi mathvariant="normal"&gt;
              .
             &lt;/mi&gt;
             &lt;mn&gt;
              5
             &lt;/mn&gt;
             &lt;mi&gt;
              V
             &lt;/mi&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             V_{signal} = (1-\frac{50}{100})\times 5 = 2.5 V
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.845108em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
             V
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t vlist-t2"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.3361079999999999em;"&gt;
                &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    s
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    i
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight" style="margin-right:0.03588em;"&gt;
                    g
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    n
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    a
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight" style="margin-right:0.01968em;"&gt;
                    l
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
               &lt;span class="vlist-s"&gt;
                ​
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.286108em;"&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mrel"&gt;
            =
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mopen"&gt;
            (
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mbin"&gt;
            −
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mopen nulldelimiter"&gt;
            &lt;/span&gt;
            &lt;span class="mfrac"&gt;
             &lt;span class="vlist-t vlist-t2"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.845108em;"&gt;
                &lt;span style="top:-2.6550000000000002em;"&gt;
                 &lt;span class="pstrut" style="height:3em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    1
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    0
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    0
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span style="top:-3.15em;"&gt;
                 &lt;span class="pstrut" style="height:3em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="stretchy" style="height:0.2em;"&gt;
                  &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
                   &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
                   &lt;/path&gt;
                  &lt;/svg&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span style="top:-3.394em;"&gt;
                 &lt;span class="pstrut" style="height:3em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    5
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    0
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
               &lt;span class="vlist-s"&gt;
                ​
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.345em;"&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
            &lt;span class="mclose nulldelimiter"&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span class="mclose"&gt;
            )
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mbin"&gt;
            ×
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            5
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mrel"&gt;
            =
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            2
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            .
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            5
           &lt;/span&gt;
           &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
            V
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;img alt="Curseur à 25% du départ" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/curseur-a-25-du-depart.jpg"/&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Curseur à
       &lt;strong&gt;
        25% du départ
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;msub&gt;
              &lt;mi&gt;
               V
              &lt;/mi&gt;
              &lt;mrow&gt;
               &lt;mi&gt;
                s
               &lt;/mi&gt;
               &lt;mi&gt;
                i
               &lt;/mi&gt;
               &lt;mi&gt;
                g
               &lt;/mi&gt;
               &lt;mi&gt;
                n
               &lt;/mi&gt;
               &lt;mi&gt;
                a
               &lt;/mi&gt;
               &lt;mi&gt;
                l
               &lt;/mi&gt;
              &lt;/mrow&gt;
             &lt;/msub&gt;
             &lt;mo&gt;
              =
             &lt;/mo&gt;
             &lt;mo&gt;
              (
             &lt;/mo&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;mo&gt;
              −
             &lt;/mo&gt;
             &lt;mfrac&gt;
              &lt;mrow&gt;
               &lt;mn&gt;
                2
               &lt;/mn&gt;
               &lt;mn&gt;
                5
               &lt;/mn&gt;
              &lt;/mrow&gt;
              &lt;mrow&gt;
               &lt;mn&gt;
                1
               &lt;/mn&gt;
               &lt;mn&gt;
                0
               &lt;/mn&gt;
               &lt;mn&gt;
                0
               &lt;/mn&gt;
              &lt;/mrow&gt;
             &lt;/mfrac&gt;
             &lt;mo&gt;
              )
             &lt;/mo&gt;
             &lt;mo&gt;
              ×
             &lt;/mo&gt;
             &lt;mn&gt;
              5
             &lt;/mn&gt;
             &lt;mo&gt;
              =
             &lt;/mo&gt;
             &lt;mn&gt;
              3
             &lt;/mn&gt;
             &lt;mi mathvariant="normal"&gt;
              .
             &lt;/mi&gt;
             &lt;mn&gt;
              7
             &lt;/mn&gt;
             &lt;mn&gt;
              5
             &lt;/mn&gt;
             &lt;mi&gt;
              V
             &lt;/mi&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             V_{signal} = (1-\frac{25}{100})\times 5 = 3.75 V
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.845108em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
             V
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t vlist-t2"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.3361079999999999em;"&gt;
                &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    s
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    i
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight" style="margin-right:0.03588em;"&gt;
                    g
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    n
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    a
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight" style="margin-right:0.01968em;"&gt;
                    l
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
               &lt;span class="vlist-s"&gt;
                ​
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.286108em;"&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mrel"&gt;
            =
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mopen"&gt;
            (
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mbin"&gt;
            −
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mopen nulldelimiter"&gt;
            &lt;/span&gt;
            &lt;span class="mfrac"&gt;
             &lt;span class="vlist-t vlist-t2"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.845108em;"&gt;
                &lt;span style="top:-2.6550000000000002em;"&gt;
                 &lt;span class="pstrut" style="height:3em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    1
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    0
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    0
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span style="top:-3.15em;"&gt;
                 &lt;span class="pstrut" style="height:3em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="stretchy" style="height:0.2em;"&gt;
                  &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
                   &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
                   &lt;/path&gt;
                  &lt;/svg&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span style="top:-3.394em;"&gt;
                 &lt;span class="pstrut" style="height:3em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    2
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    5
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
               &lt;span class="vlist-s"&gt;
                ​
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.345em;"&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
            &lt;span class="mclose nulldelimiter"&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span class="mclose"&gt;
            )
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mbin"&gt;
            ×
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            5
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mrel"&gt;
            =
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            3
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            .
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            7
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            5
           &lt;/span&gt;
           &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
            V
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;img alt="Curseur à 75% du départ" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/curseur-a-75-du-depart.jpg"/&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Curseur à
       &lt;strong&gt;
        75% du départ
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;msub&gt;
              &lt;mi&gt;
               V
              &lt;/mi&gt;
              &lt;mrow&gt;
               &lt;mi&gt;
                s
               &lt;/mi&gt;
               &lt;mi&gt;
                i
               &lt;/mi&gt;
               &lt;mi&gt;
                g
               &lt;/mi&gt;
               &lt;mi&gt;
                n
               &lt;/mi&gt;
               &lt;mi&gt;
                a
               &lt;/mi&gt;
               &lt;mi&gt;
                l
               &lt;/mi&gt;
              &lt;/mrow&gt;
             &lt;/msub&gt;
             &lt;mo&gt;
              =
             &lt;/mo&gt;
             &lt;mo&gt;
              (
             &lt;/mo&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;mo&gt;
              −
             &lt;/mo&gt;
             &lt;mfrac&gt;
              &lt;mrow&gt;
               &lt;mn&gt;
                7
               &lt;/mn&gt;
               &lt;mn&gt;
                5
               &lt;/mn&gt;
              &lt;/mrow&gt;
              &lt;mrow&gt;
               &lt;mn&gt;
                1
               &lt;/mn&gt;
               &lt;mn&gt;
                0
               &lt;/mn&gt;
               &lt;mn&gt;
                0
               &lt;/mn&gt;
              &lt;/mrow&gt;
             &lt;/mfrac&gt;
             &lt;mo&gt;
              )
             &lt;/mo&gt;
             &lt;mo&gt;
              ×
             &lt;/mo&gt;
             &lt;mn&gt;
              5
             &lt;/mn&gt;
             &lt;mo&gt;
              =
             &lt;/mo&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;mi mathvariant="normal"&gt;
              .
             &lt;/mi&gt;
             &lt;mn&gt;
              2
             &lt;/mn&gt;
             &lt;mn&gt;
              5
             &lt;/mn&gt;
             &lt;mi&gt;
              V
             &lt;/mi&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             V_{signal} = (1-\frac{75}{100})\times 5 = 1.25 V
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.845108em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
             V
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t vlist-t2"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.3361079999999999em;"&gt;
                &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    s
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    i
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight" style="margin-right:0.03588em;"&gt;
                    g
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    n
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    a
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight" style="margin-right:0.01968em;"&gt;
                    l
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
               &lt;span class="vlist-s"&gt;
                ​
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.286108em;"&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mrel"&gt;
            =
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mopen"&gt;
            (
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mbin"&gt;
            −
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mopen nulldelimiter"&gt;
            &lt;/span&gt;
            &lt;span class="mfrac"&gt;
             &lt;span class="vlist-t vlist-t2"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.845108em;"&gt;
                &lt;span style="top:-2.6550000000000002em;"&gt;
                 &lt;span class="pstrut" style="height:3em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    1
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    0
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    0
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span style="top:-3.15em;"&gt;
                 &lt;span class="pstrut" style="height:3em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="stretchy" style="height:0.2em;"&gt;
                  &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
                   &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
                   &lt;/path&gt;
                  &lt;/svg&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span style="top:-3.394em;"&gt;
                 &lt;span class="pstrut" style="height:3em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    7
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    5
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
               &lt;span class="vlist-s"&gt;
                ​
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.345em;"&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
            &lt;span class="mclose nulldelimiter"&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span class="mclose"&gt;
            )
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mbin"&gt;
            ×
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            5
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mrel"&gt;
            =
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            .
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            2
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            5
           &lt;/span&gt;
           &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
            V
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Illustrations de la position du curseur et sa tension résultante
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous allez donc maintenant comprendre pourquoi je vais vous donner deux montages pour une utilisation différente de la photorésistance…
&lt;/p&gt;
&lt;h5 id="utilisation-n°1"&gt;
 &lt;a aria-hidden="true" href="#utilisation-n°1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utilisation n°1
&lt;/h5&gt;
&lt;p&gt;
 Ce premier montage, va être le premier capteur que vous allez créer ! Facile, puisque je vous fais tout le travail.
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Le principe de ce montage réside sur l’utilisation que l’on va faire de la photo-résistance.
&lt;/p&gt;
&lt;p&gt;
 Comme je vous le disais à l’instant, on va l’utiliser dans un pont diviseur de tension. Exactement comme lorsque l’on utilise un potentiomètre. Sauf que dans ce cas, c’est l’intensité lumineuse qui va faire varier la tension en sortie. Voyez plutôt :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Branchement n°1" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/branchement-ndeg1.jpg"/&gt;
 &lt;figcaption&gt;
  Branchement n°1
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Montage n°1" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/montage-ndeg1.jpg"/&gt;
 &lt;figcaption&gt;
  Montage n°1
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 On calibre le pont diviseur de tension de manière à ce qu’il soit "équitable" et divise la tension d’alimentation par 2 en sa sortie. Ainsi, lorsque la luminosité fluctuera, on pourra mesurer ces variations avec la carte Arduino.
Avec ce montage,
 &lt;strong&gt;
  plus l’intensité lumineuse est élevée, plus la tension en sortie du pont sera élevée
 &lt;/strong&gt;
 à son tour. Et inversement, plus il fais sombre, moins la tension est élevée.
&lt;/p&gt;
&lt;h5 id="utilisation-n°2"&gt;
 &lt;a aria-hidden="true" href="#utilisation-n°2"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utilisation n°2
&lt;/h5&gt;
&lt;p&gt;
 Tandis que là, c’est l’effet inverse qui va se produire :
 &lt;strong&gt;
  plus il y aura de lumière, moins il y aura de tension en sortie du pont
 &lt;/strong&gt;
 . Et plus il fera sombre, plus la tension sera élevée.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Branchement n°2" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/branchement-ndeg2.jpg"/&gt;
 &lt;figcaption&gt;
  Branchement n°2
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Montage n°2" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/montage-ndeg2.jpg"/&gt;
 &lt;figcaption&gt;
  Montage n°2
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Rien de bien sorcier. Il suffit de bien comprendre l’intérêt du pont diviseur de tension.
&lt;/p&gt;
&lt;h4 id="un-peu-de-programmation"&gt;
 &lt;a aria-hidden="true" href="#un-peu-de-programmation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un peu de programmation
&lt;/h4&gt;
&lt;p&gt;
 Et si vous aviez un réveil, qui ne vous donne pas l’heure ? Fort utile, n’est-ce pas !
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 Non, sérieusement, il va vous réveiller dès que le jour se lève… ce qui fait que vous dormirez plus longtemps en hiver. C’est vos profs qui vont pas être contents !
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 Vous n’aurez qu’à dire que c’est de ma faute.
 &lt;img alt=":lol:" class="smiley" src="./static/smileys/rire.gif"/&gt;
&lt;/p&gt;
&lt;p&gt;
 Bon allez, un peu de tenue quand même, je ne voudrais pas être la cause de votre échec scolaire. Cette fois, vraiment sérieusement, nous allons faire un tout petit programme qui va simplement détecter la présence ou l’absence de lumière. Lorsque la tension en sortie du pont diviseur de tension créée avec la photorésistance et la résistance fixe chute, c’est que la luminosité augmente. À vous de choisir le schéma correspondant suivant les deux présentés précédemment. Pour commencer, on va initialiser les variables et tout le tralala qui va avec.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; led = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;            &lt;span class="hljs-comment"&gt;// Une LED pour indiquer s'il fait jour&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; capteur = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// broche A0 sur laquelle va être connecté le pont diviseur de tension&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; tension = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;             &lt;span class="hljs-comment"&gt;// variable qui va enregistrer la tension lue en sortie du capteur&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; seuilObscurite = &lt;span class="hljs-number"&gt;2.5&lt;/span&gt;;    &lt;span class="hljs-comment"&gt;// valeur en V, seuil qui détermine le niveau auquel l'obscurité est présente&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// définition des broches utilisées&lt;/span&gt;
    pinMode(led, OUTPUT);

    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// la voie série pour monitorer&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Mise en place du capteur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Qu’allons-nous retrouver dans la fonction
 &lt;code&gt;
  loop()
 &lt;/code&gt;
 ? Eh bien avant tout il va falloir lire la valeur présente en entrée de la broche analogique A0. Puis, on va calculer la tension correspondante à la valeur lue. Enfin, on va la comparer au seuil préalablement défini qui indique le niveau pour lequel l’absence de lumière fait loi.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// conversion de cette valeur en tension&lt;/span&gt;
    tension = (analogRead(capteur) * &lt;span class="hljs-number"&gt;5.0&lt;/span&gt;) / &lt;span class="hljs-number"&gt;1024&lt;/span&gt;;

    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(tension &amp;gt;= seuilObscurite)
    {
        digitalWrite(led, LOW); &lt;span class="hljs-comment"&gt;// On allume la LED&lt;/span&gt;
    }
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
    {
        digitalWrite(led, HIGH); &lt;span class="hljs-comment"&gt;// On éteint la LED&lt;/span&gt;
    }
    &lt;span class="hljs-comment"&gt;// envoie de la valeur de la tension lue&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// vers l'ordinateur via la liaison série&lt;/span&gt;
    Serial.print(&lt;span class="hljs-string"&gt;"Tension = "&lt;/span&gt;);
    Serial.print(tension);
    Serial.println(&lt;span class="hljs-string"&gt;" V"&lt;/span&gt;);

    &lt;span class="hljs-comment"&gt;// délai pour ne prendre des mesures que toutes les demi-secondes&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;500&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Détecter la nuit
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Exemple interactif :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/gU7PRXdPE6B" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="un-programme-plus-évolué"&gt;
 &lt;a aria-hidden="true" href="#un-programme-plus-évolué"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un programme plus évolué
&lt;/h4&gt;
&lt;p&gt;
 Après tant de difficulté (
 &lt;img alt=":euh:" class="smiley" src="./static/smileys/unsure.gif"/&gt;
 ), voici un nouveau programme qui vous sera peut-être plus intéressant à faire. En fait ça le deviendra dès que je vous aurais dit l’application qui en est prévue…
&lt;/p&gt;
&lt;h5 id="préparation"&gt;
 &lt;a aria-hidden="true" href="#préparation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Préparation
&lt;/h5&gt;
&lt;p&gt;
 Cette fois, je vais vous demander d’avoir deux photorésistances identiques. Le principe est simple on va faire une comparaison entre les deux valeurs retournées par les deux capteurs (deux fois le montage précédent).
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Branchement papillon de lumière" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/branchement-papillon-de-lumiere.jpg"/&gt;
 &lt;figcaption&gt;
  Branchement papillon de lumière
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Montage papillon de lumière" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/montage-papillon-de-lumiere.jpg"/&gt;
 &lt;figcaption&gt;
  Montage papillon de lumière
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Si la valeur à droite est plus forte, on allumera une LED en broche 2. Sinon, on allume en broche 3. Si la différence est faible, on allume les deux. Dans tous les cas, il n’y a pas de cas intermédiaire. C’est soit à gauche, soit à droite (selon la disposition des photorésistances).
&lt;/p&gt;
&lt;p&gt;
 Ce principe pourrait être appliqué à un petit robot mobile avec un comportement de papillon de nuit. Il cherche la source de lumière la plus intense à proximité.
&lt;/p&gt;
&lt;h5 id="le-programme"&gt;
 &lt;a aria-hidden="true" href="#le-programme"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le programme
&lt;/h5&gt;
&lt;p&gt;
 Il parle de lui même, pas besoin d’en dire plus.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// déclaration des broches utilisées&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; ledDroite = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; ledGauche = &lt;span class="hljs-number"&gt;3&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; capteurDroit = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; capteurGauche = &lt;span class="hljs-number"&gt;1&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;/* deux variables par capteur qui une stockera la valeur lue sur la broche analogique
et l'autre stockera le résultat de la conversion de la précédente valeur en tension */&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; lectureDroite = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; lectureGauche = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; tensionDroite = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; tensionGauche = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    pinMode(ledDroite, OUTPUT);
    pinMode(ledGauche, OUTPUT);
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// lecture de la valeur en sortie du capteur capteurDroit puis gauche&lt;/span&gt;
    lectureDroite = analogRead(capteurDroit);
    lectureGauche = analogRead(capteurGauche);
    &lt;span class="hljs-comment"&gt;// conversion  en tension de la valeur lue&lt;/span&gt;
    tensionDroite = (lectureDroite * &lt;span class="hljs-number"&gt;5.0&lt;/span&gt;) / &lt;span class="hljs-number"&gt;1024&lt;/span&gt;;
    tensionGauche = (lectureGauche * &lt;span class="hljs-number"&gt;5.0&lt;/span&gt;) / &lt;span class="hljs-number"&gt;1024&lt;/span&gt;;

    &lt;span class="hljs-comment"&gt;// si la tension lue en sortie du capteur 1 est plus grande&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// que celle en sortie du capteur 2&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(tensionDroite &amp;gt; tensionGauche)
    {
        digitalWrite(ledDroite, LOW); &lt;span class="hljs-comment"&gt;// allumée&lt;/span&gt;
        digitalWrite(ledGauche, HIGH); &lt;span class="hljs-comment"&gt;// éteinte&lt;/span&gt;
    }
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
    {
        digitalWrite(ledDroite, HIGH); &lt;span class="hljs-comment"&gt;// éteinte&lt;/span&gt;
        digitalWrite(ledGauche, LOW); &lt;span class="hljs-comment"&gt;// allumée&lt;/span&gt;
    }
    &lt;span class="hljs-comment"&gt;// envoi des données lues vers l'ordinateur&lt;/span&gt;
    Serial.print(&lt;span class="hljs-string"&gt;"Tension Droite = "&lt;/span&gt;);
    Serial.print(tensionDroite);
    Serial.println(&lt;span class="hljs-string"&gt;" V"&lt;/span&gt;);
    Serial.print(&lt;span class="hljs-string"&gt;"Tension Gauche = "&lt;/span&gt;);
    Serial.print(tensionGauche);
    Serial.println(&lt;span class="hljs-string"&gt;" V"&lt;/span&gt;);

    delay(&lt;span class="hljs-number"&gt;100&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// délai pour ne prendre une mesure que toutes les 100ms&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Le petit robot mobile.
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 J’en parlais donc brièvement, ce petit programme peut servir de cerveau à un petit robot mobile qui cherchera alors la source de lumière la plus intense à ses "yeux". Vous n’aurez plus qu’à remplacer les LED par une commande de moteur (que l’on verra dans la prochaine partie sur les moteurs) et alimenter le tout sur batterie pour voir votre robot circuler entre vos pattes.
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 Bien entendu ce programme pourrait largement être amélioré !
&lt;/p&gt;
&lt;p&gt;
 Voici un exemple de résultat sur simulateur :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/jAIb3gebR7U" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="un-autre-petit-robot-mobile"&gt;
 &lt;a aria-hidden="true" href="#un-autre-petit-robot-mobile"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un autre petit robot mobile
&lt;/h4&gt;
&lt;p&gt;
 On peut renverser la situation pour faire en sorte que le robot suive une ligne noire tracée au sol. C’est un robot suiveur de ligne. Le principe est de "coller" les deux "yeux" du robot au sol.
&lt;/p&gt;
&lt;p&gt;
 L’état initial va être d’avoir un œil de chaque côté de la ligne noire. Le robot avance tant qu’il voit du blanc (car la ligne noire est sur une surface claire, blanche en général). Dès qu’il va voir du noir (lorsque la luminosité aura diminué), il va alors arrêter de faire tourner le moteur opposé à l’œil qui a vu la ligne noire. Ainsi, le robot va modifier sa trajectoire et va continuer en suivant la ligne.
&lt;/p&gt;
&lt;p&gt;
 À partir de cela, je vous laisse réfléchir à tout ce que vous pouvez faire. Non pas de programme donné tout frais, je viens de définir un cahier des charges, somme toute, assez simple. Vous n’avez donc plus qu’à le suivre pour arriver à vos fins.
&lt;/p&gt;
&lt;h3 id="capteurs-à-tension-de-sortie-variable"&gt;
 &lt;a aria-hidden="true" href="#capteurs-à-tension-de-sortie-variable"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Capteurs à tension de sortie variable
&lt;/h3&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/sLQG879PuRE" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Passons à un capteur un petit peu plus amusant et plus étonnant, dont les applications sont très variées !
&lt;/p&gt;
&lt;h4 id="lélément-piézoélectrique"&gt;
 &lt;a aria-hidden="true" href="#lélément-piézoélectrique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’élément piézoélectrique
&lt;/h4&gt;
&lt;p&gt;
 Sous ce nom peu commun se cache un phénomène physique très intéressant. L’élément piézoélectrique, que l’on retrouve dans divers objets du quotidien (montres, certains briquets, raquettes de tennis, …) présente en effet toute une panoplie de caractéristiques utilisées dans des dizaines voire centaines de domaines. Nous allons voir tout ça en détail. Nous, ce qui va nous intéresser pour le moment, c’est sa propriété à capter des sons.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Éléments piézoélectriques de montre" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/elements-piezoelectriques-de-montre.jpg"/&gt;
 &lt;figcaption&gt;
  Éléments piézoélectriques de montre - (CC-BY-SA,
  &lt;a href="http://commons.wikimedia.org/wiki/File:Electronic_component_piezo.jpg"&gt;
   FDominec
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Allumeur de briquet" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/allumeur-de-briquet.jpg"/&gt;
 &lt;figcaption&gt;
  Allumeur de briquet - (CC-0)
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="constitution"&gt;
 &lt;a aria-hidden="true" href="#constitution"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Constitution
&lt;/h5&gt;
&lt;p&gt;
 Avant de parler de son fonctionnement, voyons un peu sa constitution.
&lt;/p&gt;
&lt;p&gt;
 Prenons les éléments piézoélectriques de la première image, à gauche. On observe qu’ils se trouvent sous une forme de pastille composée de plusieurs couches. Généralement c’est une pastille de céramique qui est montée sur une pastille métallique. La fabrication de ces éléments étant très complexe, nous en resterons à ce niveau d’approche.
&lt;/p&gt;
&lt;h5 id="propriété-1"&gt;
 &lt;a aria-hidden="true" href="#propriété-1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Propriété
&lt;/h5&gt;
&lt;p&gt;
 J’ai trouvé amusant de voir sur internet que l’on parlait de sa propriété principale comme étant analogue à celle d’une éponge. Je ne vous épargnerais donc pas cet exemple.
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
&lt;/p&gt;
&lt;p&gt;
 Dès qu’on met une éponge en contact avec de l’eau, elle l’absorbe. Tandis que lorsqu’on la presse, elle se vide de l’eau qu’elle a absorbée. Le rapport avec l’élément piézoélectrique ? Eh bien il agit un peu de la même manière.
&lt;/p&gt;
&lt;p&gt;
 Un élément piézoélectrique, lui, subit un phénomène semblable : dès qu’on lui admet une contrainte mécanique, il génère une tension électrique. En revanche, dès qu’on lui administre une tension électrique, il génère alors une contrainte mécanique, restituée par exemple sous forme sonore.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Génération d'une tension électrique par un élément piézoélectrique sous l'action d'une contrainte mécanique" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/generation-dune-tension-electrique-par-un-element-piezoelectrique-sous-laction-dune-contrainte-mecanique.gif"/&gt;
 &lt;figcaption&gt;
  Génération d’une tension électrique par un élément piézoélectrique sous l’action d’une contrainte mécanique - (CC-BY-SA,
  &lt;a href="http://commons.wikimedia.org/wiki/File:SchemaPiezo.gif"&gt;
   Tizeff
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Un exemple d’utilisation dont vous ne vous doutez certainement pas, c’est l’utilisation de cette propriété dans certaines raquettes de tennis. L’élément piézoélectrique se trouve dans le manche de la raquette. Lorsqu’une balle frappe la raquette, elle génère une contrainte mécanique sur l’élément piézoélectrique qui en retour génère une tension électrique. Cette tension est récupérée et injectée à nouveau dans l’élément piézoélectrique qui génère alors une contrainte mécanique opposée à celle générée par la balle. Vous me suivez ? L’intérêt ? Réduire les vibrations causées par le choc et ainsi améliorer la stabilité de la raquette (et de la frappe) tout en réduisant le "stress" provoqué sur le poignet du joueur. Dingue non ?
&lt;/p&gt;
&lt;h5 id="utilisation"&gt;
 &lt;a aria-hidden="true" href="#utilisation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utilisation
&lt;/h5&gt;
&lt;p&gt;
 L’utilisation que nous allons faire de cet élément va nous permettre de capter un choc. Cela peut être un "toc" sur une porte, une déformation de surface, voire même une onde sonore un peu puissante. Ce capteur délivre directement une tension proportionnelle à la contrainte mécanique qu’on lui applique. Il s’agit donc d’un capteur actif. Nous pouvons donc l’utiliser sans rien en le connectant directement avec Arduino.
&lt;/p&gt;
&lt;h4 id="montage"&gt;
 &lt;a aria-hidden="true" href="#montage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Montage
&lt;/h4&gt;
&lt;p&gt;
 Vous allez procéder au montage suivant en respectant le schéma de câblage :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Branchement du piezo" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/branchement-du-piezo.jpg"/&gt;
 &lt;figcaption&gt;
  Branchement du piezo
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Montage du piezo" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/montage-du-piezo.jpg"/&gt;
 &lt;figcaption&gt;
  Montage du piezo
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 La résistance de
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mi&gt;
        M
       &lt;/mi&gt;
       &lt;mi mathvariant="normal"&gt;
        Ω
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       1M\Omega
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
      M
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      Ω
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 en parallèle de l’élément piézoélectrique permet d’éviter les courants trop forts qui peuvent être générés par l’élément piézoélectrique.
&lt;/p&gt;
&lt;p&gt;
 Il est accompagné par une diode un peu particulière que l’on appelle une diode zener. Cette dernière sert à éviter les surtensions. Si jamais la tension générée par le piezo dépasse son seuil (4.7V en l’occurence), elle deviendra passante et le courant ira donc vers la masse plutôt que dans le microcontrôleur (évitant ainsi de griller l’entrée analogique). Cette dernière n’est pas indispensable mais fortement conseillée.
&lt;/p&gt;
&lt;h4 id="programme"&gt;
 &lt;a aria-hidden="true" href="#programme"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Programme
&lt;/h4&gt;
&lt;p&gt;
 Le programme que nous allons associer à ce montage, et qui va être contenu dans la carte Arduino, va exploiter la tension générée par l’élément piézoélectrique, lorsqu’on lui administrera une contrainte mécanique, pour allumer ou éteindre une LED présente en broche 2 de la carte Arduino. On pourra s’en servir pour détecter un événement sonore tel que le toc sur une porte.
&lt;/p&gt;
&lt;p&gt;
 La condition pour que l’élément piézoélectrique capte correctement le toc d’une porte est qu’il doit être positionné sur la porte de façon à ce que sa surface soit bien plaquée contre elle. Aussi nous utiliserons la liaison série pour indiquer la tension produite par l’élément piézoélectrique.
&lt;/p&gt;
&lt;p&gt;
 C’est un petit plus, par forcément utile mais qui vous donnera une idée de la force qu’il faut pour générer une tension particulière. Vous en trouverez certainement une application utile.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 Allez, un peu de programmation !
&lt;/p&gt;
&lt;h5 id="fonction-setup"&gt;
 &lt;a aria-hidden="true" href="#fonction-setup"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Fonction setup()
&lt;/h5&gt;
&lt;p&gt;
 Au début du programme nous déclarons quelques variables que nous utiliserons par la suite. Aussi nous amorçons l’utilisation de la liaison série et des broches utilisées de la carte Arduino.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; led = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;         &lt;span class="hljs-comment"&gt;// utilisation de la LED en broche 2 de la carte&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; piezo = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;       &lt;span class="hljs-comment"&gt;// l'élément piézoélectrique est connecté en broche analogique 0&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; seuil_detection = &lt;span class="hljs-number"&gt;100&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;/* on peut définir le seuil de détection qui va simplement
permettre de confirmer que c'est bien un évènement sonore suffisant et non parasite */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Initialisation des paramètres
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Petite parenthèse par rapport au seuil. Ici il est configuré de façon à être comparé à la lecture directe de la valeur en broche analogique (comprise entre 0 et 1023). Mais on peut aussi le définir pour qu’il soit comparé au calcul de la tension en sortie du capteur (par exemple le mettre à 1, pour 1V).
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; lecture_capteur = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;  &lt;span class="hljs-comment"&gt;// variable qui va contenir la valeur lue en broche analogique 0&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; tension = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;          &lt;span class="hljs-comment"&gt;// variable qui va contenir le résultat du calcul de la tension&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; etat_led = LOW;         &lt;span class="hljs-comment"&gt;// variable utilisée pour allumer ou éteindre la LED à chaque "Toc"&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    pinMode(led, OUTPUT);      &lt;span class="hljs-comment"&gt;// déclaration de la broche 2 en sortie&lt;/span&gt;
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);        &lt;span class="hljs-comment"&gt;// utilisation de la liaison série&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Initialisation du micro contrôleur pour piloter la LED
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="fonction-principale"&gt;
 &lt;a aria-hidden="true" href="#fonction-principale"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Fonction principale
&lt;/h5&gt;
&lt;p&gt;
 Étant donné que le code est plutôt court et simple, nous le laisserons dans la seule fonction loop() plutôt que de le découper en plusieurs petites fonctions. Cependant libre à vous de l’agencer autrement selon vos besoins.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// lecture de la valeur en sortie du capteur&lt;/span&gt;
    lecture_capteur = analogRead(piezo);
    &lt;span class="hljs-comment"&gt;// conversion de cette valeur en tension&lt;/span&gt;
    tension = (lecture_capteur * &lt;span class="hljs-number"&gt;5.0&lt;/span&gt;) / &lt;span class="hljs-number"&gt;1024&lt;/span&gt;;

    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (lecture_capteur &amp;gt;= seuil_detection)
    {
        &lt;span class="hljs-comment"&gt;// on modifie l'état de la LED pour le passer à son état opposé&lt;/span&gt;
        etat_led = !etat_led;
        &lt;span class="hljs-comment"&gt;// application du nouvel état en broche 2&lt;/span&gt;
        digitalWrite(led, etat_led);

        &lt;span class="hljs-comment"&gt;// envoi vers l'ordinateur, via la liaison série,&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// des données correspondant au Toc et à la tension&lt;/span&gt;
        Serial.println(&lt;span class="hljs-string"&gt;"Toc !"&lt;/span&gt;);
        Serial.print(&lt;span class="hljs-string"&gt;"Tension = "&lt;/span&gt;);
        Serial.print(tension);
        Serial.println(&lt;span class="hljs-string"&gt;" V"&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Envoie des données captées.
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ici pas de délai à la fin de la boucle. En effet, si vous mettez un délai (qui est bloquant) vous risqueriez de rater des "toc" puisque cet événement est bref et imprévisible. Si jamais vous tapiez sur votre élément piézoélectrique au moment où le programme est dans la fonction
   &lt;code&gt;
    delay()
   &lt;/code&gt;
   , vous ne pourriez pas l’intercepter.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="seuil-de-tension"&gt;
 &lt;a aria-hidden="true" href="#seuil-de-tension"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Seuil de tension
&lt;/h5&gt;
&lt;p&gt;
 Comme je le disais, il est aussi possible et non pas idiot de changer le seuil pour qu’il soit comparé en tant que tension et non valeur "abstraite" comprise entre 0 et 1023. Cela relève de la simplicité extrême, voyez plutôt :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// utilisation de la LED en broche 2 de la carte&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; led = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// l'élément piézoélectrique est connecté en broche analogique 0&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; piezo = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// seuil de détection en tension et non plus en nombre entre 0 et 1023&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;float&lt;/span&gt; seuil_detection = &lt;span class="hljs-number"&gt;1.36&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// variable qui va contenir la valeur lue en broche analogique 0&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; lecture_capteur = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// variable qui va contenir le résultat du calcul de la tension&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; tension = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// variable utilisée pour allumer ou éteindre la LED à chaque "Toc"&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; etat_led = LOW;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    pinMode(led, OUTPUT); &lt;span class="hljs-comment"&gt;// déclaration de la broche 2 en sortie&lt;/span&gt;
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);   &lt;span class="hljs-comment"&gt;// utilisation de la liaison série&lt;/span&gt;
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// lecture de la valeur en sortie du capteur&lt;/span&gt;
    lecture_capteur = analogRead(piezo);
    &lt;span class="hljs-comment"&gt;// convestion de cette valeur en tension&lt;/span&gt;
    tension = (lecture_capteur * &lt;span class="hljs-number"&gt;5.0&lt;/span&gt;) / &lt;span class="hljs-number"&gt;1024&lt;/span&gt;;

    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (tension &amp;gt;= seuil_detection)  &lt;span class="hljs-comment"&gt;// comparaison de deux tensions&lt;/span&gt;
    {
        &lt;span class="hljs-comment"&gt;// on modifie l'état de la LED pour le passer à son état opposé&lt;/span&gt;
        etat_led = !etat_led;
        &lt;span class="hljs-comment"&gt;// application du nouvel état en broche 2&lt;/span&gt;
        digitalWrite(led, etat_led);

        &lt;span class="hljs-comment"&gt;// envoi vers l'ordinateur, via la liaison série,&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// des données correspondant au Toc et à la tension&lt;/span&gt;
        Serial.println(&lt;span class="hljs-string"&gt;"Toc !"&lt;/span&gt;);
        Serial.print(&lt;span class="hljs-string"&gt;"Tension = "&lt;/span&gt;);
        Serial.print(tension);
        Serial.println(&lt;span class="hljs-string"&gt;" V"&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Conversion en Volt
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Je n’ai modifié que le type de la variable
 &lt;code&gt;
  seuil_detection
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;h4 id="la-réversibilité-de-lélément-piézoélectrique"&gt;
 &lt;a aria-hidden="true" href="#la-réversibilité-de-lélément-piézoélectrique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La réversibilité de l’élément piézoélectrique
&lt;/h4&gt;
&lt;p&gt;
 Tout à l’heure je vous disais que l’élément piézoélectrique était capable de transformer une contrainte mécanique en une tension électrique. Je vous ai également parlé du "phénomène éponge" en vous disant que l’on pouvait aussi bien absorber que restituer non pas de l’eau comme l’éponge mais une contrainte mécanique à partir d’une tension électrique. On va donc s’amuser à créer du son avec l’élément piézoélectrique !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
&lt;/p&gt;
&lt;h5 id="faire-vibrer-lélément-piézoélectrique"&gt;
 &lt;a aria-hidden="true" href="#faire-vibrer-lélément-piézoélectrique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Faire vibrer l’élément piézoélectrique !
&lt;/h5&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Attention tout de même, bien que vous l’aurez très certainement compris, il n’est plus question d’utiliser l’élément piézoélectrique en entrée comme un capteur, mais bien en sortie comme un actionneur.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Tout d’abord, il vous faudra brancher l’élément piézoélectrique. Pour cela, mettez son fil noir à la masse et son fil rouge à une broche numérique, n’importe laquelle. Pas besoin de résistance cette fois-ci. Et voilà les branchements sont faits ! Il ne reste plus qu’à générer un signal pour faire vibrer l’élément piézoélectrique. Selon la fréquence du signal, la vibration générée par l’élément piézoélectrique sera plus ou moins grave ou aiguë. Essayons simplement avec ce petit programme de rien du tout (je ne vous donne que la fonction loop(), vous savez déjà tout faire
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 ) :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    digitalWrite(piezo, HIGH);
    delay(&lt;span class="hljs-number"&gt;5&lt;/span&gt;);
    digitalWrite(piezo, LOW);
    delay(&lt;span class="hljs-number"&gt;5&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Signal 100 Hz
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ce code va générer un signal carré d’une période de 10ms, soit une fréquence de 100Hz. C’est un son plutôt grave. Vous pouvez aisément changer la valeur contenue dans les délais pour écouter les différents sons que vous allez produire. Essayez de générer un signal avec la PWM et soyez attentif au résultat en changeant la valeur de la PWM avec un potentiomètre par exemple.
&lt;/p&gt;
&lt;h5 id="une-fonction-encore-toute-prête"&gt;
 &lt;a aria-hidden="true" href="#une-fonction-encore-toute-prête"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Une fonction encore toute prête
&lt;/h5&gt;
&lt;p&gt;
 Maintenant, si vous souhaitez générer ce signal et en même temps faire d’autres traitements, cela va devenir plus compliqué, car le temps sera plus difficile à maîtriser (et les délais ne sont pas toujours les bienvenus
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 ).
Pour contrer cela, nous allons confier la génération du signal à une fonction d’Arduino qui s’appelle
 &lt;a href="http://arduino.cc/en/Reference/Tone"&gt;
  &lt;code&gt;
   tone()
  &lt;/code&gt;
 &lt;/a&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Cette fonction prend en argument la broche sur laquelle vous voulez appliquer le signal ainsi que la fréquence dudit signal à réaliser. Si par exemple je veux émettre un signal de 440Hz (qui correspond au "la" des téléphones) je ferais :
 &lt;code&gt;
  tone(piezo, 440);
 &lt;/code&gt;
 . Le son va alors devenir permanent, c’est pourquoi, si vous voulez l’arrêter, il vous suffit d’appeler la fonction
 &lt;a href="http://arduino.cc/en/Reference/NoTone"&gt;
  &lt;code&gt;
   noTone()
  &lt;/code&gt;
 &lt;/a&gt;
 qui va alors arrêter la génération du son sur la broche spécifiée en argument.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   La fonction
   &lt;code&gt;
    tone()
   &lt;/code&gt;
   peut prendre un troisième argument qui spécifie en millisecondes la durée pendant laquelle vous désirez jouer le son, vous évitant ainsi d’appeler
   &lt;code&gt;
    noTone()
   &lt;/code&gt;
   ensuite.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Pour les plus motivés d’entre vous, vous pouvez essayer de jouer une petite mélodie avec l’élément piézoélectrique.
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 &lt;em&gt;
  Ah les joies nostalgiques de l’époque des sonneries monophoniques
 &lt;/em&gt;
 .
 &lt;img alt=":lol:" class="smiley" src="./static/smileys/rire.gif"/&gt;
&lt;/p&gt;
&lt;h4 id="la-tension-comme-image-du-courant-avec-les-photodiodes-et-phototransistors"&gt;
 &lt;a aria-hidden="true" href="#la-tension-comme-image-du-courant-avec-les-photodiodes-et-phototransistors"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La tension comme image du courant avec les photodiodes et phototransistors
&lt;/h4&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/iek63shoDq4" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="Étalonner-son-capteur"&gt;
 &lt;a aria-hidden="true" href="#Étalonner-son-capteur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Étalonner son capteur
&lt;/h3&gt;
&lt;p&gt;
 Faisons une petite pause dans notre découverte des capteurs pour parler d’un problème qui peut arriver à tout le monde… Comment faites-vous si vous possédez un capteur mais ne possédez pas sa caractéristique exacte ? Comment feriez-vous pour faire correspondre une valeur analogique lue avec une donnée physique réelle ?
&lt;/p&gt;
&lt;p&gt;
 Par exemple, si je vous donne un composant en vous disant "Hey, te voilà un capteur de température, je sais qu’il s’alimente en 5V sur telle et telle broches, je sais que le signal de sortie est une tension en fonction de la température mais je suis incapable de te dire quelle est la caractéristique (la courbe tension en fonction de la température)".
&lt;/p&gt;
&lt;p&gt;
 Nous allons maintenant voir comment résoudre ce problème en voyant une méthode pour étalonner son capteur. Nous allons ainsi nous même déterminer la courbe caractéristique du capteur et déterminer son coefficient liant la température et la tension. À la fin, je vous donnerais la vraie courbe constructeur et nous pourrons comparer nos résultats pratiques avec ceux de référence
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 .
&lt;/p&gt;
&lt;h5 id="le-capteur-utilisé"&gt;
 &lt;a aria-hidden="true" href="#le-capteur-utilisé"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le capteur utilisé
&lt;/h5&gt;
&lt;p&gt;
 Pour étudier la méthode que je vous propose ici, nous allons utiliser un capteur de température assez répandu qui se nomme "LM35". Il existe dans différents boîtiers que voici :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Boîtier du LM35" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/boitier-du-lm35.jpg"/&gt;
 &lt;figcaption&gt;
  Boîtier du LM35
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Vous aurez deviné le branchement, il est assez simple. Il suffit de relier +VS au 5V et GND à la masse. Le signal sera ensuite lu sur la broche Vout.
&lt;/p&gt;
&lt;h4 id="la-méthode"&gt;
 &lt;a aria-hidden="true" href="#la-méthode"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La méthode
&lt;/h4&gt;
&lt;p&gt;
 La méthode pour caractériser le capteur est assez simple. À l’aide d’une multitude de mesures et d’un appareil témoin, nous allons pouvoir créer un tableau qui nous servira à calculer la courbe (à l’aide d’un logiciel comme Excel par exemple). Pour cela, en plus de votre capteur vous aurez besoin d’un appareil de mesure "témoin" qui vous servira de référence. Par exemple le bon vieux thermomètre qui traîne accroché à votre fenêtre fera parfaitement l’affaire
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 .
&lt;/p&gt;
&lt;h5 id="prise-de-mesures"&gt;
 &lt;a aria-hidden="true" href="#prise-de-mesures"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Prise de mesures
&lt;/h5&gt;
&lt;p&gt;
 Vous êtes prêts, alors allons-y, commençons à travailler. Reliez le capteur à l’Arduino et l’Arduino à l’ordinateur, de la manière la plus simple possible, comme ceci par exemple :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="LM35" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/lm35.png"/&gt;
 &lt;figcaption&gt;
  LM35
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ensuite, nous devons récupérer les données envoyées par le capteur de manière régulière (ou rajoutez un bouton et faite des envois lors de l’appui
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 ). Pour cela, voici un petit programme sans difficulté qui vous enverra les valeurs brutes ou converties en volts toutes les demi-secondes.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; capteur = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// capteur branché sur la pin analogique 0&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; tension = &lt;span class="hljs-number"&gt;0.0&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; valeur = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    valeur = analogRead(capteur);
    tension = (valeur*&lt;span class="hljs-number"&gt;5.0&lt;/span&gt;)/&lt;span class="hljs-number"&gt;1024&lt;/span&gt;;

    Serial.print(&lt;span class="hljs-string"&gt;"Tension : "&lt;/span&gt;);
    Serial.print(tension);
    Serial.println(&lt;span class="hljs-string"&gt;" V"&lt;/span&gt;);
    Serial.print(&lt;span class="hljs-string"&gt;"Valeur : "&lt;/span&gt;);
    Serial.println(valeur);
    Serial.println(&lt;span class="hljs-string"&gt;"---------------------"&lt;/span&gt;);

    delay(&lt;span class="hljs-number"&gt;500&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Mesure des valeurs
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Maintenant que tout est prêt, il nous faut un banc de test. Pour cela, préparez une casserole avec de l’eau contenant plein de glaçons (l’eau doit être la plus froide possible). Faites une première mesure avec votre capteur plongé dedans (attention, les broches doivent être isolées électriquement ou alors mettez l’ensemble dans un petit sac plastique pour éviter que l’eau n’aille faire un court-circuit). Faites en même temps une mesure de la température réelle observée à l’aide du thermomètre. Une fois cela fait, relevez ces mesures dans un tableau qui possédera les colonnes suivantes :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Température réelle (en °C)
 &lt;/li&gt;
 &lt;li&gt;
  Tension selon Arduino (en V)
 &lt;/li&gt;
 &lt;li&gt;
  Valeur brute selon Arduino
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Quand la première mesure est faite, commencez à faire réchauffer l’eau (en la plaçant sur une plaque de cuisson par exemple). Continuez à faire des mesures à intervalle régulier (tous les 5 degrés voire moins par exemple). Plus vous faites de mesure, plus l’élaboration de la courbe finale sera précise. Voici à titre d’exemple le tableau que j’ai obtenu :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Température (°C)
      &lt;/th&gt;
      &lt;th&gt;
       Tension (V)
      &lt;/th&gt;
      &lt;th&gt;
       Valeur CAN
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       2
      &lt;/td&gt;
      &lt;td&gt;
       0,015
      &lt;/td&gt;
      &lt;td&gt;
       3
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       5
      &lt;/td&gt;
      &lt;td&gt;
       0,054
      &lt;/td&gt;
      &lt;td&gt;
       11
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       10
      &lt;/td&gt;
      &lt;td&gt;
       0,107
      &lt;/td&gt;
      &lt;td&gt;
       22
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       16
      &lt;/td&gt;
      &lt;td&gt;
       0,156
      &lt;/td&gt;
      &lt;td&gt;
       32
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       21
      &lt;/td&gt;
      &lt;td&gt;
       0,210
      &lt;/td&gt;
      &lt;td&gt;
       43
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       24
      &lt;/td&gt;
      &lt;td&gt;
       0,234
      &lt;/td&gt;
      &lt;td&gt;
       48
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       29
      &lt;/td&gt;
      &lt;td&gt;
       0,293
      &lt;/td&gt;
      &lt;td&gt;
       60
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       35
      &lt;/td&gt;
      &lt;td&gt;
       0,352
      &lt;/td&gt;
      &lt;td&gt;
       72
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       38
      &lt;/td&gt;
      &lt;td&gt;
       0,386
      &lt;/td&gt;
      &lt;td&gt;
       79
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       43
      &lt;/td&gt;
      &lt;td&gt;
       0,430
      &lt;/td&gt;
      &lt;td&gt;
       88
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       46
      &lt;/td&gt;
      &lt;td&gt;
       0,459
      &lt;/td&gt;
      &lt;td&gt;
       94
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       50
      &lt;/td&gt;
      &lt;td&gt;
       0,503
      &lt;/td&gt;
      &lt;td&gt;
       103
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Relevé de température
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;h5 id="réalisation-de-la-caractéristique"&gt;
 &lt;a aria-hidden="true" href="#réalisation-de-la-caractéristique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Réalisation de la caractéristique
&lt;/h5&gt;
&lt;p&gt;
 Lorsque vous avez fini de prendre toutes vos valeurs, vous allez pouvoir passer à l’étape suivante qui est :
&lt;/p&gt;
&lt;p&gt;
 Calculer la caractéristique de votre courbe !! Sortez vos cahiers, votre calculatrice et en avant ! … Non je blague (encore que ça ferait un super TP), on va continuer à utiliser notre logiciel tableur pour faire le travail pour nous ! On va donc commencer par regarder un peu l’allure de la courbe.
&lt;/p&gt;
&lt;p&gt;
 Je vais en faire deux, une symbolisant les valeurs brutes de la conversion du CAN (entre 0 et 1023) en rouge et l’autre qui sera l’image de la tension en fonction de la température en bleu. Nous pourrons alors déterminer deux caractéristiques, selon ce qui vous arrange le plus.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Valeurs CAN en fonction de la température" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/valeurs-can-en-fonction-de-la-temperature.jpg"/&gt;
 &lt;figcaption&gt;
  Valeurs CAN en fonction de la température
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Tension en fonction de la température" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/tension-en-fonction-de-la-temperature.jpg"/&gt;
 &lt;figcaption&gt;
  Tension en fonction de la température
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Une fois cela fait, il ne reste plus qu’à demander gentiment au logiciel de graphique de nous donner la
 &lt;strong&gt;
  courbe de tendance
 &lt;/strong&gt;
 réalisée par ces points. Sous Excel, il suffit de cliquer sur un des points du graphique et choisir ensuite l’option "Ajouter une courbe de tendance…".
&lt;/p&gt;
&lt;p&gt;
 Vous aurez alors le choix entre différents types de courbe (linéaire, exponentielle…). Ici, on voit que les points sont alignés, il s’agit donc d’une équation de courbe linéaire, de type
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        y
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mi&gt;
        a
       &lt;/mi&gt;
       &lt;mi&gt;
        x
       &lt;/mi&gt;
       &lt;mo&gt;
        +
       &lt;/mo&gt;
       &lt;mi&gt;
        b
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       y=ax+b
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.69444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      y
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      a
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      x
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      +
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      b
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 . Cochez la case "Afficher l’équation sur le graphique" pour pouvoir voir et exploiter cette dernière ensuite.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Options de la courbe de tendance" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/options-de-la-courbe-de-tendance.png"/&gt;
 &lt;figcaption&gt;
  Options de la courbe de tendance
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Voici alors ce que l’on obtient lorsque l’on rajoute notre équation :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Ajout de la courbe de tendance" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/ajout-de-la-courbe-de-tendance.jpg"/&gt;
 &lt;figcaption&gt;
  Ajout de la courbe de tendance
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Ajout de la courbe de tendance" src="./images/uploaded/tuto-arduino-502-différents-types-de-mesures/ajout-de-la-courbe-de-tendance.jpg"/&gt;
 &lt;figcaption&gt;
  Ajout de la courbe de tendance
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Grâce à l’équation, nous pouvons déterminer la relation liant la température et la tension (ou les valeurs du CAN). Ici nous obtenons :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         y
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mi mathvariant="normal"&gt;
         .
        &lt;/mi&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
        &lt;mi&gt;
         x
        &lt;/mi&gt;
        &lt;mo&gt;
         −
        &lt;/mo&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mi mathvariant="normal"&gt;
         .
        &lt;/mi&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mn&gt;
         3
        &lt;/mn&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        y = 0.01x - 0.0003
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.64444em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.8388800000000001em;vertical-align:-0.19444em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
       y
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       .
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       1
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       x
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mbin"&gt;
       −
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       .
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       3
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  (pour la tension)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         y
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
        &lt;mi mathvariant="normal"&gt;
         .
        &lt;/mi&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mn&gt;
         5
        &lt;/mn&gt;
        &lt;mn&gt;
         6
        &lt;/mn&gt;
        &lt;mi&gt;
         x
        &lt;/mi&gt;
        &lt;mo&gt;
         −
        &lt;/mo&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mi mathvariant="normal"&gt;
         .
        &lt;/mi&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mn&gt;
         7
        &lt;/mn&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mn&gt;
         7
        &lt;/mn&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        y = 2.056x - 0.0707
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.64444em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.8388800000000001em;vertical-align:-0.19444em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
       y
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       .
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       5
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       6
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       x
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mbin"&gt;
       −
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       .
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       7
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       7
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  (pour les valeurs du CAN)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Le coefficient constant (-0.003 ou -0.0707) peut ici être ignoré. En effet, il est faible (on dit
 &lt;strong&gt;
  négligeable
 &lt;/strong&gt;
 ) comparé aux valeurs étudiées. Dans les équations,
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        x
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       x
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.43056em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.43056em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit"&gt;
      x
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 représente la température et
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        y
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       y
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.43056em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      y
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 représente la tension ou les valeurs du CAN. On lit donc l’équation de la manière suivante : Tension en Volt égale 0,01 fois la température en degrés Celsius. Ce qui signifie que dorénavant, en ayant une mesure du CAN ou une mesure de tension, on est capable de déterminer la température en degrés Celsius
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 Super non ? Par exemple, si nous avons une tension de 300mV, avec la formule trouvée précédemment on déterminera que l’on a
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mi mathvariant="normal"&gt;
        .
       &lt;/mi&gt;
       &lt;mn&gt;
        3
       &lt;/mn&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mi mathvariant="normal"&gt;
        .
       &lt;/mi&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mi&gt;
        T
       &lt;/mi&gt;
       &lt;mi&gt;
        e
       &lt;/mi&gt;
       &lt;mi&gt;
        m
       &lt;/mi&gt;
       &lt;mi&gt;
        p
       &lt;/mi&gt;
       &lt;mi&gt;
        e
       &lt;/mi&gt;
       &lt;mi&gt;
        r
       &lt;/mi&gt;
       &lt;mi&gt;
        a
       &lt;/mi&gt;
       &lt;mi&gt;
        t
       &lt;/mi&gt;
       &lt;mi&gt;
        u
       &lt;/mi&gt;
       &lt;mi&gt;
        r
       &lt;/mi&gt;
       &lt;mi&gt;
        e
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       0.3 = 0.01 \times Temperature
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.8777699999999999em;vertical-align:-0.19444em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      .
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      3
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      .
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
      T
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      e
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      m
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      p
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      e
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
      r
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      a
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      t
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      u
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
      r
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      e
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 , ce qui équivaut à
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        T
       &lt;/mi&gt;
       &lt;mi&gt;
        e
       &lt;/mi&gt;
       &lt;mi&gt;
        m
       &lt;/mi&gt;
       &lt;mi&gt;
        p
       &lt;/mi&gt;
       &lt;mi&gt;
        e
       &lt;/mi&gt;
       &lt;mi&gt;
        r
       &lt;/mi&gt;
       &lt;mi&gt;
        a
       &lt;/mi&gt;
       &lt;mi&gt;
        t
       &lt;/mi&gt;
       &lt;mi&gt;
        u
       &lt;/mi&gt;
       &lt;mi&gt;
        r
       &lt;/mi&gt;
       &lt;mi&gt;
        e
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mi mathvariant="normal"&gt;
        .
       &lt;/mi&gt;
       &lt;mn&gt;
        3
       &lt;/mn&gt;
       &lt;mi mathvariant="normal"&gt;
        /
       &lt;/mi&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mi mathvariant="normal"&gt;
        .
       &lt;/mi&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        3
       &lt;/mn&gt;
       &lt;msup&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mi&gt;
         o
        &lt;/mi&gt;
       &lt;/msup&gt;
       &lt;mi&gt;
        C
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       Temperature = 0.3/0.01 = 30 ^oC
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.75em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
      T
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      e
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      m
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      p
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      e
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
      r
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      a
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      t
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      u
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
      r
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      e
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      .
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      3
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      /
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      .
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      3
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.664392em;"&gt;
          &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mathit mtight"&gt;
             o
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.07153em;"&gt;
      C
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 . On peut aisément le confirmer via le graphique
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;p&gt;
 Maintenant j’ai trois nouvelles, deux bonnes et une mauvaise… La bonne c’est que vous êtes capable de déterminer la caractéristique d’un capteur. La deuxième bonne nouvelle, c’est que l’équation que l’on a trouvé est correcte… … parce qu’elle est marquée dans
 &lt;a href="http://www.ti.com/lit/ds/symlink/lm35.pdf"&gt;
  la documentation technique
 &lt;/a&gt;
 qui est super facile à trouver
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 (ça c’était la mauvaise nouvelle, on a travaillé pour rien !! ) Mais comme c’est pas toujours le cas, c’est toujours bien de savoir comment faire
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;h5 id="adaptation-dans-le-code"&gt;
 &lt;a aria-hidden="true" href="#adaptation-dans-le-code"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Adaptation dans le code
&lt;/h5&gt;
&lt;p&gt;
 Puisque nous savons mesurer les valeurs de notre capteur et que nous avons une équation caractéristique, nous pouvons faire le lien en temps réel dans notre application pour faire une utilisation de la grandeur
 &lt;em&gt;
  physique
 &lt;/em&gt;
 de notre mesure. Par exemple, s’il fait 50°C nous allumons le ventilateur. En effet, souvenez-vous, avant nous n’avions qu’une valeur entre 0 et 1023 qui ne signifiait physiquement pas grand chose. Maintenant nous sommes en mesure (oh oh oh
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 ) de faire la conversion. Il faudra pour commencer récupérer la valeur du signal. Prenons l’exemple de la lecture d’une tension analogique du capteur précédent :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; valeur = analogRead(monCapteur); &lt;span class="hljs-comment"&gt;// lit la valeur&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Nous avons ensuite deux choix, soit nous le transformons en tension puis ensuite en valeur physique grâce à la caractéristique du graphique bleu ci-dessus, soit nous transformons directement en valeur physique avec la caractéristique rouge. Comme je suis fainéant, je vais chercher à économiser une instruction en prenant la dernière solution. Pour rappel, la formule obtenue était :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        y
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mi mathvariant="normal"&gt;
        .
       &lt;/mi&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mn&gt;
        5
       &lt;/mn&gt;
       &lt;mn&gt;
        6
       &lt;/mn&gt;
       &lt;mi&gt;
        x
       &lt;/mi&gt;
       &lt;mo&gt;
        −
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mi mathvariant="normal"&gt;
        .
       &lt;/mi&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mn&gt;
        7
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mn&gt;
        7
       &lt;/mn&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       y = 2.056x - 0.0707
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.64444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.8388800000000001em;vertical-align:-0.19444em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      y
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      .
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      5
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      6
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      x
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      −
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      .
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      7
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      7
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 . Nous avions aussi dit que le facteur constant était négligeable, on a donc de manière simplifiée
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        y
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mi mathvariant="normal"&gt;
        .
       &lt;/mi&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mn&gt;
        5
       &lt;/mn&gt;
       &lt;mn&gt;
        6
       &lt;/mn&gt;
       &lt;mi&gt;
        x
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       y = 2.056x
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.64444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.8388800000000001em;vertical-align:-0.19444em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      y
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      .
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      5
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      6
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      x
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 soit "la température est égale à la valeur lue divisé par 2.056 (
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        x
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mfrac&gt;
        &lt;mrow&gt;
         &lt;mi&gt;
          y
         &lt;/mi&gt;
        &lt;/mrow&gt;
        &lt;mrow&gt;
         &lt;mn&gt;
          2
         &lt;/mn&gt;
         &lt;mi mathvariant="normal"&gt;
          .
         &lt;/mi&gt;
         &lt;mn&gt;
          0
         &lt;/mn&gt;
         &lt;mn&gt;
          5
         &lt;/mn&gt;
         &lt;mn&gt;
          6
         &lt;/mn&gt;
        &lt;/mrow&gt;
       &lt;/mfrac&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       x = \frac{y}{2.056}
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.7475em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1.0925em;vertical-align:-0.345em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit"&gt;
      x
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mopen nulldelimiter"&gt;
      &lt;/span&gt;
      &lt;span class="mfrac"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.7475em;"&gt;
          &lt;span style="top:-2.6550000000000002em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              2
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              .
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              0
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              5
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              6
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.15em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="stretchy" style="height:0.2em;"&gt;
            &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
             &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
             &lt;/path&gt;
            &lt;/svg&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.446108em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mathit mtight" style="margin-right:0.03588em;"&gt;
              y
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.345em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mclose nulldelimiter"&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 ). Nous n’avons plus qu’à faire la conversion dans notre programme !
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; temperature = valeur/&lt;span class="hljs-number"&gt;2.056&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  La formule de conversion
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Et voilà ! Si l’on voulait écrire un programme plus complet, on aurait :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; monCapteur = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// Capteur sur la broche A0;&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; valeur = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; temperature = &lt;span class="hljs-number"&gt;0.0&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    valeur = analogRead(monCapteur);
    temperature = valeur/&lt;span class="hljs-number"&gt;2.056&lt;/span&gt;;

    Serial.println(temperature);

    delay(&lt;span class="hljs-number"&gt;500&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Lire la température avec un capteur étalonné
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Et si jamais notre coefficient constant n’est pas négligeable ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Eh bien prenons un exemple ! Admettons qu’on obtienne la caractéristique suivante :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        y
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mi&gt;
        x
       &lt;/mi&gt;
       &lt;mo&gt;
        +
       &lt;/mo&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       y = 10x + 22
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.64444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.8388800000000001em;vertical-align:-0.19444em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      y
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      x
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      +
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 . On pourrait lire ça comme "ma valeur lue par le CAN est égale à 10 fois la valeur physique plus 22". Si on manipule l’équation pour avoir
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        x
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       x
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.43056em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.43056em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit"&gt;
      x
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 en fonction de
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        y
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       y
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.43056em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      y
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 , on aurait :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;p&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         y
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mi&gt;
         x
        &lt;/mi&gt;
        &lt;mo&gt;
         +
        &lt;/mo&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        y = 10x + 22
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.64444em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.8388800000000001em;vertical-align:-0.19444em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
       y
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       1
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       x
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mbin"&gt;
       +
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/p&gt;
 &lt;p&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         y
        &lt;/mi&gt;
        &lt;mo&gt;
         −
        &lt;/mo&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mi&gt;
         x
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        y-22 = 10x
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.64444em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.8388800000000001em;vertical-align:-0.19444em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
       y
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mbin"&gt;
       −
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       1
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       x
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/p&gt;
 &lt;p&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         x
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mfrac&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           y
          &lt;/mi&gt;
          &lt;mo&gt;
           −
          &lt;/mo&gt;
          &lt;mn&gt;
           2
          &lt;/mn&gt;
          &lt;mn&gt;
           2
          &lt;/mn&gt;
         &lt;/mrow&gt;
         &lt;mrow&gt;
          &lt;mn&gt;
           1
          &lt;/mn&gt;
          &lt;mn&gt;
           0
          &lt;/mn&gt;
         &lt;/mrow&gt;
        &lt;/mfrac&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        x = \frac{y-22}{10}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.897216em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:1.242216em;vertical-align:-0.345em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit"&gt;
       x
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mopen nulldelimiter"&gt;
       &lt;/span&gt;
       &lt;span class="mfrac"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.897216em;"&gt;
           &lt;span style="top:-2.6550000000000002em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mtight"&gt;
               1
              &lt;/span&gt;
              &lt;span class="mord mtight"&gt;
               0
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.15em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="stretchy" style="height:0.2em;"&gt;
             &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
              &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
              &lt;/path&gt;
             &lt;/svg&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.446108em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight" style="margin-right:0.03588em;"&gt;
               y
              &lt;/span&gt;
              &lt;span class="mbin mtight"&gt;
               −
              &lt;/span&gt;
              &lt;span class="mord mtight"&gt;
               2
              &lt;/span&gt;
              &lt;span class="mord mtight"&gt;
               2
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.345em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       &lt;span class="mclose nulldelimiter"&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
 Dans le code, cela nous donnerait :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    valeur = analogRead(monCapteur);
    temperature = (valeur&lt;span class="hljs-number"&gt;-22&lt;/span&gt;)/&lt;span class="hljs-number"&gt;10&lt;/span&gt;;

    Serial.println(temperature);

    delay(&lt;span class="hljs-number"&gt;500&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Cas d’une constante non négligeable
 &lt;/figcaption&gt;
&lt;/figure&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Généralités sur les capteurs</title><link href="https://eskimon.fr/tuto-arduino-501-g%C3%A9n%C3%A9ralit%C3%A9s-sur-les-capteurs" rel="alternate"></link><published>2014-02-19T09:00:00+01:00</published><updated>2014-02-19T09:00:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2014-02-19:/tuto-arduino-501-généralités-sur-les-capteurs</id><summary type="html">&lt;p&gt;
 Ce premier chapitre va vous présenter un peu ce que sont les capteurs, à quoi ils servent, où les trouver, etc. leur taille, leur forme et j’en passe. Je vais simplement vous faire découvrir le monde des capteurs qui, vous allez le voir, est merveilleux !
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#capteur-et-transducteur"&gt;
    Capteur et Transducteur …&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;
 Ce premier chapitre va vous présenter un peu ce que sont les capteurs, à quoi ils servent, où les trouver, etc. leur taille, leur forme et j’en passe. Je vais simplement vous faire découvrir le monde des capteurs qui, vous allez le voir, est merveilleux !
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#capteur-et-transducteur"&gt;
    Capteur et Transducteur
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#capteurs-transducteurs-passifs"&gt;
     Capteurs Transducteurs passifs
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#capteurs-actifs"&gt;
     Capteurs actifs
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#les-autres-capteurs"&gt;
     Les autres capteurs
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#un-capteur-ça-capte"&gt;
    Un capteur, ça capte !
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#mesure-le-rôle-du-transducteur"&gt;
     Mesure, le rôle du transducteur
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#lintérêt-dadapter"&gt;
     L’intérêt d’adapter
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#lélectronique-dadaptation"&gt;
     L’électronique d’adaptation
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#les-caractéristiques-dun-capteur"&gt;
    Les caractéristiques d’un capteur
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#les-critères-à-ne-pas-négliger"&gt;
      Les critères à ne pas négliger
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;p&gt;
       &lt;a href="#la-plage-de-mesure"&gt;
        La plage de mesure
       &lt;/a&gt;
      &lt;/p&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;a href="#la-précision"&gt;
         La précision
        &lt;/a&gt;
       &lt;/li&gt;
       &lt;li&gt;
        &lt;a href="#sa-tension-dalimentation"&gt;
         Sa tension d’alimentation
        &lt;/a&gt;
       &lt;/li&gt;
      &lt;/ul&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#dautres-caractéristiques-à-connaitre"&gt;
      D’autres caractéristiques à connaitre
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#la-résolution"&gt;
       La résolution
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-reproductibilité"&gt;
       La reproductibilité
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-temps-de-réponse"&gt;
       Le temps de réponse
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-bande-passante"&gt;
       La bande passante
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-gamme-de-température-dutilisation"&gt;
       La gamme de température d’utilisation
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="capteur-et-transducteur"&gt;
 &lt;a aria-hidden="true" href="#capteur-et-transducteur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Capteur et Transducteur
&lt;/h3&gt;
&lt;p&gt;
 Un capteur est un dispositif capable de transformer une grandeur physique (telle que la température, la pression, la lumière, etc.) en une autre grandeur physique manipulable. On peut d’ailleurs prendre des exemples : un microphone est un capteur qui permet de transformer une onde sonore en un signal électrique ; un autre capteur tel qu’une photorésistance permet de transformer un signal lumineux en résistance variable selon son intensité.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Schéma d'un capteur" src="./images/uploaded/tuto-arduino-501-généralités-sur-les-capteurs/schema-dun-capteur.jpg"/&gt;
 &lt;figcaption&gt;
  Schéma d'un capteur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Pour nous, utiliser un thermomètre à mercure risque d’être difficile avec Arduino, car ce capteur ne délivre pas d’information électrique ou de résistance qui varie. Il s’agit seulement d’un niveau de liquide. Tandis qu’utiliser un microphone ou une photorésistance sera beaucoup plus facile. On distingue deux types de capteurs.
&lt;/p&gt;
&lt;h4 id="capteurs-transducteurs-passifs"&gt;
 &lt;a aria-hidden="true" href="#capteurs-transducteurs-passifs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 &lt;del&gt;
  Capteurs
 &lt;/del&gt;
 Transducteurs passifs
&lt;/h4&gt;
&lt;figure&gt;
 &lt;img alt="Une photorésistance" src="./images/uploaded/tuto-arduino-501-généralités-sur-les-capteurs/une-photoresistance.jpg"/&gt;
 &lt;figcaption&gt;
  Une photorésistance - (CC-0)
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ces capteurs ont pour objet de "transformer" ou plus exactement :
 &lt;em&gt;
  donner une image
 &lt;/em&gt;
 de la grandeur physique qu’ils mesurent par une
 &lt;strong&gt;
  résistance électrique variable
 &lt;/strong&gt;
 (en fait il s’agit d’une impédance, mais restons simples).
Par exemple, le potentiomètre donne une résistance qui varie selon la position de son axe. Pour ce qui est de leur utilisation, il faudra nécessairement les utiliser avec un montage pour pouvoir les utiliser avec Arduino.
Nous aurons l’occasion de voir tout cela en détail plus loin.
Ainsi, il ne s’agit pas réellement de capteur, mais de
 &lt;strong&gt;
  transducteurs
 &lt;/strong&gt;
 car nous sommes obligés de devoir utiliser un montage additionnel pour assurer une conversion de la grandeur mesurée en un signal électrique exploitable.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ce sont principalement des transducteurs que nous allons mettre en œuvre dans le cours.
Puisqu’ils ont l’avantage de pouvoir fonctionner seul et donc cela vous permettra de vous exercer au niveau électronique !
   &lt;img alt=":diable:" class="smiley" src="./static/smileys/diable.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="capteurs-actifs"&gt;
 &lt;a aria-hidden="true" href="#capteurs-actifs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Capteurs actifs
&lt;/h4&gt;
&lt;figure&gt;
 &lt;img alt="Un thermocouple" src="./images/uploaded/tuto-arduino-501-généralités-sur-les-capteurs/un-thermocouple.jpg"/&gt;
 &lt;figcaption&gt;
  Un thermocouple - (CC-0)
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Cette autre catégorie de capteur est un peu spéciale et ne recense que très peu de capteurs en son sein.
Il s’agit de capteur dont la grandeur physique elle-même mesurée va directement établir une relation électrique de sortie.
C’est-à-dire qu’en sortie de ce type de capteur, il y aura une grandeur électrique, sans adjonction de tension à ses bornes. On peut dire que la présence de la tension (ou différence de potentiel, plus exactement) est générée par la grandeur physique. Nous n’entrerons pas dans le détail de ces capteurs et resterons dans ce qui est abordable à votre niveau.
&lt;/p&gt;
&lt;h4 id="les-autres-capteurs"&gt;
 &lt;a aria-hidden="true" href="#les-autres-capteurs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les autres capteurs
&lt;/h4&gt;
&lt;p&gt;
 En fait, il n’en existe pas réellement d’autres…
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="infrarouge" src="./images/uploaded/tuto-arduino-501-généralités-sur-les-capteurs/infrarouge.jpg"/&gt;
 &lt;figcaption&gt;
  Détecteur infrarouge - (CC-BY-SA,
  &lt;a href="http://commons.wikimedia.org/wiki/File:Infrared_Transceiver_Circuit.jpg"&gt;
   robotplatform.com
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ces "autres capteurs", dont je parle, sont les capteurs ou détecteurs tout prêts que l’on peut acheter dans le commerce, entre autres les détecteurs de mouvements ou capteur de distance.
Ils ne font pas partie des deux catégories précédemment citées, puisqu’ils possèdent toute une électronique d’adaptation qui va s’occuper d’adapter la grandeur physique mesurée par le capteur et agir en fonction.
Par exemple allumer une ampoule lorsqu’il détecte un mouvement.
&lt;/p&gt;
&lt;p&gt;
 Sachez cependant qu’il en existe beaucoup d’autres ! Ce sont donc bien des capteurs qui utilisent un ou des transducteurs.
On pourra en fabriquer également, nous serons même obligés afin d’utiliser les transducteurs que je vais vous faire découvrir.
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Retenez donc bien la différence entre transducteur et capteur : un transducteur permet de donner une image de la grandeur physique mesurée par une autre grandeur physique, mais il doit être additionné à un montage pour être utilisé ; un capteur est nécessairement constitué d’un transducteur et d’un montage qui adapte la grandeur physique donnée par le transducteur en une information facilement manipulable.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="un-capteur-ça-capte"&gt;
 &lt;a aria-hidden="true" href="#un-capteur-ça-capte"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un capteur, ça capte !
&lt;/h3&gt;
&lt;p&gt;
 Un capteur, on l’a vu, est donc constitué d’un transducteur et d’une électronique d’adaptation.
Le transducteur va d’abord mesurer la grandeur physique à mesurer, par exemple la luminosité.
Il va donner une image de cette grandeur grâce à une autre grandeur, dans ce cas une résistance électrique variable.
Et l’électronique d’adaptation va se charger, par exemple, de “transformer” cette grandeur en une tension électrique image de la grandeur mesurée.
Attention cependant, cela ne veut pas dire que la sortie sera
 &lt;strong&gt;
  toujours
 &lt;/strong&gt;
 une tension variable.
Ainsi, on pourrait par exemple plutôt avoir un courant variable (et tension fixe), ou carrément un message via une liaison de communication (voir série par exemple).
Un capteur plus simple par exemple pourrait simplement nous délivrer un niveau logique pour donner une information telle que “obstacle présent/absent”.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Un capteur c'est quoi ?" src="./images/uploaded/tuto-arduino-501-généralités-sur-les-capteurs/un-capteur-cest-quoi.jpg"/&gt;
 &lt;figcaption&gt;
  Un capteur c'est quoi ?
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 A gauche se trouve la grandeur physique mesurable. En sortie du transducteur c’est une autre grandeur physique, manipulable cette fois.
Et en sortie de l’électronique d’adaptation, c’est l’information qui peut être sous forme de signal électrique ou d’une simple image de la grandeur physique mesurée par une autre grandeur physique telle qu’une tension électrique ou un courant.
&lt;/p&gt;
&lt;h4 id="mesure-le-rôle-du-transducteur"&gt;
 &lt;a aria-hidden="true" href="#mesure-le-rôle-du-transducteur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Mesure, le rôle du transducteur
&lt;/h4&gt;
&lt;p&gt;
 Gardons notre exemple avec un capteur, pardon, transducteur qui mesure la luminosité.
Le transducteur qui opère avec cette grandeur est une
 &lt;em&gt;
  photorésistance
 &lt;/em&gt;
 ou
 &lt;em&gt;
  LDR
 &lt;/em&gt;
 (Light Depending Resistor).
C’est une résistance photo-sensible, ou si vous préférez qui réagit à la lumière.
La relation établie par la
 &lt;a href="http://fr.wikipedia.org/wiki/Photorésistance"&gt;
  photorésistance
 &lt;/a&gt;
 entre la luminosité et sa résistance de sortie permet d’avoir une image de l’intensité lumineuse par une résistance électrique qui varie selon cette intensité.
Voici son symbole électrique et une petite photo d’identité :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Une photorésistance" src="./images/uploaded/tuto-arduino-501-généralités-sur-les-capteurs/une-photoresistance.jpg"/&gt;
 &lt;figcaption&gt;
  Une photorésistance - (CC-0)
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Symbole de la photorésistance" src="./images/uploaded/tuto-arduino-501-généralités-sur-les-capteurs/symbole-de-la-photoresistance.png"/&gt;
 &lt;figcaption&gt;
  Symbole de la photorésistance
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Représentation schématique" src="./images/uploaded/tuto-arduino-501-généralités-sur-les-capteurs/representation-schematique.jpg"/&gt;
 &lt;figcaption&gt;
  Représentation schématique
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 On a donc, en sortie du transducteur, une relation du type y en fonction de x :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        y
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mi&gt;
        f
       &lt;/mi&gt;
       &lt;mo&gt;
        (
       &lt;/mo&gt;
       &lt;mi&gt;
        x
       &lt;/mi&gt;
       &lt;mo&gt;
        )
       &lt;/mo&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       y = f(x)
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.75em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      y
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.10764em;"&gt;
      f
     &lt;/span&gt;
     &lt;span class="mopen"&gt;
      (
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      x
     &lt;/span&gt;
     &lt;span class="mclose"&gt;
      )
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Il s’agit simplement du
 &lt;strong&gt;
  rapport
 &lt;/strong&gt;
 entre la grandeur physique d’entrée du capteur et sa grandeur physique de sortie.
Ici, le rapport entre la luminosité et la résistance électrique de sortie.
Dans les docs techniques, vous trouverez toujours ce rapport exprimé sous forme graphique (on appelle ça une
 &lt;strong&gt;
  courbe caractéristique
 &lt;/strong&gt;
 ). Ici, nous avons donc la résistance en fonction de la lumière :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Caractéristique d'une photorésistance" src="./images/uploaded/tuto-arduino-501-généralités-sur-les-capteurs/caracteristique-dune-photoresistance.jpg"/&gt;
 &lt;figcaption&gt;
  Caractéristique d'une photorésistance
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Exemple interactif : si la lumière augmente, la résistance diminue.
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/4qPc7PnrDqE" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="lintérêt-dadapter"&gt;
 &lt;a aria-hidden="true" href="#lintérêt-dadapter"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’intérêt d’adapter
&lt;/h4&gt;
&lt;p&gt;
 Adapter pour quoi faire ? Eh bien je pense déjà avoir répondu à cette question, mais reprenons les explications avec l’exemple ci-dessus.
La photorésistance va fournir une résistance électrique qui fluctue selon la luminosité de façon quasi-proportionnelle (en fait ce n’est pas réellement le cas, mais faisons comme si
 &lt;img alt=":euh:" class="smiley" src="./static/smileys/unsure.gif"/&gt;
 ).
Eh bien, que va-t-on faire d’une telle grandeur ?
Est-ce que nous pouvons l’utiliser avec notre carte Arduino ? Directement ce n’est pas possible.
Nous sommes obligé de l’adapter en une
 &lt;strong&gt;
  tension qui varie
 &lt;/strong&gt;
 de façon proportionnelle à cette résistance, puisque nous ne sommes pas capable de mesurer une résistance directement.
Ensuite nous pourrons simplement utiliser la fonction
 &lt;code&gt;
  analogRead()
 &lt;/code&gt;
 pour lire la valeur mesurée.
Néanmoins, il faudra certainement faire des calculs dans le programme pour donner une réelle image de la luminosité.
Et ensuite, éventuellement, afficher cette grandeur ou la transmettre par la liaison série (ou l’utiliser de la manière qui vous fait plaisir
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 ! ).
De nouveau, voici la relation établissant le rapport entre les deux grandeurs physiques d’entré et de sortie d’un transducteur :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;p&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         y
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mi&gt;
         f
        &lt;/mi&gt;
        &lt;mo&gt;
         (
        &lt;/mo&gt;
        &lt;mi&gt;
         x
        &lt;/mi&gt;
        &lt;mo&gt;
         )
        &lt;/mo&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        y = f(x)
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.75em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
       y
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.10764em;"&gt;
       f
      &lt;/span&gt;
      &lt;span class="mopen"&gt;
       (
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       x
      &lt;/span&gt;
      &lt;span class="mclose"&gt;
       )
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
 A partir de cette relation, on va pouvoir gérer l’électronique d’adaptation pour faire en sorte d’établir une nouvelle relation qui soit également une image de la mesure réalisée par le capteur.
C’est à dire que l’on va créer une image proportionnelle de la grandeur physique délivrée en sortie du capteur par une nouvelle grandeur physique qui sera, cette fois-ci, bien mieux exploitable.
En l’occurrence une tension dans notre cas.
La nouvelle relation sera du style y prime (noté
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msup&gt;
        &lt;mi&gt;
         y
        &lt;/mi&gt;
        &lt;mo mathvariant="normal"&gt;
         ′
        &lt;/mo&gt;
       &lt;/msup&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       y'
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.751892em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.946332em;vertical-align:-0.19444em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
       y
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.751892em;"&gt;
          &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              ′
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 )en fonction de y :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;p&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msup&gt;
         &lt;mi&gt;
          y
         &lt;/mi&gt;
         &lt;mo mathvariant="normal"&gt;
          ′
         &lt;/mo&gt;
        &lt;/msup&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mi&gt;
         g
        &lt;/mi&gt;
        &lt;mo&gt;
         (
        &lt;/mo&gt;
        &lt;mi&gt;
         y
        &lt;/mi&gt;
        &lt;mo&gt;
         )
        &lt;/mo&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        y' = g(y)
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.751892em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:1.001892em;vertical-align:-0.25em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
        y
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.751892em;"&gt;
           &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mtight"&gt;
               ′
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
       g
      &lt;/span&gt;
      &lt;span class="mopen"&gt;
       (
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
       y
      &lt;/span&gt;
      &lt;span class="mclose"&gt;
       )
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
 Ce qui revient à dire que
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msup&gt;
        &lt;mi&gt;
         y
        &lt;/mi&gt;
        &lt;mo mathvariant="normal"&gt;
         ′
        &lt;/mo&gt;
       &lt;/msup&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       y'
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.751892em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.946332em;vertical-align:-0.19444em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
       y
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.751892em;"&gt;
          &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              ′
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 est la relation de sortie du capteur en fonction de la grandeur de mesure d’entré. Soit :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;p&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msup&gt;
         &lt;mi&gt;
          y
         &lt;/mi&gt;
         &lt;mo mathvariant="normal"&gt;
          ′
         &lt;/mo&gt;
        &lt;/msup&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mi&gt;
         g
        &lt;/mi&gt;
        &lt;mo&gt;
         (
        &lt;/mo&gt;
        &lt;mi&gt;
         y
        &lt;/mi&gt;
        &lt;mo&gt;
         )
        &lt;/mo&gt;
        &lt;mo&gt;
         ⟷
        &lt;/mo&gt;
        &lt;msup&gt;
         &lt;mi&gt;
          y
         &lt;/mi&gt;
         &lt;mo mathvariant="normal"&gt;
          ′
         &lt;/mo&gt;
        &lt;/msup&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mi&gt;
         g
        &lt;/mi&gt;
        &lt;mo&gt;
         (
        &lt;/mo&gt;
        &lt;mi&gt;
         f
        &lt;/mi&gt;
        &lt;mo&gt;
         (
        &lt;/mo&gt;
        &lt;mi&gt;
         x
        &lt;/mi&gt;
        &lt;mo&gt;
         )
        &lt;/mo&gt;
        &lt;mo&gt;
         )
        &lt;/mo&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        y' = g(y) \longleftrightarrow y' = g(f(x))
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.751892em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:1.001892em;vertical-align:-0.25em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
        y
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.751892em;"&gt;
           &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mtight"&gt;
               ′
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
       g
      &lt;/span&gt;
      &lt;span class="mopen"&gt;
       (
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
       y
      &lt;/span&gt;
      &lt;span class="mclose"&gt;
       )
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       ⟷
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
        y
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.751892em;"&gt;
           &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mtight"&gt;
               ′
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
       g
      &lt;/span&gt;
      &lt;span class="mopen"&gt;
       (
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.10764em;"&gt;
       f
      &lt;/span&gt;
      &lt;span class="mopen"&gt;
       (
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       x
      &lt;/span&gt;
      &lt;span class="mclose"&gt;
       )
      &lt;/span&gt;
      &lt;span class="mclose"&gt;
       )
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
 Concrètement, nous retrouvons ces formules dans chaque partie du capteur :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Représentation schématique" src="./images/uploaded/tuto-arduino-501-généralités-sur-les-capteurs/representation-schematique.jpg"/&gt;
 &lt;figcaption&gt;
  Représentation schématique
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="lélectronique-dadaptation"&gt;
 &lt;a aria-hidden="true" href="#lélectronique-dadaptation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’électronique d’adaptation
&lt;/h4&gt;
&lt;p&gt;
 Elle sera propre à chaque capteur. Cependant, je l’ai énoncé au début de ce chapitre, nous utiliserons principalement des transducteurs qui ont en sortie une résistance électrique variable.
L’électronique d’adaptation sera donc quasiment la même pour tous. La seule chose qui changera certainement, c’est le programme.
Oui car la carte Arduino fait partie intégrante du capteur puisque c’est avec elle que nous allons "fabriquer" nos capteurs.
Le programme sera donc différent pour chaque capteur, d’autant plus qu’ils n’ont pas tous les mêmes relations de sortie… vous l’aurez compris, on aura de quoi s’amuser !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
&lt;/p&gt;
&lt;p&gt;
 Pour conclure sur l’intérieur du capteur, rentrons dans la partie électronique d’adaptation. La carte Arduino faisant partie de cette électronique, on va avoir un schéma tel que celui-ci :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Schéma d'électronique d'adaptation" src="./images/uploaded/tuto-arduino-501-généralités-sur-les-capteurs/schema-delectronique-dadaptation.jpg"/&gt;
 &lt;figcaption&gt;
  Schéma d'électronique d'adaptation
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 A l’entrée de l’électronique d’adaptation se trouve la grandeur de sortie du transducteur ; à la sortie de l’électronique d’adaptation se trouve la grandeur de sortie du capteur.
On peut après faire ce que l’on veut de la mesure prise par le capteur. Toujours avec la carte Arduino, dans une autre fonction du programme, on pourra alors transformer la valeur mesurée pour la transmettre via la liaison série ou simplement l’afficher sur un écran LCD, voir l’utiliser dans une fonction qui détermine si la mesure dépasse un seuil limite afin de fermer les volets quand il fait nuit…
&lt;/p&gt;
&lt;h3 id="les-caractéristiques-dun-capteur"&gt;
 &lt;a aria-hidden="true" href="#les-caractéristiques-dun-capteur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les caractéristiques d’un capteur
&lt;/h3&gt;
&lt;p&gt;
 Pour terminer cette introduction générale sur les capteurs, nous allons aborder les caractéristiques essentielles à connaitre.
&lt;/p&gt;
&lt;h4 id="les-critères-à-ne-pas-négliger"&gt;
 &lt;a aria-hidden="true" href="#les-critères-à-ne-pas-négliger"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les critères à ne pas négliger
&lt;/h4&gt;
&lt;h5 id="la-plage-de-mesure"&gt;
 &lt;a aria-hidden="true" href="#la-plage-de-mesure"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La plage de mesure
&lt;/h5&gt;
&lt;p&gt;
 La
 &lt;strong&gt;
  plage de mesure
 &lt;/strong&gt;
 , ou
 &lt;em&gt;
  gamme de mesure
 &lt;/em&gt;
 , est la première chose à regarder dans le choix d’un capteur ou d’un transducteur.
C’est elle qui définit si vous allez pouvoir mesurer la grandeur physique sur une grande plage ou non.
Par exemple pouvoir mesurer une température de -50°C à +200°C. Tout dépendra de ce que vous voudrez mesurer.
&lt;/p&gt;
&lt;h6 id="la-précision"&gt;
 &lt;a aria-hidden="true" href="#la-précision"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La précision
&lt;/h6&gt;
&lt;p&gt;
 La précision est le deuxième critère de choix le plus important. En effet, si votre capteur de température a une précision de 1°C, vous aurez du mal à l’utiliser dans un projet qui demande une précision de mesure de températures de 0.1°C !
En règle générale, la précision est plus grande lorsque la plage de mesure est faible et inversement elle devient moins grande lorsque la plage de mesure augmente.
&lt;/p&gt;
&lt;p&gt;
 Il est en effet assez difficile de fabriquer des capteurs qui ont une plage de mesure très grande par exemple un voltmètre qui mesurerait jusqu’à 1000V avec une précision de 0.001V !
Et puis, c’est rarement utile d’avoir ces deux paramètres à leur valeur la plus élevée (grande plage de mesure et grande précision).
&lt;/p&gt;
&lt;p&gt;
 Dans un cas le plus général, à prix égal un capteur qui mesure une plus grande plage aura surement une précision plus faible qu’un capteur mesurant une plage plus réduite.
&lt;/p&gt;
&lt;h6 id="sa-tension-dalimentation"&gt;
 &lt;a aria-hidden="true" href="#sa-tension-dalimentation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sa tension d’alimentation
&lt;/h6&gt;
&lt;p&gt;
 Il est en effet important de savoir à quelle tension il fonctionne, pour ne pas avoir de mauvaise surprises lorsque l’on veut l’utiliser !
&lt;/p&gt;
&lt;h4 id="dautres-caractéristiques-à-connaitre"&gt;
 &lt;a aria-hidden="true" href="#dautres-caractéristiques-à-connaitre"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 D’autres caractéristiques à connaitre
&lt;/h4&gt;
&lt;h5 id="la-résolution"&gt;
 &lt;a aria-hidden="true" href="#la-résolution"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La résolution
&lt;/h5&gt;
&lt;p&gt;
 Certains capteurs proposent une sortie via une communication (série, I²C, SPI…).
Du coup, la sortie est dite "numérique" (puisqu’on récupère une information logique plutôt qu’analogique). Un facteur à prendre en compte est la résolution proposée.
Certains capteurs seront donc sur 8 bits (la valeur de sortie sera codé sur 256 niveaux), d’autres 10 bits, 16 bits, 32 bits…
Il est évident que plus la résolution est élevée et plus la précision offerte est grande.
&lt;/p&gt;
&lt;h5 id="la-reproductibilité"&gt;
 &lt;a aria-hidden="true" href="#la-reproductibilité"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La reproductibilité
&lt;/h5&gt;
&lt;p&gt;
 Ce facteur sert à déterminer la fiabilité d’une mesure. Si par exemple vous souhaitez mesurer une température à 0.1°C près, et que le capteur que vous utilisez oscille entre 10.3° et 10.8°C lorsque vous faites une série de mesures consécutives dans un intervalle de temps court, vous n’êtes pas précis.
&lt;/p&gt;
&lt;p&gt;
 La reproductibilité est donc le critère servant à exprimer la fiabilité d’une mesure au travers de répétitions consécutives, et le cas échéant exprime l’écart-type et la dispersion de ces dernières.
Si la dispersion est élevée, il peut-être utile de faire plusieurs mesures en un court-temps pour ensuite faire une moyenne de ces dernières.
&lt;/p&gt;
&lt;h5 id="le-temps-de-réponse"&gt;
 &lt;a aria-hidden="true" href="#le-temps-de-réponse"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le temps de réponse
&lt;/h5&gt;
&lt;p&gt;
 Comme son nom l’indique, cela détermine la vitesse à laquelle le capteur réagit par rapport au changement de l’environnement.
Par exemple, les changements de température sont des phénomènes souvent lents à mesurer. Si vous passez le capteur d’un milieu très chaud à un milieu très froid, le capteur va mettre du temps (quelques secondes) pour proposer une information fiable.
A contrario, certains capteurs réagissent très vite et ont donc un temps de réponse très faible.
&lt;/p&gt;
&lt;h5 id="la-bande-passante"&gt;
 &lt;a aria-hidden="true" href="#la-bande-passante"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La bande passante
&lt;/h5&gt;
&lt;p&gt;
 Cette caractéristique est plus difficile à comprendre et est lié au temps de réponse.
Elle correspond à la capacité du capteur à répondre aux sollicitations de son environnement. Si sa bande passante est élevée, il peut mesurer aussi bien des phénomènes lents que des phénomènes rapides.
Si au contraire elle est faible, sa capacité à mesurer des phénomènes lents
 &lt;strong&gt;
  ou
 &lt;/strong&gt;
 rapides sera réduite sur une certaine plage de fréquences.
&lt;/p&gt;
&lt;h5 id="la-gamme-de-température-dutilisation"&gt;
 &lt;a aria-hidden="true" href="#la-gamme-de-température-dutilisation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La gamme de température d’utilisation
&lt;/h5&gt;
&lt;p&gt;
 Ce titre est assez explicite. En effet, lorsque l’on mesure certains phénomènes physiques, le capteur doit avoir une certaine réponse. Cependant, il arrive que le phénomène soit conditionné par la température.
Le capteur doit donc être utilisé dans certaines conditions pour avoir une réponse correcte (et ne pas être détérioré).
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Lorsque vous utilisez un capteur pour la première fois, il est souvent utile de pratiquer un
   &lt;strong&gt;
    étalonnage
   &lt;/strong&gt;
   .
Cette opération consiste à prendre quelques mesures pour vérifier/corriger la justesse de sa caractéristique par rapport à la datasheet ou aux conditions ambiantes.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Nous verrons tout au long des chapitres certaines caractéristiques. Après ce sera à vous de choisir vos capteurs en fonction des caractéristiques dont vous aurez besoin.
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Gestion de la mémoire sur Arduino</title><link href="https://eskimon.fr/tuto-arduino-902-gestion-de-la-m%C3%A9moire-sur-arduino" rel="alternate"></link><published>2014-02-05T07:00:00+01:00</published><updated>2014-02-05T07:00:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2014-02-05:/tuto-arduino-902-gestion-de-la-mémoire-sur-arduino</id><summary type="html">&lt;p&gt;
 Vous le savez peut-être, l’ordinateur (ou le téléphone, ou la tablette ou le minitel…) avec lequel vous êtes en train de consulter ce tutoriel dispose de plusieurs types de mémoire. Eh bien, de la même façon un microcontrôleur, lui aussi, en embarque plusieurs que nous allons découvrir ensemble.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire …&lt;/h3&gt;</summary><content type="html">&lt;p&gt;
 Vous le savez peut-être, l’ordinateur (ou le téléphone, ou la tablette ou le minitel…) avec lequel vous êtes en train de consulter ce tutoriel dispose de plusieurs types de mémoire. Eh bien, de la même façon un microcontrôleur, lui aussi, en embarque plusieurs que nous allons découvrir ensemble.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#une-histoire-de-mémoire"&gt;
    Une histoire de mémoire
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#les-mémoires"&gt;
      Les Mémoires
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#la-ram"&gt;
       La RAM
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#leeprom"&gt;
       L’EEPROM
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-flash"&gt;
       La FLASH
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#rappel-sur-les-variables"&gt;
     Rappel sur les variables
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#résumé"&gt;
      Résumé
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#caractéristiques"&gt;
       Caractéristiques
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-cartes-arduino"&gt;
       Les cartes Arduino
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#ajouter-de-la-mémoire"&gt;
       Ajouter de la mémoire
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#la-sram-ou-mémoire-vive"&gt;
   La SRAM ou mémoire vive
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#leeprom-une-mémoire-morte"&gt;
    L’EEPROM une mémoire "morte"
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#enregistrer-des-données"&gt;
     Enregistrer des données
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#lire-des-données"&gt;
     Lire des données
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#limite-de-ces-fonctions"&gt;
      Limite de ces fonctions
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#rappel-sur-lopérateur-de-décalage-binaires-et-les-masques"&gt;
       Rappel sur l’opérateur de décalage binaires et les masques
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#Écrire-un-int-dans-leeprom"&gt;
       Écrire un int dans l’EEPROM
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#lire-un-int-depuis-leeprom"&gt;
       Lire un int depuis l’EEPROM
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#la-flash-mémoire-de-programme-morte-et-vive-à-la-fois"&gt;
    La Flash, mémoire de programme, morte et vive à la fois !
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#sauvegardercharger-des-variables"&gt;
      Sauvegarder/charger des variables
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#des-variables-simples"&gt;
       Des variables simples
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#une-chaîne-de-caractères"&gt;
       Une chaîne de caractères
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="une-histoire-de-mémoire"&gt;
 &lt;a aria-hidden="true" href="#une-histoire-de-mémoire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Une histoire de mémoire
&lt;/h3&gt;
&lt;figure&gt;
 &lt;img alt="Barrettes de mémoires RAM (source wikipedia)" src="./images/uploaded/tuto-arduino-902-gestion-de-la-mémoire-sur-arduino/barrettes-de-memoires-ram-source-wikipedia.jpg"/&gt;
 &lt;figcaption&gt;
  Barrettes de mémoires RAM (source wikipedia)
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Comme je vous l’expliquais dans l’introduction, il y a de fortes chances que le support avec lequel vous consultez ce tutoriel utilise différents types de mémoire. Par exemple, un ordinateur dispose d’un disque dur pour sauvegarder les données sur le long terme et il possède aussi de la mémoire vive (RAM) pour sauvegarder les données d’un programme qui est en train de fonctionner (les variables qu’il manipule par exemple). De la même façon, un être humain possède une mémoire dite à court terme, qui vous permet de vous rappeler d’acheter du lait lorsque vous allez faire vos courses et une mémoire à long terme qui vous permet de vous souvenir des informations qui vous ont marqué et/ou vous sont utiles au quotidien. Pour Arduino la situation est très similaire. On retrouve au total trois mémoires distinctes qui ont chacune un rôle précis :
 &lt;a href="https://zestedesavoir.com/tutoriels/638/gestion-de-la-memoire-sur-arduino/#2-la-sram-ou-memoire-vive"&gt;
  RAM
 &lt;/a&gt;
 ,
 &lt;a href="https://zestedesavoir.com/tutoriels/638/gestion-de-la-memoire-sur-arduino/#3-leeprom-une-memoire-morte"&gt;
  ROM
 &lt;/a&gt;
 et
 &lt;a href="https://zestedesavoir.com/tutoriels/638/gestion-de-la-memoire-sur-arduino/#4-la-flash-memoire-de-programme-morte-et-vive-a-la-fois"&gt;
  Flash
 &lt;/a&gt;
 .
&lt;/p&gt;
&lt;h4 id="les-mémoires"&gt;
 &lt;a aria-hidden="true" href="#les-mémoires"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les Mémoires
&lt;/h4&gt;
&lt;h5 id="la-ram"&gt;
 &lt;a aria-hidden="true" href="#la-ram"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La RAM
&lt;/h5&gt;
&lt;p&gt;
 Tout d’abord la plus simple : la
 &lt;strong&gt;
  RAM
 &lt;/strong&gt;
 qui est la mémoire vive du composant (comme sur votre ordinateur). Mémoire vive, car elle est très rapide et doit gérer beaucoup d’informations très vite. Vous le savez peut être : il existe différents types de RAM, dans notre cas ce sera de la
 &lt;strong&gt;
  SRAM
 &lt;/strong&gt;
 (pour
 &lt;strong&gt;
  S
 &lt;/strong&gt;
 tatic
 &lt;strong&gt;
  R
 &lt;/strong&gt;
 andom
 &lt;strong&gt;
  A
 &lt;/strong&gt;
 ccess
 &lt;strong&gt;
  M
 &lt;/strong&gt;
 emory), qui est plus rapide mais aussi plus consommatrice en énergie que la RAM dynamique de vos ordinateurs et aussi plus encombrante (mais tout ça est bien sûr à relativiser à l’échelle électronique). Elle servira à stocker les variables du programme. Chaque fois que vous faites une nouvelle déclaration de variables, cette dernière se retrouvera dans cette mémoire. Une caractéristique à ne pas négliger, cette mémoire est entièrement effacée lorsque l’alimentation de l’Arduino cesse (on dit qu’elle est « volatile »).
&lt;/p&gt;
&lt;h5 id="leeprom"&gt;
 &lt;a aria-hidden="true" href="#leeprom"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’EEPROM
&lt;/h5&gt;
&lt;p&gt;
 Ensuite, on trouve une mémoire dite morte, l’
 &lt;strong&gt;
  EEPROM
 &lt;/strong&gt;
 (
 &lt;strong&gt;
  E
 &lt;/strong&gt;
 lectrically
 &lt;strong&gt;
  E
 &lt;/strong&gt;
 rasable
 &lt;strong&gt;
  P
 &lt;/strong&gt;
 rogrammable
 &lt;strong&gt;
  R
 &lt;/strong&gt;
 ead-
 &lt;strong&gt;
  O
 &lt;/strong&gt;
 nly
 &lt;strong&gt;
  M
 &lt;/strong&gt;
 emory). Alors non, n’allez pas croire à la lettre qu’elle est vraiment morte. En fait, on la nomme ainsi car elle est capable de stocker des informations même lorsqu’elle n’est plus alimentée. Cette dernière est similaire au disque dur de votre ordinateur par son comportement et ses caractéristiques. La vitesse d’accès est moins élevée que la RAM et sa durée de vie (nombre de cycle d’écritures possible) est plus faible aussi.
&lt;/p&gt;
&lt;h5 id="la-flash"&gt;
 &lt;a aria-hidden="true" href="#la-flash"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La FLASH
&lt;/h5&gt;
&lt;p&gt;
 Enfin, une dernière mémoire de l’Arduino est la
 &lt;strong&gt;
  Flash
 &lt;/strong&gt;
 . Elle a un rôle un peu particulier, elle sert à stocker le programme que vous téléchargez dans le microcontrôleur. Elle retient donc les informations même lorsque l’alimentation est coupée. Comme dit plus tôt, c’est ici que sont stockées toutes les instructions de votre programme, ainsi que le
 &lt;em&gt;
  bootloader
 &lt;/em&gt;
 , un petit bout de code qui agit comme le BIOS de votre PC. Il détecte au démarrage de l’Arduino si on tente de programmer la carte via la liaison série et le cas échéant copiera les données dans la mémoire FLASH. On n’y stocke pas de données pendant l’exécution du programme. En revanche, on peut y stocker des constantes (comme des chaînes de caractères pour votre écran LCD par exemple) afin de gagner un peu de place dans la RAM. D’une manière générale, essayez de la voir comme une mémoire en lecture seule. Mais nous verrons cela plus tard.
&lt;/p&gt;
&lt;h4 id="rappel-sur-les-variables"&gt;
 &lt;a aria-hidden="true" href="#rappel-sur-les-variables"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Rappel sur les variables
&lt;/h4&gt;
&lt;p&gt;
 Si vous utilisez déjà Arduino, vous devez le savoir depuis longtemps maintenant, toutes les données d’un programme informatique peuvent être stockées dans des variables. Ces dernières peuvent représenter différentes choses et donc on trouve différents types de variables qui occupent chacun une taille particulière dans la mémoire. Voici une liste exhaustive des différents types de données utilisables classés selon la taille occupée en mémoire :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  1 octet :
  &lt;code&gt;
   char
  &lt;/code&gt;
  ,
  &lt;code&gt;
   byte
  &lt;/code&gt;
  ( =
  &lt;code&gt;
   unsigned char
  &lt;/code&gt;
  ),
  &lt;code&gt;
   Boolean
  &lt;/code&gt;
 &lt;/li&gt;
 &lt;li&gt;
  2 octets :
  &lt;code&gt;
   int
  &lt;/code&gt;
  ,
  &lt;code&gt;
   word
  &lt;/code&gt;
  (=
  &lt;code&gt;
   unsigned int
  &lt;/code&gt;
  ),
  &lt;code&gt;
   short
  &lt;/code&gt;
  (=
  &lt;code&gt;
   signed int
  &lt;/code&gt;
  )
 &lt;/li&gt;
 &lt;li&gt;
  4 octets :
  &lt;code&gt;
   long
  &lt;/code&gt;
  ,
  &lt;code&gt;
   float
  &lt;/code&gt;
  ,
  &lt;code&gt;
   double
  &lt;/code&gt;
  (=
  &lt;code&gt;
   float
  &lt;/code&gt;
  chez Arduino)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Sur la nouvelle Arduino DUE, le
   &lt;code&gt;
    word
   &lt;/code&gt;
   reste sur 2 octets.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="résumé"&gt;
 &lt;a aria-hidden="true" href="#résumé"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Résumé
&lt;/h4&gt;
&lt;h5 id="caractéristiques"&gt;
 &lt;a aria-hidden="true" href="#caractéristiques"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Caractéristiques
&lt;/h5&gt;
&lt;p&gt;
 Voici un petit tableau résumant les caractéristiques des différentes mémoires :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="table-wrapper"&gt;
  &lt;table class=" table table-bordered table-striped"&gt;
   &lt;thead&gt;
    &lt;tr&gt;
     &lt;th&gt;
      Nom
     &lt;/th&gt;
     &lt;th&gt;
      Taille (Uno)
     &lt;/th&gt;
     &lt;th&gt;
      Vitesse lecture/écriture
     &lt;/th&gt;
     &lt;th&gt;
      Écriture durant exécution
     &lt;/th&gt;
     &lt;th&gt;
      Simplicité d’utilisation
     &lt;/th&gt;
    &lt;/tr&gt;
   &lt;/thead&gt;
   &lt;tbody&gt;
    &lt;tr&gt;
     &lt;td&gt;
      &lt;strong&gt;
       SRAM
      &lt;/strong&gt;
     &lt;/td&gt;
     &lt;td&gt;
      2 Ko
     &lt;/td&gt;
     &lt;td&gt;
      Très rapide
     &lt;/td&gt;
     &lt;td&gt;
      OUI
     &lt;/td&gt;
     &lt;td&gt;
      +++
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td&gt;
      &lt;strong&gt;
       EEPROM
      &lt;/strong&gt;
     &lt;/td&gt;
     &lt;td&gt;
      1 Ko
     &lt;/td&gt;
     &lt;td&gt;
      Lent
     &lt;/td&gt;
     &lt;td&gt;
      OUI
     &lt;/td&gt;
     &lt;td&gt;
      ++
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td&gt;
      &lt;strong&gt;
       FLASH
      &lt;/strong&gt;
     &lt;/td&gt;
     &lt;td&gt;
      32 Ko
     &lt;/td&gt;
     &lt;td&gt;
      Rapide
     &lt;/td&gt;
     &lt;td&gt;
      Lecture seulement
     &lt;/td&gt;
     &lt;td&gt;
      +
     &lt;/td&gt;
    &lt;/tr&gt;
   &lt;/tbody&gt;
  &lt;/table&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="les-cartes-arduino"&gt;
 &lt;a aria-hidden="true" href="#les-cartes-arduino"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les cartes Arduino
&lt;/h5&gt;
&lt;p&gt;
 Les tailles sont toutes exprimées en kilo-octets (et entre parenthèses se trouve la taille occupée par le bootloader).
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Carte
      &lt;/th&gt;
      &lt;th&gt;
       SRAM
      &lt;/th&gt;
      &lt;th&gt;
       EEPROM
      &lt;/th&gt;
      &lt;th&gt;
       Flash
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        Uno
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       2
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       32 (0.5)
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        Leonardo
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       2.5
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       32 (4)
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        Mega 2560
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       8
      &lt;/td&gt;
      &lt;td&gt;
       4
      &lt;/td&gt;
      &lt;td&gt;
       256 (8)
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        DUE
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       96
      &lt;/td&gt;
      &lt;td&gt;
       0
       &lt;sup id="fnref-1-HxPSnKONl"&gt;
        &lt;a class="footnote-ref" href="#fn-1-HxPSnKONl"&gt;
         1
        &lt;/a&gt;
       &lt;/sup&gt;
      &lt;/td&gt;
      &lt;td&gt;
       512 (0)
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        Mini
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       2
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       32 (2)
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        Micro
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       2.5
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       32 (4)
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Taille des mémoires dans les différentes cartes Arduino
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;h5 id="ajouter-de-la-mémoire"&gt;
 &lt;a aria-hidden="true" href="#ajouter-de-la-mémoire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Ajouter de la mémoire
&lt;/h5&gt;
&lt;p&gt;
 Il est normalement possible de rajouter de la mémoire externe via l’utilisation de composant comme un circuit intégré d’EEPROM ou l’utilisation d’une carte FLASH (une carte SD) que l’on retrouve partout dans les appareils photo et téléphones portables. Cependant, toutes ces solutions reposent sur l’utilisation d’un protocole de communication différent à chaque fois ou d’adaptation électronique ou d’autres contraintes. Nous ne traiterons donc pas ces différentes mémoires dans ce chapitre pour nous concentrer uniquement sur ce qui est disponible au sein de l’Arduino (et qui sera amplement suffisant pour commencer tous vos premiers projets).
&lt;/p&gt;
&lt;h3 id="la-sram-ou-mémoire-vive"&gt;
 &lt;a aria-hidden="true" href="#la-sram-ou-mémoire-vive"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La SRAM ou mémoire vive
&lt;/h3&gt;
&lt;p&gt;
 Commençons les choses tranquillement avec ce qui se fait de plus facile : la SRAM. Pour rappel, cette mémoire est équivalente à la mémoire vive de votre ordinateur. Dans le cas de l’Arduino UNO, nous disposons de 2 Kilo-Octets (2 KB), ce qui représente un total de 2048 octets. En terme de quantité de variables, cela représente au choix :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  2048
  &lt;code&gt;
   char
  &lt;/code&gt;
 &lt;/li&gt;
 &lt;li&gt;
  1024
  &lt;code&gt;
   int
  &lt;/code&gt;
 &lt;/li&gt;
 &lt;li&gt;
  512
  &lt;code&gt;
   float
  &lt;/code&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Bien entendu, vous pouvez y stocker tous les types de données que vous souhaitez, du plus simple au plus farfelu. Par exemple, vous pouvez y mettre quelques
 &lt;code&gt;
  char
 &lt;/code&gt;
 pour définir les broches à utiliser en entrées/sorties et une chaîne de caractères que vous utiliserez pour un message pour votre écran LCD. Si l’on part de cette liste, on pourrait obtenir :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Trois
  &lt;code&gt;
   char
  &lt;/code&gt;
  pour définir trois entrées/sorties (Led1, Led2, Bouton)
 &lt;/li&gt;
 &lt;li&gt;
  Un tableau de caractère "Salut les gens !" (donc 17
  &lt;code&gt;
   char
  &lt;/code&gt;
  avec le caractère '\0' de fin de chaîne)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Cela nous fait un total de 20 octets en RAM. Avec Arduino (tout comme avec votre ordinateur), aucune complication pour lire et écrire des variables dans la RAM. C’est le cœur de la machine qui s’en occupe. C’est totalement transparent pour vous. Par contre, contrairement à votre ordinateur, Arduino ne possède pas plusieurs Giga-octet de RAM. C’est pourquoi il est souvent judicieux de réfléchir au type de la variable à déclarer lorsqu’on en crée une.
&lt;/p&gt;
&lt;p&gt;
 Par exemple, pour stocker l’état d’un bouton ou un âge, inutile de prendre un
 &lt;code&gt;
  int
 &lt;/code&gt;
 , un simple
 &lt;code&gt;
  char
 &lt;/code&gt;
 suffit et vous économiserez alors 1 octet par variable. Cela peut sembler trivial, mais on n’y pense pas forcément lorsqu’on arrive d’un milieu où la mémoire est souvent le cadet des soucis.
&lt;/p&gt;
&lt;p&gt;
 Cet aspect est d’autant plus important qu’il est assez difficile de déceler une incohérence de comportement du programme à cause de la mémoire manquante.
&lt;/p&gt;
&lt;p&gt;
 En effet, sur votre ordinateur le système d’exploitation (OS, Operating System) possède un certain contrôle sur la quantité de mémoire maximale autorisée par programme. Sur Arduino, pas d’OS donc pas de message d’erreur lorsque la mémoire est saturée. Le microcontrôleur essaiera tant que possible de faire tenir les variables en mémoire, mais s’il ne peut pas le comportement peut devenir imprévisible et les problèmes de RAM sont souvent la dernière chose à laquelle on pense. Donc un conseil : méfiez-vous lorsque vous déclarez vos variables ! (surtout si vous déclarez de nombreuses chaînes de caractères qui prennent rapidement de la place).
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Et c’est tout ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Eh oui. La RAM est une mémoire vraiment simple à utiliser puisque c’est complètement transparent ! (tant que vous ne déclarez pas des variables à tort et à travers
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 )
&lt;/p&gt;
&lt;h3 id="leeprom-une-mémoire-morte"&gt;
 &lt;a aria-hidden="true" href="#leeprom-une-mémoire-morte"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’EEPROM une mémoire "morte"
&lt;/h3&gt;
&lt;p&gt;
 Comme nous le disions plus tôt, cette mémoire est un peu le "disque dur" de votre carte à la différence qu’il n’y a pas de partie mécanique (donc pas de casse possible). En revanche, la durée de vie de cette mémoire possède un nombre de lectures/écritures limité (environ 100 000 lectures/écritures pour chaque octet). Comme pour tout système de mémoire, elle fonctionne à partir d’un mécanisme d’adresse. Un peu comme si vous rangiez des informations dans un livre, avec une information par page. La taille d’une information est ici d’un octet, et le nombre de cases dans lequel on peut stocker ces infos est de 1024 (sur une Arduino Uno). Vous pouvez donc stocker 1024 octets au total. Vous pouvez aussi stocker 512
 &lt;code&gt;
  int
 &lt;/code&gt;
 par exemple (1024/2) ou fait un mix des deux. Pour pouvoir manipuler l’EEPROM, il vous faudra dans un premier temps inclure une bibliothèque bien nommée :
 &lt;code&gt;
  EEPROM.h
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;"EEPROM.h"&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Une case mémoire qui n’a jamais été utilisée possède une valeur initiale de 255.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="enregistrer-des-données"&gt;
 &lt;a aria-hidden="true" href="#enregistrer-des-données"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Enregistrer des données
&lt;/h4&gt;
&lt;p&gt;
 La mémoire EEPROM est donc divisée en 1024 blocs de 8 bits. Pour écrire une donnée, il va falloir décider dans quel bloc on veut l’enregistrer, c’est ce qu’on appelle
 &lt;strong&gt;
  l’adresse d’écriture
 &lt;/strong&gt;
 . Comme la mémoire est initialement vide quand vous achetez la carte, vous pouvez choisir comme bon vous semble où vous voulez mettre les informations, à quelle adresse, entre 0 et 1023. Par contre lorsque vous voudrez les récupérer il faudra vous souvenir où elles sont !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Pour enregistrer une donnée c’est très simple, il suffit simplement d’utiliser une seule fonction :
 &lt;code&gt;
  write()
 &lt;/code&gt;
 . Comme elle appartient à la librairie EEPROM, et pour qu’elle ne soit pas confondue avec une autre, elle est déclarée dans un ensemble (un
 &lt;em&gt;
  namespace
 &lt;/em&gt;
 ) qui s’appelle EEPROM. Pour utiliser la fonction il faudra donc écrire :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;EEPROM.write()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Cette fonction prend deux arguments :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  L’adresse où écrire (un
  &lt;code&gt;
   int
  &lt;/code&gt;
  entre 0 et 1023)
 &lt;/li&gt;
 &lt;li&gt;
  L’octet à enregistrer (un
  &lt;code&gt;
   unsigned char
  &lt;/code&gt;
  )
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Par exemple pour enregistrer la valeur 42 à l’adresse 600 on fera :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;EEPROM.write(&lt;span class="hljs-number"&gt;600&lt;/span&gt;, &lt;span class="hljs-number"&gt;42&lt;/span&gt;); &lt;span class="hljs-comment"&gt;//adresse = 600, valeur = 42&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="lire-des-données"&gt;
 &lt;a aria-hidden="true" href="#lire-des-données"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Lire des données
&lt;/h4&gt;
&lt;p&gt;
 Je suis intiment persuadé que vous n’aurez aucun mal à deviner comment lire des données depuis la mémoire… Vous avez trouvé ? En effet, il suffit d’utiliser une autre fonction avec un nom très explicite : read() ! Comme pour sa cousine l’écriture, il faudra la faire précéder de "EEPROM" pour y accéder. Cette fonction ne prendra qu’un seul argument qui sera l’adresse à laquelle on veut aller chercher notre donnée. Exemple, je vais lire la donnée à l’adresse 600 :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; donnee = EEPROM.read(&lt;span class="hljs-number"&gt;600&lt;/span&gt;); &lt;span class="hljs-comment"&gt;//adresse = 600&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 La variable
 &lt;code&gt;
  donnee
 &lt;/code&gt;
 prendra donc la valeur stockée à l’adresse mémoire numéro 600. Soit 42. Et voilà, vous savez tout sur l’écriture et la lecture dans l’EEPROM.
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Hep hep hep, minute papillon. C’est sympa tout ça mais je fais comment si je veux stocker un
   &lt;code&gt;
    float
   &lt;/code&gt;
   par exemple ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Excellente question, nous allons voir comment nous allons y répondre !
&lt;/p&gt;
&lt;h4 id="limite-de-ces-fonctions"&gt;
 &lt;a aria-hidden="true" href="#limite-de-ces-fonctions"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Limite de ces fonctions
&lt;/h4&gt;
&lt;p&gt;
 Comme vous l’avez vu, les deux fonctions présentées ci-dessus sont fait pour lire/écrire un seul octet à la fois. Ce qui veut dire qu’on ne peut pas les utiliser pour enregistrer un
 &lt;code&gt;
  int, float, double
 &lt;/code&gt;
 … C’est très embêtant… Mais bien entendu, chaque problème à sa solution. Par contre il va falloir mettre les mains dans le cambouis et faire nos propres fonctions d’enregistrement pour pouvoir conserver des types de variable plus grand qu’un simple octet.
&lt;/p&gt;
&lt;h5 id="rappel-sur-lopérateur-de-décalage-binaires-et-les-masques"&gt;
 &lt;a aria-hidden="true" href="#rappel-sur-lopérateur-de-décalage-binaires-et-les-masques"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Rappel sur l’opérateur de décalage binaires et les masques
&lt;/h5&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Cette partie parle de masquage. Si vous ne connaissez pas ce terme, je vous invite a lire
   &lt;a href="https://zestedesavoir.com/tutoriels/613/ajouter-des-sorties-numeriques-a-larduino-le-74hc595/#2-programmons-pour-utiliser-ce-composant"&gt;
    cette partie de tutoriel
   &lt;/a&gt;
   sur l’utilisation des registres à décalage et fait ainsi la découverte de l’
   &lt;em&gt;
    opérateur de décalage binaire
   &lt;/em&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Pour rappel, les opérateurs de décalage permettent de décaler tous les bits d’une variable vers la droite ou vers la gauche. Ils s’écrivent avec des chevrons :
 &lt;code&gt;
  &amp;lt;&amp;lt;
 &lt;/code&gt;
 pour décaler à gauche et
 &lt;code&gt;
  &amp;gt;&amp;gt;
 &lt;/code&gt;
 pour décaler à droite. L’écriture se fait de la manière suivante :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-plain"&gt;variable_a_decaler , &amp;lt;&amp;lt; ou &amp;gt;&amp;gt; , nombres_de_cran_de_decalage
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Par exemple, pour décaler de 3 bits vers la gauche :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; variable = &lt;span class="hljs-number"&gt;42&lt;/span&gt; ;
variable = variable &amp;lt;&amp;lt; &lt;span class="hljs-number"&gt;3&lt;/span&gt; ;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Les
 &lt;strong&gt;
  masques
 &lt;/strong&gt;
 , qui vont être utiles pour la suite, sont réalisés grâce à deux opérateurs logiques bits-à-bits, le OU (
 &lt;code&gt;
  |
 &lt;/code&gt;
 ) et le ET (
 &lt;code&gt;
  &amp;amp;
 &lt;/code&gt;
 ). Un OU permettra d’imposer un bit à 1 tandis que le ET permettra d’imposer un bit à 0. Par exemple, pour mettre les 4 derniers bits d’un octet à 1 on fera :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; monOctet = &lt;span class="hljs-number"&gt;42&lt;/span&gt; ; &lt;span class="hljs-comment"&gt;// en binaire : 0010 1010&lt;/span&gt;
monOctet = monOctet | &lt;span class="hljs-number"&gt;0x0F&lt;/span&gt; ; &lt;span class="hljs-comment"&gt;//équivaut à 0010 1010 | 0000 1111 = 0010 1111&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 De même pour mettre les quatre derniers à 0 on fera :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; monOctet = &lt;span class="hljs-number"&gt;42&lt;/span&gt; ; &lt;span class="hljs-comment"&gt;// en binaire : 0010 1010&lt;/span&gt;
monOctet = monOctet &amp;amp; &lt;span class="hljs-number"&gt;0xF0&lt;/span&gt; ; &lt;span class="hljs-comment"&gt;//équivaut à 0010 1010 &amp;amp; 1111 0000 = 0010 0000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Encore une fois, pour plus de détails sur les opérateurs de décalage ou de masquage,
 &lt;a href="https://zestedesavoir.com/tutoriels/613/ajouter-des-sorties-numeriques-a-larduino-le-74hc595/#2-programmons-pour-utiliser-ce-composant"&gt;
  référez-vous à ce tutoriel
 &lt;/a&gt;
 . Maintenant que les rappels sont faits, nous allons voir comment faire pour lire et écrire dans l’EEPROM des variables qui font plus d’un octet. Pour cela nous allons réaliser deux fonctions qui prendront pour exemple l’écriture/lecture d’un
 &lt;code&gt;
  int
 &lt;/code&gt;
 (mais vous allez comprendre le principe et serez donc capable de faire sans problème la même chose pour tous les types de données
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 )
&lt;/p&gt;
&lt;h5 id="Écrire-un-int-dans-leeprom"&gt;
 &lt;a aria-hidden="true" href="#Écrire-un-int-dans-leeprom"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Écrire un
 &lt;code&gt;
  int
 &lt;/code&gt;
 dans l’EEPROM
&lt;/h5&gt;
&lt;p&gt;
 Un
 &lt;code&gt;
  int
 &lt;/code&gt;
 qui représentera la variable à mettre en mémoire. Afin de garder les choses simples, on enregistrera les valeurs à la suite, dans des cases mémoires consécutives. Pour pouvoir mettre notre
 &lt;code&gt;
  int
 &lt;/code&gt;
 dans les deux cases, il va falloir le découper en deux pour obtenir deux octets. On va d’abord commencer par isoler les 8 bits les plus à droite (bits de poids faible) grâce à un simple masque. Ensuite, on va faire évoluer le masque en le décalant 8 fois vers la gauche et ainsi isoler les bits de poids fort.L’enregistrement se fera alors de la manière la plus simple du monde, en faisant deux enregistrements successifs à l’adresse n et n+1.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Je vous invite à essayer par vous-même avant de regarder le code suivant, cela vous fera un bon exercice.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;//on veut sauvegarder par exemple le nombre décimal 55084, en binaire : 1101 0111 0010 1100&lt;/span&gt;

&lt;span class="hljs-comment"&gt;//fonction d'écriture d'un type int en mémoire EEPROM&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;sauverInt&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; adresse, &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; val)&lt;/span&gt; 
&lt;/span&gt;{   
    &lt;span class="hljs-comment"&gt;//découpage de la variable val qui contient la valeur à sauvegarder en mémoire&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; faible = val &amp;amp; &lt;span class="hljs-number"&gt;0x00FF&lt;/span&gt;; &lt;span class="hljs-comment"&gt;//récupère les 8 bits de droite (poids faible) -&amp;gt; 0010 1100 &lt;/span&gt;
    &lt;span class="hljs-comment"&gt;//calcul : 1101 0111 0010 1100 &amp;amp; 0000 0000 1111 1111 = 0010 1100&lt;/span&gt;

    &lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; fort = (val &amp;gt;&amp;gt; &lt;span class="hljs-number"&gt;8&lt;/span&gt;) &amp;amp; &lt;span class="hljs-number"&gt;0x00FF&lt;/span&gt;;  &lt;span class="hljs-comment"&gt;//décale puis récupère les 8 bits de gauche (poids fort) -&amp;gt; 1101 0111&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;//calcul : 1101 0111 0010 1100 &amp;gt;&amp;gt; 8 = 0000 0000 1101 0111 puis le même &amp;amp; qu’avant&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;//puis on enregistre les deux variables obtenues en mémoire&lt;/span&gt;
    EEPROM.write(adresse, fort) ; &lt;span class="hljs-comment"&gt;//on écrit les bits de poids fort en premier&lt;/span&gt;
    EEPROM.write(adresse+&lt;span class="hljs-number"&gt;1&lt;/span&gt;, faible) ; &lt;span class="hljs-comment"&gt;//puis on écrit les bits de poids faible à la case suivante&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="lire-un-int-depuis-leeprom"&gt;
 &lt;a aria-hidden="true" href="#lire-un-int-depuis-leeprom"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Lire un
 &lt;em&gt;
  int
 &lt;/em&gt;
 depuis l’EEPROM
&lt;/h5&gt;
&lt;p&gt;
 Je ne sais pas si vous avez trouvé le code précédent simple, mais si c’est le cas alors pas d’inquiétude car on reste sur le même concept. De même que précédemment, je vous invite à lire ce que l’on va faire, essayer, puis regarder la solution après. Le principe est le suivant. Nous allons tout d’abord récupérer l’octet de poids fort puis celui de poids faible qui composait la variable de type
 &lt;code&gt;
  int
 &lt;/code&gt;
 reconstituée ! Puis on va reconstruire notre
 &lt;code&gt;
  int
 &lt;/code&gt;
 à partir de ces deux morceaux.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;//lecture de la variable de type int enregistrée précédemment par la fonction que l'on a créée&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; &lt;span class="hljs-title"&gt;lireInt&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; adresse)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; val = &lt;span class="hljs-number"&gt;0&lt;/span&gt; ; &lt;span class="hljs-comment"&gt;//variable de type int, vide, qui va contenir le résultat de la lecture&lt;/span&gt;

    &lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; fort = EEPROM.read(adresse);     &lt;span class="hljs-comment"&gt;//récupère les 8 bits de gauche (poids fort) -&amp;gt; 1101 0111&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; faible = EEPROM.read(adresse+&lt;span class="hljs-number"&gt;1&lt;/span&gt;); &lt;span class="hljs-comment"&gt;//récupère les 8 bits de droite (poids faible) -&amp;gt; 0010 1100&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;//assemblage des deux variable précédentes&lt;/span&gt;
    val = fort ;         &lt;span class="hljs-comment"&gt;// val vaut alors 0000 0000 1101 0111&lt;/span&gt;
    val = val &amp;lt;&amp;lt; &lt;span class="hljs-number"&gt;8&lt;/span&gt; ;     &lt;span class="hljs-comment"&gt;// val vaut maintenant 1101 0111 0000 0000 (décalage)&lt;/span&gt;
    val = val | faible ; &lt;span class="hljs-comment"&gt;// utilisation du masque&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// calcul : 1101 0111 0000 0000 | 0010 1100 = 1101 0111 0010 1100&lt;/span&gt;

    &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; val ; &lt;span class="hljs-comment"&gt;//on n’oublie pas de retourner la valeur lue !&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id="la-flash-mémoire-de-programme-morte-et-vive-à-la-fois"&gt;
 &lt;a aria-hidden="true" href="#la-flash-mémoire-de-programme-morte-et-vive-à-la-fois"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La Flash, mémoire de programme, morte et vive à la fois !
&lt;/h3&gt;
&lt;p&gt;
 Maintenant que vous avez tout compris aux différents types de mémoires et que l’on a vu ensemble comment manipuler les plus simples, nous allons pouvoir passer à la dernière, la plus compliquée, la mémoire
 &lt;strong&gt;
  Flash
 &lt;/strong&gt;
 dite "de programme". Cette mémoire, appelée plus communément "mémoire de programme" (ou encore "Progmem") sert d’ordinaire à stocker le code que vous avez créé puis compilé, le programme en somme. En effet, lorsque vous "téléversez" votre programme (beurk cette traduction) vers le microcontrôleur, c’est ici qu’il sera envoyé. Comme toutes les mémoires flash, sa durée de vie (exprimée en nombres de lectures/écritures) n’est pas infinie. L’utilisation de cette flash est un peu particulière. En effet, on ne peut enregistrer des données dedans qu’au moment du téléchargement du programme. Une fois le programme chargé, elle agit en lecture seule, si bien que vous ne pourrez que récupérer des données injectées plus tôt mais pas en rajouter de nouvelles au moment du fonctionnement normal (par exemple pour y stocker des valeurs de variables).
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Alors, ça ne sert à rien une mémoire en lecture seule !?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Détrompez-vous, c’est en fait très utile pour mettre des données qui ne varient pas et qui risqueraient d’encombrer votre RAM par exemple. Le premier des usages est souvent le stockage de chaîne de caractères, que l’on va plus tard envoyer sur un écran LCD. Par exemple je veux afficher à chaque démarrage du programme le message "Salut les gens !" sur mon écran. La première méthode serait donc de faire un truc du genre :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; message[] = &lt;span class="hljs-string"&gt;"Salut les gens !"&lt;/span&gt; ;
&lt;span class="hljs-comment"&gt;//const pas obligatoire mais c’est plus rigoureux avec&lt;/span&gt;

... &lt;span class="hljs-comment"&gt;//du code&lt;/span&gt;

monlcd.print(message) ;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Cette ligne de code va être interprétée de façon à enregistrer la chaîne dans la mémoire RAM. Ce message qui fait 16 caractères prendra donc 16 octets dans votre RAM (en fait 17 avec le caractères de fin de chaîne '\0’). Ça peut paraître insignifiant, mais si votre programme contient plusieurs chaînes pour afficher du texte de manière dynamique ça peut vite devenir serré. Comme ce message n’a pas besoin d’être modifié pour être ensuite ré-enregistré, la meilleure des solutions reste de le stocker dans la mémoire de programme qui est beaucoup plus grande que la mémoire RAM. Il ne prend ainsi pas de place en RAM et on pourra toujours le récupérer à chaque fois que l’on en aura besoin
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 .
&lt;/p&gt;
&lt;h4 id="sauvegardercharger-des-variables"&gt;
 &lt;a aria-hidden="true" href="#sauvegardercharger-des-variables"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sauvegarder/charger des variables
&lt;/h4&gt;
&lt;p&gt;
 Maintenant que le concept est posé, passons un peu à la pratique
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 . Nous allons commencer par enregistrer et recharger des variables "simples" (un
 &lt;code&gt;
  int
 &lt;/code&gt;
 par exemple) puis ensuite nous chercherons à stocker des variables plus compliquées comme un tableau de caractères.
&lt;/p&gt;
&lt;p&gt;
 L’utilisation de la mémoire de programme repose sur un mot-clé qui nous sert d’attribut modificateur de variables. En simple, c’est ce mot-clé qui dira au compilateur "Cette variable il faut la mettre en mémoire flash de programme". Ce mot-clé est
 &lt;code&gt;
  PROGMEM
 &lt;/code&gt;
 (tout en majuscules). Pour pouvoir l’utiliser, il vous faudra aussi intégrer la librairie de gestion de cette mémoire :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;avr/pgmspace.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="des-variables-simples"&gt;
 &lt;a aria-hidden="true" href="#des-variables-simples"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Des variables simples
&lt;/h5&gt;
&lt;p&gt;
 Pour enregistrer une variable, il vous suffira simplement de la déclarer comme d’habitude, à la seule différence qu’il faut rajouter le modificateur
 &lt;code&gt;
  PROGMEM
 &lt;/code&gt;
 pour qu’elle soit enregistrée au bon endroit, et la déclarer comme constante avec
 &lt;code&gt;
  const
 &lt;/code&gt;
 . Par exemple pour enregistrer un
 &lt;code&gt;
  int
 &lt;/code&gt;
 :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;avr/pgmspace.h&amp;gt; //on n'oublie pas d'intégrer la bibliothèque de gestion de mémoire&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; unInt PROGMEM = &lt;span class="hljs-number"&gt;42&lt;/span&gt;; &lt;span class="hljs-comment"&gt;//ce int est enregistré en mémoire flash&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; unAutreInt = &lt;span class="hljs-number"&gt;42&lt;/span&gt;; &lt;span class="hljs-comment"&gt;//celui-ci sera mis en RAM&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Le mot-clé PROGMEM peut aussi s’écrire avant le type, mais pas entre le type et le nom de la variable :
   &lt;code&gt;
    const PROGMEM int unInt = 42 ;
   &lt;/code&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Il semble, à ce jour, qu’il y ait un problème avec la sauvegarde des nombres flottants. Les seuls types à utiliser sont donc
   &lt;code&gt;
    char
   &lt;/code&gt;
   ,
   &lt;code&gt;
    int
   &lt;/code&gt;
   et
   &lt;code&gt;
    long
   &lt;/code&gt;
   (unsigned ou signed)
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Une fois que les variables sont enregistrées, il ne nous reste plus qu’à les récupérer pour les utiliser dans notre programme. Pour cela, il existe des fonctions pour chaque type de variable. Elles sont toutes plutôt simples à retenir :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   pgm_read_byte()
  &lt;/code&gt;
  -&amp;gt; pour lire un
  &lt;code&gt;
   char
  &lt;/code&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   pgm_read_word()
  &lt;/code&gt;
  -&amp;gt; pour lire un
  &lt;code&gt;
   int
  &lt;/code&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   pgm_read_dword()
  &lt;/code&gt;
  -&amp;gt; pour lire un
  &lt;code&gt;
   long
  &lt;/code&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Pour chacune de ces fonctions, il vous faudra mettre en argument la variable créée, précédée par le symbole '&amp;amp;’. Les habitués des pointeurs doivent savoir pourquoi. Pour les autres voici une petite explication. Lorsque vous déclarez votre variable, celle-ci va sagement se mettre dans une case mémoire. Cette case possède une adresse pour retrouver la variable plus tard (comme avec l’EEPROM souvenez-vous). Lorsque vous faites appelle à la fonction
 &lt;code&gt;
  pgm_read_byte()
 &lt;/code&gt;
 , vous devez passer l’adresse de la variable plutôt que sa valeur (passer la valeur n’a en effet aucun intérêt ici). C’est ce que permet l’opérateur '&amp;amp;’.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Je comprends que cela soit flou, et le cours n’est pas là pour faire une explication exhaustive des pointeurs. Je vous demanderais juste de ne pas oublier de mettre le symbole '&amp;amp;' pour utiliser la variable en flash.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Un petit exemple :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;avr/pgmspace.h&amp;gt; //on n'oublie pas d'intégrer la bibliothèque de gestion de mémoire FLASH&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; unChar PROGMEM = &lt;span class="hljs-number"&gt;42&lt;/span&gt;;     &lt;span class="hljs-comment"&gt;//ce char est enregistré en mémoire flash&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; unInt PROGMEM = &lt;span class="hljs-number"&gt;1324&lt;/span&gt;;     &lt;span class="hljs-comment"&gt;//ce int est enregistré en mémoire flash&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; unLong PROGMEM = &lt;span class="hljs-number"&gt;987654&lt;/span&gt;; &lt;span class="hljs-comment"&gt;//ce double est enregistré en mémoire flash&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);
    Serial.print(&lt;span class="hljs-string"&gt;"Mon char : "&lt;/span&gt;);
    Serial.println(pgm_read_byte(&amp;amp;unChar));
    Serial.print(&lt;span class="hljs-string"&gt;"Mon int : "&lt;/span&gt;);
    Serial.println(pgm_read_word(&amp;amp;unInt));
    Serial.print(&lt;span class="hljs-string"&gt;"Mon long : "&lt;/span&gt;);
    Serial.println(pgm_read_dword(&amp;amp;unLong));
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="une-chaîne-de-caractères"&gt;
 &lt;a aria-hidden="true" href="#une-chaîne-de-caractères"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Une chaîne de caractères
&lt;/h5&gt;
&lt;p&gt;
 Un usage très fréquent de l’utilisation de la mémoire de programme est le stockage de chaînes de caractères vouées à être affichées plus tard. En effet, une chaîne de caractères qui sert uniquement à indiquer un menu ou un message d’accueil ne sera pas modifiée et a donc pleinement sa place dans une mémoire en lecture seule. On va commencer par déclarer un tableau comme on le ferait normalement, puis comme précédemment on va lui ajouter le modificateur
 &lt;code&gt;
  PROGMEM
 &lt;/code&gt;
 :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;avr/pgmspace.h&amp;gt; //on n'oublie pas d'intégrer la bibliothèque de gestion de mémoire&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; message[] PROGMEM = &lt;span class="hljs-string"&gt;"Salut les gens !"&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;//écriture équivalente :&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; PROGMEM &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; message[] = &lt;span class="hljs-string"&gt;"Salut les gens !"&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Maintenant que les données sont enregistrées, l’étape de lecture arrive et c’est plus délicat… En effet, les seules fonctions permettant de lire des données dans la Flash sont celles que nous avons vues juste avant, et elles ne permettent donc que de récupérer qu’un
 &lt;code&gt;
  char
 &lt;/code&gt;
 … Je sens qu’on va s’amuser !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Il va donc falloir créer une boucle pour tout récupérer ! Comme ici le contenu stocké est une chaîne de caractères, nous allons détecter le caractère de fin de chaîne pour arrêter la boucle. Il n’y a pas de solutions magiques, chaque cas doit avoir son traitement (si vous ne stockez pas que des chaînes de caractères). Cette fois-ci, par contre, nous n’allons pas mettre le symbole '&amp;amp;' devant le nom de la variable dans la fonction
 &lt;code&gt;
  pgm_read_byte()
 &lt;/code&gt;
 . En effet, un tableau représente déjà une adresse mémoire et il n’est donc pas nécessaire d’utiliser le '&amp;amp;' pour l’indiquer.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;avr/pgmspace.h&amp;gt; //on n'oublie pas d'intégrer la bibliothèque de gestion de mémoire&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; message[] PROGMEM = &lt;span class="hljs-string"&gt;"Salut les gens !"&lt;/span&gt;; &lt;span class="hljs-comment"&gt;//chaîne de caractères enregistrée dans la mémoire FLASH&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);
    &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; temp = pgm_read_byte(message); &lt;span class="hljs-comment"&gt;//on récupère le premier caractère&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; i=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;//compte le nombre de déplacement&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(temp != &lt;span class="hljs-string"&gt;'\0'&lt;/span&gt;) &lt;span class="hljs-comment"&gt;//tant que le caractère récupéré est différent du caractère de fin de chaîne&lt;/span&gt;
    {
        Serial.print(temp); &lt;span class="hljs-comment"&gt;//on affiche le caractère lu&lt;/span&gt;
        i++; &lt;span class="hljs-comment"&gt;//on incrémente le déplacement&lt;/span&gt;
        temp = pgm_read_byte(message + i); &lt;span class="hljs-comment"&gt;//on récupère le caractère suivant&lt;/span&gt;
    }
    Serial.println();
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Une autre solution existe cependant
 &lt;strong&gt;
  pour les chaînes de caractères uniquement
 &lt;/strong&gt;
 . En effet, si vous voulez utiliser une chaîne sans vous fatiguer, vous pouvez simplement utiliser :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;F(&lt;span class="hljs-string"&gt;"Chaine completement en flash !"&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Lors de la compilation, tout le mécanisme de stockage et de lecture sera ainsi mis en place de manière transparente. Par exemple vous pourriez afficher la même chose que ci-dessus en faisant :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;avr/pgmspace.h&amp;gt; //on n'oublie pas d'intégrer la bibliothèque de gestion de mémoire&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);
    Serial.println(F(&lt;span class="hljs-string"&gt;"Salut les gens !"&lt;/span&gt;));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Cela dit, si vous devez utiliser plusieurs fois la même chaîne de caractères cette solution n’est pas idéale puisque l’espace de stockage utilisé sera différent pour chaque appel de cette fonction même si le contenu ne change pas, ce qui vous fera donc consommer de la mémoire pour rien… enfin si, pour ne pas se fatiguer avec le code !
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
&lt;/p&gt;
&lt;p&gt;
 Vous en savez maintenant un peu plus sur les différents types de mémoires présentes au sein d’Arduino.
&lt;/p&gt;
&lt;p&gt;
 Cependant, si vous avez toujours un besoin plus important de mémoire, vous pouvez essayer de vous tourner vers des composants tels que des EEPROM externes.
&lt;/p&gt;
&lt;div class="footnotes"&gt;
 &lt;hr/&gt;
 &lt;ol&gt;
  &lt;li id="fn-1-HxPSnKONl"&gt;
   &lt;p&gt;
    Avec la DUE il est en théorie possible d’écrire dans la mémoire Flash pendant l’exécution du programme, mais aucune bibliothèque dédiée n’existe pour le moment.
   &lt;/p&gt;
   &lt;a class="footnote-backref" href="#fnref-1-HxPSnKONl" title="Retourner au texte de la note 1"&gt;
    ↩
   &lt;/a&gt;
  &lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Un moteur qui a de la tête : le Servomoteur</title><link href="https://eskimon.fr/tuto-arduino-602-un-moteur-qui-a-de-la-t%C3%AAte-le-servomoteur" rel="alternate"></link><published>2013-12-12T12:22:00+01:00</published><updated>2013-12-12T12:22:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-12:/tuto-arduino-602-un-moteur-qui-a-de-la-tête-le-servomoteur</id><summary type="html">&lt;p&gt;
 Dans ce chapitre, nous allons parler d’un moteur que nos amis modélistes connaissent bien : le
 &lt;strong&gt;
  Servomoteur
 &lt;/strong&gt;
 (abrégé : "servo"). C’est un moteur un peu particulier, puisqu’il confond un ensemble de mécanique et d’électronique, mais son principe de fonctionnement reste assez simple. Les parties seront donc assez courtes …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Dans ce chapitre, nous allons parler d’un moteur que nos amis modélistes connaissent bien : le
 &lt;strong&gt;
  Servomoteur
 &lt;/strong&gt;
 (abrégé : "servo"). C’est un moteur un peu particulier, puisqu’il confond un ensemble de mécanique et d’électronique, mais son principe de fonctionnement reste assez simple. Les parties seront donc assez courtes dans l’ensemble car les servomoteurs contiennent dans leur "ventre" des moteurs à courant continu que vous connaissez à présent. Cela m’évitera des explications supplémentaires.
 &lt;img alt=":-°" class="smiley" src="./static/smileys/siffle.png"/&gt;
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#principe-du-servomoteur"&gt;
    Principe du servomoteur
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#vue-générale"&gt;
      Vue générale
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-servo-un-drôle-de-moteur"&gt;
       Le servo, un drôle de moteur
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#lexemple-de-la-voiture-radiocommandée"&gt;
       L’exemple de la voiture radiocommandée
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#composition-dun-servomoteur"&gt;
      Composition d’un servomoteur
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#apparence"&gt;
       Apparence
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#connectique"&gt;
       Connectique
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-mécanique"&gt;
       La mécanique
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#lélectronique-dasservissement"&gt;
       L’électronique d’asservissement
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#la-commande-dun-servomoteur"&gt;
    La commande d’un servomoteur
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#le-signal-de-commande"&gt;
      Le signal de commande
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#la-fréquence-fixe"&gt;
       La fréquence fixe
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-durée-de-létat-haut"&gt;
       La durée de l’état HAUT
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#arduino-et-les-servomoteurs"&gt;
    Arduino et les servomoteurs
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#câblage"&gt;
     Câblage
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#la-librairie-servo"&gt;
      La librairie Servo
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#préparer-le-terrain"&gt;
       Préparer le terrain
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#utiliser-le-servo"&gt;
       Utiliser le servo
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#lélectronique-dasservissement-1"&gt;
    L’électronique d’asservissement
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#principe-de-fonctionnement"&gt;
     Principe de fonctionnement
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#Électronique-à-consigne-manuelle"&gt;
      Électronique à consigne manuelle
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#synoptique-de-lélectronique-interne"&gt;
       Synoptique de l’électronique interne
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#schéma-de-principe"&gt;
       Schéma de principe
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#fonctionnement-du-comparateur"&gt;
       Fonctionnement du comparateur
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#Électronique-à-consigne-pwm"&gt;
      Électronique à consigne PWM
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#synoptique-de-principe"&gt;
       Synoptique de principe
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#un-peu-dexercice"&gt;
    Un peu d’exercice !
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#consigne"&gt;
       Consigne
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#objectif"&gt;
       Objectif
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#correction"&gt;
      Correction
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#fonction-loop"&gt;
       Fonction loop()
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#et-la-liaison-série"&gt;
       Et la liaison série
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#code-final"&gt;
       Code final
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#tester-un-servomoteur-non-standard"&gt;
    Tester un servomoteur “non-standard”
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#writemicroseconds"&gt;
       writeMicroSeconds()
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#read"&gt;
       read()
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#programme-de-test"&gt;
     Programme de test
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="principe-du-servomoteur"&gt;
 &lt;a aria-hidden="true" href="#principe-du-servomoteur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Principe du servomoteur
&lt;/h3&gt;
&lt;p&gt;
 Un servomoteur… Étrange comme nom, n’est-ce pas ? Cela dit, il semblerait qu’il le porte bien puisque ces moteurs, un peu particuliers je le disais, emportent avec eux une électronique de commande (faisant office de "cerveau"). Le nom vient en fait du latin
 &lt;em&gt;
  servus
 &lt;/em&gt;
 qui signifie esclave. Mais avant de nous atteler à l’exploration interne de ce cher ami, façon de parler, nous allons avant tout voir à quoi il sert.
&lt;/p&gt;
&lt;h4 id="vue-générale"&gt;
 &lt;a aria-hidden="true" href="#vue-générale"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Vue générale
&lt;/h4&gt;
&lt;h5 id="le-servo-un-drôle-de-moteur"&gt;
 &lt;a aria-hidden="true" href="#le-servo-un-drôle-de-moteur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le servo, un drôle de moteur
&lt;/h5&gt;
&lt;p&gt;
 Commençons en image, avec la photographie d’un servomoteur :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Un servomoteur" src="./images/uploaded/tuto-arduino-602-un-moteur-qui-a-de-la-tête-le-servomoteur/un-servomoteur.jpg"/&gt;
 &lt;figcaption&gt;
  Un servomoteur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 C’est, en règle générale, à quoi ils ressemblent, variant selon leur taille.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Pfiouuu, c’est quoi ce moteur, ça n’y ressemble même pas !
   &lt;img alt=":o" class="smiley" src="./static/smileys/huh.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 J’vous l’avais dit que c’était des moteurs particuliers ! En détail, voyons à quoi ils servent. De manière semblable aux moteurs à courant continu, les servomoteurs disposent d’un axe de rotation. Sur la photo, il se trouve au centre de la roue blanche. Cet axe de rotation est en revanche entravé par un système de bridage. Cela ne veut pas dire qu’il ne tourne pas, mais cela signifie qu’il ne peut pas tourner au-delà d’une certaine limite. Par exemple, certains servomoteurs ne peuvent même pas faire tourner leur axe de rotation en leur faisant faire un tour complet ! D’autres en sont capables, mais pas plus d’un tour. Enfin, un cas à part que nous ne ferons qu’évoquer, ceux qui tournent sans avoir de limite (autant de tours qu’ils le veulent). Et là, c’est le moment où je vous dis : "
 &lt;em&gt;
  détrompez-vous !
 &lt;/em&gt;
 " en répondant à la question critique que vous avez en tête : "
 &lt;em&gt;
  Un moteur qui ne peut même pas faire un tour avec son axe de rotation, ça ne sert à rien ?
  &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
 &lt;/em&gt;
 " En effet, s’il ne peut pas faire avancer votre robot, il peut cependant le guider. Prenons l’exemple d’une petite voiture de modélisme à quatre roues. Les roues arrière servent à faire avancer la voiture, elles sont mises en rotation par un moteur à courant continu, tandis que les roues avant, qui servent à la direction de la voiture pour ne pas qu’elle se prenne les murs, sont pilotées par un servomoteur. Comment ? Eh bien nous allons vous l’expliquer.
&lt;/p&gt;
&lt;h5 id="lexemple-de-la-voiture-radiocommandée"&gt;
 &lt;a aria-hidden="true" href="#lexemple-de-la-voiture-radiocommandée"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’exemple de la voiture radiocommandée
&lt;/h5&gt;
&lt;p&gt;
 Regardons l’image que je vous ai préparée pour comprendre à quoi sert un servomoteur :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="*Vue de dessus* Représentation schématique du système de guidage des roues d'une" src="./images/uploaded/tuto-arduino-602-un-moteur-qui-a-de-la-tête-le-servomoteur/vue-de-dessus-representation-schematique-du-systeme-de-guidage-des-roues-dune.jpg"/&gt;
 &lt;figcaption&gt;
  *Vue de dessus* Représentation schématique du système de guidage des roues d'une
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Chaque roue est positionnée sur un axe de rotation (partie bleue) lui-même monté sur un pivot sur le châssis de la voiture (en vert). La baguette (rouge) permet de garder le parallélisme entre les roues. Si l’une pivote vers la gauche, l’autre en fait de même (ben ouais, sinon la voiture devrait se couper en deux pour aller dans les deux directions opposées
 &lt;img alt=":lol:" class="smiley" src="./static/smileys/rire.gif"/&gt;
 ). Cette baguette est fixée, par un pivot encore, au bras de sortie du servomoteur. Ce bras est à son tour fixé à l’axe de rotation du servomoteur. Ainsi, lorsque le servomoteur fait tourner son axe, il entraine le bras qui entraine la baguette et fait pivoter les roues pour permettre à la voiture de prendre une direction dans son élan (tourner à gauche, à droite, ou aller tout droit). Il n’y a rien de bien compliqué. Ce qu’il faut retenir est que le servomoteur va entrainer la baguette pour orienter les roues dans un sens ou dans l’autre. Elles auront donc un angle d’orientation par rapport au châssis de la voiture. Voyez plutôt :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Animation de la direction" src="./images/uploaded/tuto-arduino-602-un-moteur-qui-a-de-la-tête-le-servomoteur/animation-de-la-direction.gif"/&gt;
 &lt;figcaption&gt;
  Animation de la direction
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Alors, vous allez me dire : "
 &lt;em&gt;
  mais pourquoi on ne met pas un moteur à courant continu avec un bras sur son axe, ce serait plus simple, non ?
 &lt;/em&gt;
 " Eh bien non, car cela ne conviendrait pas. Je vous explique pourquoi. Nous l’avons vu, un moteur à courant continu tourne sans s’arrêter, sauf si on lui coupe l’alimentation. Le problème c’est que, dans notre cas, si on laisse le moteur tourner, il pourrait faire pivoter les roues plus loin que leur angle maximal et casser le système de guidage car il ne saura pas quand il faut s’arrêter (à savoir, quand les roues sont arrivées à leur angle maximal).
Bon, on pourrait très bien faire un système qui coupe l’alimentation quand les roues arrivent sur leur butée. En plus, les moteurs à courant continu sont de bien piètres athlètes, il leur faudrait nécessairement un réducteur pour arriver à avoir une vitesse faible et un couple plus élevé. Mais pourquoi s’embêter avec ça plutôt que d’utiliser quelque chose de déjà tout prêt ? C’est le servomoteur qui va faire tout ça ! Pour être précis, le servomoteur est commandé de telle sorte qu’au lieu de donner une vitesse de rotation de son axe, il donne une position angulaire de l’arbre relié à son axe. Donc, on lui demande de faire tourner son axe de 10° vers la gauche et il s’exécute !
&lt;/p&gt;
&lt;h4 id="composition-dun-servomoteur"&gt;
 &lt;a aria-hidden="true" href="#composition-dun-servomoteur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Composition d’un servomoteur
&lt;/h4&gt;
&lt;p&gt;
 Les servomoteurs ont donc l’avantage d’être
 &lt;em&gt;
  asservis
 &lt;/em&gt;
 en
 &lt;strong&gt;
  position angulaire
 &lt;/strong&gt;
 . Cela signifie, je vous l’expliquais, que l’axe de sortie du servomoteur respectera une consigne d’orientation que vous lui envoyez en son entrée. En plus, tenez-vous bien, si par malheur les roues venaient à changer d’orientation en passant sur un caillou par exemple, l’électronique interne du servomoteur essaiera tant bien que mal de conserver cette position ! Et quelle que soit la force que l’on exerce sur le bras du servomoteur, il essayera de toujours garder le même angle (dans les limites du raisonnable évidemment). En quelque sorte vous ne pilotez pas directement le moteur, mais plutôt
 &lt;strong&gt;
  vous imposez le résultat que vous voulez avoir en sortie
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;h5 id="apparence"&gt;
 &lt;a aria-hidden="true" href="#apparence"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Apparence
&lt;/h5&gt;
&lt;p&gt;
 On en trouve de toutes les tailles et de toutes les puissances. La plupart du temps la sortie peut se positionner entre 0 et 180°. Cela dit, il en existe également dont la sortie peut se débattre sur seulement 90° et d’autres, ayant un plus grand débattement, sur 360°. Ceux qui ont la possibilité de faire plusieurs tours sont souvent appelés
 &lt;strong&gt;
  servo-treuils
 &lt;/strong&gt;
 . Enfin, les derniers, qui peuvent faire tourner leur axe sans jamais se buter, sont appelés
 &lt;strong&gt;
  servomoteurs à rotation continue
 &lt;/strong&gt;
 . Les servomoteurs sont très fréquemment employés dans les applications de modélisme pour piloter le safran d’un bateau, le gouvernail d’un avion ou bien même les roues d’une voiture téléguidée dont on a parlé jusqu’à présent. Maintenant que les présentations sont faites, mettons-le à nu ! Il est composé de plusieurs éléments visibles … :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Les fils, qui sont au nombre de trois (nous y reviendrons)
 &lt;/li&gt;
 &lt;li&gt;
  L’axe de rotation sur lequel est monté un accessoire en plastique ou en métal
 &lt;/li&gt;
 &lt;li&gt;
  Le boitier qui le protège
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 … mais aussi de plusieurs éléments que l’on ne voit pas :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  un moteur à courant continu
 &lt;/li&gt;
 &lt;li&gt;
  des engrenages pour former un réducteur (en plastique ou en métal)
 &lt;/li&gt;
 &lt;li&gt;
  un capteur de position de l’angle d’orientation de l’axe (un potentiomètre bien souvent)
 &lt;/li&gt;
 &lt;li&gt;
  une carte électronique pour le contrôle de la position de l’axe et le pilotage du moteur à courant continu
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Voilà une image 3D (extraite du
 &lt;a href="http://ericaeromodelisme974.unblog.fr/2011/06/04/le-servomoteur/"&gt;
  site internet suivant
 &lt;/a&gt;
 ) de vue de l’extérieur et de l’intérieur d’un servomoteur :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Vue interne d'un servomoteur (sans l'électronique de commande)" src="./images/uploaded/tuto-arduino-602-un-moteur-qui-a-de-la-tête-le-servomoteur/vue-interne-dun-servomoteur-sans-lelectronique-de-commande.jpg"/&gt;
 &lt;figcaption&gt;
  Vue interne d'un servomoteur (sans l'électronique de commande)
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 (
 &lt;a href="http://ericaeromodelisme974.unblog.fr/2011/06/04/le-servomoteur/"&gt;
  Source de l’image
 &lt;/a&gt;
 )
&lt;/p&gt;
&lt;h5 id="connectique"&gt;
 &lt;a aria-hidden="true" href="#connectique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Connectique
&lt;/h5&gt;
&lt;p&gt;
 Le servomoteur a besoin de trois fils de connexion pour fonctionner. Deux fils servent à son alimentation, le dernier étant celui qui reçoit le signal de commande :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  rouge : pour l’alimentation positive (4.5V à 6V en général)
 &lt;/li&gt;
 &lt;li&gt;
  noir ou marron : pour la masse (0V)
 &lt;/li&gt;
 &lt;li&gt;
  orange, jaune, blanc, … : entrée du signal de commande
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Nous verrons tout à l’heure ce que nous devons entrer sur le dernier fil.
&lt;/p&gt;
&lt;h5 id="la-mécanique"&gt;
 &lt;a aria-hidden="true" href="#la-mécanique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La mécanique
&lt;/h5&gt;
&lt;p&gt;
 Comme on le voit dans l’image précédente, le servomoteur possède plusieurs pignons (engrenages) en sortie du petit moteur CC. Cet ensemble est ce qui constitue le
 &lt;strong&gt;
  réducteur
 &lt;/strong&gt;
 . Ce réducteur fait deux choses : d’une part il réduit la vitesse de rotation en sortie de l’axe du servomoteur (et non du moteur CC), d’autre part il permet d’augmenter le couple en sortie du servomoteur (là encore non en sortie du moteur CC). Alors, à quoi ça sert de réduire la vitesse et d’augmenter le couple ? Eh bien les moteurs CC se débrouillent très bien pour tourner très vite, mais lorsqu’ils font une si petite taille ils sont bien moins bons pour fournir du couple. On va donc utiliser ce réducteur qui va réduire la vitesse, car nous n’avons pas besoin d’avoir une vitesse trop élevée, et augmenter le couple pour ainsi pouvoir déplacer une charge plus lourde. Ceci est prouvé par la formule que je vous ai donnée dans le chapitre précédent :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        R
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mfrac&gt;
        &lt;mrow&gt;
         &lt;msub&gt;
          &lt;mi&gt;
           ω
          &lt;/mi&gt;
          &lt;mrow&gt;
           &lt;mi&gt;
            e
           &lt;/mi&gt;
           &lt;mi&gt;
            n
           &lt;/mi&gt;
           &lt;mi&gt;
            t
           &lt;/mi&gt;
           &lt;mi&gt;
            r
           &lt;/mi&gt;
           &lt;mi&gt;
            e
           &lt;/mi&gt;
           &lt;mi&gt;
            e
           &lt;/mi&gt;
          &lt;/mrow&gt;
         &lt;/msub&gt;
        &lt;/mrow&gt;
        &lt;mrow&gt;
         &lt;msub&gt;
          &lt;mi&gt;
           ω
          &lt;/mi&gt;
          &lt;mrow&gt;
           &lt;mi&gt;
            s
           &lt;/mi&gt;
           &lt;mi&gt;
            o
           &lt;/mi&gt;
           &lt;mi&gt;
            r
           &lt;/mi&gt;
           &lt;mi&gt;
            t
           &lt;/mi&gt;
           &lt;mi&gt;
            i
           &lt;/mi&gt;
           &lt;mi&gt;
            e
           &lt;/mi&gt;
          &lt;/mrow&gt;
         &lt;/msub&gt;
        &lt;/mrow&gt;
       &lt;/mfrac&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mfrac&gt;
        &lt;mrow&gt;
         &lt;msub&gt;
          &lt;mi&gt;
           C
          &lt;/mi&gt;
          &lt;mrow&gt;
           &lt;mi&gt;
            s
           &lt;/mi&gt;
           &lt;mi&gt;
            o
           &lt;/mi&gt;
           &lt;mi&gt;
            r
           &lt;/mi&gt;
           &lt;mi&gt;
            t
           &lt;/mi&gt;
           &lt;mi&gt;
            i
           &lt;/mi&gt;
           &lt;mi&gt;
            e
           &lt;/mi&gt;
          &lt;/mrow&gt;
         &lt;/msub&gt;
        &lt;/mrow&gt;
        &lt;mrow&gt;
         &lt;msub&gt;
          &lt;mi&gt;
           C
          &lt;/mi&gt;
          &lt;mrow&gt;
           &lt;mi&gt;
            e
           &lt;/mi&gt;
           &lt;mi&gt;
            n
           &lt;/mi&gt;
           &lt;mi&gt;
            t
           &lt;/mi&gt;
           &lt;mi&gt;
            r
           &lt;/mi&gt;
           &lt;mi&gt;
            e
           &lt;/mi&gt;
           &lt;mi&gt;
            e
           &lt;/mi&gt;
          &lt;/mrow&gt;
         &lt;/msub&gt;
        &lt;/mrow&gt;
       &lt;/mfrac&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       R = \frac{\omega_{entree}}{\omega_{sortie}} = \frac{C_{sortie}}{C_{entree}}
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.888431em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1.3335309999999998em;vertical-align:-0.44509999999999994em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.00773em;"&gt;
      R
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mopen nulldelimiter"&gt;
      &lt;/span&gt;
      &lt;span class="mfrac"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.711492em;"&gt;
          &lt;span style="top:-2.655em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight" style="margin-right:0.03588em;"&gt;
               ω
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.3280857142857143em;"&gt;
                  &lt;span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"&gt;
                   &lt;span class="pstrut" style="height:2.5em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size3 size1 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      s
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      o
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
                      r
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      t
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      i
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.143em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.15em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="stretchy" style="height:0.2em;"&gt;
            &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
             &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
             &lt;/path&gt;
            &lt;/svg&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.4101em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight" style="margin-right:0.03588em;"&gt;
               ω
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.29634285714285713em;"&gt;
                  &lt;span style="top:-2.357em;margin-left:-0.03588em;margin-right:0.07142857142857144em;"&gt;
                   &lt;span class="pstrut" style="height:2.5em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size3 size1 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      n
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      t
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
                      r
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.143em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.44509999999999994em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mclose nulldelimiter"&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mopen nulldelimiter"&gt;
      &lt;/span&gt;
      &lt;span class="mfrac"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.888431em;"&gt;
          &lt;span style="top:-2.655em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight" style="margin-right:0.07153em;"&gt;
               C
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.29634285714285713em;"&gt;
                  &lt;span style="top:-2.357em;margin-left:-0.07153em;margin-right:0.07142857142857144em;"&gt;
                   &lt;span class="pstrut" style="height:2.5em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size3 size1 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      n
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      t
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
                      r
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.143em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.15em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="stretchy" style="height:0.2em;"&gt;
            &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
             &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
             &lt;/path&gt;
            &lt;/svg&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.4101em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight" style="margin-right:0.07153em;"&gt;
               C
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.3280857142857143em;"&gt;
                  &lt;span style="top:-2.357em;margin-left:-0.07153em;margin-right:0.07142857142857144em;"&gt;
                   &lt;span class="pstrut" style="height:2.5em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size3 size1 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      s
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      o
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
                      r
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      t
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      i
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.143em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.44509999999999994em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mclose nulldelimiter"&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Le rapport de réduction ® du réducteur définit le couple et la vitesse de sortie (en sortie du réducteur) selon la vitesse et le couple d’entrée (en sortie du moteur CC). Ces données sont souvent transparentes lorsque l’on achète un servomoteur. Dans la quasi-totalité des cas, nous n’avons que la vitesse angulaire (en degré par seconde °/s ), le couple de sortie du servomoteur et le débattement maximal (s’il s’agit d’un servomoteur ayant un débattement de 0 à 90°, 180, 360 ou autre). Et c’est largement suffisant étant donné que c’est que ce qui nous intéresse dans le choix d’un servomoteur. Il y a cependant une unité qui pourra peut-être vous donner quelques doutes ou une certaine incompréhension. Cette caractéristique est celle du couple du servomoteur et a pour unité le
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        k
       &lt;/mi&gt;
       &lt;mi&gt;
        g
       &lt;/mi&gt;
       &lt;mi mathvariant="normal"&gt;
        .
       &lt;/mi&gt;
       &lt;mi&gt;
        c
       &lt;/mi&gt;
       &lt;mi&gt;
        m
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       kg.cm
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.69444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.03148em;"&gt;
      k
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      g
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      .
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      c
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      m
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 (kilogramme-centimètre). Nous allons tout de suite rappeler ce que cela signifie. Avant tout, rappelons la formule suivante :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        C
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mi&gt;
        F
       &lt;/mi&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mi&gt;
        r
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       C = F \times r
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.76666em;vertical-align:-0.08333em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.07153em;"&gt;
      C
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
      F
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
      r
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 qui donne la relation entre le couple
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        C
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       C
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.07153em;"&gt;
      C
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 du servomoteur (en kilogramme mètre),
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        F
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       F
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
      F
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 la force exercée sur le bras du servomoteur (en kilos) et
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        r
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       r
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.43056em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.43056em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
      r
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 la distance (en m) à laquelle s’exerce cette force par rapport à l’axe de rotation du servomoteur. Disséquons dans notre langage la signification de cette formule : le couple © exercé sur un axe est égal à la force (F) appliquée au bout du levier accroché à ce même axe.
&lt;/p&gt;
&lt;p&gt;
 À force identique, plus le levier est long et plus le couple exercé sur cet axe est important. En d’autres termes, si votre servomoteur dispose d’un bras d’un mètre de long (oui c’est très long) eh bien il aura beaucoup plus de difficultés à soulever une charge de, disons 10g, que son homologue qui supporte la même charge avec un bras nettement raccourci à 10 centimètres. Prenons l’exemple d’un servomoteur assez commun, le
 &lt;a href="http://www.gpdealera.com/cgi-bin/wgainf100p.pgm?I=FUTM0031"&gt;
  Futaba s3003
 &lt;/a&gt;
 . Sa documentation nous indique que lorsqu’il est alimenté sous 4.8V (on reviendra dessus plus tard), il peut fournir un couple (
 &lt;em&gt;
  torque
 &lt;/em&gt;
 en anglais) de
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        3
       &lt;/mn&gt;
       &lt;mo separator="true"&gt;
        ,
       &lt;/mo&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mi&gt;
        k
       &lt;/mi&gt;
       &lt;mi&gt;
        g
       &lt;/mi&gt;
       &lt;mi mathvariant="normal"&gt;
        .
       &lt;/mi&gt;
       &lt;mi&gt;
        c
       &lt;/mi&gt;
       &lt;mi&gt;
        m
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       3,2 kg.cm
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.69444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      3
     &lt;/span&gt;
     &lt;span class="mpunct"&gt;
      ,
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.16666666666666666em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.03148em;"&gt;
      k
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      g
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      .
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      c
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      m
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 . C’est à dire, qu’au bout de son bras, s’il fait 1 centimètre, il pourra soulever une charge de 3,2kg. Simple, n’est-ce pas ?
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 Si le bras fait 10 centimètres, vous aurez compris que l’on perd 10 fois la capacité à soulever une masse, on se retrouve alors avec un poids de 320g au maximum (sans compter le poids du bras lui-même, certes négligeable ici, mais parfois non).
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Principe du couple mécanique" src="./images/uploaded/tuto-arduino-602-un-moteur-qui-a-de-la-tête-le-servomoteur/principe-du-couple-mecanique.jpg"/&gt;
 &lt;figcaption&gt;
  Principe du couple mécanique
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Voilà une image qui permet d’illustrer un peu ce que je vous raconte depuis tout à l’heure (ça commençait à être ennuyeux, non ?). Bref. Ici, chaque poids représenté est celui maximum que peut soulever le servomoteur selon la distance à laquelle il est situé. Et ne vous avisez pas de les mettre tous car votre pauvre servo serait bien dans l’incapacité de les soulever en même temps. Et oui, malgré le fait qu’il n’y ait que 320g au bout du bras, le servo voit comme s’il y avait un poids de 3,2kg ! Dans cette situation on aurait trois fois 3,2kg, ce qui ferait un poids total de 9,6kg ! Impossible pour le servo de ne bouger ne serait-ce que d’un millimètre (vous risqueriez fort de le détruire d’ailleurs).
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Bon, d’accord, je comprends, mais et le zéro il y est pas sur ton dessin. Comment je sais quel poids je peux mettre sur l’axe du moteur ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Eh bien tout dépend du diamètre de cet axe. Voilà une question pertinente ! Alors, oui, répondons à la question. Mais avant, vous devriez avoir une idée de la réponse que je vais vous donner. Non ? Ben si, voyons ! Plus on éloigne le poids le l’axe et plus celui-ci diminue, et cela fonctionne dans l’autre sens : plus on le rapproche, plus sa valeur maximale augmente. En théorie, si on se met à 0cm, on pourrait mettre un poids infini. Admettons, plus rigoureusement, que l’on mette le poids à 1mm de l’axe (soit un axe de diamètre 2mm). Le poids que le servo pourrait soulever serait de… 10 fois plus ! Soit 32kg !! En conclusion, on peut admettre la formule suivante qui définit le poids maximal à mettre à la distance voulue :
&lt;/p&gt;
&lt;p&gt;
 &lt;span class="inlineMath inlineMathDouble"&gt;
  &lt;span class="katex-display"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          P
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           m
          &lt;/mi&gt;
          &lt;mi&gt;
           a
          &lt;/mi&gt;
          &lt;mi&gt;
           x
          &lt;/mi&gt;
         &lt;/mrow&gt;
        &lt;/msub&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mfrac&gt;
         &lt;mi&gt;
          C
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           d
          &lt;/mi&gt;
         &lt;/mrow&gt;
        &lt;/mfrac&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        P_{max} = \frac C {d}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:1.36033em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:2.04633em;vertical-align:-0.686em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
        P
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.151392em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight"&gt;
               m
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               a
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               x
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mopen nulldelimiter"&gt;
       &lt;/span&gt;
       &lt;span class="mfrac"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:1.36033em;"&gt;
           &lt;span style="top:-2.314em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord mathit"&gt;
              d
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.15em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="stretchy" style="height:0.2em;"&gt;
             &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
              &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
              &lt;/path&gt;
             &lt;/svg&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.677em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord mathit" style="margin-right:0.07153em;"&gt;
             C
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.686em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       &lt;span class="mclose nulldelimiter"&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 Avec :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          P
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           m
          &lt;/mi&gt;
          &lt;mi&gt;
           a
          &lt;/mi&gt;
          &lt;mi&gt;
           x
          &lt;/mi&gt;
         &lt;/mrow&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        P_{max}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
        P
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.151392em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight"&gt;
               m
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               a
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               x
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  : poids maximal de charge en kilogramme (kg)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         C
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        C
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.07153em;"&gt;
       C
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  : couple du servomoteur, en kilogramme centimètre (kg.cm)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         d
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        d
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.69444em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.69444em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit"&gt;
       d
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  : distance à laquelle le poids est placé en centimètre (cm)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Et si on se concentrait sur le pourquoi du servomoteur, car son objectif principal est avant tout de donner une position angulaire à son bras. Allez, voyons ça tout de suite !
&lt;/p&gt;
&lt;h5 id="lélectronique-dasservissement"&gt;
 &lt;a aria-hidden="true" href="#lélectronique-dasservissement"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’électronique d’asservissement
&lt;/h5&gt;
&lt;p&gt;
 "
 &lt;em&gt;
  Qu’est-ce que l’asservissement ?
 &lt;/em&gt;
 ", vous demandez-vous sans doute en ce moment. Malgré la signification peu intuitive que ce terme porte, il se cache derrière quelque chose de simple à comprendre, mais parfois très compliqué à mettre en œuvre. Heureusement, ce n’est pas le cas pour le servomoteur. Toutefois, nous n’entrerons pas dans le détail et nous nous contenterons de présenter le fonctionnement. L’asservissement n’est ni plus ni moins qu’un moyen de gérer une consigne de régulation selon une commande d’entrée. Euuuh, vous me suivez ?
 &lt;img alt=":euh:" class="smiley" src="./static/smileys/unsure.gif"/&gt;
&lt;/p&gt;
&lt;p&gt;
 Prenons l’exemple du servomoteur : on l’alimente et on lui envoie un signal de commande qui permet de définir à quel angle va se positionner le bras du servomoteur. Ce dernier va s’exécuter. Essayez de forcer sur le bras du servomoteur… vous avez vu ? Quelle que soit la force que vous exercez (dans les limites du raisonnable), le servo va faire en sorte de toujours garder la position de son bras à l’angle voulu. Même si le poids est largement supérieur à ce qu’il peut supporter, il va essayer de remettre le bras dans la position à laquelle il se trouvait (à éviter cependant).
&lt;/p&gt;
&lt;p&gt;
 Ainsi, si vous changez l’angle du bras en forçant dessus, lorsque vous relâcherez le bras, il va immédiatement reprendre sa position initiale (celle définie grâce au signal de commande). Pour pouvoir réaliser le maintien de la position du bras de manière correcte, le servo utilise une
 &lt;strong&gt;
  électronique de commande
 &lt;/strong&gt;
 . On peut la nommer
 &lt;strong&gt;
  électronique d’asservissement
 &lt;/strong&gt;
 , car c’est elle qui va gérer la position du bras du servomoteur. Cette électronique est constituée d’une zone de comparaison qui compare (étonnamment
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 ) la position du bras du servo au signal de commande. Le deuxième élément qui constitue cette électronique, c’est le capteur de position du bras. Ce capteur n’est autre qu’un potentiomètre couplé à l’axe du moteur. La mesure de la tension au point milieu de ce potentiomètre permet d’obtenir une tension image de l’angle d’orientation du bras.
&lt;/p&gt;
&lt;p&gt;
 Cette position est ensuite comparée, je le disais, à la consigne (le signal de commande) qui est transmise au servomoteur. Après une rapide comparaison entre la consigne et valeur réelle de position du bras, le servomoteur (du moins son électronique de commande) va appliquer une correction si le bras n’est pas orienté à l’angle imposé par la consigne.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Synoptique de fonctionnement de l'asservissement du servomoteur" src="./images/uploaded/tuto-arduino-602-un-moteur-qui-a-de-la-tête-le-servomoteur/synoptique-de-fonctionnement-de-lasservissement-du-servomoteur.jpg"/&gt;
 &lt;figcaption&gt;
  Synoptique de fonctionnement de l'asservissement du servomoteur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Afin de garder la position de son bras stable, il est donc important de savoir quelle est la charge maximale applicable sur le bras du servomoteur. En somme, bien vérifier que le poids de la charge que vous comptez mettre sur votre servomoteur ne dépasse pas celui maximal qu’il peut supporter. Avant de passer à la suite, je vous propose de regarder cette superbe vidéo que j’ai trouvée par hasard sur
 &lt;a href="http://trissiti.blogspot.fr/2012/04/servomoteur-pour-robot.html"&gt;
  ce site web
 &lt;/a&gt;
 . Vous allez pouvoir comprendre au mieux le fonctionnement de la mécanique du servomoteur :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/ZZhuD78BLDk" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="text-center"&gt;
 &lt;p&gt;
  (Crédit vidéo : Bartek Sliwinski)
 &lt;/p&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/FK_G13W_0Ww" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Mais au fait, comment est transmise la consigne de commande de position du bras ? On lui dit par la liaison série ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 C’est ce que nous allons voir tout de suite dans la partie suivante. En avant !
&lt;/p&gt;
&lt;h3 id="la-commande-dun-servomoteur"&gt;
 &lt;a aria-hidden="true" href="#la-commande-dun-servomoteur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La commande d’un servomoteur
&lt;/h3&gt;
&lt;p&gt;
 Ce qu’il est intéressant de découvrir à présent, c’est de savoir comment piloter un moteur de ce type. Eh oui, car cela n’a pas beaucoup de ressemblances avec le moteur à courant continu. Il ne va pas être question de pont en H ou autres bizarreries de ce type, non, vous allez voir, ça va être très simple.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Sachez toutefois qu’il existe deux types de servomoteur : ceux qui possèdent une électronique de commande de type analogique, qui sont les plus courants et les moins chers et ceux qui sont asservis par une électronique de commande numérique, très fiables et très performants, mais bien plus onéreux que leurs homologues analogiques. Vous comprendrez pourquoi notre choix s’oriente sur le premier type.
   &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
   De plus, leur contrôle est bien plus simple que les servomoteurs à régulation numérique qui utilisent parfois des protocoles bien particuliers.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="le-signal-de-commande"&gt;
 &lt;a aria-hidden="true" href="#le-signal-de-commande"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le signal de commande
&lt;/h4&gt;
&lt;p&gt;
 La consigne envoyée au servomoteur n’est autre qu’un signal électronique de type PWM. Il dispose cependant de deux caractéristiques indispensables pour que le servo puisse comprendre ce qu’on lui demande. À savoir : une fréquence fixe de valeur 50Hz (comme celle du réseau électrique EDF) et d’une durée d’état HAUT elle aussi fixée à certaines limites. Nous allons étudier l’affaire.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Certains sites de modélisme font état d’un nom pour ce signal : une PPM pour
   &lt;em&gt;
    Pulse Position Modulation
   &lt;/em&gt;
   . J’utiliserais également ce terme de temps en temps, n’en soyez pas surpris !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="la-fréquence-fixe"&gt;
 &lt;a aria-hidden="true" href="#la-fréquence-fixe"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La fréquence fixe
&lt;/h5&gt;
&lt;p&gt;
 Le signal que nous allons devoir générer doit avoir une fréquence de 50 Hz. Autrement dit, le temps séparant deux fronts montants est de 20 ms. Je rappelle la formule qui donne la relation entre la fréquence (F) et le temps de la période du signal (T) :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        F
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mfrac&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
        &lt;mi&gt;
         T
        &lt;/mi&gt;
       &lt;/mfrac&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       F = \frac 1 T
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.845108em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
      F
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mopen nulldelimiter"&gt;
      &lt;/span&gt;
      &lt;span class="mfrac"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.845108em;"&gt;
          &lt;span style="top:-2.6550000000000002em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mathit mtight" style="margin-right:0.13889em;"&gt;
             T
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.15em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="stretchy" style="height:0.2em;"&gt;
            &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
             &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
             &lt;/path&gt;
            &lt;/svg&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.394em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             1
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.345em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mclose nulldelimiter"&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Signal de fréquence 50 Hz" src="./images/uploaded/tuto-arduino-602-un-moteur-qui-a-de-la-tête-le-servomoteur/signal-de-frequence-50-hz.png"/&gt;
 &lt;figcaption&gt;
  Signal de fréquence 50 Hz
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Malheureusement ,la fonction analogWrite() de Arduino ne possède pas une fréquence de 50Hz, mais dix fois plus élevée, de 500Hz environ. On ne pourra donc pas utiliser cette fonction.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Haaaaaaaaaa ! Mais comment on va faire !!!
   &lt;img alt=":'(" class="smiley" src="./static/smileys/pleure.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Ola, ne vous affolez pas ! Il existe une alternative, ne vous pressez pas, on va voir ça dans un moment.
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
&lt;/p&gt;
&lt;h5 id="la-durée-de-létat-haut"&gt;
 &lt;a aria-hidden="true" href="#la-durée-de-létat-haut"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La durée de l’état HAUT
&lt;/h5&gt;
&lt;p&gt;
 Pourquoi est-ce si important ? Qu’avons-nous à savoir sur la durée de l’état HAUT du signal PWM ? À quoi cela sert-il, finalement ? Eh bien ces questions trouvent leurs réponses dans ce qui va suivre, alors tendez bien l’oreille et ne perdez pas une miette de ce que je vais vous expliquer.
 &lt;sub&gt;
  (Eh ! Entre nous, c’est pas mal cette petite intro, non ? Elle captive votre attention tout en faisant durer le suspense. Perso j’aime bien, pas vous ? Bon, je continue.
  &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
  )
 &lt;/sub&gt;
 Cette durée, chers petits zéros, est ce qui compose l’essentiel du signal. Car c’est selon elle que le servomoteur va savoir comment positionner son bras à un angle précis. Vous connaissez comment fonctionne un signal PWM, qui sert également à piloter la vitesse d’un moteur à courant continu. Eh bien, pour le servomoteur, c’est quelque peu semblable.
En fait, un signal ayant une durée d’état HAUT très faible donnera un angle à 0°, le même signal avec une durée d’état HAUT plus grande donnera un angle au maximum de ce que peut admettre le servomoteur. Mais, soyons rigoureux ! Précisément, je vous parlais de valeurs limites pour cet état HAUT et ce n’est pas pour rien, car ce dernier est limité entre une valeur de
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mi&gt;
        m
       &lt;/mi&gt;
       &lt;mi&gt;
        s
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       1ms
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.64444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.64444em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      m
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      s
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 au minimum et au maximum de
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mi&gt;
        m
       &lt;/mi&gt;
       &lt;mi&gt;
        s
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       2ms
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.64444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.64444em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      m
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      s
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 (ce sont bien des millisecondes puisque l’on parle de durée en temps) pour les servos standards. Comme un schéma vaut mieux qu’un long discours :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Position en fonction de la pulsation" src="./images/uploaded/tuto-arduino-602-un-moteur-qui-a-de-la-tête-le-servomoteur/position-en-fonction-de-la-pulsation.jpg"/&gt;
 &lt;figcaption&gt;
  Position en fonction de la pulsation
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Vous aurez deviné, à travers cette illustration, que la durée de l’état HAUT fixe la position du bras du servomoteur à un angle déterminé.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Et comment je fais si je veux que mon servomoteur fasse un angle de 45° ? Ça ne marche pas ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Si, bien sûr. En fait, il va falloir faire jouer le temps de l’état HAUT. Pour un angle de 45°, il va être compris entre 1ms et 1,5ms. À 1,25ms précisément. Après, c’est un rapport qui utilise une relation très simple, le calcul ne vous posera donc aucun problème. Tous les angles compris dans la limite de débattement du bras du servomoteur sont possibles et configurables grâce à ce fameux état HAUT.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Et si mon servomoteur n’a pas l’angle 0° pour origine, mais 90°, comment on fait ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 C’est pareil ! Disons que 90° est l’origine, donc on peut dire qu’il est à l’angle 0°, ce qui lui donne un débattement de -90° à +90° :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Position en fonction de la pulsation avec décalage" src="./images/uploaded/tuto-arduino-602-un-moteur-qui-a-de-la-tête-le-servomoteur/position-en-fonction-de-la-pulsation-avec-decalage.jpg"/&gt;
 &lt;figcaption&gt;
  Position en fonction de la pulsation avec décalage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Et dans le cas où le servo peut faire un tour complet (donc 360°), c’est aussi la même chose. En fait c’est toujours pareil, quel que soit le débattement du moteur. En revanche, c’est légèrement différent pour les servomoteurs à rotation continue. Le signal ayant un état HAUT de 1ms donnera l’ordre "vitesse maximale dans un sens", la même ayant 2ms sera l’ordre pour "vitesse maximale dans l’autre sens" et 1.5ms sera la consigne pour "moteur arrêté". Entre chaque temps (par exemple entre 1ms et 1,5ms), le moteur tournera à une vitesse proportionnelle à la durée de l’état HAUT. On peut donc commander la vitesse de rotation du servo.
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/CHHO5r0DAdA" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="arduino-et-les-servomoteurs"&gt;
 &lt;a aria-hidden="true" href="#arduino-et-les-servomoteurs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Arduino et les servomoteurs
&lt;/h3&gt;
&lt;p&gt;
 Bon, eh bien à présent, voyons un peu comment utiliser ces moteurs dont je vous vente les intérêts depuis tout à l’heure. Vous allez le voir, et ça ne vous surprendra même plus, la facilité d’utilisation est encore améliorée grâce à une bibliothèque intégrée à l’environnement Arduino. Ils nous mâchent vraiment tout le travail ces développeurs !
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
&lt;/p&gt;
&lt;h4 id="câblage"&gt;
 &lt;a aria-hidden="true" href="#câblage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Câblage
&lt;/h4&gt;
&lt;p&gt;
 Nous l’avons vu plus haut, la connectique d’un servomoteur se résume à trois fils : deux pour l’alimentation positive et la masse et le dernier pour le signal de commande. Rappelons qu’un servomoteur accepte généralement une plage d’alimentation comprise entre 4.5V et 6V (à 6V il aura plus de couple et sera un peu plus rapide qu’à 4.5V). Si vous n’avez besoin d’utiliser qu’un ou deux servomoteurs, vous pouvez les brancher sur la sortie 5V de la carte Arduino. Si vous voulez en utiliser plus, il serait bon d’envisager une alimentation externe car le régulateur de l’Arduino n’est pas fait pour délivrer trop de courant, vous risqueriez de le cramer. Dans ce cas, n’oubliez pas de relier la masse de l’alimentation externe et celle de l’Arduino afin de garder un référentiel électrique commun. Le câble permettant le transit du signal de commande du servo peut-être branché sur n’importe quelle broche de l’Arduino. Sachez cependant que lorsque nous utiliserons ces derniers, les sorties 9 et 10 ne pourront plus fournir un signal PWM (elles pourront cependant être utilisées comme de simples entrées/sorties numériques). C’est une des contraintes de la bibliothèque que nous allons utiliser.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ces dernières contraintes s’appliquent différemment sur les cartes MEGA.
   &lt;a href="http://arduino.cc/en/Reference/Servo"&gt;
    Cette page
   &lt;/a&gt;
   vous dira tout !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voici maintenant un petit exemple de montage d’un servo sur l’Arduino :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Montage simple d'un servomoteur avec l'Arduino" src="./images/uploaded/tuto-arduino-602-un-moteur-qui-a-de-la-tête-le-servomoteur/montage-simple-dun-servomoteur-avec-larduino.png"/&gt;
 &lt;figcaption&gt;
  Montage simple d'un servomoteur avec l'Arduino
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="la-librairie-servo"&gt;
 &lt;a aria-hidden="true" href="#la-librairie-servo"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La librairie
 &lt;em&gt;
  Servo
 &lt;/em&gt;
&lt;/h4&gt;
&lt;p&gt;
 Pour utiliser le servo avec Arduino, il va nous falloir générer le signal PPM vu précédemment. C’est-à-dire créer un signal d’une fréquence de 50Hz et modifier l’état haut d’une durée comprise entre 1 et 2ms. Contraignant n’est-ce pas ? Surtout si l’on a plusieurs servos et tout un programme à gérer derrière… C’est pourquoi l’équipe d’Arduino a été sympa en implémentant une classe très bien nommée : Servo. Tout comme l’objet Serial vous permettait de faire abstraction du protocole de la voie série, l’objet Servo va vous permettre d’utiliser les servomoteurs. Et comme elle est développée par une équipe de personnes compétentes, on peut leur faire totalement confiance pour qu’elle soit optimisée et sans bugs !
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 Voyons maintenant comme s’en servir !
&lt;/p&gt;
&lt;h5 id="préparer-le-terrain"&gt;
 &lt;a aria-hidden="true" href="#préparer-le-terrain"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Préparer le terrain
&lt;/h5&gt;
&lt;p&gt;
 Tout d’abord, il nous faut inclure la librairie dans notre sketch. Pour cela, vous pouvez au choix écrire vous même au début du code
 &lt;code&gt;
  #include &amp;lt;Servo.h&amp;gt;
 &lt;/code&gt;
 ou alors cliquer sur
 &lt;em&gt;
  library
 &lt;/em&gt;
 dans la barre de menu puis sur "Servo" pour que s’écrive automatiquement et sans faute la ligne précédente. Ensuite, il vous faudra créer un objet de type Servo pour chaque servomoteur que vous allez utiliser. Nous allons ici n’en créer qu’un seul que j’appellerai "monServo" de la manière suivante :
 &lt;code&gt;
  Servo monServo;
 &lt;/code&gt;
 . Nous devons lui indiquer la broche sur laquelle est connecté le fil de commande du servo en utilisant la fonction
 &lt;code&gt;
  attach()
 &lt;/code&gt;
 de l’objet Servo créé. Cette fonction prend 3 arguments :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Le numéro de la broche sur laquelle est relié le fil de signal
 &lt;/li&gt;
 &lt;li&gt;
  La valeur basse (angle à 0°) de la durée de l’état haut du signal de PPM en microsecondes (optionnel, défaut à 544 µs)
 &lt;/li&gt;
 &lt;li&gt;
  La valeur haute (angle à 90°, 180°, 360°, etc.) de la durée de l’état haut du signal de PPM en microsecondes (optionnel, défaut à 2400 µs)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Par exemple, si mon servo possède comme caractéristique des durées de 1ms pour 0° et 2ms pour 180° et que je l’ai branché sur la broche 2, j’obtiendrais le code suivant :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;Servo.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

Servo monServo;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    monServo.attach(&lt;span class="hljs-number"&gt;2&lt;/span&gt;, &lt;span class="hljs-number"&gt;1000&lt;/span&gt;, &lt;span class="hljs-number"&gt;2000&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Initialisation d’un servo moteur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="utiliser-le-servo"&gt;
 &lt;a aria-hidden="true" href="#utiliser-le-servo"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utiliser le servo
&lt;/h5&gt;
&lt;p&gt;
 Une fois ces quelques étapes terminées, notre servo est fin prêt à être mis en route. Nous allons donc lui donner une consigne d’angle à laquelle il doit s’exécuter. Pour cela, nous allons utiliser la fonction prévue à cet effet :
 &lt;code&gt;
  write()
 &lt;/code&gt;
 . Tiens, c’est la même que lorsque l’on utilisait la liaison série ! Eh oui.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 Comme son nom l’indique, elle va
 &lt;em&gt;
  écrire
 &lt;/em&gt;
 quelque chose au servo. Ce quelque chose est l’angle qu’il doit donner à son axe. Cette fonction prend pour argument un nombre, de type
 &lt;code&gt;
  int
 &lt;/code&gt;
 , qui donne la valeur en degré de l’angle à suivre. Si par exemple je veux placer le bras du servo à mi-chemin entre 0 et 180°, j’écrirais :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;monServo.write(&lt;span class="hljs-number"&gt;90&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Pour terminer, voilà le code complet qui vous permettra de mettre l’angle du bras de votre servomoteur à 90° :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;Servo.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

Servo monServo;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    monServo.attach(&lt;span class="hljs-number"&gt;2&lt;/span&gt;, &lt;span class="hljs-number"&gt;1000&lt;/span&gt;, &lt;span class="hljs-number"&gt;2000&lt;/span&gt;);
    monServo.write(&lt;span class="hljs-number"&gt;90&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Initialisation et déplacement d’un servo
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 J’ai mis l’ordre de l’angle dans la fonction setup() mais j’aurais tout autant pu la mettre dans la loop(). En effet, lorsque vous utilisez write(), la valeur est enregistrée par Arduino et est ensuite envoyée 50 fois par seconde (rappelez-vous du 50Hz du signal
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 ) au servo moteur afin qu’il garde toujours la position demandée.
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/niSwSkGhrzI" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="lélectronique-dasservissement-1"&gt;
 &lt;a aria-hidden="true" href="#lélectronique-dasservissement-1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’électronique d’asservissement
&lt;/h3&gt;
&lt;p&gt;
 Je le disais donc, on va voir un peu comment se profile le fonctionnement de l’électronique interne des servomoteurs analogiques. Je précise bien
 &lt;em&gt;
  analogiques
 &lt;/em&gt;
 car je rappelle qu’il y a aussi des servomoteurs numériques, beaucoup plus complexes au niveau de l’électronique.
&lt;/p&gt;
&lt;h4 id="principe-de-fonctionnement"&gt;
 &lt;a aria-hidden="true" href="#principe-de-fonctionnement"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Principe de fonctionnement
&lt;/h4&gt;
&lt;p&gt;
 Commençons par un simple synoptique de fonctionnement. Référez-vous à la vidéo et aux explications que je vous ai données jusqu’à présent pour comprendre ce synoptique :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Principe de fonctionnement de l'électronique de commande d'un servomoteur" src="./images/uploaded/tuto-arduino-602-un-moteur-qui-a-de-la-tête-le-servomoteur/principe-de-fonctionnement-de-lelectronique-de-commande-dun-servomoteur.jpg"/&gt;
 &lt;figcaption&gt;
  Principe de fonctionnement de l'électronique de commande d'un servomoteur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Rapidement : la consigne donnée par l’utilisateur (dans notre cas, il va s’agir du signal envoyé par la carte Arduino) est comparée par rapport à la position réelle de l’axe du moteur. Ainsi, s’il y a une différence d’angle entre la consigne et l’angle mesuré par le capteur (le potentiomètre qui est fixé sur l’axe du servomoteur) eh bien le comparateur va commander le moteur et le faire tourner jusqu’à ce que cette différence s’annule.
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Avant d’aller plus loin, il faut savoir que les servomoteurs analogiques du commerce emploient en fait, dans leur électronique de commande, un microcontrôleur. Je ne vais donc pas vous expliquer comment ceux-là fonctionnent, mais je vais prendre le montage le plus basique qui soit. D’ailleurs, à l’issue de mes explications, vous serez capable de mettre en œuvre le montage que je vais donner et créer votre propre servomoteur avec un moteur CC anodin.
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="Électronique-à-consigne-manuelle"&gt;
 &lt;a aria-hidden="true" href="#Électronique-à-consigne-manuelle"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Électronique à consigne manuelle
&lt;/h4&gt;
&lt;p&gt;
 On va commencer par un montage dont la simplicité est extrême, mais dont vous ne connaissez pas encore le fonctionnement d’un composant essentiel : le
 &lt;strong&gt;
  comparateur
 &lt;/strong&gt;
 . Allez, c’est parti pour un bon petit cours d’électronique pure !
 &lt;img alt=":euh:" class="smiley" src="./static/smileys/unsure.gif"/&gt;
 Alors, déjà, pourquoi "manuelle" ? Simplement parce que la consigne envoyée à l’électronique de commande est une tension continue et qu’elle sera réglable par un potentiomètre. En gros vous aurez simplement à faire tourner l’axe d’un potentiomètre pour régler l’angle du bras du servomoteur.
&lt;/p&gt;
&lt;h5 id="synoptique-de-lélectronique-interne"&gt;
 &lt;a aria-hidden="true" href="#synoptique-de-lélectronique-interne"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Synoptique de l’électronique interne
&lt;/h5&gt;
&lt;p&gt;
 Commençons par un synoptique qui établit le fonctionnement de l’électronique de contrôle :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Fonctionnement de l'électronique de contrôle" src="./images/uploaded/tuto-arduino-602-un-moteur-qui-a-de-la-tête-le-servomoteur/fonctionnement-de-lelectronique-de-controle.jpg"/&gt;
 &lt;figcaption&gt;
  Fonctionnement de l'électronique de contrôle
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Il y a donc en entrée les deux paramètres : la consigne et l’angle réel de l’axe du moteur; Et en sortie, la tension qui va commander le moteur. On l’a vu, un moteur à courant continu doit être commandé par une tension continue, si cette tension est positive, le moteur tournera dans un sens, si elle est négative, le moteur tournera dans l’autre sens. C’est pourquoi le comparateur délivrera une tension positive ou négative selon la correction d’angle à effectuer.
&lt;/p&gt;
&lt;h5 id="schéma-de-principe"&gt;
 &lt;a aria-hidden="true" href="#schéma-de-principe"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Schéma de principe
&lt;/h5&gt;
&lt;p&gt;
 À présent, voici le schéma de principe qui a pour fonctionnement celui expliqué par le synoptique précédent :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Schéma de principe" src="./images/uploaded/tuto-arduino-602-un-moteur-qui-a-de-la-tête-le-servomoteur/schema-de-principe.jpg"/&gt;
 &lt;figcaption&gt;
  Schéma de principe
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 De gauche à droite on a : les alimentations qui fournissent la tension positive et négative ; les potentiomètres P1 et P2 ; le comparateur (oui c’est ce gros triangle avec un plus et un moins) : enfin le moteur à courant continu.
&lt;/p&gt;
&lt;h5 id="fonctionnement-du-comparateur"&gt;
 &lt;a aria-hidden="true" href="#fonctionnement-du-comparateur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Fonctionnement du comparateur
&lt;/h5&gt;
&lt;p&gt;
 Un comparateur est un composant électronique de la famille des circuits intégrés car, il contient en vérité d’autres composants, essentiellement des semi-conducteurs (diodes, transistors) et des résistances.
 &lt;strong&gt;
  Ce composant a toujours besoin d’une alimentation externe pour fonctionner, c’est-à-dire qu’on ne peut lui mettre des signaux à son entrée que s’il est alimenté.
 &lt;/strong&gt;
 Autrement, il pourrait être endommagé (ce n’est pas souvent le cas, mais mieux vaut être prudent). Vous le constatez par vous-même, le comparateur est un composant qui possède deux entrées et une sortie. Et, de la manière la plus simple qui soit, en fait il n’y a rien de plus simple qui puisse exister, son fonctionnement réside sur le principe suivant :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Si la tension (je me base par rapport au schéma)
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        V1
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       1
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  qui arrive sur l’entrée
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         E
        &lt;/mi&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        E1
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
       E
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       1
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  du comparateur est supérieure à la tension
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        V2
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  qui entre sur l’entrée
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         E
        &lt;/mi&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        E2
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
       E
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  du comparateur, alors la tension en sortie
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         S
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        S
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
       S
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  du comparateur est égale à
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mo&gt;
         +
        &lt;/mo&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
        &lt;mi&gt;
         c
        &lt;/mi&gt;
        &lt;mi&gt;
         c
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        +Vcc
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.76666em;vertical-align:-0.08333em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       +
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       c
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       c
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  (l’alimentation du comparateur).
 &lt;/li&gt;
 &lt;li&gt;
  Tandis que dans le cas opposé où la tension
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        V2
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  va être supérieure à
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        V1
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       1
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  , la sortie
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         S
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        S
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
       S
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  du comparateur aura une tension égale à
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mo&gt;
         −
        &lt;/mo&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
        &lt;mi&gt;
         c
        &lt;/mi&gt;
        &lt;mi&gt;
         c
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        -Vcc
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.76666em;vertical-align:-0.08333em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       −
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       c
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       c
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  .
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 En transposant mes dires sous une forme mathématique, cela donnerait ceci :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Si
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
        &lt;mo&gt;
         &amp;gt;
        &lt;/mo&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        V1 &amp;gt; V2
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.72243em;vertical-align:-0.0391em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       1
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       &amp;gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  , alors
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
        &lt;mi&gt;
         s
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mo&gt;
         +
        &lt;/mo&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
        &lt;mi&gt;
         c
        &lt;/mi&gt;
        &lt;mi&gt;
         c
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        Vs = +Vcc
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.76666em;vertical-align:-0.08333em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       s
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       +
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       c
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       c
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Si
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
        &lt;mo&gt;
         &amp;lt;
        &lt;/mo&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        V1 &amp;lt; V2
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.72243em;vertical-align:-0.0391em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       1
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       &amp;lt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  , alors
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
        &lt;mi&gt;
         s
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mo&gt;
         −
        &lt;/mo&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
        &lt;mi&gt;
         c
        &lt;/mi&gt;
        &lt;mi&gt;
         c
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        Vs = -Vcc
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.76666em;vertical-align:-0.08333em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       s
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       −
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       c
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       c
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Comment s’en rappeler ? Eh bien grâce aux petits symboles "+" et "-" présents dans le triangle représentant le comparateur. La sortie du comparateur prendra +Vcc si la tension sur l’entrée "+" du comparateur est supérieure à celle sur l’entrée "-" et inversement. Voyez, j’vous z’avais dit que c’était ultra simple.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 Il y a encore quelque chose à savoir : il est impossible que les tensions V1 et V2 soient égales ! Oui, car le comparateur ne peut pas fournir une tension positive ET une tension négative en sa sortie, c’est pourquoi, même si vous reliez E1 et E2 avec un fil, la tension en sortie du comparateur sera toujours OU +Vcc OU -Vcc.
&lt;/p&gt;
&lt;h4 id="Électronique-à-consigne-pwm"&gt;
 &lt;a aria-hidden="true" href="#Électronique-à-consigne-pwm"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Électronique à consigne PWM
&lt;/h4&gt;
&lt;h5 id="synoptique-de-principe"&gt;
 &lt;a aria-hidden="true" href="#synoptique-de-principe"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Synoptique de principe
&lt;/h5&gt;
&lt;p&gt;
 Prenons l’exemple d’un servomoteur qui utilise une PWM, oui j’ai bien dit… euh écrit
 &lt;strong&gt;
  PWM
 &lt;/strong&gt;
 . Je prends cet exemple fictif car comme je le disais il y a quelques instants, c’est bien souvent un microcontrôleur qui gère l’asservissement du servomoteur. Et puis, avec l’exemple que je vais vous donner, vous pourrez vous-même créer un servomoteur.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 En fait, on ne peut pas utiliser directement ce signal PWM avec le schéma précédent. Il va falloir que l’on fasse une extraction de la composante continue de ce signal pour obtenir une consigne dont la tension varie et non la durée de l’état HAUT du signal. Et ceci, nous l’avons déjà vu dans
 &lt;a href="https:// zestedesavoir.com/tutoriels/537/arduino-premiers-pas-en-informatique-embarquee/745/les-grandeurs-analogiques/3432/et-les-sorties-analogiques-enfin-presque/#2-la-pwm-de-larduino"&gt;
  un chapitre dédié à la PWM
 &lt;/a&gt;
 justement. Le synoptique ne change guère, il y a simplement ajout de ce montage intermédiaire qui va extraire cette tension continue du signal :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Principe d'extraction de la tension continue du signal" src="./images/uploaded/tuto-arduino-602-un-moteur-qui-a-de-la-tête-le-servomoteur/principe-dextraction-de-la-tension-continue-du-signal.jpg"/&gt;
 &lt;figcaption&gt;
  Principe d'extraction de la tension continue du signal
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Le schéma électrique ne change pas non plus de beaucoup, on retire le potentiomètre qui permettait de régler la consigne manuellement en le remplaçant par le montage qui fait l’extraction de la composante continue:
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Montage d'extraction de la tension continue du signal" src="./images/uploaded/tuto-arduino-602-un-moteur-qui-a-de-la-tête-le-servomoteur/montage-dextraction-de-la-tension-continue-du-signal.jpg"/&gt;
 &lt;figcaption&gt;
  Montage d'extraction de la tension continue du signal
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 À la place du potentiomètre de commande manuelle on retrouve un couple résistance/condensateur avec
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        R
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       R
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.00773em;"&gt;
      R
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 et
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        C
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       C
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.07153em;"&gt;
      C
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 , qui permet d’extraire la tension continue du signal
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
        &lt;mrow&gt;
         &lt;mi&gt;
          P
         &lt;/mi&gt;
         &lt;mi&gt;
          W
         &lt;/mi&gt;
         &lt;mi&gt;
          M
         &lt;/mi&gt;
        &lt;/mrow&gt;
       &lt;/msub&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       V_{PWM}
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.32833099999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mathit mtight" style="margin-right:0.13889em;"&gt;
              P
             &lt;/span&gt;
             &lt;span class="mord mathit mtight" style="margin-right:0.13889em;"&gt;
              W
             &lt;/span&gt;
             &lt;span class="mord mathit mtight" style="margin-right:0.10903em;"&gt;
              M
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 qui est donc un signal de type PWM dont le rapport cyclique varie de 0 à 100%. Et là, tenez-vous bien, on en arrive au point où je voulais vous amener !
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 Que remarquez-vous ? Rien ? Alors je vous le dis : que se passe-t-il si on arrête d’envoyer le signal
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
        &lt;mrow&gt;
         &lt;mi&gt;
          P
         &lt;/mi&gt;
         &lt;mi&gt;
          W
         &lt;/mi&gt;
         &lt;mi&gt;
          M
         &lt;/mi&gt;
        &lt;/mrow&gt;
       &lt;/msub&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       V_{PWM}
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.32833099999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mathit mtight" style="margin-right:0.13889em;"&gt;
              P
             &lt;/span&gt;
             &lt;span class="mord mathit mtight" style="margin-right:0.13889em;"&gt;
              W
             &lt;/span&gt;
             &lt;span class="mord mathit mtight" style="margin-right:0.10903em;"&gt;
              M
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 ? Le moteur garde son bras au même angle ? Ou bien il reprend sa position initiale ? Réponse : il reprend sa position initiale. Eh oui, car la tension continue
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        V
       &lt;/mi&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       V1
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
      V
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 n’existe plus puisqu’elle est créée à partir du signal
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
        &lt;mrow&gt;
         &lt;mi&gt;
          P
         &lt;/mi&gt;
         &lt;mi&gt;
          W
         &lt;/mi&gt;
         &lt;mi&gt;
          M
         &lt;/mi&gt;
        &lt;/mrow&gt;
       &lt;/msub&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       V_{PWM}
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.32833099999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mathit mtight" style="margin-right:0.13889em;"&gt;
              P
             &lt;/span&gt;
             &lt;span class="mord mathit mtight" style="margin-right:0.13889em;"&gt;
              W
             &lt;/span&gt;
             &lt;span class="mord mathit mtight" style="margin-right:0.10903em;"&gt;
              M
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 . Quand il y avait le potentiomètre, la tension
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        V
       &lt;/mi&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       V1
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
      V
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 gardait la même valeur tant que vous ne tourniez pas l’axe du potentiomètre, hors là, si on enlève le signal
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
        &lt;mrow&gt;
         &lt;mi&gt;
          P
         &lt;/mi&gt;
         &lt;mi&gt;
          W
         &lt;/mi&gt;
         &lt;mi&gt;
          M
         &lt;/mi&gt;
        &lt;/mrow&gt;
       &lt;/msub&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       V_{PWM}
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.32833099999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mathit mtight" style="margin-right:0.13889em;"&gt;
              P
             &lt;/span&gt;
             &lt;span class="mord mathit mtight" style="margin-right:0.13889em;"&gt;
              W
             &lt;/span&gt;
             &lt;span class="mord mathit mtight" style="margin-right:0.10903em;"&gt;
              M
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 , eh bien la tension
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        V
       &lt;/mi&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       V1
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
      V
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 perd sa valeur et retombe à 0V. Par conséquent, le moteur redonne à son bras sa position initiale.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Et si je veux que mon servomoteur continue de garder l’angle de la consigne qui lui a été transmise sans que je continue à lui envoyer cette consigne, est-ce possible ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Oui, c’est tout à fait possible. En fait, cela va peut-être paraître un peu "barbare", mais c’est la seule solution envisageable avec les servomoteurs analogiques : il suffit de le positionner à l’angle voulu et de couper son alimentation. L’angle du bras du servomoteur sera alors conservé.
 &lt;strong&gt;
  Mais attention, cet angle ne sera conservé que s’il n’y a pas de contrainte mécanique exercée sur le bras du servo !
 &lt;/strong&gt;
 C’est-à-dire qu’il n’y ait pas un poids accroché à l’axe du moteur, ou alors il faut qu’il soit bien inférieur à la force de maintien de la position du bras du servo lorsque celui-ci n’est plus alimenté.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Et pour l’électronique à consigne PPM alors ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Pour ce type d’électronique de commande (présent dans tous les servos du commerce), je vous l’ai dit : il y a utilisation d’un microcontrôleur. Donc tout se fait par un programme qui scrute la position réelle du bras du moteur par rapport à la consigne PPM qu’il reçoit. Je n’ai donc rien d’intéressant à vous raconter.
 &lt;img alt=":-°" class="smiley" src="./static/smileys/siffle.png"/&gt;
&lt;/p&gt;
&lt;h3 id="un-peu-dexercice"&gt;
 &lt;a aria-hidden="true" href="#un-peu-dexercice"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un peu d’exercice !
&lt;/h3&gt;
&lt;p&gt;
 Bon allez, il est temps de faire un peu d’entrainement ! Je vous laisse découvrir le sujet…
&lt;/p&gt;
&lt;h5 id="consigne"&gt;
 &lt;a aria-hidden="true" href="#consigne"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Consigne
&lt;/h5&gt;
&lt;p&gt;
 Nous allons utiliser trois éléments dans cet exercice :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  un servomoteur (évidemment)
 &lt;/li&gt;
 &lt;li&gt;
  un potentiomètre (valeur de votre choix)
 &lt;/li&gt;
 &lt;li&gt;
  la liaison série
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="objectif"&gt;
 &lt;a aria-hidden="true" href="#objectif"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Objectif
&lt;/h5&gt;
&lt;p&gt;
 Le servo doit "suivre" le potentiomètre. C’est-à-dire que lorsque vous faites tourner l’axe du potentiomètre, le bras du servomoteur doit tourner à son tour et dans le même sens. Pour ce qui est de l’utilisation de la liaison série, je veux simplement que l’on ait un retour de la valeur donnée par le potentiomètre pour faire une supervision. Je ne vous en dis pas plus, vous savez déjà tout faire. Bon courage et à plus tard !
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/LQtl9KkunVE" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="correction"&gt;
 &lt;a aria-hidden="true" href="#correction"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Correction
&lt;/h4&gt;
&lt;p&gt;
 J’espère que vous avez réussi ! Tout d’abord le schéma, même si je sais que vous avez été capable de faire les branchements par vous-même. C’est toujours bon de l’avoir sous les yeux.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Arduino branché avec un servomoteur et un potentiomètre" src="./images/uploaded/tuto-arduino-602-un-moteur-qui-a-de-la-tête-le-servomoteur/arduino-branche-avec-un-servomoteur-et-un-potentiometre.png"/&gt;
 &lt;figcaption&gt;
  Arduino branché avec un servomoteur et un potentiomètre
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Pour ma part, j’ai branché le servo sur la broche numérique 2 et le potentiomètre sur la broche analogique 0. J’ai donc le code suivant pour préparer l’ensemble :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;Servo.h&amp;gt; // On n'oublie pas d'ajouter la bibliothèque !&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// notre potentiomètre&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; potar = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// création d'un nouveau servomoteur&lt;/span&gt;
Servo monServo;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on déclare l'entrée du servo connectée sur la broche 2&lt;/span&gt;
    monServo.attach(&lt;span class="hljs-number"&gt;2&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// on n'oublie pas de démarrer la liaison série ;-)&lt;/span&gt;
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Voilà qui est fait pour les préparatifs, il n’y a plus qu’à travailler un tout petit peu pour faire la logique du code. Commençons par la lecture analogique que nous allons renvoyer sur le servo ensuite. Le potentiomètre délivre une tension variable de 0 à 5V selon sa position. La carte Arduino, elle, lit une valeur comprise entre 0 et 1023. Ce nombre est stocké au format
 &lt;code&gt;
  int
 &lt;/code&gt;
 . Il faut ensuite que l’on donne à la fonction qui permet d’envoyer la consigne au servo une valeur comprise entre 0 et 180°. On va donc utiliser une fonction dédiée à cela. Cette fonction permet de faire le rapport entre deux gammes de valeurs ayant chacune des extremums différents. Il s’agit de la fonction
 &lt;a href="http://arduino.cc/en/Reference/Map"&gt;
  &lt;code&gt;
   map()
  &lt;/code&gt;
 &lt;/a&gt;
 (nous en avions parlé dans le chapitre sur les lectures analogiques) :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-built_in"&gt;map&lt;/span&gt;(value, fromLow, fromHigh, toLow, toHigh)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Avec pour correspondance :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;strong&gt;
   value
  &lt;/strong&gt;
  : valeur à convertir pour la changer de gamme
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   fromLow
  &lt;/strong&gt;
  : valeur minimale de la gamme à convertir
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   fromHigh
  &lt;/strong&gt;
  : valeur maximale de la gamme à convertir
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   toLow
  &lt;/strong&gt;
  : valeur minimale de la gamme vers laquelle est convertie la valeur initiale
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   toHigh
  &lt;/strong&gt;
  : valeur maximale de la gamme vers laquelle est convertie la valeur initiale
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Nous utiliserons cette fonction de la manière suivante :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-built_in"&gt;map&lt;/span&gt;(valeur_potentiometre, &lt;span class="hljs-number"&gt;0&lt;/span&gt;, &lt;span class="hljs-number"&gt;1023&lt;/span&gt;, &lt;span class="hljs-number"&gt;0&lt;/span&gt;, &lt;span class="hljs-number"&gt;180&lt;/span&gt;) ;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   On aurait pu faire un simple produit en croix, non ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Tout à fait. Mais les programmeurs sont de véritables fainéants et aiment utiliser des outils déjà prêts.
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Cela dit, ils les ont créés. Et pour créer de nouveaux outils, il est plus facile de prendre des outils déjà existants. Mais si vous voulez, on peut recréer la fonction map() par nous-mêmes :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; &lt;span class="hljs-title"&gt;conversion&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; mesure)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; mesure*&lt;span class="hljs-number"&gt;180&lt;/span&gt;/&lt;span class="hljs-number"&gt;1023&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="fonction-loop"&gt;
 &lt;a aria-hidden="true" href="#fonction-loop"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Fonction
 &lt;code&gt;
  loop()
 &lt;/code&gt;
&lt;/h5&gt;
&lt;p&gt;
 Dans la fonction
 &lt;code&gt;
  loop()
 &lt;/code&gt;
 on a donc la récupération et l’envoi de la consigne au servomoteur :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on lit la valeur du potentiomètre&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; val = analogRead(potar);
    &lt;span class="hljs-comment"&gt;// mise à l'échelle de la valeur lue vers la plage [0;180]&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; angle = &lt;span class="hljs-built_in"&gt;map&lt;/span&gt;(val, &lt;span class="hljs-number"&gt;0&lt;/span&gt;, &lt;span class="hljs-number"&gt;1023&lt;/span&gt;, &lt;span class="hljs-number"&gt;0&lt;/span&gt;, &lt;span class="hljs-number"&gt;180&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// on met à jour l'angle sur le servo&lt;/span&gt;
    monServo.write(angle);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Rotation du servo en fonction du potentiomètre
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Avez-vous remarqué que ces trois lignes de code auraient pu être réduites en une seule ?
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Comme ceci :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;monServo.write(&lt;span class="hljs-built_in"&gt;map&lt;/span&gt;(analogRead(potar), &lt;span class="hljs-number"&gt;0&lt;/span&gt;, &lt;span class="hljs-number"&gt;1023&lt;/span&gt;, &lt;span class="hljs-number"&gt;0&lt;/span&gt;, &lt;span class="hljs-number"&gt;180&lt;/span&gt;));
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ou bien la version utilisant le produit en croix :
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on lit la valeur du potentiomètre&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; val = analogRead(potar);
    &lt;span class="hljs-comment"&gt;// on converti la valeur lue en angle compris dans l’interval [0;180]&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; angle = val / &lt;span class="hljs-number"&gt;5.7&lt;/span&gt;;
    &lt;span class="hljs-comment"&gt;// 5,7 provient de la division de 1023/180&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// pour la mise à l'échelle de la valeur lue&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;// on met à jour l'angle sur le servo&lt;/span&gt;
    monServo.write(angle);
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
  &lt;p&gt;
   Et à nouveau une condensation de ces trois lignes en une :
  &lt;/p&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;monServo.write(analogRead(potar)/&lt;span class="hljs-number"&gt;5.7&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Mais comme il nous faut renvoyer la valeur convertie vers l’ordinateur, il est mieux de stocker cette valeur dans une variable. Autrement dit, préférez garder le code à trois lignes.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="et-la-liaison-série"&gt;
 &lt;a aria-hidden="true" href="#et-la-liaison-série"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Et la liaison série
&lt;/h5&gt;
&lt;p&gt;
 Pour renvoyer la valeur, rien de bien sorcier :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;Serial.println(angle);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="code-final"&gt;
 &lt;a aria-hidden="true" href="#code-final"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Code final
&lt;/h5&gt;
&lt;p&gt;
 Au final, on se retrouve avec un code tel que celui-ci :
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;Servo.h&amp;gt; // On n'oublie pas d'ajouter la bibliothèque !&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; potar = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// notre potentiomètre&lt;/span&gt;
Servo monServo;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on déclare le servo sur la broche 2 (éventuellement régler les bornes)&lt;/span&gt;
    monServo.attach(&lt;span class="hljs-number"&gt;2&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// on n'oublie pas de démarrer la voie série&lt;/span&gt;
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on lit la valeur du potentiomètre&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; val = analogRead(potar);
    &lt;span class="hljs-comment"&gt;// on convertit la valeur lue en angle compris dans l’intervalle [0;180]&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; angle = val / &lt;span class="hljs-number"&gt;5.7&lt;/span&gt;;
    &lt;span class="hljs-comment"&gt;// on met à jour l'angle sur le servo&lt;/span&gt;
    monServo.write(angle);
    &lt;span class="hljs-comment"&gt;// on renvoie l'angle par la voie série pour superviser&lt;/span&gt;
    Serial.println(angle);
    &lt;span class="hljs-comment"&gt;// un petit temps de pause&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;100&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    Code final de l’exercice de rotation d’un servo en fonction d’un potentiomètre
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Je vous laisse mixer avec les différents codes que l’on vous a donnés pour que vous fassiez celui qui vous convient le mieux (avec la fonction map(), ou bien celui qui est tout condensé, etc.). Dorénavant, vous allez pouvoir vous amuser avec les servomoteurs !
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;p&gt;
 Voici une démonstration sur simulateur du résultat possible à atteindre :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/MNZzf8M-qj8" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/5v9Jj5ktXQ9" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="tester-un-servomoteur-non-standard"&gt;
 &lt;a aria-hidden="true" href="#tester-un-servomoteur-non-standard"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Tester un servomoteur “non-standard”
&lt;/h3&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   C’est déjà la fin ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Eh oui, je n’ai plus grand-chose à vous dire, car ce n’est pas très compliqué puisqu’il suffit d’utiliser un outil déjà tout prêt qui est la bibliothèque
 &lt;em&gt;
  Servo
 &lt;/em&gt;
 . Je vais cependant vous montrer deux autres fonctions bien utiles.
&lt;/p&gt;
&lt;h5 id="writemicroseconds"&gt;
 &lt;a aria-hidden="true" href="#writemicroseconds"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 &lt;code&gt;
  writeMicroSeconds()
 &lt;/code&gt;
&lt;/h5&gt;
&lt;p&gt;
 En premier, la fonction
 &lt;code&gt;
  writeMicroSeconds()
 &lt;/code&gt;
 . Cette fonction permet de définir un temps à l’état HAUT du signal PPM autre que celui compris entre 1 et 2 ms. Elle est très pratique pour tester un servo dont vous ne connaissez pas les caractéristiques (servo 0 à 90° ou autre). De plus, il arrive que certains constructeurs ne se soucient pas trop des standards [1ms-2ms] et dépassent un peu ces valeurs. De par ce fait, si vous utilisez un servo avec les valeurs originales vous n’obtiendrez pas le comportement escompté. En utilisant cette fonction, vous pourrez ainsi tester le servo petit à petit en envoyant différentes valeurs une à une (par la voie série par exemple).
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Une valeur incorrecte se repère assez facilement. Si vous voyez votre servo "trembler" aux alentours des 0° ou 180° ou bien encore s’il fait des allers-retours étranges sans que vous n’ayez changé la consigne alors c’est que la valeur utilisée est probablement fausse.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="read"&gt;
 &lt;a aria-hidden="true" href="#read"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 &lt;code&gt;
  read()
 &lt;/code&gt;
&lt;/h5&gt;
&lt;p&gt;
 Une deuxième fonction pouvant être utile est la fonction
 &lt;code&gt;
  read()
 &lt;/code&gt;
 . Tout l’intérêt de cette fonction est perdu si elle est utilisée pour le code que l’on a vu dans l’exercice précédent. En revanche, elle a très bien sa place dans un système où le servomoteur est géré automatiquement par le programme de la carte Arduino et où l’utilisateur ne peut y accéder.
&lt;/p&gt;
&lt;h4 id="programme-de-test"&gt;
 &lt;a aria-hidden="true" href="#programme-de-test"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Programme de test
&lt;/h4&gt;
&lt;p&gt;
 En préparant ce chapitre, j’ai pu commencer à jouer avec un servomoteur issu de mes fonds de tiroirs. N’ayant bien entendu aucune documentation sur place ou sur internet, j’ai commencé à jouer avec en assumant qu’il utiliserait des valeurs "standards", donc entre 1000 et 2000µs pour l’état haut de la PPM. J’ai ainsi pu constater que mon servo fonctionnait, mais on était loin de parcourir les 180° attendus. J’ai donc fait un petit code utilisant une des fonctions précédentes pour tester le moteur en mode "pas à pas" et ainsi trouver les vrais timings de ces bornes. Pour cela, j’ai utilisé la liaison série. Elle m’a servi pour envoyer une commande simple (’a' pour augmenter la consigne, 'd' pour la diminuer). Ainsi, en recherchant à tâtons et en observant le comportement du moteur, j’ai pu déterminer qu’il était borné entre 560 et 2130 µs. Pas super proche des 1 et 2ms attendues !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Comme je suis sympa (
 &lt;img alt=":euh:" class="smiley" src="./static/smileys/unsure.gif"/&gt;
 ), je vous donne le code que j’ai réalisé pour le tester. Les symptômes à observer sont : aucune réaction du servo (pour ma part en dessous de 560 il ne se passe plus rien) ou au contraire, du mouvement sans changement de la consigne (de mon côté, si l’on augmente au-dessus de 2130 le servo va continuer à tourner sans s’arrêter).
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;Servo.h&amp;gt; // On oublie pas d'ajouter la bibliothèque !&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; temps = &lt;span class="hljs-number"&gt;1500&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// censée être à mi-chemin entre 1000 et 2000, un bon point de départ&lt;/span&gt;

Servo monServo;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    Serial.begin(&lt;span class="hljs-number"&gt;115200&lt;/span&gt;);
    Serial.println(&lt;span class="hljs-string"&gt;"Hello World"&lt;/span&gt;);

    monServo.attach(&lt;span class="hljs-number"&gt;2&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// on démarre à une valeur censé être la moitié de&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// l'excursion totale de l'angle réalisé par le servomoteur&lt;/span&gt;
    monServo.writeMicroseconds(temps);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// des données sur la liaison série ? (lorsque l'on appuie sur 'a' ou 'd')&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(Serial.available())
    {
        &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; commande = Serial.read(); &lt;span class="hljs-comment"&gt;// on lit&lt;/span&gt;

        &lt;span class="hljs-comment"&gt;// on modifie la consigne si c'est un caractère qui nous intéresse&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(commande == &lt;span class="hljs-string"&gt;'a'&lt;/span&gt;)
            temps += &lt;span class="hljs-number"&gt;10&lt;/span&gt;;  &lt;span class="hljs-comment"&gt;// ajout de 10µs au temps HAUT&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(commande == &lt;span class="hljs-string"&gt;'d'&lt;/span&gt;)
            temps -= &lt;span class="hljs-number"&gt;10&lt;/span&gt;;  &lt;span class="hljs-comment"&gt;// retrait de 10µs au temps HAUT&lt;/span&gt;

        &lt;span class="hljs-comment"&gt;// on modifie la consigne du servo&lt;/span&gt;
        monServo.writeMicroseconds(temps);

        &lt;span class="hljs-comment"&gt;// et on fait un retour sur la console pour savoir où on est rendu&lt;/span&gt;
        Serial.println(temps, DEC);
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Programme de test d’un servomoteur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ce programme est très simple d’utilisation et vous pouvez d’ailleurs le modifier comme bon vous semble pour qu’il corresponde à ce que vous voulez faire avec. Il suffit en fait de brancher la carte Arduino à un ordinateur et ouvrir un terminal série (par exemple le moniteur intégré dans l’environnement Arduino). Ensuite, appuyez sur 'a' ou 'd' pour faire augmenter ou diminuer le temps de l’état HAUT du signal PPM. Vous pourrez ainsi avoir un retour des temps extrêmes qu’utilise votre servomoteur.
&lt;/p&gt;
&lt;p&gt;
 On en termine avec les servomoteurs. Vous avez sans doute plein de nouvelles idées avec lesquelles vous emploierez les servomoteurs qui vous permettront de faire beaucoup de choses très utiles, voire inutiles mais indispensables.
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>A petits pas, le moteur pas-à-pas</title><link href="https://eskimon.fr/tuto-arduino-603-a-petits-pas-le-moteur-pas-%C3%A0-pas" rel="alternate"></link><published>2013-12-12T12:22:00+01:00</published><updated>2013-12-12T12:22:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-12:/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas</id><summary type="html">&lt;p&gt;
 Pour en terminer avec les différents types de moteurs qui existent, nous allons parler d’un moteur un peu particulier (encore plus que le servomoteur !) et qui est cependant très utilisé dans le domaine de la robotique et tout ce qui touche à la précision d’un mouvement. Comme à …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Pour en terminer avec les différents types de moteurs qui existent, nous allons parler d’un moteur un peu particulier (encore plus que le servomoteur !) et qui est cependant très utilisé dans le domaine de la robotique et tout ce qui touche à la précision d’un mouvement. Comme à l’habitude, nous allons d’abord voir le fonctionnement de ces moteurs, pour ensuite apprendre à les utiliser.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ce moteur utilise des éléments que nous avons vus dans des chapitres précédents (sur les moteurs à courant continu). Si vous ne vous rappelez pas du L298 je vous conseille de retourner prendre quelques informations à ce sujet.
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#les-différents-moteurs-pas-à-pas-et-leur-fonctionnement"&gt;
    Les différents moteurs pas-à-pas et leur fonctionnement
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#fonctionnement-des-moteurs"&gt;
      Fonctionnement des moteurs
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#moteur-pàp-bipolaire-à-aimants-permanents"&gt;
       Moteur pàp bipolaire à aimants permanents
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-moteur-unipolaire"&gt;
       Le moteur unipolaire
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-moteur-à-réluctance-variable"&gt;
       Le moteur à réluctance variable
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#se-servir-du-moteur"&gt;
    Se servir du moteur
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#le-moteur-unipolaire-1"&gt;
      Le moteur unipolaire
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#connecter-un-moteur-unipolaire"&gt;
       Connecter un moteur unipolaire
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#utiliser-un-moteur-unipolaire"&gt;
       Utiliser un moteur unipolaire
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#le-moteur-bipolaire"&gt;
      Le moteur bipolaire
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-câbler-la-théorie"&gt;
       Le câbler, la théorie
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-pratique-avec-le-l298"&gt;
       La pratique avec le L298
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#piloter-le-moteur-bipolaire"&gt;
      Piloter le moteur bipolaire
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#rotation-par-pas-complet"&gt;
       Rotation par pas complet
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#rotation-à-couple-maximal"&gt;
       Rotation à couple maximal
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#rotation-par-demi-pas"&gt;
       Rotation par demi-pas
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#utilisation-avec-arduino"&gt;
    Utilisation avec Arduino
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#câbler-les-moteurs"&gt;
      Câbler les moteurs
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-moteur-unipolaire-2"&gt;
       Le moteur unipolaire
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-moteur-bipolaire-1"&gt;
       Le moteur bipolaire
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#piloter-les-moteurs-avec-arduino"&gt;
      Piloter les moteurs avec Arduino
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-principe"&gt;
       Le principe
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#lobjet-stepper"&gt;
       L’objet Stepper
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#aller-plus-loin"&gt;
      Aller plus loin
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#2-fils-au-lieu-de-4"&gt;
       2 fils au lieu de 4 !
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-l297"&gt;
       Le L297
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="les-différents-moteurs-pas-à-pas-et-leur-fonctionnement"&gt;
 &lt;a aria-hidden="true" href="#les-différents-moteurs-pas-à-pas-et-leur-fonctionnement"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les différents moteurs pas-à-pas et leur fonctionnement
&lt;/h3&gt;
&lt;p&gt;
 Les moteurs pas-à-pas… encore un nouveau type de moteur. Une question vous taraude sûrement l’esprit :
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Pourquoi il existe tant de moteurs différents !?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Et bien je vous répondrais par une autre question : pourquoi existe-t’il autant de langages de programmation différents !? La réponse est pourtant simple : car ils ont tous leurs avantages et leurs inconvénients. Par exemple, un servomoteur pourra facilement maintenir la position de son axe, tandis que le moteur à courant continu sera plus facile à faire tourner à différentes vitesses. Eh bien, le but du moteur pas-à-pas (que j’abrégerais moteur pàp) est un peu une réunion de ces deux avantages. Vous pourrez le faire tourner à des vitesses variables et la position parcourue sera aussi facile à déterminer. En contrepartie, ces moteurs ne peuvent pas tourner à des vitesses hallucinantes et sont plus délicats à mettre en œuvre que les moteurs CC par exemple (mais rien d’insurmontable je vous rassure).
&lt;/p&gt;
&lt;p&gt;
 En parlant de précision, savez-vous dans quel objet du quotidien on retrouve beaucoup de moteurs pàp ? Dans l’imprimante (éventuellement scanner aussi) qui traîne sur votre bureau ! En effet, l’aspect "précision" du moteur est utilisé dans cette situation sans avoir besoin d’aller vraiment vite. Vous pourrez donc en trouver un pour faire avancer les feuilles et un autre pour déplacer le chariot avec les cartouches d’encre (et encore un autre pour déplacer le capteur du scanner). Donc si vous avez une vieille imprimante destinée à la poubelle, vous savez ce qu’il vous reste à faire
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 ! Les moteurs que vous pourrez trouver posséderont 4, 5 voire 6 fils. Le premier (4 fils) est appelé
 &lt;strong&gt;
  moteur bipolaire
 &lt;/strong&gt;
 , les deux autres sont des moteurs
 &lt;strong&gt;
  unipolaires
 &lt;/strong&gt;
 ou à
 &lt;strong&gt;
  réluctance variable
 &lt;/strong&gt;
 . Tout cela doit-être encore un peu confus. Voyons donc plus clairement comment cela marche !
&lt;/p&gt;
&lt;h4 id="fonctionnement-des-moteurs"&gt;
 &lt;a aria-hidden="true" href="#fonctionnement-des-moteurs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Fonctionnement des moteurs
&lt;/h4&gt;
&lt;p&gt;
 Comme précédemment avancé, ce moteur possède une certaine complexité pour être mis en œuvre. Et ce, plus que les précédents. Vous souvenez-vous du moteur CC (j’espère bien !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 ). Il était composé d’un ensemble d’aimants sur l’extérieur (le stator) et d’une partie bobinée où le champ magnétique était créée dynamiquement avec un ensemble collecteur/balais qui transmettait l’électricité aux bobines au centre (rotor).
&lt;/p&gt;
&lt;p&gt;
 Dans le cas du moteur pàp, c’est sur le rotor (au centre) que l’on retrouve l’aimant permanent, et les bobines sont sur le stator (autour du rotor). Comme pour les moteurs à courant continu, le but du jeu, en quelque sorte, est de "faire tourner un champ magnétique" (à prendre avec des pincettes) pour faire tourner l’aimant fixé au rotor. Il existe cependant différents types de moteurs pàp dont le placement des bobinages diffère les uns des autres et la façon de les alimenter n’est pas non plus identique (d’où une complexité supplémentaire lorsque l’on veut changer le type de moteur pàp à utiliser…). Nous allons maintenant les étudier l’un après l’autre en commençant par celui qui semble avoir le fonctionnement le plus simple à assimiler.
&lt;/p&gt;
&lt;h5 id="moteur-pàp-bipolaire-à-aimants-permanents"&gt;
 &lt;a aria-hidden="true" href="#moteur-pàp-bipolaire-à-aimants-permanents"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Moteur pàp bipolaire à aimants permanents
&lt;/h5&gt;
&lt;p&gt;
 Ce moteur possède quatre fils d’alimentation pour piloter des bobines par paire. Comme un schéma vaut mieux qu’un long discours, voici comment il est constitué :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Vue schématisée et simplifiée d'un moteur pas-à-pas bipolaire" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/vue-schematisee-et-simplifiee-dun-moteur-pas-a-pas-bipolaire.png"/&gt;
 &lt;figcaption&gt;
  Vue schématisée et simplifiée d'un moteur pas-à-pas bipolaire
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Vous l’aurez compris, les bobines sont reliées deux à deux en série et sont donc pilotées ensemble. Il n’y a donc finalement que deux enroulements à commander puisque deux bobines montées en série n’en font plus qu’une. Leur placement de part et d’autre de l’aimant permanent du rotor permet de piloter ce dernier. Voyons comment.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Lorsqu’il n’y a aucun courant traversant les bobines, le rotor (où l’axe de sortie est lié) est libre de tourner, rien ne cherche à le retenir dans sa course.
 &lt;/li&gt;
 &lt;li&gt;
  Maintenant, si nous décidons de faire passer du courant entre les points C et D pour alimenter la bobine de gauche et celle de droite. Un courant va s’établir et deux champs électromagnétiques vont apparaître de part et d’autre du rotor. Que va-t-il alors se passer ? L’aimant du rotor va tourner sur lui-même pour se placer de façon à ce que son pôle Nord soit en face du pôle Sud du champ magnétique créé dans la première bobine et que son pôle Sud soit en face du pôle Nord créé dans la deuxième bobine.
 &lt;/li&gt;
 &lt;li&gt;
  Si ensuite on alimente non plus les bobines entre C et D mais plutôt celles entre A et B, le rotor va alors tourner pour s’aligner à nouveau vers les pôles qui l’intéressent (Nord/Sud, Sud/Nord).
 &lt;/li&gt;
 &lt;li&gt;
  Et c’est reparti, on va alors alimenter de nouveau les bobines entre D et C, donc avec un courant de signe opposé à la fois où l’on les a alimenter entre C et D (par exemple C était relié au "+" de l’alimentation tout à l’heure et là on le fait passer au "-", idem pour D que l’on fait passer du "-" au "+") et le moteur va encore faire un quart de tour.
 &lt;/li&gt;
 &lt;li&gt;
  On peut continuer ainsi de suite pour faire tourner le moteur en faisant attention de ne pas se tromper dans les phases d’alimentation.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 À chaque phase on va donc faire tourner le moteur d’un quart de tour :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Rotation pas-à-pas du moteur" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/rotation-pas-a-pas-du-moteur.png"/&gt;
 &lt;figcaption&gt;
  Rotation pas-à-pas du moteur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ce quart de rotation s’appelle un
   &lt;strong&gt;
    pas
   &lt;/strong&gt;
   . Et comme il faut plusieurs pas pour faire tourner le moteur sur 360°, on l’a donc appelé ainsi, le moteur
   &lt;em&gt;
    pas-à-pas
   &lt;/em&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Dans le cas illustré ci-dessus, on dit que le moteur fait 4 pas par tour. Il existe bien des moteurs qui font ce nombre de pas, mais il en existe qui ont un nombre de pas plus conséquent (24, 48, etc.). Leur constitution mécanique est différente, ce qui leur confère ce pouvoir, bien que le fonctionnement reste identique, puisque l’on cherche toujours à attirer un aimant grâce à des champs magnétiques crées par des bobines parcourues par un courant. Pour avoir plus de pas, on multiplie les aimants au centre. Sur l’image ci-dessous, on peut bien voir les bobines (en cuivre à l’extérieur) et tous les aimants au centre (les petites dents). Il existe aussi deux autres modes de fonctionnement que nous verrons dans la partie suivante :
 &lt;strong&gt;
  le pilotage avec couple maximal
 &lt;/strong&gt;
 et
 &lt;strong&gt;
  le pilotage par demi-pas
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Vue en coupe d'un moteur pas-à-pas bipolaire" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/vue-en-coupe-dun-moteur-pas-a-pas-bipolaire.jpg"/&gt;
 &lt;figcaption&gt;
  Vue en coupe d’un moteur pas-à-pas bipolaire - (CC-BY-SA,
  &lt;a href="http://commons.wikimedia.org/wiki/File:Struttura_motore_passo-passo.jpg"&gt;
   vincenzov.net
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Animation de la rotation d'un moteur pas à pas" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/animation-de-la-rotation-dun-moteur-pas-a-pas.gif"/&gt;
 &lt;figcaption&gt;
  Animation de la rotation d’un moteur pas à pas - (CC-BY-SA,
  &lt;a href="http://commons.wikimedia.org/wiki/File:StepperMotor.gif"&gt;
   Teravolt
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Pour rappel, voici la vue d’un moteur à courant continu :
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;img alt="Vue interne d'un moteur CC" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/vue-interne-dun-moteur-cc.jpg"/&gt;
   &lt;figcaption&gt;
    Vue interne d'un moteur CC
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="le-moteur-unipolaire"&gt;
 &lt;a aria-hidden="true" href="#le-moteur-unipolaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le moteur unipolaire
&lt;/h5&gt;
&lt;p&gt;
 Le moment est enfin venu de vous révéler la véritable signification des noms du moteur vu précédemment et de celui-ci même… non il ne faut pas lire ça sur un ton tragique.
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 Le moteur bipolaire est nommé ainsi car il présente la faculté d’être commandé en inversant simplement la polarité de ces bobinages. Quant au moteur unipolaire, pas besoin de faire cette inversion, chaque bobinage est commandé séparément et ne requiert qu’une alimentation présente ou absente selon que l’on veuille ou non créer un champ magnétique en son sein. La commande sera donc plus simple à mettre en place qu’avec le moteur bipolaire. Cependant, le nombre de bobines étant plus important, la quantité de cuivre également et le prix s’en ressent ! En effet, il s’agit bien de 4 bobines bien distinctes, alors que le moteur bipolaire à aimant permanent en possède finalement quatre moitiés de bobines, donc deux bobines complètes.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Vue en coupe d'un moteur pas-à-pas unipolaire" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/vue-en-coupe-dun-moteur-pas-a-pas-unipolaire.png"/&gt;
 &lt;figcaption&gt;
  Vue en coupe d'un moteur pas-à-pas unipolaire
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 On retrouve nos quatre fils A, B, C et D ainsi qu’un fil de masse commun (bon ben imaginez-le puisqu’il n’est pas dessiné comme tel sur le schéma). Soit 5 fils (v’là pas qu’on sait compter maintenant !
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 ). Le fonctionnement est rigoureusement identique que le précédent moteur. On cherche à créer un champ magnétique "rotatif" pour faire passer l’aimant alternativement devant chacune des bobines. On va donc alimenter la bobine A, puis la C, puis la B, puis la D selon le schéma ci-dessus. Et voilà, le moteur aura fait tout un tour assez simplement. Il suffit d’avoir quatre transistors (un par enroulement) sans avoir besoin de les disposer en H et de les piloter deux à deux. Ici il suffit de les alimenter un par un, chacun leur tour. Facile, non ?
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;h5 id="le-moteur-à-réluctance-variable"&gt;
 &lt;a aria-hidden="true" href="#le-moteur-à-réluctance-variable"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le moteur à réluctance variable
&lt;/h5&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Gné
   &lt;img alt=":o" class="smiley" src="./static/smileys/huh.png"/&gt;
   ? c’est quoi ce nom barbare ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Ce moteur est un peu plus compliqué, mais c’est aussi le dernier que nous verrons et le plus fascinant ! Contrairement aux deux précédents, ce moteur ne possède pas d’aimants permanents, ni même d’aimant tout court ! Non, en son centre on trouve un simple morceau de
 &lt;strong&gt;
  fer doux
 &lt;/strong&gt;
 . Ce dernier à la particularité de très bien conduire les champs magnétiques. Du coup, si un champ magnétique le traverse, il voudra absolument s’aligner dans son sens. C’est cette propriété qui est exploitée. Commençons par voir tout de suite le schéma de ce moteur :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Vue en coupe d'un moteur pas-à-pas à réluctance variable" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/vue-en-coupe-dun-moteur-pas-a-pas-a-reluctance-variable.png"/&gt;
 &lt;figcaption&gt;
  Vue en coupe d'un moteur pas-à-pas à réluctance variable
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Comme vous pouvez le voir, il possède 4 enroulements (formant 4 paires) et le morceau de fer doux au milieu à une forme d’étoile à 6 branches. Et ce n’est pas un hasard ! Le ratio de 6 pour 8 a une raison très précise car cela introduit un léger décalage (15°) entre une branche et une bobine. En effet, si l’on a 8 bobines (4 paires) on a un décalage entre chaque bobine de :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mfrac&gt;
        &lt;mrow&gt;
         &lt;mn&gt;
          3
         &lt;/mn&gt;
         &lt;mn&gt;
          6
         &lt;/mn&gt;
         &lt;msup&gt;
          &lt;mn&gt;
           0
          &lt;/mn&gt;
          &lt;mo&gt;
           ∘
          &lt;/mo&gt;
         &lt;/msup&gt;
        &lt;/mrow&gt;
        &lt;mrow&gt;
         &lt;mn&gt;
          8
         &lt;/mn&gt;
        &lt;/mrow&gt;
       &lt;/mfrac&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        4
       &lt;/mn&gt;
       &lt;msup&gt;
        &lt;mn&gt;
         5
        &lt;/mn&gt;
        &lt;mo&gt;
         ∘
        &lt;/mo&gt;
       &lt;/msup&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       \frac{360^\circ}{8}=45^\circ
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.9179250000000001em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1.262925em;vertical-align:-0.345em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mopen nulldelimiter"&gt;
      &lt;/span&gt;
      &lt;span class="mfrac"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.9179250000000001em;"&gt;
          &lt;span style="top:-2.6550000000000002em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              8
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.15em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="stretchy" style="height:0.2em;"&gt;
            &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
             &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
             &lt;/path&gt;
            &lt;/svg&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.394em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              3
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              6
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mtight"&gt;
               0
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.7484642857142858em;"&gt;
                  &lt;span style="top:-2.931em;margin-right:0.07142857142857144em;"&gt;
                   &lt;span class="pstrut" style="height:2.5em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size3 size1 mtight"&gt;
                    &lt;span class="mbin mtight"&gt;
                     ∘
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.345em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mclose nulldelimiter"&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      4
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord"&gt;
       5
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.674115em;"&gt;
          &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mbin mtight"&gt;
             ∘
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 Donc tous les 45° le long du cylindre qu’est le moteur, on trouve un bobinage. En revanche il n’y a que 60° entre chaque extrémité de l’étoile du rotor :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mfrac&gt;
        &lt;mrow&gt;
         &lt;mn&gt;
          3
         &lt;/mn&gt;
         &lt;mn&gt;
          6
         &lt;/mn&gt;
         &lt;msup&gt;
          &lt;mn&gt;
           0
          &lt;/mn&gt;
          &lt;mo&gt;
           ∘
          &lt;/mo&gt;
         &lt;/msup&gt;
        &lt;/mrow&gt;
        &lt;mrow&gt;
         &lt;mn&gt;
          6
         &lt;/mn&gt;
        &lt;/mrow&gt;
       &lt;/mfrac&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        6
       &lt;/mn&gt;
       &lt;msup&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mo&gt;
         ∘
        &lt;/mo&gt;
       &lt;/msup&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       \frac{360^\circ}{6}=60^\circ
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.9179250000000001em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1.262925em;vertical-align:-0.345em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mopen nulldelimiter"&gt;
      &lt;/span&gt;
      &lt;span class="mfrac"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.9179250000000001em;"&gt;
          &lt;span style="top:-2.6550000000000002em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              6
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.15em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="stretchy" style="height:0.2em;"&gt;
            &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
             &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
             &lt;/path&gt;
            &lt;/svg&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.394em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              3
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              6
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mtight"&gt;
               0
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.7484642857142858em;"&gt;
                  &lt;span style="top:-2.931em;margin-right:0.07142857142857144em;"&gt;
                   &lt;span class="pstrut" style="height:2.5em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size3 size1 mtight"&gt;
                    &lt;span class="mbin mtight"&gt;
                     ∘
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.345em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mclose nulldelimiter"&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      6
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.674115em;"&gt;
          &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mbin mtight"&gt;
             ∘
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 Mais pourquoi exactement ? Eh bien, c’est simple avec un peu d’imagination (et quelques dessins). Si l’on commence par alimenter le premier enroulement, le A, le rotor va s’aligner avec. Maintenant que se passera-t-il si l’on alimente B ? Le rotor, qui était alors positionné avec une de ses branches bien en face de A, va bouger pour s’aligner correctement vers B. Ensuite, si l’on alimente C il va se passer de même, le rotor va encore tourner de 15° pour s’aligner, etc. Si l’on effectue cette opération 24 fois, on fera un tour complet car :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mn&gt;
        4
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;msup&gt;
        &lt;mn&gt;
         5
        &lt;/mn&gt;
        &lt;mo&gt;
         ∘
        &lt;/mo&gt;
       &lt;/msup&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        3
       &lt;/mn&gt;
       &lt;mn&gt;
        6
       &lt;/mn&gt;
       &lt;msup&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mo&gt;
         ∘
        &lt;/mo&gt;
       &lt;/msup&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       24 \times 15^\circ = 360^\circ
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.674115em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.757445em;vertical-align:-0.08333em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      4
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord"&gt;
       5
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.674115em;"&gt;
          &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mbin mtight"&gt;
             ∘
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      3
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      6
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.674115em;"&gt;
          &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mbin mtight"&gt;
             ∘
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Vous remarquerez que dans cet exemple le rotor tourne dans le sens horaire alors que l’alimentation des bobines se fera dans le sens antihoraire.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Ces moteurs ont certains avantages. Parmi ces derniers, il n’y a pas besoin de polariser les bobines (peu importe le sens du champ magnétique, l’entrefer n’étant pas polarisé essaiera de s’aligner sans chipoter). Le fait que l’on utilise un simple entrefer en fer doux le rend aussi moins cher qu’un modèle avec des aimants permanents. Vous savez maintenant tout sur les trois types de moteurs pas-à-pas que l’on peut trouver, place maintenant à la pratique !
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   De manière générale, n’essayez pas d’ouvrir vos moteurs pas-à-pas pour regarder comment c’est fait et espérer les remonter après. Le simple démontage à tendance à faire diminuer la qualité des aimants permanents à l’intérieur et donc votre moteur ne sera plus aussi bon après remontage.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="se-servir-du-moteur"&gt;
 &lt;a aria-hidden="true" href="#se-servir-du-moteur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Se servir du moteur
&lt;/h3&gt;
&lt;p&gt;
 Continuons à parler de notre super moteur. Si vous avez suivi ce que j’ai dit plus tôt, j’ai expliqué qu’il y avait des bobines qui généraient un champ magnétique. Lorsqu’elles sont alimentées, ces bobines ont besoin de courant pour pouvoir générer un champ magnétique suffisant. Vous ne serez donc pas surpris si je vous dis qu’il faudra utiliser un composant pour faire passer la puissance dans ces dernières. Et là, comme les choses sont bien faites, nous allons retrouver le pont en H et le L298.
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Afin de limiter la redondance d’informations, je vais me contenter de vous expliquer le pilotage du moteur unipolaire et bipolaire. Si vous comprenez correctement ces derniers, vous n’aurez aucun problème avec le moteur restant
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-danger"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Les schémas qui vont suivre ont pour source d’énergie une pile +9V. Cependant il est déconseillé de les faire avec car la consommation des moteurs est assez importante et la pile risque de se fatiguer très vite. Utilisez plutôt une source d’alimentation prévue à cet effet (une alimentation de laboratoire).
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="le-moteur-unipolaire-1"&gt;
 &lt;a aria-hidden="true" href="#le-moteur-unipolaire-1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le moteur unipolaire
&lt;/h4&gt;
&lt;h5 id="connecter-un-moteur-unipolaire"&gt;
 &lt;a aria-hidden="true" href="#connecter-un-moteur-unipolaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Connecter un moteur unipolaire
&lt;/h5&gt;
&lt;p&gt;
 Pour rappel, voici la structure du moteur unipolaire :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Vue en coupe d'un moteur pas-à-pas unipolaire" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/vue-en-coupe-dun-moteur-pas-a-pas-unipolaire.png"/&gt;
 &lt;figcaption&gt;
  Vue en coupe d'un moteur pas-à-pas unipolaire
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Si vous avez bien lu la partie précédente, vous devez avoir retenu que ce moteur est assez simple à piloter. En effet, il suffit d’alimenter une à une les bobines pour que le moteur tourne. Et c’est tout ! Il nous faut juste utiliser le bon composant pour alimenter les bobines et en avant ! A priori, le bon composant serait un bon transistor qui pourrait supporter 50V et 500mA pour débuter. À cela il faudrait ensuite rajouter une diode de roue libre pour ne pas l’abîmer lors des phases de roue libre (tout cela multiplié par 4 puisqu’on a 4 bobines). Plutôt que de s’embêter à câbler tout ça, je vous propose l’intervention d’un nouveau composant : le ULN2003A. Ce dernier regroupe les transistors pour faire passer la puissance et aussi la diode. Il est très simple à câbler puisqu’il faut simplement amener l’alimentation et les broches de commandes. Chacune de ces dernières possède respectivement une sortie où la tension sera celle de l’alimentation. Voici une illustration de ce câblage :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Câblage simple du moteur unipolaire - Schéma" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/cablage-simple-du-moteur-unipolaire-schema.jpg"/&gt;
 &lt;figcaption&gt;
  Câblage simple du moteur unipolaire - Schéma
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Câblage simple du moteur unipolaire - Montage" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/cablage-simple-du-moteur-unipolaire-montage.jpg"/&gt;
 &lt;figcaption&gt;
  Câblage simple du moteur unipolaire - Montage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="utiliser-un-moteur-unipolaire"&gt;
 &lt;a aria-hidden="true" href="#utiliser-un-moteur-unipolaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utiliser un moteur unipolaire
&lt;/h5&gt;
&lt;p&gt;
 Je l’ai maintenant dit et répété plusieurs fois, pour ce moteur il suffit de piloter chaque bobine une à une, chacune leur tour. Je vais donc vous résumer tout cela de manière plus schématique et on sera bon pour ce moteur.
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 A la fin, si vous avez bien compris vous devriez être capable de le faire tourner tout doucement en plaçant alternativement les fils In1 à 4 (abrégé In1..4) au 5V ou à la masse.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Séquence du moteur unipolaire" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/sequence-du-moteur-unipolaire.jpg"/&gt;
 &lt;figcaption&gt;
  Séquence du moteur unipolaire
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Les différentes illustrations de séquences peuvent êtres trouvées sous licence CC-BY-SA
   &lt;a href="http://fr.wikipedia.org/wiki/Moteur_pas_à_pas"&gt;
    sur wikipedia
   &lt;/a&gt;
   (M4RC0)
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Etape
      &lt;/th&gt;
      &lt;th&gt;
       In 1
      &lt;/th&gt;
      &lt;th&gt;
       In 2
      &lt;/th&gt;
      &lt;th&gt;
       In 3
      &lt;/th&gt;
      &lt;th&gt;
       In 4
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Pas n°1
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Pas n°2
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Pas n°3
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Pas n°4
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Séquence du moteur unipolaire
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;figure&gt;
 &lt;img alt="Chronogramme du moteur unipolaire" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/chronogramme-du-moteur-unipolaire.jpg"/&gt;
 &lt;figcaption&gt;
  Chronogramme du moteur unipolaire
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Si vous placez les fils de commande à la masse ou au 5V convenablement, votre moteur devrait tourner
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 Vous n’avez plus qu’à créer le programme qui va bien pour piloter tout ce bazar… ben vous vous attendiez à quoi ? Une solution peut-être ? Non.
 &lt;img alt=":diable:" class="smiley" src="./static/smileys/diable.png"/&gt;
 Bon bon, d’accord… vous vous souvenez de vos premiers pas avec le chenillard ? Tout est dit.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 (et si vous ne voulez pas vous fatiguer, attendez la suite du tuto
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 )
&lt;/p&gt;
&lt;h4 id="le-moteur-bipolaire"&gt;
 &lt;a aria-hidden="true" href="#le-moteur-bipolaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le moteur bipolaire
&lt;/h4&gt;
&lt;h5 id="le-câbler-la-théorie"&gt;
 &lt;a aria-hidden="true" href="#le-câbler-la-théorie"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le câbler, la théorie
&lt;/h5&gt;
&lt;p&gt;
 Nous avons vu dans le chapitre précédent que le moteur bipolaire a besoin, à un moment, d’une inversion de courant si l’on veut pouvoir utiliser les bobines à bon escient. Vous vous souvenez probablement que nous avons vu précédemment un composant capable de faire cela : le pont en H. L’idée va donc être de câbler correctement les bobines pour pouvoir faire passer le courant dans un sens, ou dans l’autre. Je vous rappelle la structure du pont en H :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Le pont en H - vue simplifiée" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/le-pont-en-h-vue-simplifiee.png"/&gt;
 &lt;figcaption&gt;
  Le pont en H - vue simplifiée
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Problème, un pont en H ne peut piloter qu’une "paire de bobines" (celle qui sont dans le même axe et relié entre elles), or nous en avons deux à piloter. Heureusement, le L298 est un composant très bien pensé et ne possède non pas un mais bien deux ponts en H ! Du coup, nous pourrons en utiliser un par couple de bobines.
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 Plutôt sympa non ?
&lt;/p&gt;
&lt;h5 id="la-pratique-avec-le-l298"&gt;
 &lt;a aria-hidden="true" href="#la-pratique-avec-le-l298"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La pratique avec le L298
&lt;/h5&gt;
&lt;p&gt;
 Dans le chapitre précédent, nous avons justement vu un composant qui possède deux ponts en H : le L298. Le reste du travail semble presque trop simple ! Pour la partie "sortie/puissance", vous devrez relier les sorties Out1 (broche 2) et Out2 (broche 3) à la première bobine et ensuite Out3 et Out4 (13 et 14) à la seconde. N’oubliez pas les diodes de roue libre (8 au total et qui supporte la puissance) ! Enfin, il ne reste qu’à connecter les entrées In1..4 à 4 entrée/sortie numérique (pas besoin de PWM). Pour l’instant, pas besoin de les relier à l’Arduino, contentez-vous de les mettre à la masse, nous allons faire un test ensemble. Comme nous voulons activer les deux ponts, mettez les deux entrées "enable" au +5V. Nous verrons dans la prochaine partie comment l’utiliser avec Arduino
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 . Voici un petit schéma récapitulatif :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Câblage simple - Schéma" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/cablage-simple-schema.png"/&gt;
 &lt;figcaption&gt;
  Câblage simple - Schéma
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Le schéma de montage avec quelques condensateurs de filtrage qui viennent aider l’alimentation en cas de forte demande de courant et des condensateurs qui filtre les parasites engendrés par les bobines du moteur.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Câblage simple - Montage" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/cablage-simple-montage.png"/&gt;
 &lt;figcaption&gt;
  Câblage simple - Montage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="piloter-le-moteur-bipolaire"&gt;
 &lt;a aria-hidden="true" href="#piloter-le-moteur-bipolaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Piloter le moteur bipolaire
&lt;/h4&gt;
&lt;p&gt;
 Une fois que le moteur est branché, nous allons pouvoir le faire tourner. Comme son nom l’indique, il s’appelle pas à pas et donc nous allons le faire pivoter étape par étape et non de manière continue comme le moteur à courant continu. Cependant, en répétant les étapes de rotation rapidement et successivement, le moteur donnera l’impression de tourner sans s’arrêter entre chaque étape. Il existe trois méthodes distinctes pour piloter les moteurs bipolaires. Nous allons maintenant les voir une par une. Dans les cas qui vont suivre, on va considérer un moteur de 4 pas par tour (ce qui est ridiculement faible). Voici ce à quoi il va ressembler (comment sont placées ses bobines) :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Vue schématisé d'un moteur pas-à-pas" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/vue-schematise-dun-moteur-pas-a-pas.png"/&gt;
 &lt;figcaption&gt;
  Vue schématisé d'un moteur pas-à-pas
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="rotation-par-pas-complet"&gt;
 &lt;a aria-hidden="true" href="#rotation-par-pas-complet"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Rotation par pas complet
&lt;/h5&gt;
&lt;p&gt;
 Ce mode de fonctionnement est le plus simple, c’est pourquoi nous allons commencer par lui. Grâce à ce dernier, vous allez pouvoir faire des rotations "pas par pas". Pour cela, nous allons alternativement alimenter les bobines de droites et de gauche et inverser le sens du courant pour pouvoir faire une rotation complète du champ magnétique. Voici l’illustration Wikipédia très bien faite à ce sujet :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Séquence à pas complet" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/sequence-a-pas-complet.jpg"/&gt;
 &lt;figcaption&gt;
  Séquence à pas complet
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   En rouge la bobine alimentée ainsi que le sens du courant symbolisé par une flèche et en noir la bobine qui n’est pas alimentée.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 En considérant que la bobine A est connectée aux entrées IN1 et IN2 et que la bobine B est connectée aux commandes IN3 et IN4, on peut donc écrire la séquence de commande suivante :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Etape
      &lt;/th&gt;
      &lt;th&gt;
       In 1
      &lt;/th&gt;
      &lt;th&gt;
       In 2
      &lt;/th&gt;
      &lt;th&gt;
       In 3
      &lt;/th&gt;
      &lt;th&gt;
       In 4
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Pas n°1
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Pas n°2
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Pas n°3
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Pas n°4
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Séquence à pas complet
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 (un état '-' signifie "non nécessaire", placez-le à 0V pour que la bobine soit bien inactive).
&lt;/p&gt;
&lt;p&gt;
 On peut traduire cette activité par le chronogramme suivant :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Chronogramme du pilotage à pas entier" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/chronogramme-du-pilotage-a-pas-entier.jpg"/&gt;
 &lt;figcaption&gt;
  Chronogramme du pilotage à pas entier
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Comme vous pouvez le voir à travers ces différents moyens d’explication, c’est somme toute assez simple. On va chercher à déplacer l’aimant central en le faisant tourner petit à petit. Pour cela on cherchera à l’attirer dans différentes positions.
&lt;/p&gt;
&lt;h5 id="rotation-à-couple-maximal"&gt;
 &lt;a aria-hidden="true" href="#rotation-à-couple-maximal"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Rotation à couple maximal
&lt;/h5&gt;
&lt;p&gt;
 Un autre mode de fonctionnement est celui dit à
 &lt;strong&gt;
  couple maximal
 &lt;/strong&gt;
 . Cette méthode de pilotage utilise toutes les bobines à la fois pour pouvoir immobiliser au maximum l’aimant central. En effet, en utilisant plus de champs magnétiques on obtient une force supplémentaire. Par contre, on consomme évidemment d’avantage de courant. Pour comprendre ce fonctionnement, voyons les différentes étapes par un dessin puis par un chronogramme. Vous verrez, ce n’est pas très compliqué, le fonctionnement est très similaire, seules les activations de bobines changent un peu :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Séquence à couple maximal" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/sequence-a-couple-maximal.jpg"/&gt;
 &lt;figcaption&gt;
  Séquence à couple maximal
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Avez-vous remarqué quelque chose de particulier ? Dans cette utilisation, l’aimant ne fait plus face aux bobines mais se place
   &lt;em&gt;
    entre
   &lt;/em&gt;
   les deux. Par contre, il effectue toujours des pas entiers, ces derniers ont juste un décalage constant par rapport à avant.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voici le tableau correspondant au pilotage des bobines :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Etape
      &lt;/th&gt;
      &lt;th&gt;
       In 1
      &lt;/th&gt;
      &lt;th&gt;
       In 2
      &lt;/th&gt;
      &lt;th&gt;
       In 3
      &lt;/th&gt;
      &lt;th&gt;
       In 4
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Pas n°1
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Pas n°2
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Pas n°3
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Pas n°4
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Séquence à couple maximal
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 (un état '-' signifie "non nécessaire", placez-le à 0V pour que la bobine soit bien inactive).
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Chronogramme pour un couple max." src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/chronogramme-pour-un-couple-max.jpg"/&gt;
 &lt;figcaption&gt;
  Chronogramme pour un couple max.
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="rotation-par-demi-pas"&gt;
 &lt;a aria-hidden="true" href="#rotation-par-demi-pas"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Rotation par demi-pas
&lt;/h5&gt;
&lt;p&gt;
 Enfin, le dernier mode de fonctionnement est celui dit à
 &lt;strong&gt;
  demi-pas
 &lt;/strong&gt;
 . Ce mode mélange les deux précédents puisqu’on va alterner les étapes du mode à pas complet et les étapes du mode à couple maximal. En effet, comme nous avons pu le voir dans les explications précédentes, les deux modes placent l’aimant central de manière différente. L’un est "en face des bobines" alors qu’avec l’autre est plutôt "entre les bobines".
&lt;/p&gt;
&lt;p&gt;
 Ainsi, en se mettant alternativement "en face" puis "entre" les bobines on va effectuer deux fois plus de pas que précédemment puisqu’on intercalera des étapes supplémentaires. Attention, lorsque je dis "deux fois plus de pas" je veux surtout dire que l’on aura des étapes intermédiaires qui augmentent la précision du déplacement. Ce mode de pilotage est un peu plus compliqué que les précédents puisqu’il est "plus long" (8 étapes au lieu de 4) mais rien d’insurmontable vous allez voir !
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Séquence à demi-pas" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/sequence-a-demi-pas.jpg"/&gt;
 &lt;figcaption&gt;
  Séquence à demi-pas
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Etape
      &lt;/th&gt;
      &lt;th&gt;
       In 1
      &lt;/th&gt;
      &lt;th&gt;
       In 2
      &lt;/th&gt;
      &lt;th&gt;
       In 3
      &lt;/th&gt;
      &lt;th&gt;
       In 4
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Pas n°1
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Pas n°1 ½
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Pas n°2
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Pas n°2 ½
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Pas n°3
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Pas n°3 ½
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Pas n°4
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Pas n°4 ½
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       LOW
      &lt;/td&gt;
      &lt;td&gt;
       HIGH
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Séquence à demi-pas
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 (un état '-' signifie "non nécessaire", placez-le à 0V pour que la bobine soit bien inactive).
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Chronogramme du pilotage à demi-pas" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/chronogramme-du-pilotage-a-demi-pas.jpg"/&gt;
 &lt;figcaption&gt;
  Chronogramme du pilotage à demi-pas
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Maintenant que vous connaissez les différents modes de fonctionnement, vous pouvez essayer de faire tourner le moteur en branchant les entrées IN1..4 à la masse ou au 5V. Si vous le faites dans le bon ordre, votre moteur devrait tourner tout doucement, en allant d’une étape vers l’autre.
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si vous avez une charge qui demande trop de couple (par exemple un poids à faire monter), il peut arrive que le moteur "saute" un/des pas. Cette donnée est à prendre en compte si vous vous servez du nombre de pas effectué logiciellement comme moyen de calcul de distance.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="utilisation-avec-arduino"&gt;
 &lt;a aria-hidden="true" href="#utilisation-avec-arduino"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utilisation avec Arduino
&lt;/h3&gt;
&lt;h4 id="câbler-les-moteurs"&gt;
 &lt;a aria-hidden="true" href="#câbler-les-moteurs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Câbler les moteurs
&lt;/h4&gt;
&lt;p&gt;
 Avec les chapitres précédents, vous avez vu comment on devait utiliser les moteurs avec les composants gérant la puissance. Cependant, nous n’avons pas vu à quoi relier les broches de commande… Et c’est très simple ! En effet, tous les signaux sont tout ou rien et n’ont même pas besoin d’être des PWM ! Ce qui veut dire que les 4 broches de pilotage ont juste besoin d’être reliées à 4 broches numériques de la carte Arduino (2, 3, 4, 5 par exemple). Voyons ce que cela donne en schéma (qui sont exactement les mêmes que ceux de la partie précédente, mais avec une carte Arduino en plus
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 )
&lt;/p&gt;
&lt;h5 id="le-moteur-unipolaire-2"&gt;
 &lt;a aria-hidden="true" href="#le-moteur-unipolaire-2"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le moteur unipolaire
&lt;/h5&gt;
&lt;figure&gt;
 &lt;img alt="Câblage du moteur unipolaire - Schéma" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/cablage-du-moteur-unipolaire-schema.jpg"/&gt;
 &lt;figcaption&gt;
  Câblage du moteur unipolaire - Schéma
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Câblage du moteur unipolaire - Montage" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/cablage-du-moteur-unipolaire-montage.jpg"/&gt;
 &lt;figcaption&gt;
  Câblage du moteur unipolaire - Montage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="le-moteur-bipolaire-1"&gt;
 &lt;a aria-hidden="true" href="#le-moteur-bipolaire-1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le moteur bipolaire
&lt;/h5&gt;
&lt;figure&gt;
 &lt;img alt="Câblage du moteur bipolaire - Schéma" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/cablage-du-moteur-bipolaire-schema.png"/&gt;
 &lt;figcaption&gt;
  Câblage du moteur bipolaire - Schéma
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Câblage du moteur bipolaire - Montage" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/cablage-du-moteur-bipolaire-montage.png"/&gt;
 &lt;figcaption&gt;
  Câblage du moteur bipolaire - Montage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Jusque là rien de vraiment compliqué, on passe à la suite !
&lt;/p&gt;
&lt;h4 id="piloter-les-moteurs-avec-arduino"&gt;
 &lt;a aria-hidden="true" href="#piloter-les-moteurs-avec-arduino"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Piloter les moteurs avec Arduino
&lt;/h4&gt;
&lt;h5 id="le-principe"&gt;
 &lt;a aria-hidden="true" href="#le-principe"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le principe
&lt;/h5&gt;
&lt;p&gt;
 L’idée est toute simple, il suffit de générer la bonne séquence pour piloter les moteurs à la bonne vitesse, vous vous en doutez surement. La principale difficulté réside dans la génération des signaux dans le bon ordre afin que le moteur se déplace correctement. Bien entendu, c’est plus facile à dire qu’à faire. En effet, pour que le mouvement soit fluide, il faut que les changements dans la séquence soient faits de manière régulière et pour cela il faut une gestion du temps correcte. Ça peut sembler simple au premier abord, mais quand il s’agira de mixer le comportement du moteur avec celui du programme principal (qui devra peut-être faire des traitements assez lourds) cela deviendra probablement beaucoup moins trivial. Une bonne méthode consisterait à utiliser un
 &lt;strong&gt;
  timer
 &lt;/strong&gt;
 sur lequel on réglerait la période à avoir qui refléterait ainsi la vitesse à obtenir. Mais avec Arduino vous allez voir que tout devient plus simple…
&lt;/p&gt;
&lt;h5 id="lobjet-stepper"&gt;
 &lt;a aria-hidden="true" href="#lobjet-stepper"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’objet Stepper
&lt;/h5&gt;
&lt;p&gt;
 Sur Arduino les choses sont bien faites pour rester simples et accessibles, un objet a déjà été créé pour vous aider à piloter un moteur pas à pas. Attention cependant, il ne fonctionne que pour les moteurs unipolaires et bipolaires. Il tire parti du fait que ces deux types de moteur peuvent fonctionner avec une séquence commune. Ainsi, tout est généralisé et utilisable le plus simplement possible ! Ce nouveau composant s’appelle "
 &lt;a href="http://arduino.cc/en/Reference/Stepper"&gt;
  Stepper
 &lt;/a&gt;
 ". À sa création, il prend en argument le nombre de pas total que fait le moteur pour faire un tour (information trouvable dans la documentation constructeur ou empiriquement). Cette information sert à déterminer la vitesse de rotation par minute que vous pourrez ensuite régler à loisir pour faire des déplacements lents ou rapides. Il prend aussi en arguments les quatre broches servant à contrôler l’engin. Son constructeur est donc :
 &lt;a href="http://arduino.cc/en/Reference/StepperConstructor"&gt;
  &lt;code&gt;
   Stepper(steps, pin1, pin2, pin3, pin4)
  &lt;/code&gt;
 &lt;/a&gt;
 . Pour initialiser le moteur, nous pouvons donc écrire la ligne suivante :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// pour un moteur de 200 pas par tour et brancher sur les broches 2, 3, 4, 5&lt;/span&gt;
&lt;span class="hljs-function"&gt;Stepper &lt;span class="hljs-title"&gt;moteur&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;200&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;, &lt;span class="hljs-number"&gt;3&lt;/span&gt;, &lt;span class="hljs-number"&gt;4&lt;/span&gt;, &lt;span class="hljs-number"&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Initialisation d’un moteur pas à pas
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Pour l’utiliser, deux fonctions sont utilisables. La première sert à définir la vitesse de rotation, exprimée en tours par minute (
 &lt;strong&gt;
  trs/min
 &lt;/strong&gt;
 ). Pour cela, on utilise la fonction
 &lt;a href="http://arduino.cc/en/Reference/StepperSetSpeed"&gt;
  &lt;code&gt;
   step(steps)
  &lt;/code&gt;
 &lt;/a&gt;
 qui prend en paramètre le nombre de pas à effectuer. Si ce nombre est négatif, le moteur tournera en sens inverse du nombre de pas spécifié. Voici un petit exemple qui va faire faire un aller-retour de 200 pas toutes les 2 secondes à votre moteur :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;Stepper.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// pour un moteur de 200 pas par tour et brancher sur les broches 2, 3, 4, 5&lt;/span&gt;
&lt;span class="hljs-function"&gt;Stepper &lt;span class="hljs-title"&gt;moteur&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;200&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;, &lt;span class="hljs-number"&gt;3&lt;/span&gt;, &lt;span class="hljs-number"&gt;4&lt;/span&gt;, &lt;span class="hljs-number"&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    moteur.setSpeed(&lt;span class="hljs-number"&gt;30&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// 30 tours par minute&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// (rappel : ici le moteur fait 200 pas par tour,&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// on fera donc 6000 pas par minute)&lt;/span&gt;
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    moteur.step(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
    delay(&lt;span class="hljs-number"&gt;100&lt;/span&gt;);
    moteur.step(&lt;span class="hljs-number"&gt;-1000&lt;/span&gt;);
    delay(&lt;span class="hljs-number"&gt;2000&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Utilisation simple d’un moteur pas à pas
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   La fonction
   &lt;code&gt;
    step(x)
   &lt;/code&gt;
   est bloquante. Cela signifie qu’elle agit comme un délai. Tant que le moteur n’a pas fait les x pas demandés, le reste du programme est en attente.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="aller-plus-loin"&gt;
 &lt;a aria-hidden="true" href="#aller-plus-loin"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Aller plus loin
&lt;/h4&gt;
&lt;p&gt;
 Vous êtes devenus incollables sur les moteurs pas à pas ? Vous en voulez encore plus ? Suffit de demander, voilà du bonus d’informations rien que pour toi cher lecteur !
&lt;/p&gt;
&lt;h5 id="2-fils-au-lieu-de-4"&gt;
 &lt;a aria-hidden="true" href="#2-fils-au-lieu-de-4"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 2 fils au lieu de 4 !
&lt;/h5&gt;
&lt;p&gt;
 On a toujours utilisé 4 fils pour commander les moteurs. C’est bien, mais que diriez-vous de sauver deux broches et de passer à seulement 2 fils au lieu de 4 ? Pas mal comme amélioration non ? Petite anecdote : un jour, un utilisateur des moteurs pàp s’est rendu compte d’un truc, dans une paire de fils pour piloter un moteur (dans la séquence utilisée par Arduino), l’information est toujours antagoniste. Si un fil est à HIGH, sa paire sera à LOW et vice versa. Du coup il suffit d’un peu d’électronique pour pouvoir inverser un des deux signaux et se retrouver ainsi avec seulement deux fils au lieu de 4 sortants d’Arduino.
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Moteur bipolaire avec 2 fils" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/moteur-bipolaire-avec-2-fils.jpg"/&gt;
 &lt;figcaption&gt;
  Moteur bipolaire avec 2 fils
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Moteur unipolaire avec 2 fils" src="./images/uploaded/tuto-arduino-603-a-petits-pas-le-moteur-pas-à-pas/moteur-unipolaire-avec-2-fils.jpg"/&gt;
 &lt;figcaption&gt;
  Moteur unipolaire avec 2 fils
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 (source des images :
 &lt;a href="http://www.tigoe.net/pcomp/code/circuits/motors/stepper-motors/"&gt;
  tigoe.net
 &lt;/a&gt;
 ) Cette solution est plutôt intéressante du fait que les entrées/sorties sont parfois une denrée rare sur Arduino !
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
&lt;/p&gt;
&lt;h5 id="le-l297"&gt;
 &lt;a aria-hidden="true" href="#le-l297"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le L297
&lt;/h5&gt;
&lt;p&gt;
 Lorsque vous utilisez votre Arduino, vous ne pouvez utiliser qu’une seule séquence. Par exemple pour un moteur bipolaire vous n’avez pas le choix entre le mode pas entier, demi-pas ou couple max. Une des solutions serait de générer vous-même les séquences. Mais c’est assez fastidieux. Une autre solution est électronique et compensera le développement informatique à faire. Un composant, nommé L297 (de la famille du L298 vous vous en doutez) est justement fait pour générer les séquences de moteur pas à pas. Il possède 4 broches de sorties pour générer la séquence et plusieurs en entrée pour "paramétrer" le fonctionnement voulu. Parmi elles on en retrouve trois principales :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  CW/CCW : (ClockWise ou Counter ClockWise) qui décidera du sens de rotation du moteur (horaire ou antihoraire).
 &lt;/li&gt;
 &lt;li&gt;
  Half/Full : Qui décide si on est en mode pas entier ou demi-pas.
 &lt;/li&gt;
 &lt;li&gt;
  Clk : (Clock) qui est l’horloge pour la vitesse. À chaque front descendant, le moteur fera un pas.
Je vous laisse un peu chercher sur le net, vous trouverez de plus amples informations à ce sujet. Avant même de regarder sur le net, en fait, regardez plutôt sa datasheet !!
  &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  Un des avantages de délester le travail des séquences au L297 est que vous n’aurez plus besoin de l’objet Stepper et de sa fonction step() bloquante. Il faudra cependant toujours utiliser un composant de puissance pour laisser passer les forts courants nécessaires au moteur (comme le L298 par exemple).
 &lt;/li&gt;
&lt;/ul&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Le moteur à courant continu</title><link href="https://eskimon.fr/tuto-arduino-601-le-moteur-%C3%A0-courant-continu" rel="alternate"></link><published>2013-12-12T12:08:00+01:00</published><updated>2013-12-12T12:08:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-12:/tuto-arduino-601-le-moteur-à-courant-continu</id><summary type="html">&lt;p&gt;
 Nul doute que vous connaissez l’existence des moteurs car il en existe toute une panoplie ! Le premier qui vous viendra certainement à l’esprit sera le moteur de voiture, ou peut-être celui présent dans une perceuse électrique. Voilà deux exemples d’objets dans lesquels on peut trouver un moteur …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Nul doute que vous connaissez l’existence des moteurs car il en existe toute une panoplie ! Le premier qui vous viendra certainement à l’esprit sera le moteur de voiture, ou peut-être celui présent dans une perceuse électrique. Voilà deux exemples d’objets dans lesquels on peut trouver un moteur. Bien entendu, ces deux moteurs sont de type différent, il serait en effet peu probable de faire avancer votre voiture avec un moteur de perceuse électrique… et puis l’utilisation d’une perceuse intégrant un moteur de voiture de plusieurs centaines de kilos serait fastidieuse
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 . Voyons donc comment fonctionne le moteur électrique le plus répandu : le moteur à courant continu…
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#un-moteur-ça-fait-quoi-au-juste"&gt;
    Un moteur, ça fait quoi au juste ?
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#transformation-de-lénergie-électrique-en-énergie-mécanique"&gt;
       Transformation de l’énergie électrique en énergie mécanique
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#principe-de-fonctionnement-du-moteur-à-courant-continu"&gt;
      Principe de fonctionnement du moteur à courant continu
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#du-vocabulaire"&gt;
       Du vocabulaire
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#de-nouvelles-bases-sur-lélectricité"&gt;
       De nouvelles bases sur l’électricité
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-magnétisme"&gt;
       Le magnétisme
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-stator"&gt;
       Le stator
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-rotor-et-la-mise-en-mouvement"&gt;
       Le rotor et la mise en mouvement
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#la-mécanique-liée-au-moteur"&gt;
      La mécanique liée au moteur
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-couple"&gt;
       Le couple
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-vitesse-de-rotation"&gt;
       La vitesse de rotation
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-réducteurs"&gt;
       Les réducteurs
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-puissance-et-le-rendement"&gt;
       La puissance et le rendement
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#quelques-relations"&gt;
      Quelques relations
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#lien-entre-vitesse-et-tension"&gt;
       Lien entre vitesse et tension
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#lien-entre-courant-et-couple"&gt;
       Lien entre courant et couple
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#alimenter-un-moteur"&gt;
    Alimenter un moteur
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#connecter-un-moteur-sur-une-source-dénergie-la-pile"&gt;
     Connecter un moteur sur une source d’énergie : la pile
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#avec-la-carte-arduino"&gt;
     Avec la carte Arduino
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#une-question-de-puissance-le-transistor"&gt;
      Une question de puissance : le transistor
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-bon-transistor"&gt;
       Le "bon" transistor
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#protégeons-lensemble-la-diode-de-roue-libre"&gt;
     Protégeons l’ensemble : la diode de roue libre
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#piloter-un-moteur"&gt;
    Piloter un moteur
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#faire-varier-la-vitesse-la-pwm"&gt;
     Faire varier la vitesse : la PWM
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#tourner-dans-les-deux-sens-le-pont-en-h"&gt;
      Tourner dans les deux sens : le pont en H
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#découverte-du-pont-en-h"&gt;
       Découverte du pont en H
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#allons-plus-loin-avec-le-pont-en-h"&gt;
       Allons plus loin avec le pont en H
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#les-protections-nécessaires"&gt;
      Les protections nécessaires
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#les-diodes-de-roue-libre"&gt;
       Les diodes de roue libre
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#un-peu-de-découplage"&gt;
       Un peu de découplage
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#des-solutions-intégrées-l293-l298"&gt;
      Des solutions intégrées : L293, L298…
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-l293d"&gt;
       Le L293(D)
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-l298"&gt;
       Le L298
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#et-arduino-dans-tout-ça"&gt;
    Et Arduino dans tout ça ?
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#bref-rappel-sur-les-pwm"&gt;
     Bref rappel sur les PWM
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#utiliser-un-shield-moteur"&gt;
      Utiliser un shield moteur
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-shield-officiel-darduino"&gt;
       Le shield officiel d’Arduino
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#mon-shield-non-officiel"&gt;
       Mon shield non-officiel
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#petit-programme-de-test"&gt;
      Petit programme de test
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#lélectronique"&gt;
       L’électronique
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#linformatique"&gt;
       L’informatique
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#programme-plus-élaboré"&gt;
     Programme plus élaboré
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="un-moteur-ça-fait-quoi-au-juste"&gt;
 &lt;a aria-hidden="true" href="#un-moteur-ça-fait-quoi-au-juste"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un moteur, ça fait quoi au juste ?
&lt;/h3&gt;
&lt;p&gt;
 Commençons en douceur par l’explication de ce à quoi sert un moteur et son fonctionnement.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ce chapitre n’est pas un des plus simples car il va faire apparaître des notions de mécanique qui sont indispensables pour comprendre le mouvement. Il prend en général plusieurs heures de cours pour être bien expliqué. Nous allons donc vous faire ici uniquement une introduction à la mécanique du moteur. Cependant, cette introduction présente des notions très importantes pour bien comprendre la suite, ne la négligez donc pas !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Prenons un moteur électrique des plus basiques qui soient :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Un moteur classique à courant continu" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/un-moteur-classique-a-courant-continu.jpg"/&gt;
 &lt;figcaption&gt;
  Un moteur classique à courant continu - (CC-BY-SA,
  &lt;a href="http://commons.wikimedia.org/wiki/File:3V_DC_Motor.jpg"&gt;
   Dcaldero8983
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Vous avez devant vos yeux un moteur électrique tel que l’on peut en trouver dans les engins de modélisme ou dans les voitures téléguidées. Mais sachez qu’il en existe de toute sorte, allant du miniature au gigantesque, adaptés à d’autres types d’applications. Nous nous contenterons ici des moteurs électriques "basiques".
&lt;/p&gt;
&lt;h5 id="transformation-de-lénergie-électrique-en-énergie-mécanique"&gt;
 &lt;a aria-hidden="true" href="#transformation-de-lénergie-électrique-en-énergie-mécanique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Transformation de l’énergie électrique en énergie mécanique
&lt;/h5&gt;
&lt;p&gt;
 Un moteur ça fait quoi ? Ça tourne ! On dit qu'
 &lt;strong&gt;
  un moteur est un composant de conversion d’énergie électrique en énergie mécanique
 &lt;/strong&gt;
 . Les moteurs à courant continu (ce terme deviendra plus clair par la suite) transforment l’énergie électrique en énergie mécanique de rotation, pour être précis. Mais ils peuvent également servir de générateur d’électricité en convertissant une énergie mécanique de rotation en énergie électrique. C’est le cas par exemple de la dynamo sur votre vélo !
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ce dernier point n’est pas à négliger, car même si dans la plupart des applications votre moteur servira à générer un mouvement, il sera possible qu’il soit actionné "à l’envers" et génère alors du courant. Il faudra donc protéger votre circuit pour ne pas l’abîmer à cause de cette "injection" d’énergie non désirée. On va revenir dessus plus loin.
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="principe-de-fonctionnement-du-moteur-à-courant-continu"&gt;
 &lt;a aria-hidden="true" href="#principe-de-fonctionnement-du-moteur-à-courant-continu"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Principe de fonctionnement du moteur à courant continu
&lt;/h4&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/u_SAJhvQ2a8" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="du-vocabulaire"&gt;
 &lt;a aria-hidden="true" href="#du-vocabulaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Du vocabulaire
&lt;/h5&gt;
&lt;figure&gt;
 &lt;img alt="Éclaté d'un MCC" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/eclate-dun-mcc.jpg"/&gt;
 &lt;figcaption&gt;
  Éclaté d'un MCC
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Tout d’abord, nous allons prendre une bonne habitude. Le moteur à courant continu s’appelle aussi "Machine à Courant Continu", que j’abrégerais en MCC. Le moteur à courant continu est composé de deux parties principales : le
 &lt;strong&gt;
  rotor
 &lt;/strong&gt;
 (partie qui tourne) et le
 &lt;strong&gt;
  stator
 &lt;/strong&gt;
 (partie qui ne tourne pas, statique). En électrotechnique (science traitant l’électricité en tant qu’énergie) le stator s’appelle aussi
 &lt;strong&gt;
  inducteur
 &lt;/strong&gt;
 (qui fait l’action d’induire) et le rotor s’appelle l'
 &lt;strong&gt;
  induit
 &lt;/strong&gt;
 (qui subit l’action d’induction). Sur l’image à droite, vous pouvez observer au milieu - entouré par les aimants bleu et rouge qui constituent le stator - le rotor composé de fils de cuivre enroulés sur un support lui même monté sur un axe. Cet axe, c’est l'
 &lt;strong&gt;
  arbre
 &lt;/strong&gt;
 de sortie du moteur. C’est lui qui va transmettre le mouvement à l’ensemble mécanique (pignons, chaîne, actionneur…) qui lui est associé en aval. Dans le cas d’un robot sur roues par exemple, on va mettre la roue sur cet axe, bien souvent par l’intermédiaire d’un réducteur qui diminue la vitesse de rotation tout en augmentant le couple. On verra tout à l’heure pour éclaircir ces termes qui doivent, pour l’instant, ne pas vous dire grand chose.
&lt;/p&gt;
&lt;h5 id="de-nouvelles-bases-sur-lélectricité"&gt;
 &lt;a aria-hidden="true" href="#de-nouvelles-bases-sur-lélectricité"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 De nouvelles bases sur l’électricité
&lt;/h5&gt;
&lt;p&gt;
 Vous le savez peut-être, lorsque un courant circule dans un fil
 &lt;strong&gt;
  il génère un
  &lt;a href="http://fr.wikipedia.org/wiki/Champ_magnétique"&gt;
   champ magnétique
  &lt;/a&gt;
  **. Plus le courant qui circulera dans le fil sera grand, plus l’intensité du champs magnétique sera élevée. Lorsqu’on enroule du fil électrique sur lui même, on forme une **bobine
 &lt;/strong&gt;
 . Un des avantages de la bobine est que l’on "cumule" ce champ magnétique. Donc plus on a de tours de fil (des
 &lt;strong&gt;
  spires
 &lt;/strong&gt;
 ) et plus le champ magnétique sera élevé pour un courant donné.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Bobine de cuivre - champ magnétique généré représenté par les lignes bleues" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/bobine-de-cuivre-champ-magnetique-genere-represente-par-les-lignes-bleues.jpg"/&gt;
 &lt;figcaption&gt;
  Bobine de cuivre - champ magnétique généré représenté par les lignes bleues
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 En somme, on retiendra que lorsque l’on crée une bobine de fil électrique, en général du cuivre, on additionne les champs magnétiques créés par chaque spire de la bobine. Ainsi, vous comprendrez aisément que plus la bobine contient de spires et plus le champ magnétique qu’elle induit est important. Je ne vous ai pas trop perdu, ça va pour le moment ?
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 Bon, continuons.
&lt;/p&gt;
&lt;h5 id="le-magnétisme"&gt;
 &lt;a aria-hidden="true" href="#le-magnétisme"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le magnétisme
&lt;/h5&gt;
&lt;p&gt;
 Oui, parlons-en. Ce sera bref, rassurez-vous. Je vais faire appel à votre expérience… avec les aimants. Vous avez tous déjà eu l’occasion d’avoir deux aimants dans la main et d’observer la résistance qu’ils émettent lorsque l’on veut les rapprocher l’un de l’autre, ou au contraire lorsqu’ils s’attirent soudainement dès qu’on les met un peu trop près. Ce phénomène est dû au champ magnétique que génèrent les aimants. Voilà un aimant permanent le plus simple soit-il :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Aimant permanent" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/aimant-permanent.jpg"/&gt;
 &lt;figcaption&gt;
  Aimant permanent
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Il possède un pôle
 &lt;strong&gt;
  N
 &lt;/strong&gt;
 ord et un pôle
 &lt;strong&gt;
  S
 &lt;/strong&gt;
 ud. Cet aimant génère un
 &lt;strong&gt;
  champ magnétique permanent
 &lt;/strong&gt;
 , c’est à dire que le champ magnétique est toujours présent. C’est quelque chose de totalement invisible mais qui permet de faire des choses intéressantes.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Champ magnétique généré par un aimant permanent" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/champ-magnetique-genere-par-un-aimant-permanent.jpg"/&gt;
 &lt;figcaption&gt;
  Champ magnétique généré par un aimant permanent
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Notez bien que j’ai ajouté des flèches représentatives du sens de parcours du champ magnétique, c’est important pour la suite. Bon, pour terminer mon explication sur le champ magnétique, je vous propose d’imaginer qu’il s’agisse d’un flux invisible, un peu comme le courant. Pour se rapprocher de l’analogie avec l’eau, on peut imaginer aussi que l’aimant est une fontaine qui propulse de l’eau (champ magnétique) et qui la récupère à l’opposé de là où il l’a éjectée. Tout ça, pour en arriver à vous dire qu’approcher deux aimants avec le même pôle, ils se repoussent mutuellement (les deux fontaines éjectent de l’eau l’une contre l’autre, ce qui a pour effet de les repousser). Et on le comprend bien lorsque l’on regarde le sens du champ magnétique :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Deux aimants permanents qui se repoussent mutuellement" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/deux-aimants-permanents-qui-se-repoussent-mutuellement.jpg"/&gt;
 &lt;figcaption&gt;
  Deux aimants permanents qui se repoussent mutuellement
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 En revanche, deux aimants orientés dans le même sens se rapprocheront car leur champ magnétique ira dans le sens opposé. La première "fontaine" va aspirer ce que l’autre éjecte, et l’autre va aspirer ce que la première éjecte.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt='Résultat de la mise en "série" de deux aimants permanents identiques' src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/resultat-de-la-mise-en-serie-de-deux-aimants-permanents-identiques.jpg"/&gt;
 &lt;figcaption&gt;
  Résultat de la mise en "série" de deux aimants permanents identiques
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Par conséquent, le champ magnétique global sera plus intense. On peut alors schématiser le résultat sous la forme d’un seul aimant plus puissant.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Schématisation du résultat précédent" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/schematisation-du-resultat-precedent.jpg"/&gt;
 &lt;figcaption&gt;
  Schématisation du résultat précédent
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ça nous amène où tout ça ? Je comprends mieux comment fonctionne les aimants, mais pour un moteur électrique, c’est pareil ? :roll:
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Eh oui, sans quoi mes explications n’auraient eu aucun sens si je vous avais dit qu’un moteur fonctionnait complètement différemment.
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Décomposons notre explication en deux parties.
&lt;/p&gt;
&lt;h5 id="le-stator"&gt;
 &lt;a aria-hidden="true" href="#le-stator"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le stator
&lt;/h5&gt;
&lt;p&gt;
 Le stator, je l’ai dit au début, est une partie immobile du moteur. Sur l’image, il se trouve sur les côtés contre le châssis. Il forme un aimant avec ses pôles Nord et Sud. Cet ensemble aimant+châssis constitue donc le stator :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Stator d'une MCC" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/stator-dune-mcc.png"/&gt;
 &lt;figcaption&gt;
  Stator d'une MCC
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Il n’y a pas plus de choses à dire, l’essentiel du phénomène de rotation créé par un moteur électrique va se jouer dans le rotor.
&lt;/p&gt;
&lt;h5 id="le-rotor-et-la-mise-en-mouvement"&gt;
 &lt;a aria-hidden="true" href="#le-rotor-et-la-mise-en-mouvement"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le rotor et la mise en mouvement
&lt;/h5&gt;
&lt;p&gt;
 Le rotor, je le rappelle, est situé au centre du stator. Pour faire très simple, je vous donnerai les explications ensuite, le rotor est la pièce maîtresse qui va recevoir un courant continu et va induire un champ magnétique variable pour mettre en rotation l’arbre du rotor. Si l’on veut, oui, il s’auto-met en rotation. :roll:
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Waaho ! Avec du courant continu il arrive à créer un champ magnétique variable ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Surprenant n’est-ce pas ? Eh bien, pour comprendre ce qu’il se passe, je vous propose de regarder comment est constitué un rotor de MCC (j’abrège) :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Rotor de MCC" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/rotor-de-mcc.png"/&gt;
 &lt;figcaption&gt;
  Rotor de MCC
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Il s’agit bien d’un schéma de principe, normalement un moteur à courant continu est constitué de trois bobines sur son rotor. Autrement on pourrait obtenir un équilibre qui empêcherait la rotation de l’arbre du moteur, mais surtout le moteur tournerait dans un sens aléatoire. Ce qui n’est pas très adapté quand on veut faire avancer son robot.
   &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voilà donc le rotor de notre moteur. Bien, passons à la prati…
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Eh oh, attends !! :shock: C’est quoi ces deux bobines, comment on les alimente ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Ha, j’oubliais presque ! Merci de me l’avoir rappelé. Il y a en effet un élément dont nous n’avons pas encore évoqué l’existence, il s’agit du
 &lt;strong&gt;
  collecteur
 &lt;/strong&gt;
 . Comme son nom le suggère, c’est un élément du moteur qui se situe sur l’arbre de rotation (ou l’axe du moteur si vous préférez) et qui a pour objectif de récupérer le courant afin de l’amener jusqu’aux bobines. On peut faire le schéma complet du moteur avec les bobines et le collecteur :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Schéma complet du moteur" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/schema-complet-du-moteur.png"/&gt;
 &lt;figcaption&gt;
  Schéma complet du moteur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Dites-vous bien qu’il ne s’agit là que d’un schéma de principe simplifié, car je le disais, les moteurs n’ayant que deux bobines n’existent pas.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Le collecteur est représenté ici sur la partie droite de l’image. Il est situé sur l’arbre du moteur (son axe). Ce collecteur est constitué de deux pastilles métalliques auxquelles sont reliées les extrémités des bobines. Le contact électrique entre la pile qui alimente le moteur et les bobines se fait par le collecteur et par des éléments "spéciaux" que l’on appelle les
 &lt;strong&gt;
  charbons
 &lt;/strong&gt;
 . Ces deux éléments servent à amener le courant dans les bobines en faisant un simple contact électrique de toucher. C’est à dire que les charbons frottent sur les pastilles métalliques lorsque le moteur tourne.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Et y tourne comment ce moteur, on le saura un jour ? :mad:
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Ça vient, patience.
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 Prenons la configuration du moteur tel qu’il est sur l’image précédente. Faites bien attention au sens des bobines, car si elles sont bobinées dans un sens opposé ou bien si le courant circule dans un sens opposé, le moteur ne tournera pas. J’ai donc pris le soin de mettre un point bleu et rouge, pour indiquer le sens des bobines (vous allez comprendre). Nous y voilà.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 Sur le schéma précédent, le pôle positif de la pile est relié, via le collecteur, à l’entrée bleue des deux bobines. Leur sortie, en rouge, est donc reliée, toujours via le collecteur, à la borne négative de la pile. Vous admettrez donc, avec ce que l’on a vu plus haut, qu’il y a un courant qui parcourt chaque bobine et que cela génère un champ magnétique. Ce champ est orienté selon le sens du courant qui circule dans la bobine. Dans un premier temps, on va se retrouver avec un champ magnétique tel que celui-ci :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Champ magnétique" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/champ-magnetique.png"/&gt;
 &lt;figcaption&gt;
  Champ magnétique
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ce champ va être opposé aux deux aimants permanents du stator du moteur, cela va donc mettre en mouvement l’axe du rotor. Et ce mouvement est défini par le fait que deux aimants orientés par leurs pôles opposés (face nord de l’un face au nord du deuxième, idem pour le sud) se repoussent. Par conséquent, l’axe du moteur, je le disais, va se mettre à tourner jusqu’à ce que les aimants permanents du stator se retrouvent face à chacun de leur complément créé par le champ magnétique des bobines :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="L'axe du moteur se met à tourner" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/laxe-du-moteur-se-met-a-tourner.png"/&gt;
 &lt;figcaption&gt;
  L'axe du moteur se met à tourner
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 ATTENDEEEEZ ! Ce n’est pas fini ! Non, car dans cette configuration, si rien ne se passe, eh bien… rien ne se passera.
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 Et oui, puisque le moteur est arrivé dans une phase de stabilité. En effet, chaque aimant est face au champ magnétique opposé, donc ils s’attirent mutuellement ce qui a pour effet de régir cette situation d’équilibre. L’élément qui va s’opposer à cet équilibre est le branchement des bobines du rotor. Vous ne l’avez peut-être pas remarqué, mais les bobines ne sont plus connectées comme à la situation précédente. Le point rouge des bobines est maintenant relié au pôle positif de la pile et le point bleu au pôle négatif. Le champ magnétique généré par les bobines change alors d’orientation et l’on se retrouve avec des champs opposés. Le moteur est à nouveau en situation de déséquilibre (car les champs magnétiques se repoussent) et cela entraîne un mouvement de rotation de l’axe du moteur. Vous l’aurez compris, ces situations se répètent indéfiniment car
 &lt;strong&gt;
  le moteur n’est jamais dans une configuration équilibrée
 &lt;/strong&gt;
 . C’est cette situation de déséquilibre qui fait que le moteur tourne.
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Alors attention, je le répète une dernière fois, un moteur n’ayant que deux bobines comme sur mes schémas ne peut pas fonctionner, car c’est un modèle simplifié qui engendrerait immédiatement une situation équilibrée à la mise sous tension.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Pour vous prouver que ce que je dis est vrai, voilà des photos du rotor d’un moteur à courant continu que j’avais démonté il y a bien, bieen, bieeeeeen longtemps :
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Rotor d'un moteur à courant continu" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/rotor-dun-moteur-a-courant-continu.jpg"/&gt;
 &lt;figcaption&gt;
  Rotor d'un moteur à courant continu
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Rotor d'un moteur à courant continu, encore" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/rotor-dun-moteur-a-courant-continu-encore.jpg"/&gt;
 &lt;figcaption&gt;
  Rotor d'un moteur à courant continu, encore
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Vous voyez ? Trois bobines et trois pastilles reliées à chacune, sur le collecteur. Bon, je ne vous refais pas les explications, vous êtes capables de comprendre comment cela fonctionne.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;h4 id="la-mécanique-liée-au-moteur"&gt;
 &lt;a aria-hidden="true" href="#la-mécanique-liée-au-moteur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La mécanique liée au moteur
&lt;/h4&gt;
&lt;p&gt;
 A présent, nous allons détailler quelques notions de mécanique liées aux moteurs.
&lt;/p&gt;
&lt;h5 id="le-couple"&gt;
 &lt;a aria-hidden="true" href="#le-couple"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le couple
&lt;/h5&gt;
&lt;p&gt;
 Le couple est une notion un peu dure à comprendre, mais on va y arriver ! Partons de son unité. L’unité du couple est le Newton-Mètre (Nm), attention j’ai bien dit Newton-Mètre et non pas Newton
 &lt;strong&gt;
  &lt;del&gt;
   par
  &lt;/del&gt;
 &lt;/strong&gt;
 mètre ! Cette unité nous informe de deux choses : le couple est à la fois lié à une distance (le mètre) mais aussi à une force (le Newton). Maintenant je rajoute une information : le couple s’exprime par rapport à un axe. On peut en conclure que le couple est
 &lt;strong&gt;
  la capacité du moteur à faire tourner quelque chose sur son axe
 &lt;/strong&gt;
 . Plus le couple est élevé et plus le moteur sera capable de mettre en mouvement quelque chose de lourd. Exemple : Vous avez peut-être déjà essayé de dévisser un écrou sur une roue de voiture. Vous avez probablement remarqué que plus vous avez une clef avec un bras long (un
 &lt;a href="http://fr.wikipedia.org/wiki/Effet_de_levier"&gt;
  effet de levier
 &lt;/a&gt;
 important) et plus il était facile de faire bouger l’écrou (pour le premier tour, quand il est bien vissé/coincé). Ce phénomène s’explique simplement par le fait que vous avez plus de couple avec un levier long qu’avec un levier court. Et c’est logique ! Si l’on considère que le couple s’exprime en Newton-mètre, le Newton se sera la force de vos muscles (considérée fixe dans notre cas d’étude, sauf si vous vous appelez Hulk) et le mètre sera la longueur du levier. Plus votre levier est grand, plus la distance est élevée, et plus le couple augmente. Ce qui nous permet d’introduire la formule suivante :
&lt;/p&gt;
&lt;p&gt;
 &lt;span class="inlineMath inlineMathDouble"&gt;
  &lt;span class="katex-display"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         C
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mi&gt;
         F
        &lt;/mi&gt;
        &lt;mo&gt;
         ×
        &lt;/mo&gt;
        &lt;mi&gt;
         r
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        C = F \times r
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.76666em;vertical-align:-0.08333em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.07153em;"&gt;
       C
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
       F
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mbin"&gt;
       ×
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
       r
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 Avec :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         C
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        C
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.07153em;"&gt;
       C
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  : le couple, en Newton-mètre
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         F
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        F
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
       F
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  : la force exercée, en Newton
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         r
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        r
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.43056em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.43056em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
       r
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  : le rayon de l’action (la longueur du levier si vous préférez), en mètre
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 On pourra également se souvenir que plus la force exercée sur l’axe de rotation d’un moteur est grande, plus il faudra un couple élevé. Et plus le couple du moteur sera élevé, moins votre futur robot aura de difficultés à supporter de lourdes charges. Cela dit, tout n’est pas parfait car plus la charge est lourde, plus la consommation électrique du moteur va augmenter. On va voir la relation qui recoupe ces deux informations.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Dans le système international, l’expression du couple se fait en N.m (Newton mètre), mais le commun des mortels arrive mieux à interpréter des kilos plutôt que des Newtons, donc les constructeurs prennent des raccourcis. Pour passer des Newtons en kilos, il suffit simplement de les multiplier par la constante gravitationnelle 'g' (qui vaut environ 9.81). Soit
   &lt;span class="inlineMath"&gt;
    &lt;span class="katex"&gt;
     &lt;span class="katex-mathml"&gt;
      &lt;math&gt;
       &lt;semantics&gt;
        &lt;mrow&gt;
         &lt;mn&gt;
          9
         &lt;/mn&gt;
         &lt;mi mathvariant="normal"&gt;
          .
         &lt;/mi&gt;
         &lt;mn&gt;
          8
         &lt;/mn&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
         &lt;mi&gt;
          N
         &lt;/mi&gt;
         &lt;mo&gt;
          ≃
         &lt;/mo&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
         &lt;mi&gt;
          k
         &lt;/mi&gt;
         &lt;mi&gt;
          g
         &lt;/mi&gt;
        &lt;/mrow&gt;
        &lt;annotation encoding="application/x-tex"&gt;
         9.81 N \simeq 1 kg
        &lt;/annotation&gt;
       &lt;/semantics&gt;
      &lt;/math&gt;
     &lt;/span&gt;
     &lt;span aria-hidden="true" class="katex-html"&gt;
      &lt;span class="strut" style="height:0.69444em;"&gt;
      &lt;/span&gt;
      &lt;span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"&gt;
      &lt;/span&gt;
      &lt;span class="base"&gt;
       &lt;span class="mord"&gt;
        9
       &lt;/span&gt;
       &lt;span class="mord"&gt;
        .
       &lt;/span&gt;
       &lt;span class="mord"&gt;
        8
       &lt;/span&gt;
       &lt;span class="mord"&gt;
        1
       &lt;/span&gt;
       &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
        N
       &lt;/span&gt;
       &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
       &lt;/span&gt;
       &lt;span class="mrel"&gt;
        ≃
       &lt;/span&gt;
       &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
       &lt;/span&gt;
       &lt;span class="mord"&gt;
        1
       &lt;/span&gt;
       &lt;span class="mord mathit" style="margin-right:0.03148em;"&gt;
        k
       &lt;/span&gt;
       &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
        g
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
   . Il en équivaut alors la même formule introduisant les mètres :
   &lt;span class="inlineMath"&gt;
    &lt;span class="katex"&gt;
     &lt;span class="katex-mathml"&gt;
      &lt;math&gt;
       &lt;semantics&gt;
        &lt;mrow&gt;
         &lt;mn&gt;
          9
         &lt;/mn&gt;
         &lt;mi mathvariant="normal"&gt;
          .
         &lt;/mi&gt;
         &lt;mn&gt;
          8
         &lt;/mn&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
         &lt;mi&gt;
          N
         &lt;/mi&gt;
         &lt;mi mathvariant="normal"&gt;
          .
         &lt;/mi&gt;
         &lt;mi&gt;
          m
         &lt;/mi&gt;
         &lt;mo&gt;
          =
         &lt;/mo&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
         &lt;mi&gt;
          k
         &lt;/mi&gt;
         &lt;mi&gt;
          g
         &lt;/mi&gt;
         &lt;mi mathvariant="normal"&gt;
          .
         &lt;/mi&gt;
         &lt;mi&gt;
          m
         &lt;/mi&gt;
        &lt;/mrow&gt;
        &lt;annotation encoding="application/x-tex"&gt;
         9.81 N.m = 1 kg.m
        &lt;/annotation&gt;
       &lt;/semantics&gt;
      &lt;/math&gt;
     &lt;/span&gt;
     &lt;span aria-hidden="true" class="katex-html"&gt;
      &lt;span class="strut" style="height:0.69444em;"&gt;
      &lt;/span&gt;
      &lt;span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"&gt;
      &lt;/span&gt;
      &lt;span class="base"&gt;
       &lt;span class="mord"&gt;
        9
       &lt;/span&gt;
       &lt;span class="mord"&gt;
        .
       &lt;/span&gt;
       &lt;span class="mord"&gt;
        8
       &lt;/span&gt;
       &lt;span class="mord"&gt;
        1
       &lt;/span&gt;
       &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
        N
       &lt;/span&gt;
       &lt;span class="mord"&gt;
        .
       &lt;/span&gt;
       &lt;span class="mord mathit"&gt;
        m
       &lt;/span&gt;
       &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
       &lt;/span&gt;
       &lt;span class="mrel"&gt;
        =
       &lt;/span&gt;
       &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
       &lt;/span&gt;
       &lt;span class="mord"&gt;
        1
       &lt;/span&gt;
       &lt;span class="mord mathit" style="margin-right:0.03148em;"&gt;
        k
       &lt;/span&gt;
       &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
        g
       &lt;/span&gt;
       &lt;span class="mord"&gt;
        .
       &lt;/span&gt;
       &lt;span class="mord mathit"&gt;
        m
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="la-vitesse-de-rotation"&gt;
 &lt;a aria-hidden="true" href="#la-vitesse-de-rotation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La vitesse de rotation
&lt;/h5&gt;
&lt;p&gt;
 La vitesse de rotation est mesurée par rapport à l’axe de rotation du moteur. Imaginons que le moteur entraîne son axe, lorsqu’il est alimenté par un courant, ce dernier va avoir une vitesse de rotation. Il peut tourner lentement ou rapidement. On mesure une vitesse de rotation en mesurant l’angle en radians parcourus par cet axe pendant une seconde. C’est à dire que le moteur est en fonctionnement, que son axe tourne et que l’on mesure jusqu’où va l’axe de rotation, à partir d’un point de départ fixe, en une seconde. Regardez plutôt l’image suivante pour mieux visualiser ce que je veux vous dire (comprenez que le truc gris et rond c’est le moteur que j’ai dessiné. :roll: On le voit de face et le cercle au milieu c’est son axe) :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Marquage de l'axe du moteur par un point jaune" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/marquage-de-laxe-du-moteur-par-un-point-jaune.jpg"/&gt;
 &lt;figcaption&gt;
  Marquage de l'axe du moteur par un point jaune
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Mesure de l'angle" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/mesure-de-langle.jpg"/&gt;
 &lt;figcaption&gt;
  Mesure de l'angle
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Marquage de l’axe du moteur par un point jaune (première image). Au bout d’une seconde (seconde image), mesure de l’angle
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        α
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       \alpha
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.43056em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.43056em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.0037em;"&gt;
      α
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 entre la position de départ et d’arrivée du point jaune. On obtient alors la vitesse de rotation de l’axe du moteur. Cette mesure est exprimée en angle par seconde.
&lt;/p&gt;
&lt;p&gt;
 Savez-vous pourquoi l’on mesure ainsi la vitesse de rotation de l’axe du moteur ? Eh bien car cette mesure est indépendante du diamètre de cet axe. Et oui, car un point éloigné du centre de l’axe du moteur a une distance beaucoup plus grande à parcourir que son homologue proche du centre de l’axe. Du coup, pour aller parcourir une distance plus grande en un temps donné il est obligé d’aller plus vite :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="La distance parcourue par le point jaune et vert est nulle" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/la-distance-parcourue-par-le-point-jaune-et-vert-est-nulle.jpg"/&gt;
 &lt;figcaption&gt;
  La distance parcourue par le point jaune et vert est nulle
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="La distance parcourue par chaque point est différente" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/la-distance-parcourue-par-chaque-point-est-differente.jpg"/&gt;
 &lt;figcaption&gt;
  La distance parcourue par chaque point est différente
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 En prenant la mesure à partir d’un point de départ fixe, la distance parcourue par le point jaune et vert est nulle (première image). En faisant tourner l’axe du moteur pendant une seconde, on s’aperçoit que la distance parcourue par chaque point est différente (seconde image). La distance parcourue par le point vert est quasiment 20 fois plus grande que celle parcourue par le point jaune ! Et c’est pourquoi le point vert aura été plus rapide que le point jaune car la distance qu’il parcourt en un même temps est beaucoup plus grande.
&lt;/p&gt;
&lt;p&gt;
 En mécanique, comme on aime les choses marrantes on exprime la vitesse de rotation en radians par seconde
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        r
       &lt;/mi&gt;
       &lt;mi&gt;
        a
       &lt;/mi&gt;
       &lt;mi&gt;
        d
       &lt;/mi&gt;
       &lt;mi mathvariant="normal"&gt;
        /
       &lt;/mi&gt;
       &lt;mi&gt;
        s
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       rad/s
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.75em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
      r
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      a
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      d
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      /
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      s
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 et son symbole est le caractère grec
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        ω
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       \omega
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.43056em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.43056em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      ω
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 , prononcez 'oméga’. Pour rappel, 360 est aux degrés ce que 2 pi est aux radians (autrement dit, une vitesse de 2pi/secondes équivaut à dire "l’axe fait un tour par seconde"). Cela se traduit par
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        3
       &lt;/mn&gt;
       &lt;mn&gt;
        6
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       360
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.64444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.64444em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      3
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      6
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 °
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mi&gt;
        π
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       = 2\pi
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.64444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.64444em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      π
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 radian. Malheureusement, la vitesse de rotation angulaire n’est pas donnée avec les caractéristiques du moteur. En revanche, on trouve une vitesse en tour/minutes (
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        t
       &lt;/mi&gt;
       &lt;mi&gt;
        r
       &lt;/mi&gt;
       &lt;mi mathvariant="normal"&gt;
        /
       &lt;/mi&gt;
       &lt;mi&gt;
        m
       &lt;/mi&gt;
       &lt;mi&gt;
        n
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       tr/mn
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.75em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit"&gt;
      t
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
      r
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      /
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      m
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      n
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 ). Vous allez voir que pour passer de cette unité aux rad/s, c’est assez facile. En effet, on sait qu’un tour correspond à une rotation de l’axe sur 360°. Soit 1tr = 360°. Et dans une minute il y a 60 secondes. Donc l’axe tourne
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mfrac&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
        &lt;mrow&gt;
         &lt;mn&gt;
          6
         &lt;/mn&gt;
         &lt;mn&gt;
          0
         &lt;/mn&gt;
        &lt;/mrow&gt;
       &lt;/mfrac&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       \frac 1 {60}
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.845108em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mopen nulldelimiter"&gt;
      &lt;/span&gt;
      &lt;span class="mfrac"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.845108em;"&gt;
          &lt;span style="top:-2.6550000000000002em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              6
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              0
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.15em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="stretchy" style="height:0.2em;"&gt;
            &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
             &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
             &lt;/path&gt;
            &lt;/svg&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.394em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             1
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.345em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mclose nulldelimiter"&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 de tour par seconde, s’il fait un tour par minute. On peut alors établir la relation suivante :
&lt;/p&gt;
&lt;p&gt;
 &lt;span class="inlineMath inlineMathDouble"&gt;
  &lt;span class="katex-display"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
        &lt;mi&gt;
         t
        &lt;/mi&gt;
        &lt;mi&gt;
         r
        &lt;/mi&gt;
        &lt;mi mathvariant="normal"&gt;
         /
        &lt;/mi&gt;
        &lt;mi&gt;
         m
        &lt;/mi&gt;
        &lt;mi&gt;
         n
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mn&gt;
         3
        &lt;/mn&gt;
        &lt;mn&gt;
         6
        &lt;/mn&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mo&gt;
         ×
        &lt;/mo&gt;
        &lt;mfrac&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
         &lt;mrow&gt;
          &lt;mn&gt;
           6
          &lt;/mn&gt;
          &lt;mn&gt;
           0
          &lt;/mn&gt;
         &lt;/mrow&gt;
        &lt;/mfrac&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mn&gt;
         6
        &lt;/mn&gt;
        &lt;mrow&gt;
         &lt;msup&gt;
          &lt;mrow&gt;
          &lt;/mrow&gt;
          &lt;mo&gt;
           ∘
          &lt;/mo&gt;
         &lt;/msup&gt;
        &lt;/mrow&gt;
        &lt;mi mathvariant="normal"&gt;
         /
        &lt;/mi&gt;
        &lt;mi&gt;
         s
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        1 tr/mn = 360 \times \frac 1 {60} = 6 {^{\circ}}/s
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:1.32144em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:2.00744em;vertical-align:-0.686em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       1
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       t
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
       r
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       /
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       m
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       n
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       3
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       6
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mbin"&gt;
       ×
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mopen nulldelimiter"&gt;
       &lt;/span&gt;
       &lt;span class="mfrac"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:1.32144em;"&gt;
           &lt;span style="top:-2.314em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord"&gt;
              6
             &lt;/span&gt;
             &lt;span class="mord"&gt;
              0
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.15em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="stretchy" style="height:0.2em;"&gt;
             &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
              &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
              &lt;/path&gt;
             &lt;/svg&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.677em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             1
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.686em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       &lt;span class="mclose nulldelimiter"&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       6
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord"&gt;
        &lt;span&gt;
        &lt;/span&gt;
        &lt;span class="msupsub"&gt;
         &lt;span class="vlist-t"&gt;
          &lt;span class="vlist-r"&gt;
           &lt;span class="vlist" style="height:0.724115em;"&gt;
            &lt;span style="top:-3.113em;margin-right:0.05em;"&gt;
             &lt;span class="pstrut" style="height:2.7em;"&gt;
             &lt;/span&gt;
             &lt;span class="sizing reset-size6 size3 mtight"&gt;
              &lt;span class="mord mtight"&gt;
               &lt;span class="mord mtight"&gt;
                ∘
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       /
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       s
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 Hors, on sait que
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        3
       &lt;/mn&gt;
       &lt;mn&gt;
        6
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mrow&gt;
        &lt;msup&gt;
         &lt;mrow&gt;
         &lt;/mrow&gt;
         &lt;mo&gt;
          ∘
         &lt;/mo&gt;
        &lt;/msup&gt;
       &lt;/mrow&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mi&gt;
        π
       &lt;/mi&gt;
       &lt;mi&gt;
        r
       &lt;/mi&gt;
       &lt;mi&gt;
        a
       &lt;/mi&gt;
       &lt;mi&gt;
        d
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       360 {^{\circ}} = 2\pi rad
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.69444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.69444em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      3
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      6
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord"&gt;
       &lt;span&gt;
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.674115em;"&gt;
           &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mtight"&gt;
               ∘
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      π
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
      r
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      a
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      d
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 , ce qui donne une nouvelle relation :
&lt;/p&gt;
&lt;p&gt;
 &lt;span class="inlineMath inlineMathDouble"&gt;
  &lt;span class="katex-display"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
        &lt;mi&gt;
         t
        &lt;/mi&gt;
        &lt;mi&gt;
         r
        &lt;/mi&gt;
        &lt;mi mathvariant="normal"&gt;
         /
        &lt;/mi&gt;
        &lt;mi&gt;
         m
        &lt;/mi&gt;
        &lt;mi&gt;
         n
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
        &lt;mi&gt;
         π
        &lt;/mi&gt;
        &lt;mo&gt;
         ×
        &lt;/mo&gt;
        &lt;mfrac&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
         &lt;mrow&gt;
          &lt;mn&gt;
           6
          &lt;/mn&gt;
          &lt;mn&gt;
           0
          &lt;/mn&gt;
         &lt;/mrow&gt;
        &lt;/mfrac&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mfrac&gt;
         &lt;mi&gt;
          π
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mn&gt;
           3
          &lt;/mn&gt;
          &lt;mn&gt;
           0
          &lt;/mn&gt;
         &lt;/mrow&gt;
        &lt;/mfrac&gt;
        &lt;mi&gt;
         r
        &lt;/mi&gt;
        &lt;mi&gt;
         a
        &lt;/mi&gt;
        &lt;mi&gt;
         d
        &lt;/mi&gt;
        &lt;mi mathvariant="normal"&gt;
         /
        &lt;/mi&gt;
        &lt;mi&gt;
         s
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        1 tr/mn = 2\pi \times \frac 1 {60} = \frac \pi {30} rad/s
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:1.32144em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:2.00744em;vertical-align:-0.686em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       1
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       t
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
       r
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       /
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       m
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       n
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
       π
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mbin"&gt;
       ×
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mopen nulldelimiter"&gt;
       &lt;/span&gt;
       &lt;span class="mfrac"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:1.32144em;"&gt;
           &lt;span style="top:-2.314em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord"&gt;
              6
             &lt;/span&gt;
             &lt;span class="mord"&gt;
              0
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.15em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="stretchy" style="height:0.2em;"&gt;
             &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
              &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
              &lt;/path&gt;
             &lt;/svg&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.677em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             1
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.686em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       &lt;span class="mclose nulldelimiter"&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mopen nulldelimiter"&gt;
       &lt;/span&gt;
       &lt;span class="mfrac"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:1.10756em;"&gt;
           &lt;span style="top:-2.314em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord"&gt;
              3
             &lt;/span&gt;
             &lt;span class="mord"&gt;
              0
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.15em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="stretchy" style="height:0.2em;"&gt;
             &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
              &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
              &lt;/path&gt;
             &lt;/svg&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.677em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
             π
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.686em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       &lt;span class="mclose nulldelimiter"&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
       r
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       a
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       d
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       /
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       s
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 On peut finalement donner la formule qui convertit un radian par seconde en tours par minutes :
&lt;/p&gt;
&lt;p&gt;
 &lt;span class="inlineMath inlineMathDouble"&gt;
  &lt;span class="katex-display"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
        &lt;mi&gt;
         r
        &lt;/mi&gt;
        &lt;mi&gt;
         a
        &lt;/mi&gt;
        &lt;mi&gt;
         d
        &lt;/mi&gt;
        &lt;mi mathvariant="normal"&gt;
         /
        &lt;/mi&gt;
        &lt;mi&gt;
         s
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mfrac&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
         &lt;mrow&gt;
          &lt;mfrac&gt;
           &lt;mi&gt;
            π
           &lt;/mi&gt;
           &lt;mrow&gt;
            &lt;mn&gt;
             3
            &lt;/mn&gt;
            &lt;mn&gt;
             0
            &lt;/mn&gt;
           &lt;/mrow&gt;
          &lt;/mfrac&gt;
         &lt;/mrow&gt;
        &lt;/mfrac&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mfrac&gt;
         &lt;mrow&gt;
          &lt;mn&gt;
           3
          &lt;/mn&gt;
          &lt;mn&gt;
           0
          &lt;/mn&gt;
         &lt;/mrow&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           π
          &lt;/mi&gt;
         &lt;/mrow&gt;
        &lt;/mfrac&gt;
        &lt;mo&gt;
         ≈
        &lt;/mo&gt;
        &lt;mn&gt;
         9
        &lt;/mn&gt;
        &lt;mo separator="true"&gt;
         ,
        &lt;/mo&gt;
        &lt;mn&gt;
         5
        &lt;/mn&gt;
        &lt;mn&gt;
         5
        &lt;/mn&gt;
        &lt;mi&gt;
         t
        &lt;/mi&gt;
        &lt;mi&gt;
         r
        &lt;/mi&gt;
        &lt;mi&gt;
         s
        &lt;/mi&gt;
        &lt;mi mathvariant="normal"&gt;
         /
        &lt;/mi&gt;
        &lt;mi&gt;
         m
        &lt;/mi&gt;
        &lt;mi&gt;
         n
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        1 rad/s = \frac 1 {\frac \pi {30}} = \frac {30} {\pi} \approx 9,55 trs/mn
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:1.32144em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:2.35244em;vertical-align:-1.0310000000000001em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       1
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
       r
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       a
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       d
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       /
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       s
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mopen nulldelimiter"&gt;
       &lt;/span&gt;
       &lt;span class="mfrac"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:1.32144em;"&gt;
           &lt;span style="top:-2.314em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord"&gt;
              &lt;span class="mopen nulldelimiter"&gt;
              &lt;/span&gt;
              &lt;span class="mfrac"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.695392em;"&gt;
                  &lt;span style="top:-2.6550000000000002em;"&gt;
                   &lt;span class="pstrut" style="height:3em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size6 size3 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mtight"&gt;
                      3
                     &lt;/span&gt;
                     &lt;span class="mord mtight"&gt;
                      0
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                  &lt;span style="top:-3.15em;"&gt;
                   &lt;span class="pstrut" style="height:3em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="stretchy" style="height:0.2em;"&gt;
                    &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
                     &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
                     &lt;/path&gt;
                    &lt;/svg&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                  &lt;span style="top:-3.394em;"&gt;
                   &lt;span class="pstrut" style="height:3em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size6 size3 mtight"&gt;
                    &lt;span class="mord mathit mtight" style="margin-right:0.03588em;"&gt;
                     π
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.345em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="mclose nulldelimiter"&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.15em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="stretchy" style="height:0.2em;"&gt;
             &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
              &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
              &lt;/path&gt;
             &lt;/svg&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.677em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             1
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:1.0310000000000001em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       &lt;span class="mclose nulldelimiter"&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mopen nulldelimiter"&gt;
       &lt;/span&gt;
       &lt;span class="mfrac"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:1.32144em;"&gt;
           &lt;span style="top:-2.314em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
              π
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.15em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="stretchy" style="height:0.2em;"&gt;
             &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
              &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
              &lt;/path&gt;
             &lt;/svg&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.677em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord"&gt;
              3
             &lt;/span&gt;
             &lt;span class="mord"&gt;
              0
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.686em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       &lt;span class="mclose nulldelimiter"&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       ≈
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       9
      &lt;/span&gt;
      &lt;span class="mpunct"&gt;
       ,
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.16666666666666666em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       5
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       5
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       t
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
       r
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       s
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       /
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       m
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       n
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Et je fais comment si je veux savoir à quelle vitesse ira mon robot ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Eh bien comme je vous l’expliquais précédemment, pour répondre à cette question il faut connaitre le diamètre de la roue. Prenons l’exemple d’une roue ayant 5cm de diamètre (soit 0.05 mètres) et un moteur qui tourne à 20 rad/s. Le périmètre de la roue vaut donc 15.7 cm (0.157 m) d’après la formule du périmètre d’un cercle qui est
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        P
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mi&gt;
        π
       &lt;/mi&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mi&gt;
        r
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       P = 2 \times \pi \times r
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.76666em;vertical-align:-0.08333em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
      P
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      π
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
      r
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 , avec
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        r
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       r
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.43056em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.43056em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
      r
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 le rayon du cercle. Cela signifie qu’en faisant tourner la roue sur une surface plane et en lui faisant faire un tour sur elle-même, la roue aura parcouru 0,157m sur cette surface. On admet que le moteur tourne à 20 rad/s ce qui représente donc 3.18 tours de l’axe du moteur par seconde (d’après la dernière formule que je vous ai donnée). On peut donc calculer la distance parcourue en une seconde grâce à la formule :
&lt;/p&gt;
&lt;p&gt;
 &lt;span class="inlineMath inlineMathDouble"&gt;
  &lt;span class="katex-display"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mfrac&gt;
         &lt;mi&gt;
          d
         &lt;/mi&gt;
         &lt;mi&gt;
          t
         &lt;/mi&gt;
        &lt;/mfrac&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        V = \frac d t
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:1.37144em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:2.05744em;vertical-align:-0.686em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mopen nulldelimiter"&gt;
       &lt;/span&gt;
       &lt;span class="mfrac"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:1.37144em;"&gt;
           &lt;span style="top:-2.314em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord mathit"&gt;
             t
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.15em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="stretchy" style="height:0.2em;"&gt;
             &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
              &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
              &lt;/path&gt;
             &lt;/svg&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.677em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord mathit"&gt;
             d
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.686em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       &lt;span class="mclose nulldelimiter"&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 Avec :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        V
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  : la vitesse en mètre par seconde (m/s)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         d
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        d
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.69444em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.69444em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit"&gt;
       d
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  : la distance en mètre (m)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         t
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        t
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.61508em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.61508em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit"&gt;
       t
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  : le temps en secondes (s)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 On va donc adapter cette formule avec la distance qu’a parcouru la roue en faisant un tour sur elle-même (
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         d
        &lt;/mi&gt;
        &lt;mrow&gt;
         &lt;mi&gt;
          r
         &lt;/mi&gt;
         &lt;mi&gt;
          o
         &lt;/mi&gt;
         &lt;mi&gt;
          u
         &lt;/mi&gt;
         &lt;mi&gt;
          e
         &lt;/mi&gt;
        &lt;/mrow&gt;
       &lt;/msub&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       d_{roue}
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.69444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.84444em;vertical-align:-0.15em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit"&gt;
       d
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.151392em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
              r
             &lt;/span&gt;
             &lt;span class="mord mathit mtight"&gt;
              o
             &lt;/span&gt;
             &lt;span class="mord mathit mtight"&gt;
              u
             &lt;/span&gt;
             &lt;span class="mord mathit mtight"&gt;
              e
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 ) et le nombre de tours par seconde de l’axe du moteur (
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         t
        &lt;/mi&gt;
        &lt;mrow&gt;
         &lt;mi&gt;
          t
         &lt;/mi&gt;
         &lt;mi&gt;
          o
         &lt;/mi&gt;
         &lt;mi&gt;
          u
         &lt;/mi&gt;
         &lt;mi&gt;
          r
         &lt;/mi&gt;
        &lt;/mrow&gt;
       &lt;/msub&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       t_{tour}
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.61508em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.76508em;vertical-align:-0.15em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit"&gt;
       t
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.2805559999999999em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mathit mtight"&gt;
              t
             &lt;/span&gt;
             &lt;span class="mord mathit mtight"&gt;
              o
             &lt;/span&gt;
             &lt;span class="mord mathit mtight"&gt;
              u
             &lt;/span&gt;
             &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
              r
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 ) :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        V
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mfrac&gt;
        &lt;mrow&gt;
         &lt;msub&gt;
          &lt;mi&gt;
           d
          &lt;/mi&gt;
          &lt;mrow&gt;
           &lt;mi&gt;
            r
           &lt;/mi&gt;
           &lt;mi&gt;
            o
           &lt;/mi&gt;
           &lt;mi&gt;
            u
           &lt;/mi&gt;
           &lt;mi&gt;
            e
           &lt;/mi&gt;
          &lt;/mrow&gt;
         &lt;/msub&gt;
        &lt;/mrow&gt;
        &lt;mrow&gt;
         &lt;msub&gt;
          &lt;mi&gt;
           t
          &lt;/mi&gt;
          &lt;mrow&gt;
           &lt;mi&gt;
            t
           &lt;/mi&gt;
           &lt;mi&gt;
            o
           &lt;/mi&gt;
           &lt;mi&gt;
            u
           &lt;/mi&gt;
           &lt;mi&gt;
            r
           &lt;/mi&gt;
          &lt;/mrow&gt;
         &lt;/msub&gt;
        &lt;/mrow&gt;
       &lt;/mfrac&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       V = \frac{d_{roue}}{t_{tour}}
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.8962079999999999em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1.3413079999999997em;vertical-align:-0.44509999999999994em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
      V
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mopen nulldelimiter"&gt;
      &lt;/span&gt;
      &lt;span class="mfrac"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.8962079999999999em;"&gt;
          &lt;span style="top:-2.655em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight"&gt;
               t
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.29634285714285713em;"&gt;
                  &lt;span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"&gt;
                   &lt;span class="pstrut" style="height:2.5em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size3 size1 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      t
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      o
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      u
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
                      r
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.143em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.15em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="stretchy" style="height:0.2em;"&gt;
            &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
             &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
             &lt;/path&gt;
            &lt;/svg&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.4101em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight"&gt;
               d
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.16454285714285719em;"&gt;
                  &lt;span style="top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;"&gt;
                   &lt;span class="pstrut" style="height:2.5em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size3 size1 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
                      r
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      o
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      u
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.143em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.44509999999999994em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mclose nulldelimiter"&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 On sait que
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         d
        &lt;/mi&gt;
        &lt;mrow&gt;
         &lt;mi&gt;
          r
         &lt;/mi&gt;
         &lt;mi&gt;
          o
         &lt;/mi&gt;
         &lt;mi&gt;
          u
         &lt;/mi&gt;
         &lt;mi&gt;
          e
         &lt;/mi&gt;
        &lt;/mrow&gt;
       &lt;/msub&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mi mathvariant="normal"&gt;
        .
       &lt;/mi&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mn&gt;
        5
       &lt;/mn&gt;
       &lt;mn&gt;
        7
       &lt;/mn&gt;
       &lt;mi&gt;
        m
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       d_{roue} = 0.157m
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.69444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.84444em;vertical-align:-0.15em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit"&gt;
       d
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.151392em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
              r
             &lt;/span&gt;
             &lt;span class="mord mathit mtight"&gt;
              o
             &lt;/span&gt;
             &lt;span class="mord mathit mtight"&gt;
              u
             &lt;/span&gt;
             &lt;span class="mord mathit mtight"&gt;
              e
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      .
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      5
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      7
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      m
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 et que
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         t
        &lt;/mi&gt;
        &lt;mrow&gt;
         &lt;mi&gt;
          t
         &lt;/mi&gt;
         &lt;mi&gt;
          o
         &lt;/mi&gt;
         &lt;mi&gt;
          u
         &lt;/mi&gt;
         &lt;mi&gt;
          r
         &lt;/mi&gt;
        &lt;/mrow&gt;
       &lt;/msub&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        3
       &lt;/mn&gt;
       &lt;mo separator="true"&gt;
        ,
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mn&gt;
        8
       &lt;/mn&gt;
       &lt;mi&gt;
        t
       &lt;/mi&gt;
       &lt;mi&gt;
        r
       &lt;/mi&gt;
       &lt;mi mathvariant="normal"&gt;
        /
       &lt;/mi&gt;
       &lt;mi&gt;
        s
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mfrac&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
        &lt;mrow&gt;
         &lt;mn&gt;
          3
         &lt;/mn&gt;
         &lt;mo separator="true"&gt;
          ,
         &lt;/mo&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
         &lt;mn&gt;
          8
         &lt;/mn&gt;
        &lt;/mrow&gt;
       &lt;/mfrac&gt;
       &lt;mi&gt;
        t
       &lt;/mi&gt;
       &lt;mi&gt;
        r
       &lt;/mi&gt;
       &lt;mi mathvariant="normal"&gt;
        .
       &lt;/mi&gt;
       &lt;mi&gt;
        s
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       t_{tour} = 3,18tr/s = \frac 1 {3,18} tr.s
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.845108em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1.326216em;vertical-align:-0.481108em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit"&gt;
       t
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.2805559999999999em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mathit mtight"&gt;
              t
             &lt;/span&gt;
             &lt;span class="mord mathit mtight"&gt;
              o
             &lt;/span&gt;
             &lt;span class="mord mathit mtight"&gt;
              u
             &lt;/span&gt;
             &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
              r
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      3
     &lt;/span&gt;
     &lt;span class="mpunct"&gt;
      ,
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.16666666666666666em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      8
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      t
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
      r
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      /
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      s
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mopen nulldelimiter"&gt;
      &lt;/span&gt;
      &lt;span class="mfrac"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.845108em;"&gt;
          &lt;span style="top:-2.6550000000000002em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              3
             &lt;/span&gt;
             &lt;span class="mpunct mtight"&gt;
              ,
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              1
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              8
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.15em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="stretchy" style="height:0.2em;"&gt;
            &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
             &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
             &lt;/path&gt;
            &lt;/svg&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.394em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             1
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.481108em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mclose nulldelimiter"&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      t
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
      r
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      .
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      s
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        V
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mfrac&gt;
        &lt;mrow&gt;
         &lt;mn&gt;
          0
         &lt;/mn&gt;
         &lt;mo separator="true"&gt;
          ,
         &lt;/mo&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
         &lt;mn&gt;
          5
         &lt;/mn&gt;
         &lt;mn&gt;
          7
         &lt;/mn&gt;
        &lt;/mrow&gt;
        &lt;mrow&gt;
         &lt;mfrac&gt;
          &lt;mn&gt;
           1
          &lt;/mn&gt;
          &lt;mrow&gt;
           &lt;mn&gt;
            3
           &lt;/mn&gt;
           &lt;mo separator="true"&gt;
            ,
           &lt;/mo&gt;
           &lt;mn&gt;
            1
           &lt;/mn&gt;
           &lt;mn&gt;
            8
           &lt;/mn&gt;
          &lt;/mrow&gt;
         &lt;/mfrac&gt;
        &lt;/mrow&gt;
       &lt;/mfrac&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mo separator="true"&gt;
        ,
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mn&gt;
        5
       &lt;/mn&gt;
       &lt;mn&gt;
        7
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        3
       &lt;/mn&gt;
       &lt;mo separator="true"&gt;
        ,
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mn&gt;
        8
       &lt;/mn&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       V = \frac {0,157} {\frac 1 {3,18}} = 0,157 \times 3,18
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.897216em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1.636256em;vertical-align:-0.7390399999999999em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
      V
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mopen nulldelimiter"&gt;
      &lt;/span&gt;
      &lt;span class="mfrac"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.897216em;"&gt;
          &lt;span style="top:-2.5989799999999996em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mopen nulldelimiter sizing reset-size3 size6"&gt;
              &lt;/span&gt;
              &lt;span class="mfrac"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.8443142857142858em;"&gt;
                  &lt;span style="top:-2.656em;"&gt;
                   &lt;span class="pstrut" style="height:3em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size3 size1 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mtight"&gt;
                      3
                     &lt;/span&gt;
                     &lt;span class="mpunct mtight"&gt;
                      ,
                     &lt;/span&gt;
                     &lt;span class="mord mtight"&gt;
                      1
                     &lt;/span&gt;
                     &lt;span class="mord mtight"&gt;
                      8
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                  &lt;span style="top:-3.1275em;"&gt;
                   &lt;span class="pstrut" style="height:3em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="stretchy mtight" style="height:0.245em;"&gt;
                    &lt;svg height="0.245em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
                     &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
                     &lt;/path&gt;
                    &lt;/svg&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                  &lt;span style="top:-3.384em;"&gt;
                   &lt;span class="pstrut" style="height:3em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size3 size1 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     1
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.48288571428571425em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="mclose nulldelimiter sizing reset-size3 size6"&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.15em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="stretchy" style="height:0.2em;"&gt;
            &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
             &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
             &lt;/path&gt;
            &lt;/svg&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.446108em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              0
             &lt;/span&gt;
             &lt;span class="mpunct mtight"&gt;
              ,
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              1
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              5
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              7
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.7390399999999999em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mclose nulldelimiter"&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mpunct"&gt;
      ,
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.16666666666666666em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      5
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      7
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      3
     &lt;/span&gt;
     &lt;span class="mpunct"&gt;
      ,
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.16666666666666666em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      8
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        V
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mo separator="true"&gt;
        ,
       &lt;/mo&gt;
       &lt;mn&gt;
        5
       &lt;/mn&gt;
       &lt;mi&gt;
        m
       &lt;/mi&gt;
       &lt;mi mathvariant="normal"&gt;
        /
       &lt;/mi&gt;
       &lt;mi&gt;
        s
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       V = 0,5 m/s
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.75em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
      V
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mpunct"&gt;
      ,
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.16666666666666666em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      5
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      m
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      /
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      s
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 Le robot parcourt donc une distance de 50 centimètres en une seconde (ce qui équivaut à 1800 mètres par heure). Vous avez maintenant toutes les cartes en main pour pouvoir faire avancer votre robot à la vitesse que vous voulez !
&lt;/p&gt;
&lt;h5 id="les-réducteurs"&gt;
 &lt;a aria-hidden="true" href="#les-réducteurs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les réducteurs
&lt;/h5&gt;
&lt;p&gt;
 Un moteur électrique est bien souvent très rapide en rotation. Hors si vous avez besoin de faire un robot qui ne va pas trop vite, il va falloir faire en sorte de réduire sa vitesse de rotation. On peut très bien mettre un "frein" qui va empêcher le moteur de tourner vite, ou bien le piloter (on va voir ça toute à l’heure). Cela dit, même si on réduit sa vitesse de rotation, le moteur ne va pas pouvoir supporter des charges lourdes. Autrement dit, votre robot ne pourra même pas se supporter lui-même ! Nous avons donc besoin de couple. Et pour avoir du couple, tout en réduisant la vitesse de rotation, on va utiliser ce que l’on appelle un
 &lt;strong&gt;
  réducteur
 &lt;/strong&gt;
 . Un réducteur est un ensemble composé d'
 &lt;strong&gt;
  engrenages
 &lt;/strong&gt;
 qui permet de réduire la vitesse de rotation de l’axe du moteur tout en augmentant le couple de sortie. Sur l’image suivante, extraite du site de l'
 &lt;a href="http://www.technologie.ac-aix-marseille.fr/spip/spip.php?article35&amp;amp;id_document=51"&gt;
  Académie d’Aix Marseille
 &lt;/a&gt;
 , on peut observer un ensemble moteur + réducteur + roue :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Ensemble moteur + réducteur + roue" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/ensemble-moteur-reducteur-roue.jpg"/&gt;
 &lt;figcaption&gt;
  Ensemble moteur + réducteur + roue
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Source :
 &lt;a href="http://www.technologie.ac-aix-marseille.fr/spip/spip.php?article35&amp;amp;id_document=51"&gt;
  http://www.technologie.ac-aix-marseille.fr/spip/spip.php?article35&amp;amp;id_document=51
 &lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;
 La règle qui régit son fonctionnement indique qu’entre deux engrenages la puissance est conservée (aux pertes près qui sont dues au frottement des engrenages entre eux). Et comme la puissance mécanique est dépendante du couple et de la vitesse (partie suivante), on peut facilement passer de l’un à l’autre. Reprenons notre roue faisant 5cm de diamètre. Mettez en contact contre elle une grande roue de 10cm de diamètre (deux fois plus grande). Lorsque la petite roue fait un tour, elle va entrainer la deuxième roue plus grande qui va faire… un demi-tour. Oui car le périmètre de la grande roue est deux fois plus grand que celui de la petite. Lorsque la petite parcourt 0,157m en faisant un tour sur elle-même, la grande parcourt elle aussi cette distance mais en ne faisant qu’un demi-tour sur elle-même.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="La petite entraîne la grande" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/la-petite-entraine-la-grande.jpg"/&gt;
 &lt;figcaption&gt;
  La petite entraîne la grande
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Lorsque la petite roue fait un demi tour, la grande roue fait un quart de tour" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/lorsque-la-petite-roue-fait-un-demi-tour-la-grande-roue-fait-un-quart-de-tour.jpg"/&gt;
 &lt;figcaption&gt;
  Lorsque la petite roue fait un demi tour, la grande roue fait un quart de tour
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Deux roues en contact, la petite entraîne la grande dont le diamètre est deux fois plus grand que la petite (première image). Le point vert et jaune sert à repérer la rotation de chaque roue. Lorsque la petite roue fait un demi tour, la grande roue fait un quart de tour (seconde image). Si elle fait un tour complet, la grande roue ne fera qu’un demi-tour.
&lt;/p&gt;
&lt;p&gt;
 Ce que l’on ne voit pas sur mon dessin, c’est le couple. Hors, ce que vous ne savez peut-être pas, c’est que l’axe de la grande roue bénéficie en fait de deux fois plus de couple que celui de la petite. Car les réducteurs ont pour propriété, je le disais, de modifier le couple de sortie et la vitesse. Et ce selon la relation suivante qui donne le
 &lt;strong&gt;
  rapport de réduction
 &lt;/strong&gt;
 :
&lt;/p&gt;
&lt;p&gt;
 &lt;span class="inlineMath inlineMathDouble"&gt;
  &lt;span class="katex-display"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         R
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mfrac&gt;
         &lt;mrow&gt;
          &lt;msub&gt;
           &lt;mi&gt;
            ω
           &lt;/mi&gt;
           &lt;mrow&gt;
            &lt;mi&gt;
             e
            &lt;/mi&gt;
            &lt;mi&gt;
             n
            &lt;/mi&gt;
            &lt;mi&gt;
             t
            &lt;/mi&gt;
            &lt;mi&gt;
             r
            &lt;/mi&gt;
            &lt;mi&gt;
             e
            &lt;/mi&gt;
            &lt;mi&gt;
             e
            &lt;/mi&gt;
           &lt;/mrow&gt;
          &lt;/msub&gt;
         &lt;/mrow&gt;
         &lt;mrow&gt;
          &lt;msub&gt;
           &lt;mi&gt;
            ω
           &lt;/mi&gt;
           &lt;mrow&gt;
            &lt;mi&gt;
             s
            &lt;/mi&gt;
            &lt;mi&gt;
             o
            &lt;/mi&gt;
            &lt;mi&gt;
             r
            &lt;/mi&gt;
            &lt;mi&gt;
             t
            &lt;/mi&gt;
            &lt;mi&gt;
             i
            &lt;/mi&gt;
            &lt;mi&gt;
             e
            &lt;/mi&gt;
           &lt;/mrow&gt;
          &lt;/msub&gt;
         &lt;/mrow&gt;
        &lt;/mfrac&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mfrac&gt;
         &lt;mrow&gt;
          &lt;msub&gt;
           &lt;mi&gt;
            C
           &lt;/mi&gt;
           &lt;mrow&gt;
            &lt;mi&gt;
             s
            &lt;/mi&gt;
            &lt;mi&gt;
             o
            &lt;/mi&gt;
            &lt;mi&gt;
             r
            &lt;/mi&gt;
            &lt;mi&gt;
             t
            &lt;/mi&gt;
            &lt;mi&gt;
             i
            &lt;/mi&gt;
            &lt;mi&gt;
             e
            &lt;/mi&gt;
           &lt;/mrow&gt;
          &lt;/msub&gt;
         &lt;/mrow&gt;
         &lt;mrow&gt;
          &lt;msub&gt;
           &lt;mi&gt;
            C
           &lt;/mi&gt;
           &lt;mrow&gt;
            &lt;mi&gt;
             e
            &lt;/mi&gt;
            &lt;mi&gt;
             n
            &lt;/mi&gt;
            &lt;mi&gt;
             t
            &lt;/mi&gt;
            &lt;mi&gt;
             r
            &lt;/mi&gt;
            &lt;mi&gt;
             e
            &lt;/mi&gt;
            &lt;mi&gt;
             e
            &lt;/mi&gt;
           &lt;/mrow&gt;
          &lt;/msub&gt;
         &lt;/mrow&gt;
        &lt;/mfrac&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        R = \frac{\omega_{entree}}{\omega_{sortie}} = \frac{C_{sortie}}{C_{entree}}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:1.36033em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:2.19633em;vertical-align:-0.8360000000000001em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.00773em;"&gt;
       R
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mopen nulldelimiter"&gt;
       &lt;/span&gt;
       &lt;span class="mfrac"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:1.1075599999999999em;"&gt;
           &lt;span style="top:-2.3139999999999996em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord"&gt;
              &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
               ω
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.31166399999999994em;"&gt;
                  &lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"&gt;
                   &lt;span class="pstrut" style="height:2.7em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size6 size3 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      s
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      o
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
                      r
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      t
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      i
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.15em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.15em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="stretchy" style="height:0.2em;"&gt;
             &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
              &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
              &lt;/path&gt;
             &lt;/svg&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.677em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord"&gt;
              &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
               ω
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.2805559999999999em;"&gt;
                  &lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"&gt;
                   &lt;span class="pstrut" style="height:2.7em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size6 size3 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      n
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      t
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
                      r
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.15em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.8360000000000001em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       &lt;span class="mclose nulldelimiter"&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mopen nulldelimiter"&gt;
       &lt;/span&gt;
       &lt;span class="mfrac"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:1.36033em;"&gt;
           &lt;span style="top:-2.3139999999999996em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord"&gt;
              &lt;span class="mord mathit" style="margin-right:0.07153em;"&gt;
               C
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.2805559999999999em;"&gt;
                  &lt;span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"&gt;
                   &lt;span class="pstrut" style="height:2.7em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size6 size3 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      n
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      t
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
                      r
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.15em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.15em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="stretchy" style="height:0.2em;"&gt;
             &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
              &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
              &lt;/path&gt;
             &lt;/svg&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.677em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord"&gt;
              &lt;span class="mord mathit" style="margin-right:0.07153em;"&gt;
               C
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.31166399999999994em;"&gt;
                  &lt;span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"&gt;
                   &lt;span class="pstrut" style="height:2.7em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size6 size3 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      s
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      o
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
                      r
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      t
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      i
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.15em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.8360000000000001em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       &lt;span class="mclose nulldelimiter"&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 Avec :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         R
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        R
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.00773em;"&gt;
       R
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  : le rapport de réduction du réducteur
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          ω
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           e
          &lt;/mi&gt;
          &lt;mi&gt;
           n
          &lt;/mi&gt;
          &lt;mi&gt;
           t
          &lt;/mi&gt;
          &lt;mi&gt;
           r
          &lt;/mi&gt;
          &lt;mi&gt;
           e
          &lt;/mi&gt;
          &lt;mi&gt;
           e
          &lt;/mi&gt;
         &lt;/mrow&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        \omega_{entree}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.43056em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
        ω
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.2805559999999999em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight"&gt;
               e
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               n
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               t
              &lt;/span&gt;
              &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
               r
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               e
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               e
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  : la vitesse de rotation de l’axe du moteur en entrée du réducteur
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          ω
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           s
          &lt;/mi&gt;
          &lt;mi&gt;
           o
          &lt;/mi&gt;
          &lt;mi&gt;
           r
          &lt;/mi&gt;
          &lt;mi&gt;
           t
          &lt;/mi&gt;
          &lt;mi&gt;
           i
          &lt;/mi&gt;
          &lt;mi&gt;
           e
          &lt;/mi&gt;
         &lt;/mrow&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        \omega_{sortie}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.43056em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.58056em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
        ω
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.31166399999999994em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight"&gt;
               s
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               o
              &lt;/span&gt;
              &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
               r
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               t
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               i
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               e
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  : la vitesse de rotation de l’axe du moteur en sortie du réducteur
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          C
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           s
          &lt;/mi&gt;
          &lt;mi&gt;
           o
          &lt;/mi&gt;
          &lt;mi&gt;
           r
          &lt;/mi&gt;
          &lt;mi&gt;
           t
          &lt;/mi&gt;
          &lt;mi&gt;
           i
          &lt;/mi&gt;
          &lt;mi&gt;
           e
          &lt;/mi&gt;
         &lt;/mrow&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        C_{sortie}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.07153em;"&gt;
        C
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.31166399999999994em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight"&gt;
               s
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               o
              &lt;/span&gt;
              &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
               r
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               t
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               i
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               e
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  : couple exercé par l’axe de sortie du réducteur
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          C
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           e
          &lt;/mi&gt;
          &lt;mi&gt;
           n
          &lt;/mi&gt;
          &lt;mi&gt;
           t
          &lt;/mi&gt;
          &lt;mi&gt;
           r
          &lt;/mi&gt;
          &lt;mi&gt;
           e
          &lt;/mi&gt;
          &lt;mi&gt;
           e
          &lt;/mi&gt;
         &lt;/mrow&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        C_{entree}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.07153em;"&gt;
        C
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.2805559999999999em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight"&gt;
               e
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               n
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               t
              &lt;/span&gt;
              &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
               r
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               e
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               e
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  : couple exercé par l’axe du moteur, en entrée du réducteur
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Un réducteur s’apparente donc à un système qui modifie deux grandeurs qui sont liées : le couple et la vitesse. On peut schématiser le fonctionnement d’un réducteur de la manière suivante :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Schéma d'un réducteur" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/schema-dun-reducteur.jpg"/&gt;
 &lt;figcaption&gt;
  Schéma d'un réducteur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   C’est quoi ça, les pertes mécaniques ? :roll:
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Justement, venons-en à un autre point que je voudrais aborder.
&lt;/p&gt;
&lt;h5 id="la-puissance-et-le-rendement"&gt;
 &lt;a aria-hidden="true" href="#la-puissance-et-le-rendement"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La puissance et le rendement
&lt;/h5&gt;
&lt;p&gt;
 Dans un moteur, on trouve deux puissances distinctes :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  La première est la
  &lt;strong&gt;
   puissance électrique
  &lt;/strong&gt;
  . Elle représente la quantité d’énergie électrique dépensée pour faire tourner l’axe du moteur. Elle représente aussi la quantité d’énergie électrique induite lorsque le moteur tourne en générateur, c’est à dire que le moteur transforme une énergie mécanique de rotation en une énergie électrique. Elle se calcule simplement à partir de la formule suivante :
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Puissance = Tension x Courant
&lt;/p&gt;
&lt;p&gt;
 &lt;span class="inlineMath inlineMathDouble"&gt;
  &lt;span class="katex-display"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          P
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           e
          &lt;/mi&gt;
          &lt;mi&gt;
           l
          &lt;/mi&gt;
          &lt;mi&gt;
           e
          &lt;/mi&gt;
          &lt;mi&gt;
           c
          &lt;/mi&gt;
         &lt;/mrow&gt;
        &lt;/msub&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mi&gt;
         U
        &lt;/mi&gt;
        &lt;mo&gt;
         ×
        &lt;/mo&gt;
        &lt;mi&gt;
         I
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        P_{elec} = U \times I
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
        P
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.33610799999999996em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight"&gt;
               e
              &lt;/span&gt;
              &lt;span class="mord mathit mtight" style="margin-right:0.01968em;"&gt;
               l
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               e
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               c
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
       U
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mbin"&gt;
       ×
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.07847em;"&gt;
       I
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 Selon les conventions, la tension est exprimée en Volt et le courant en Ampère. Quant à la puissance, elle est exprimée en
 &lt;strong&gt;
  Watt
 &lt;/strong&gt;
 (
 &lt;strong&gt;
  W
 &lt;/strong&gt;
 ).
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  La seconde est la
  &lt;strong&gt;
   puissance mécanique
  &lt;/strong&gt;
  . Elle correspond au couple du moteur multiplié par sa vitesse angulaire :
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 &lt;span class="inlineMath inlineMathDouble"&gt;
  &lt;span class="katex-display"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          P
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           m
          &lt;/mi&gt;
          &lt;mi&gt;
           e
          &lt;/mi&gt;
          &lt;mi&gt;
           c
          &lt;/mi&gt;
          &lt;mi&gt;
           a
          &lt;/mi&gt;
         &lt;/mrow&gt;
        &lt;/msub&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mi&gt;
         C
        &lt;/mi&gt;
        &lt;mo&gt;
         ×
        &lt;/mo&gt;
        &lt;mi&gt;
         ω
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        P_{meca} = C \times \omega
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
        P
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.151392em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight"&gt;
               m
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               e
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               c
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               a
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.07153em;"&gt;
       C
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mbin"&gt;
       ×
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
       ω
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 Le couple doit être exprimé en Newton-Mètre (Nm) et la vitesse en radians par seconde (rad/s). Pour la puissance mécanique, il s’agit encore de Watt.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Une puissance (mécanique ou électrique) s’exprime habituellement en
   &lt;strong&gt;
    Watts
   &lt;/strong&gt;
   (symbole
   &lt;strong&gt;
    W
   &lt;/strong&gt;
   ). On retrouve cependant d’autres unités telle que le Cheval Vapeur (CV), avec 1 CV qui vaut (arrondi) 735,5 W.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Mais comme dans tout système, la perfection n’existe pas, on va voir la différence qu’il y a entre la puissance mécanique et électrique, alors que
 &lt;em&gt;
  à priori
 &lt;/em&gt;
 elles devraient être équivalentes. Lorsque le moteur est en fonctionnement, il génère des
 &lt;strong&gt;
  pertes
 &lt;/strong&gt;
 . Ces pertes sont dues à différents
 &lt;strong&gt;
  phénomènes électriques
 &lt;/strong&gt;
 ou
 &lt;strong&gt;
  thermiques
 &lt;/strong&gt;
 (échauffement) ou tels que les
 &lt;strong&gt;
  frottements mécaniques
 &lt;/strong&gt;
 (air, pièces en contact, magnétique).
 &lt;strong&gt;
  Il y a donc une différence entre la puissance (électrique) en entrée du moteur et la puissance (mécanique) en sa sortie.
 &lt;/strong&gt;
 Cette différence s’exprime avec la notion de
 &lt;strong&gt;
  rendement
 &lt;/strong&gt;
 . Le rendement est une caractéristique intrinsèque à chaque moteur et permet de définir l’écart entre la puissance d’entrée du moteur et sa puissance de sortie. Il s’exprime sans unité. Il permet également de savoir quel est le pourcentage de pertes provoquées par le moteur. Le rendement se note avec la lettre grecque
 &lt;em&gt;
  eta
 &lt;/em&gt;
 (
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        η
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       \eta
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.43056em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      η
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 ) et se calcule grâce à la formule suivante :
&lt;/p&gt;
&lt;p&gt;
 &lt;span class="inlineMath inlineMathDouble"&gt;
  &lt;span class="katex-display"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         η
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mfrac&gt;
         &lt;mrow&gt;
          &lt;msub&gt;
           &lt;mi&gt;
            P
           &lt;/mi&gt;
           &lt;mrow&gt;
            &lt;mi&gt;
             s
            &lt;/mi&gt;
            &lt;mi&gt;
             o
            &lt;/mi&gt;
            &lt;mi&gt;
             r
            &lt;/mi&gt;
            &lt;mi&gt;
             t
            &lt;/mi&gt;
            &lt;mi&gt;
             i
            &lt;/mi&gt;
            &lt;mi&gt;
             e
            &lt;/mi&gt;
           &lt;/mrow&gt;
          &lt;/msub&gt;
         &lt;/mrow&gt;
         &lt;mrow&gt;
          &lt;msub&gt;
           &lt;mi&gt;
            P
           &lt;/mi&gt;
           &lt;mrow&gt;
            &lt;mi&gt;
             e
            &lt;/mi&gt;
            &lt;mi&gt;
             n
            &lt;/mi&gt;
            &lt;mi&gt;
             t
            &lt;/mi&gt;
            &lt;mi&gt;
             r
            &lt;/mi&gt;
            &lt;mi&gt;
             e
            &lt;/mi&gt;
            &lt;mi&gt;
             e
            &lt;/mi&gt;
           &lt;/mrow&gt;
          &lt;/msub&gt;
         &lt;/mrow&gt;
        &lt;/mfrac&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        \eta = \frac{P_{sortie}}{P_{entree}}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:1.36033em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:2.19633em;vertical-align:-0.8360000000000001em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
       η
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mopen nulldelimiter"&gt;
       &lt;/span&gt;
       &lt;span class="mfrac"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:1.36033em;"&gt;
           &lt;span style="top:-2.3139999999999996em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord"&gt;
              &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
               P
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.2805559999999999em;"&gt;
                  &lt;span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"&gt;
                   &lt;span class="pstrut" style="height:2.7em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size6 size3 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      n
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      t
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
                      r
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.15em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.15em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="stretchy" style="height:0.2em;"&gt;
             &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
              &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
              &lt;/path&gt;
             &lt;/svg&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.677em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord"&gt;
              &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
               P
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.31166399999999994em;"&gt;
                  &lt;span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"&gt;
                   &lt;span class="pstrut" style="height:2.7em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size6 size3 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      s
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      o
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
                      r
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      t
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      i
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.15em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.8360000000000001em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       &lt;span class="mclose nulldelimiter"&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 Dans le cas du moteur, on aurait alors les puissances électrique et mécanique telles quelles :
&lt;/p&gt;
&lt;p&gt;
 &lt;span class="inlineMath inlineMathDouble"&gt;
  &lt;span class="katex-display"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         η
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mfrac&gt;
         &lt;mrow&gt;
          &lt;msub&gt;
           &lt;mi&gt;
            P
           &lt;/mi&gt;
           &lt;mrow&gt;
            &lt;mi&gt;
             m
            &lt;/mi&gt;
            &lt;mi&gt;
             e
            &lt;/mi&gt;
            &lt;mi&gt;
             c
            &lt;/mi&gt;
            &lt;mi&gt;
             a
            &lt;/mi&gt;
           &lt;/mrow&gt;
          &lt;/msub&gt;
         &lt;/mrow&gt;
         &lt;mrow&gt;
          &lt;msub&gt;
           &lt;mi&gt;
            P
           &lt;/mi&gt;
           &lt;mrow&gt;
            &lt;mi&gt;
             e
            &lt;/mi&gt;
            &lt;mi&gt;
             l
            &lt;/mi&gt;
            &lt;mi&gt;
             e
            &lt;/mi&gt;
            &lt;mi&gt;
             c
            &lt;/mi&gt;
           &lt;/mrow&gt;
          &lt;/msub&gt;
         &lt;/mrow&gt;
        &lt;/mfrac&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        \eta = \frac{P_{meca}}{P_{elec}}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:1.36033em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:2.19633em;vertical-align:-0.8360000000000001em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
       η
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mopen nulldelimiter"&gt;
       &lt;/span&gt;
       &lt;span class="mfrac"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:1.36033em;"&gt;
           &lt;span style="top:-2.3139999999999996em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord"&gt;
              &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
               P
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.33610799999999996em;"&gt;
                  &lt;span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"&gt;
                   &lt;span class="pstrut" style="height:2.7em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size6 size3 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight" style="margin-right:0.01968em;"&gt;
                      l
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      c
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.15em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.15em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="stretchy" style="height:0.2em;"&gt;
             &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
              &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
              &lt;/path&gt;
             &lt;/svg&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.677em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord"&gt;
              &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
               P
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.151392em;"&gt;
                  &lt;span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"&gt;
                   &lt;span class="pstrut" style="height:2.7em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size6 size3 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      m
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      c
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      a
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.15em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.8360000000000001em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       &lt;span class="mclose nulldelimiter"&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 Et dans le cas où le moteur est utilisé en générateur électrique (on fait tourner l’axe à la main par exemple), la formule reste la même mais la place des puissances électrique et mécanique est inversée :
&lt;/p&gt;
&lt;p&gt;
 &lt;span class="inlineMath inlineMathDouble"&gt;
  &lt;span class="katex-display"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         η
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mfrac&gt;
         &lt;mrow&gt;
          &lt;msub&gt;
           &lt;mi&gt;
            P
           &lt;/mi&gt;
           &lt;mrow&gt;
            &lt;mi&gt;
             e
            &lt;/mi&gt;
            &lt;mi&gt;
             l
            &lt;/mi&gt;
            &lt;mi&gt;
             e
            &lt;/mi&gt;
            &lt;mi&gt;
             c
            &lt;/mi&gt;
           &lt;/mrow&gt;
          &lt;/msub&gt;
         &lt;/mrow&gt;
         &lt;mrow&gt;
          &lt;msub&gt;
           &lt;mi&gt;
            P
           &lt;/mi&gt;
           &lt;mrow&gt;
            &lt;mi&gt;
             m
            &lt;/mi&gt;
            &lt;mi&gt;
             e
            &lt;/mi&gt;
            &lt;mi&gt;
             c
            &lt;/mi&gt;
            &lt;mi&gt;
             a
            &lt;/mi&gt;
           &lt;/mrow&gt;
          &lt;/msub&gt;
         &lt;/mrow&gt;
        &lt;/mfrac&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        \eta = \frac{P_{elec}}{P_{meca}}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:1.36033em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:2.19633em;vertical-align:-0.8360000000000001em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
       η
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mopen nulldelimiter"&gt;
       &lt;/span&gt;
       &lt;span class="mfrac"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:1.36033em;"&gt;
           &lt;span style="top:-2.3139999999999996em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord"&gt;
              &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
               P
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.151392em;"&gt;
                  &lt;span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"&gt;
                   &lt;span class="pstrut" style="height:2.7em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size6 size3 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      m
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      c
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      a
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.15em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.15em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="stretchy" style="height:0.2em;"&gt;
             &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
              &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
              &lt;/path&gt;
             &lt;/svg&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.677em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord"&gt;
              &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
               P
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.33610799999999996em;"&gt;
                  &lt;span style="top:-2.5500000000000003em;margin-left:-0.13889em;margin-right:0.05em;"&gt;
                   &lt;span class="pstrut" style="height:2.7em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size6 size3 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight" style="margin-right:0.01968em;"&gt;
                      l
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      c
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.15em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.8360000000000001em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       &lt;span class="mclose nulldelimiter"&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Attention, le rendement est une valeur
   &lt;strong&gt;
    sans unité
   &lt;/strong&gt;
   , on peut en revanche l’exprimer sous forme de pourcentage.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Si l’on prend un exemple : un moteur de puissance électrique 100W, ayant une puissance mécanique de 84W aura un rendement de :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        η
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mfrac&gt;
        &lt;mrow&gt;
         &lt;msub&gt;
          &lt;mi&gt;
           P
          &lt;/mi&gt;
          &lt;mrow&gt;
           &lt;mi&gt;
            m
           &lt;/mi&gt;
           &lt;mi&gt;
            e
           &lt;/mi&gt;
           &lt;mi&gt;
            c
           &lt;/mi&gt;
           &lt;mi&gt;
            a
           &lt;/mi&gt;
          &lt;/mrow&gt;
         &lt;/msub&gt;
        &lt;/mrow&gt;
        &lt;mrow&gt;
         &lt;msub&gt;
          &lt;mi&gt;
           P
          &lt;/mi&gt;
          &lt;mrow&gt;
           &lt;mi&gt;
            e
           &lt;/mi&gt;
           &lt;mi&gt;
            l
           &lt;/mi&gt;
           &lt;mi&gt;
            e
           &lt;/mi&gt;
           &lt;mi&gt;
            c
           &lt;/mi&gt;
          &lt;/mrow&gt;
         &lt;/msub&gt;
        &lt;/mrow&gt;
       &lt;/mfrac&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       \eta = \frac{P_{meca}}{P_{elec}}
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.888431em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1.3392909999999998em;vertical-align:-0.4508599999999999em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      η
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mopen nulldelimiter"&gt;
      &lt;/span&gt;
      &lt;span class="mfrac"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.888431em;"&gt;
          &lt;span style="top:-2.655em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight" style="margin-right:0.13889em;"&gt;
               P
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.3448em;"&gt;
                  &lt;span style="top:-2.3487714285714287em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"&gt;
                   &lt;span class="pstrut" style="height:2.5em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size3 size1 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight" style="margin-right:0.01968em;"&gt;
                      l
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      c
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.15122857142857138em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.15em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="stretchy" style="height:0.2em;"&gt;
            &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
             &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
             &lt;/path&gt;
            &lt;/svg&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.4101em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight" style="margin-right:0.13889em;"&gt;
               P
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.16454285714285719em;"&gt;
                  &lt;span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"&gt;
                   &lt;span class="pstrut" style="height:2.5em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size3 size1 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      m
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      c
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      a
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.143em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.4508599999999999em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mclose nulldelimiter"&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        η
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mfrac&gt;
        &lt;mrow&gt;
         &lt;msub&gt;
          &lt;mi&gt;
           P
          &lt;/mi&gt;
          &lt;mrow&gt;
           &lt;mn&gt;
            8
           &lt;/mn&gt;
           &lt;mn&gt;
            4
           &lt;/mn&gt;
          &lt;/mrow&gt;
         &lt;/msub&gt;
        &lt;/mrow&gt;
        &lt;mrow&gt;
         &lt;msub&gt;
          &lt;mi&gt;
           P
          &lt;/mi&gt;
          &lt;mrow&gt;
           &lt;mn&gt;
            1
           &lt;/mn&gt;
           &lt;mn&gt;
            0
           &lt;/mn&gt;
           &lt;mn&gt;
            0
           &lt;/mn&gt;
          &lt;/mrow&gt;
         &lt;/msub&gt;
        &lt;/mrow&gt;
       &lt;/mfrac&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       \eta = \frac{P_{84}}{P_{100}}
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.888431em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1.3335309999999998em;vertical-align:-0.44509999999999994em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      η
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mopen nulldelimiter"&gt;
      &lt;/span&gt;
      &lt;span class="mfrac"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.888431em;"&gt;
          &lt;span style="top:-2.655em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight" style="margin-right:0.13889em;"&gt;
               P
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.31731428571428577em;"&gt;
                  &lt;span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"&gt;
                   &lt;span class="pstrut" style="height:2.5em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size3 size1 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mtight"&gt;
                      1
                     &lt;/span&gt;
                     &lt;span class="mord mtight"&gt;
                      0
                     &lt;/span&gt;
                     &lt;span class="mord mtight"&gt;
                      0
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.143em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.15em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="stretchy" style="height:0.2em;"&gt;
            &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
             &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
             &lt;/path&gt;
            &lt;/svg&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.4101em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight" style="margin-right:0.13889em;"&gt;
               P
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.31731428571428577em;"&gt;
                  &lt;span style="top:-2.357em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"&gt;
                   &lt;span class="pstrut" style="height:2.5em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size3 size1 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mtight"&gt;
                      8
                     &lt;/span&gt;
                     &lt;span class="mord mtight"&gt;
                      4
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.143em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.44509999999999994em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mclose nulldelimiter"&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        η
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mo separator="true"&gt;
        ,
       &lt;/mo&gt;
       &lt;mn&gt;
        8
       &lt;/mn&gt;
       &lt;mn&gt;
        4
       &lt;/mn&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       \eta = 0,84
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.64444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.8388800000000001em;vertical-align:-0.19444em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      η
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mpunct"&gt;
      ,
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.16666666666666666em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      8
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      4
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 Ce qui correspond à 84%. Sachez toutefois que le rendement ne pourra dépasser les 100% (ou 1), car
 &lt;strong&gt;
  il n’existe pas de systèmes capables de fournir plus d’énergie qu’ils n’en reçoivent
 &lt;/strong&gt;
 . Cela dit, si un jour vous parvenez à en trouver un, vous pourrez devenir le Roi du Monde !!
 &lt;img alt=":Pirate:" class="smiley" src="./static/smileys/pirate.png"/&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Les moteurs électriques ont habituellement un bon rendement, entre 80% (0.8) et 95% (0.95). Cela signifie que pour 100W électriques injectés en entrée, on obtiendra en sortie 80 à 95W de puissance mécanique. Tandis qu’un moteur à explosion de voiture dépasse à peine les 30% de rendement !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="quelques-relations"&gt;
 &lt;a aria-hidden="true" href="#quelques-relations"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Quelques relations
&lt;/h4&gt;
&lt;p&gt;
 Une toute dernière chose avant de commencer la suite, il y a deux relations à connaitre vis-à-vis des moteurs.
&lt;/p&gt;
&lt;h5 id="lien-entre-vitesse-et-tension"&gt;
 &lt;a aria-hidden="true" href="#lien-entre-vitesse-et-tension"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Lien entre vitesse et tension
&lt;/h5&gt;
&lt;p&gt;
 Dans un moteur CC, quelque soit sa taille et sa puissance, il faut savoir que la tension à ses bornes et la vitesse de sortie sont liées. Plus la tension sera élevée et plus la vitesse sera grande. Nous verrons cet aspect dans la prochaine partie. Faites attention à bien rester dans les plages de tension d’alimentation de votre moteur et ne pas les dépasser. Il pourrait griller ! En effet, vous pouvez dépasser
 &lt;strong&gt;
  de manière temporaire
 &lt;/strong&gt;
 la tension maximale autorisée pour donner un coup de fouet à votre moteur, mais ne restez jamais dans une plage trop élevée ! Une deuxième conséquence de cette relation concerne le moment du démarrage du moteur. En effet, la relation entre tension et vitesse n’est pas tout à fait linéaire pour les tensions faibles, elle est plutôt "écrasée" à cet endroit. Du coup, cela signifie que le moteur n’arrivera pas à tourner pour une tension trop basse. C’est un peu comme si vous aviez une tension de seuil de démarrage. En dessous de cette tension, le moteur est à l’arrêt, et au dessus il tourne correctement avec une relation de type "100 trs/min/volts" (autrement dit, le moteur tournera à 100 tours par minutes pour 1 volt, puis 200 tours par minutes pour 2 volts et etc etc… bien entendu le 100 est pris comme un exemple purement arbitraire, chaque moteur a sa caractéristique propre).
&lt;/p&gt;
&lt;h5 id="lien-entre-courant-et-couple"&gt;
 &lt;a aria-hidden="true" href="#lien-entre-courant-et-couple"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Lien entre courant et couple
&lt;/h5&gt;
&lt;p&gt;
 Comme nous venons de le voir, la vitesse est une sorte d’image de la tension. Passons maintenant à une petite observation : Lorsque l’on freine l’axe du moteur, par exemple avec le doigt, on sent que le moteur insiste et essaye de repousser cette force exercée sur son axe. Cela est du au courant qui le traverse et qui augmente car le moteur, pour continuer de tourner à la même vitesse, doit fournir plus de couple. Hors, le couple et le courant sont liés : si l’un des deux augmente alors l’autre également. Autrement dit, pour avoir plus de couple le moteur consomme plus de courant. Si votre alimentation est en mesure de le fournir, il pourra éventuellement bouger, sinon, comme il ne peut pas consommer plus que ce qu’on lui donne, il restera bloqué et consommera le maximum de courant fourni.
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si vous faites circuler trop de courant dans un moteur pour trop longtemps, il va chauffer. Les moteurs sont des composants sans protection. Même s’ils chauffent ils ne feront rien pour s’arrêter, bien au contraire. Cela peut mener à une surchauffe et une destruction du moteur (les bobines à l’intérieur sont détruites). Attention donc à ne pas trop le faire forcer sur de longues périodes continues.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="alimenter-un-moteur"&gt;
 &lt;a aria-hidden="true" href="#alimenter-un-moteur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Alimenter un moteur
&lt;/h3&gt;
&lt;p&gt;
 Bon, et si nous voyions un peu comment cela se passe dans la pratique ? Je vais vous montrer comment alimenter les moteurs électriques à courant continu. Vous allez voir que ce n’est pas aussi simple que ça en a l’air, du moins lorsque l’on veut faire quelque chose de propre. Vous allez comprendre de quoi je parle…
&lt;/p&gt;
&lt;h4 id="connecter-un-moteur-sur-une-source-dénergie-la-pile"&gt;
 &lt;a aria-hidden="true" href="#connecter-un-moteur-sur-une-source-dénergie-la-pile"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Connecter un moteur sur une source d’énergie : la pile
&lt;/h4&gt;
&lt;p&gt;
 Faisons l’expérience la plus simple qui soit : celle de connecter un moteur aux bornes d’une pile de 9V :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="C'est beau, ça tourne." src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/cest-beau-ca-tourne.jpg"/&gt;
 &lt;figcaption&gt;
  C'est beau, ça tourne.
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   C’est tout ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Ben oui, quoi de plus ? Le moteur est connecté, son axe tourne, la pile débite du courant… Ha ! Voilà ce qui nous intéresse dans l’immédiat : la pile débite du courant. Oui et pas des moindres car les moteurs électriques sont bien généralement de véritables gloutons énergétiques. Si vous avez la chance de posséder un ampèremètre, vous pouvez mesurer le courant de consommation de votre moteur. En général, pour un petit moteur de lecteur CD on avoisine la centaine de milliampères. Pour un moteur un peu plus gros, tel qu’un moteur de modélisme, on trouve plusieurs centaines de milliampères de consommation. Pour des moteurs encore plus gros, on peut se retrouver avec des valeurs dépassant largement l’ampère voire la dizaine d’ampères. Revenons à notre moteur. Lui ne consomme pas plus de 100mA à vide. Mais pour une simple pile c’est beaucoup. Et je vous garantis qu’elle ne tiendra pas longtemps comme ça ! De plus, la vitesse n’est pas réglable, le moteur tourne toujours à son maximum (si c’est un moteur fait pour tourner à 9V). Enfin, pour allumer ou arrêter le moteur, vous êtes obligé de le connecter ou le déconnecter de la pile. En somme, utiliser un moteur dans cette configuration, par exemple pour faire avancer votre petit robot mobile, n’est pas la solution la plus adaptée.
&lt;/p&gt;
&lt;h4 id="avec-la-carte-arduino"&gt;
 &lt;a aria-hidden="true" href="#avec-la-carte-arduino"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Avec la carte Arduino
&lt;/h4&gt;
&lt;p&gt;
 Vous vous doutez bien que l’on va utiliser la carte Arduino pour faire ce que je viens d’énoncer, à savoir commander le moteur à l’allumage et à l’extinction et faire varier sa vitesse.
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   &lt;strong&gt;
    Ne faites surtout pas le montage qui suit, je vous expliquerai pourquoi !
   &lt;/strong&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Admettons que l’on essaie de brancher le moteur sur une sortie de l’Arduino :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Moteur branché sur une sortie de l'Arduino" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/moteur-branche-sur-une-sortie-de-larduino.png"/&gt;
 &lt;figcaption&gt;
  Moteur branché sur une sortie de l'Arduino
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Avec le programme adéquat, le moteur va tourner à la vitesse que l’on souhaite, si l’on veut, réglable par potentiomètre et s’arrêter ou démarrer quand on le lui demande. C’est mieux. C’est la carte Arduino qui pilote le moteur. Malheureux ! Vous ne croyez tout de même pas que l’on va se contenter de faire ça ?! Non, oulaaaa. C’est hyper ultra dangereux… pour votre carte Arduino ! Il est en effet impensable de réaliser ce montage car les moteurs à courant continu sont de véritables sources de parasites qui pourraient endommager, au point de vue matériel, votre carte Arduino ! Oubliez donc tout de suite cette idée de connecter directement le moteur sur une sortie de votre Arduino. Les moteurs, quand ils tournent, génèrent tout un tas de parasites qui peuvent être des surtensions très grandes par rapport à leur tension d’alimentation. De plus, le courant qu’ils demandent est bien trop grand par rapport à ce que peut fournir une sortie numérique d’une carte Arduino (environ 40 mA). Ce sont deux bonnes raisons de ne pas faire le montage précédent.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Mais alors, on fait comment si on peut pas piloter un moteur avec notre carte Arduino ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Je n’ai pas dis que l’on ne pouvait pas piloter un moteur avec une carte Arduino. J’ai bien précisé
 &lt;em&gt;
  dans cette configuration
 &lt;/em&gt;
 . Autrement dit, il faut faire quelque chose de plus pour pouvoir mener à terme cet objectif.
&lt;/p&gt;
&lt;h4 id="une-question-de-puissance-le-transistor"&gt;
 &lt;a aria-hidden="true" href="#une-question-de-puissance-le-transistor"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Une question de puissance : le transistor
&lt;/h4&gt;
&lt;p&gt;
 Souvenez-vous, nous avons parlé d’un composant qui pourrait convenir dans
 &lt;a href="https:// zestedesavoir.com/tutoriels/537/arduino-premiers-pas-en-informatique-embarquee/743/gestion-des-entrees-sorties/3424/afficheurs-7-segments/#5-utiliser-plusieurs-afficheurs"&gt;
  ce chapitre
 &lt;/a&gt;
 . Il s’agit du
 &lt;strong&gt;
  transistor
 &lt;/strong&gt;
 . Si vous vous souvenez de ce que je vous avais expliqué, vous devriez comprendre pourquoi je vous en parle ici. Car, à priori, on ne veut pas allumer un afficheur 7 segments.
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 En fait, le transistor (bipolaire) est comme un interrupteur que l’on commande par un courant. Tout comme on avait fait avec les afficheurs 7 segments, on peut allumer, saturer ou bloquer un transistor pour qu’il laisse passer le courant ou non. Nous avions alors commandé chaque transistor pour allumer ou éteindre les afficheurs correspondants. Essayons de faire de même avec notre moteur :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Avec un transistor" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/avec-un-transistor.png"/&gt;
 &lt;figcaption&gt;
  Avec un transistor
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ici, le transistor est commandé par une sortie de la carte Arduino via la résistance sur la base. Lorsque l’état de la sortie est au niveau 0,
 &lt;strong&gt;
  le transistor est bloqué et le courant ne le traverse pas
 &lt;/strong&gt;
 . Le moteur ne tourne pas. Lorsque la sortie vaut 1, le transistor est commandé et devient saturé, c’est-à-dire qu’il laisse passer le courant et le moteur se met à tourner. Le problème, c’est que tout n’est pas parfait et ce transistor cumule des inconvénients qu’il est bon de citer pour éviter d’avoir de mauvaises surprises :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  parcouru par un grand courant, il chauffe et peut être amené à griller s’il n’est pas refroidi
 &lt;/li&gt;
 &lt;li&gt;
  il est en plus sensible aux parasites et risque d’être endommagé
 &lt;/li&gt;
 &lt;li&gt;
  enfin, il n’aime pas les "hautes" tensions
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Pour répondre à ces trois contraintes, trois solutions. La première consisterait à mettre un transistor qui accepte un courant assez élevé par rapport à la consommation réelle du moteur, ou bien d’adjoindre un
 &lt;em&gt;
  dissipateur
 &lt;/em&gt;
 sur le transistor pour qu’il refroidisse. La deuxième solution concernant les parasites serait de mettre un condensateur de filtrage. On en a déjà parlé avec les
 &lt;a href="https:// zestedesavoir.com/tutoriels/537/arduino-premiers-pas-en-informatique-embarquee/743/gestion-des-entrees-sorties/3423/un-simple-bouton/"&gt;
  boutons poussoirs
 &lt;/a&gt;
 . Pour le dernier problème, on va voir que l’on a besoin d’une diode.
&lt;/p&gt;
&lt;h5 id="le-bon-transistor"&gt;
 &lt;a aria-hidden="true" href="#le-bon-transistor"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le "bon" transistor
&lt;/h5&gt;
&lt;p&gt;
 Comme je viens de vous l’expliquer, il nous faut un transistor comme "interface" de puissance. C’est lui qui nous sert d’interrupteur pour laisser passer ou non le courant. Pour l’instant, nous avons beaucoup parlé des transistors "bipolaires". Ils sont sympas, pas chers, mais il y a un problème : ils ne sont pas vraiment faits pour faire de la commutation, mais plutôt pour faire de l’amplification de courant. Le courant qu’il laisse passer est proportionnel au courant traversant sa base. Pour les petits montages comme celui des 7 segments ce n’est pas vraiment un problème, car les courants sont faibles. Mais pour des montages avec un moteur, où les courants sont bien plus élevés, votre transistor bipolaire va commencer à consommer. On retrouvera jusqu’à plusieurs volts de perdus entre son émetteur et son collecteur, autant de volts qui ne profiteront pas à notre moteur.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Mais alors on fait comment pour pas perdre tout ça ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Eh bien c’est facile ! On change de transistor ! L’électronique de puissance a donné naissance à d’autres transistors, bien plus optimaux pour les questions de fonctionnement à fort courant et en régime saturé/bloqué. Ce sont les transistors MOSFET (appelés aussi "transistor à effet de champ"). Leur symbole est le suivant :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Symbole du transistor MOSFET (canal N)" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/symbole-du-transistor-mosfet-canal-n.jpg"/&gt;
 &lt;figcaption&gt;
  Symbole du transistor MOSFET (canal N)
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Il ressemble évidemment à un bipolaire, cela reste un transistor. Par contre il est fait pour faire de l’amplification de tension. Autrement dit, sa broche de commande (que l’on appelle "Gate") doit recevoir une commande, une tension, donc plus besoin de résistance entre Arduino et le transistor. Son fonctionnement est simple : une différence de potentiel sur la gate et il commute (laisse passer le courant entre D (Drain) et S (Source)) sinon il bloque le courant. Facile non ? Un inconvénient cependant : ils coûtent plus chers que leurs homologues bipolaires (de un à plusieurs euros selon le modèle, le courant qu’il peut laisser passer et la tension qu’il peut bloquer). Mais en contrepartie, ils n’auront qu’une faible chute de tension lorsqu’ils laissent passer le courant pour le moteur, et ça ce n’est pas négligeable. Il existe deux types de MOSFET, le
 &lt;em&gt;
  canal N
 &lt;/em&gt;
 et le
 &lt;em&gt;
  canal P
 &lt;/em&gt;
 . Ils font la même chose, mais le comportement est inversé (quand un est passant l’autre est bloquant et vice versa). Voici un schéma d’exemple de branchement (avec une résistance de pull-down, comme ça si le signal n’est pas défini sur la broche Arduino, le transistor sera par défaut bloqué et donc le moteur ne tournera pas) :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Schéma simple de branchement" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/schema-simple-de-branchement.jpg"/&gt;
 &lt;figcaption&gt;
  Schéma simple de branchement
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="protégeons-lensemble-la-diode-de-roue-libre"&gt;
 &lt;a aria-hidden="true" href="#protégeons-lensemble-la-diode-de-roue-libre"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Protégeons l’ensemble : la diode de roue libre
&lt;/h4&gt;
&lt;p&gt;
 Une diode, qu’est-ce que c’est ? Nous en avons déjà parlé à vrai dire, il s’agissait des diodes électroluminescentes (LED) mais le principe de fonctionnement reste le même sans la lumière. Une diode, dont voici le symbole :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Symbole d'une diode" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/symbole-dune-diode.jpg"/&gt;
 &lt;figcaption&gt;
  Symbole d'une diode
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 …est un composant électronique qui ne laisse passer le courant que dans un sens (cf.
 &lt;a href="https:// zestedesavoir.com/tutoriels/537/arduino-premiers-pas-en-informatique-embarquee/743/gestion-des-entrees-sorties/3420/notre-premier-programme/"&gt;
  ce chapitre
 &lt;/a&gt;
 ). Vos souvenirs sont-ils à nouveau en place ? Alors, on continue ! Reprenons le schéma précédent avec le transistor piloté par l’Arduino et qui commande à son tour le moteur. Saturons le transistor en lui appliquant une tension sur sa base. Le moteur commence à tourner puis parvient à sa vitesse de rotation maximale. Il tourne, il tourne et là… je décide de couper l’alimentation du moteur en bloquant le transistor. Soit. Que va-t-il se passer ?
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Le moteur va continuer de tourner à cause de son inertie !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Très bien. Et que cela va t-il engendrer ? Une tension aux bornes du moteur. En effet, je l’ai dit plus tôt, un moteur est aussi un générateur électrique car il est capable de convertir de l’énergie mécanique en énergie électrique même si son rôle principal est de faire l’inverse. Et cette tension est très dangereuse pour le transistor, d’autant plus qu’elle est très haute et peut atteindre plusieurs centaines de Volts (phénomène physique lié aux bobines internes du moteur qui vont se charger). En fait, le moteur va générer une tension à ses bornes et un courant, mais comme le transistor bloque la route au courant, cette tension ne peut pas rester la même et est obligée d’augmenter pour conserver la relation de la loi d’Ohm. Le moteur arrive à un phénomène de
 &lt;strong&gt;
  charge
 &lt;/strong&gt;
 . Il va, précisément, se charger en tension. Je ne m’étends pas plus sur le sujet, il y a bien d’autres informations plus complètes que vous pourrez trouver sur internet. La question : comment faire pour que le moteur se décharge et n’atteigne pas des tensions de plusieurs centaines de Volts à ses bornes (ce qui forcerait alors le passage au travers du transistor et détruirait ce dernier) ? La réponse : par l’utilisation d’une diode. Vous vous en doutiez, n’est-ce pas ?
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 Il est assez simple de comprendre comment on va utiliser cette diode, je vous donne le schéma. Les explications le suivent :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Schéma d'utilisation de la diode" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/schema-dutilisation-de-la-diode.jpg"/&gt;
 &lt;figcaption&gt;
  Schéma d'utilisation de la diode
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Reprenons au moment où le moteur tourne. Plus de courant ne circule dans le transistor et la seule raison pour laquelle le moteur continue de tourner est qu’il possède une inertie mécanique. Il génère donc cette fameuse tension qui est orientée vers l’entrée du transistor. Comme le transistor est bloqué, le courant en sortie du moteur va donc aller traverser la diode pour revenir dans le moteur. C’est bien, car la tension induite (celle qui est générée par le moteur) restera proche de la tension d’alimentation du moteur et n’ira pas virevolter au voisinage des centaines de Volts. Mais ça ne s’arrête pas là. Pour ceux qui l’auraient remarqué, la tension induite par le moteur est opposée à celle que fournit l’alimentation de ce dernier. Or, étant donné que maintenant on fait un bouclage de la tension induite sur son entrée (vous me suivez toujours ?), eh bien cela alimente le moteur. Les deux tensions s’opposent et cela a pour effet de ralentir le moteur. La
 &lt;strong&gt;
  diode de roue libre
 &lt;/strong&gt;
 , c’est comme ça qu’on l’appelle, sert donc à deux choses : d’une part elle protège le transistor de la surtension induite par le moteur, d’autre part elle permet au moteur de "s’auto-freiner".
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Et on met quoi comme diode ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Excellente question, j’allais presque oublier ! La diode que nous mettrons sera une diode
 &lt;em&gt;
  Schottky
 &lt;/em&gt;
 . Ne vous laissez pas impressionner par ce nom barbare qui signifie simplement que la diode est capable de basculer (passer de l’état bloquant à passant) de manière très rapide. Dès lors qu’il y a une surtension engendrée par le moteur lorsque l’on le coupe de l’alimentation, la diode va l’absorber aussitôt avant que le transistor ait le temps d’avoir des dommages. On pourra également rajouter aux bornes de la diode un condensateur de déparasitage pour protéger le transistor et la diode contre les parasites. Au final, le schéma ressemble à ça :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Schéma du montage complet du moteur CC" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/schema-du-montage-complet-du-moteur-cc.jpg"/&gt;
 &lt;figcaption&gt;
  Schéma du montage complet du moteur CC
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Montage complet du moteur CC" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/montage-complet-du-moteur-cc.jpg"/&gt;
 &lt;figcaption&gt;
  Montage complet du moteur CC
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Sa valeur devra être comprise entre 1nF et 100nF environ. Le but étant de supprimer les petits parasites (pics de tension).
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/Y6J2WNK56xk" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/jMBaWaWatUg" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Petite illustration interactive :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/9V5aWTwkTZv" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Bon, nous allons pouvoir attaquer les choses sérieuses !
 &lt;img alt=":Pirate:" class="smiley" src="./static/smileys/pirate.png"/&gt;
&lt;/p&gt;
&lt;h3 id="piloter-un-moteur"&gt;
 &lt;a aria-hidden="true" href="#piloter-un-moteur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Piloter un moteur
&lt;/h3&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Les montages de cette partie sont importants à connaître. Vous n’êtes pas obligé de les mettre en œuvre, mais si vous le voulez (et en avez les moyens), vous le pouvez. Je dis ça car la partie suivante vous montrera l’existence de shields dédiés aux moteurs à courant continu, vous évitant ainsi quelques maux de têtes pour la réalisation des schémas de cette page.
   &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="faire-varier-la-vitesse-la-pwm"&gt;
 &lt;a aria-hidden="true" href="#faire-varier-la-vitesse-la-pwm"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Faire varier la vitesse : la PWM
&lt;/h4&gt;
&lt;p&gt;
 Maintenant que nous avons les bases fondamentales pour faire tourner notre moteur sans tout faire griller ( :roll: ), nous allons pouvoir acquérir d’autres connaissances. À commencer par quelque chose de facile : le réglage de la vitesse de rotation du moteur. Comme nous l’expliquions dans le premier morceau de ce chapitre, un moteur à courant continu possède une relation directe entre sa tension d’alimentation et sa vitesse de rotation. En effet, plus la tension à ses bornes est élevée et plus son axe tournera rapidement (dans la limite de ses caractéristiques évidemment). Cependant le microcontrôleur d’Arduino n’est capable de produire que des tensions de 0 ou 5V. En revanche, il peut "simuler" des tensions variables comprises entre 0 et 5V. Encore un petit rappel de cours nécessaire sur la PWM que nous avons déjà
 &lt;a href="https://zestedesavoir.com/tutoriels/537/arduino-premiers-pas-en-informatique-embarquee/745/les-grandeurs-analogiques/3432/et-les-sorties-analogiques-enfin-presque/"&gt;
  rencontrée ici
 &lt;/a&gt;
 pour vous rafraichir la mémoire. Nous sommes en mesure de produire à l’aide de notre microcontrôleur un signal carré dont le rapport cyclique est variable. Et grâce à cela, nous obtenons une tension moyenne (comprise entre 0 et 5V) en sortie de la carte Arduino. Il faut juste bien penser à utiliser les sorties adéquates, à savoir : 3, 5, 6, 9, 10 ou 11 (sur une duemilanove/UNO). Je résume : en utilisant la PWM, on va générer une tension par impulsions plus ou moins grandes. Ce signal va commander le transistor qui va à son tour commander le moteur. Le moteur va donc être alimenté par intermittences à cause des impulsions de la PWM. Ce qui aura pour effet de modifier la vitesse de rotation du moteur.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Mais, si le moteur est coupé par intermittences, il va être en rotation, puis va s’arrêter, puis va recommencer, etc. Ce sera pas beau et ça ne tournera pas moins vite. Je comprends pas trop ton histoire.
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Non, puisque le moteur garde une inertie de rotation et comme la PWM est un signal qui va trop vite pour que le moteur ait le temps de s’arrêter puis de redémarrer, on va ne voir qu’un moteur qui tourne à une vitesse réduite.
&lt;/p&gt;
&lt;p&gt;
 Finalement, nous allons donc pouvoir modifier la vitesse de rotation de notre moteur en modifiant le rapport cyclique de la PWM. Plus il est faible (un état BAS plus long qu’un état HAUT), plus le moteur ira doucement. Inversement, plus le rapport cyclique sera élevé (état HAUT plus long que l’état BAS), plus le moteur ira vite. Tout cela couplé à un transistor pour faire passer de la puissance (et utiliser la tension d’utilisation adaptée au moteur) et nous pouvons faire tourner le moteur à la vitesse que nous voulons.
&lt;/p&gt;
&lt;p&gt;
 Génial non ? Pour l’instant je ne vous ferai pas de démo (vous pouvez facilement imaginer le résultat), mais cela arrivera très prochainement lors de l’utilisation de l’Arduino dans la prochaine sous-partie. Le montage va être le même que tout à l’heure avec le "nouveau" transistor et sa résistance de base :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Schéma du montage complet du moteur CC" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/schema-du-montage-complet-du-moteur-cc.jpg"/&gt;
 &lt;figcaption&gt;
  Schéma du montage complet du moteur CC
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Montage complet du moteur CC" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/montage-complet-du-moteur-cc.jpg"/&gt;
 &lt;figcaption&gt;
  Montage complet du moteur CC
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/UJWNOBeLNus" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Maintenant que le moteur tourne à une vitesse réglable, il pourra être intéressant de le faire tourner aussi dans l’autre sens (si jamais on veut faire une marche arrière, par exemple, sur votre robot), voire même d’être capable de freiner le moteur. C’est ce que nous allons tout de suite étudier dans le morceau suivant en parlant d’un composant très fréquent dans le monde de la robotique : le
 &lt;strong&gt;
  pont en H
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;h4 id="tourner-dans-les-deux-sens-le-pont-en-h"&gt;
 &lt;a aria-hidden="true" href="#tourner-dans-les-deux-sens-le-pont-en-h"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Tourner dans les
 &lt;strong&gt;
  deux
 &lt;/strong&gt;
 sens : le pont en H
&lt;/h4&gt;
&lt;p&gt;
 Faire tourner un moteur c’est bien. Tourner à la bonne vitesse c’est mieux. Aller dans les deux sens c’est l’idéal. C’est donc ce que nous allons maintenant chercher à faire !
&lt;/p&gt;
&lt;h5 id="découverte-du-pont-en-h"&gt;
 &lt;a aria-hidden="true" href="#découverte-du-pont-en-h"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Découverte du pont en H
&lt;/h5&gt;
&lt;p&gt;
 Tout d’abord une question très simple : pourquoi le moteur tourne dans un seul sens ? Réponse évidente : parce que le courant ne va que dans un seul sens ! Pour pouvoir aller vers l’avant ET vers l’arrière il nous faut donc un dispositif qui serait capable de faire passer le courant dans le moteur dans un sens ou dans l’autre.
&lt;/p&gt;
&lt;p&gt;
 Vous pouvez faire l’expérience en reprenant le premier montage de ce chapitre où il n’y avait que le moteur connecté sur une pile de 9V. Essayez d’inverser les deux bornes du moteur (ça ne risque rien
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 ) pour observer ce qu’il se passe : le moteur change de sens de rotation. C’est dû au champ magnétique créé par les bobines internes du moteur qui est alors opposé.
&lt;/p&gt;
&lt;p&gt;
 Reprenons notre dispositif de base avec un transistor (que nous symboliserons ici par un interrupteur). Si ce dernier est activé le moteur tourne, sinon le moteur est arrêté. Jusque là rien de nouveau. Rajoutons un deuxième transistor "de l’autre côté" du moteur. Rien ne va changer, mais il va falloir commander les deux transistors pour faire tourner le moteur. Ce n’est pas bon. Essayons avec quatre transistors, soyons fou !
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Le pont en H" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/le-pont-en-h.png"/&gt;
 &lt;figcaption&gt;
  Le pont en H
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Eh bien, cela change tout ! Car à présent nous allons piloter le moteur dans les deux sens de rotation. Pour comprendre le fonctionnement de ce pont en H (appelé ainsi par sa forme), imaginons que je ferme les transistors 1 et 4 en laissant ouverts le 2 et le 3. Le courant passe de la gauche vers la droite.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Fonctionnement dans le sens horaire" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/fonctionnement-dans-le-sens-horaire.png"/&gt;
 &lt;figcaption&gt;
  Fonctionnement dans le sens horaire
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Si en revanche je fais le contraire (2 et 3 fermés et 1 et 4 ouverts), le courant ira dans l’autre sens ! C’est génial non ?
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Fonctionnement dans le sens anti-horaire" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/fonctionnement-dans-le-sens-anti-horaire.png"/&gt;
 &lt;figcaption&gt;
  Fonctionnement dans le sens anti-horaire
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Et ce n’est pas tout !
&lt;/p&gt;
&lt;h5 id="allons-plus-loin-avec-le-pont-en-h"&gt;
 &lt;a aria-hidden="true" href="#allons-plus-loin-avec-le-pont-en-h"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Allons plus loin avec le pont en H
&lt;/h5&gt;
&lt;p&gt;
 Comme vous l’aurez sûrement remarqué, les transistors fonctionnent deux par deux. En effet, si on en ferme juste un seul et laisse ouvert les trois autres le courant n’a nulle part où aller et rien ne se passe, le moteur est en roue libre. Maintenant, que se passe-t-il lorsqu’on décide de fermer 1 &amp;amp; 2 en laissant 3 et 4 ouverts ? Cette action va créer ce que l’on appelle un
 &lt;strong&gt;
  frein magnétique
 &lt;/strong&gt;
 . Je vous ai expliqué plus tôt comment cela fonctionnait lorsque l’on mettait une diode de roue libre aux bornes du moteur. Le moteur se retrouve alors court-circuité. En tournant à cause de son inertie, le courant généré va revenir dans le moteur et va le freiner. Attention cependant, c’est différent d’un phénomène de roue libre où le moteur est libre de tourner.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Freinage avec 1 &amp;amp; 2" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/freinage-avec-1-2.png"/&gt;
 &lt;figcaption&gt;
  Freinage avec 1 &amp;amp; 2
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Freinage avec 3 &amp;amp; 4" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/freinage-avec-3-4.png"/&gt;
 &lt;figcaption&gt;
  Freinage avec 3 &amp;amp; 4
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ne fermez
   &lt;strong&gt;
    jamais
   &lt;/strong&gt;
   1 &amp;amp; 3 et/ou 2 &amp;amp; 4 ensembles, cela ferait un court-circuit de l’alimentation et vos transistors risqueraient de griller immédiatement si l’alimentation est capable de fournir un courant plus fort que ce qu’ils ne peuvent admettre.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="les-protections-nécessaires"&gt;
 &lt;a aria-hidden="true" href="#les-protections-nécessaires"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les protections nécessaires
&lt;/h4&gt;
&lt;h5 id="les-diodes-de-roue-libre"&gt;
 &lt;a aria-hidden="true" href="#les-diodes-de-roue-libre"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les diodes de roue libre
&lt;/h5&gt;
&lt;p&gt;
 Comme nous l’avons vu plus haut, pour protéger un transistor des parasites ou lors du freinage électronique du moteur, nous plaçons une diode. Dans le cas présent, cette diode devra être en parallèle aux bornes du transistor (regardez le schéma qui suit). Ici nous avons quatre transistors, nous utiliserons donc quatre diodes que nous placerons sur chaque transistor. Ainsi, le courant trouvera toujours un moyen de passer sans risquer de forcer le passage dans les transistors en les grillant. Comme vu précédemment, des diodes de type Shottky sont recommandées pour leurs caractéristiques de tension de seuil faible et commutation rapide.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Pont en H avec ses diodes de protection" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/pont-en-h-avec-ses-diodes-de-protection.png"/&gt;
 &lt;figcaption&gt;
  Pont en H avec ses diodes de protection
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/HTmEUpHtCIE" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/fLavdfKYEgc" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="un-peu-de-découplage"&gt;
 &lt;a aria-hidden="true" href="#un-peu-de-découplage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un peu de découplage
&lt;/h5&gt;
&lt;p&gt;
 Lorsque nous utilisons le moteur avec une PWM, nous générons une fréquence parasite. De plus, le moteur qui tourne génère lui même des parasites. Pour ces deux raisons, il est souvent utile d’ajouter des
 &lt;strong&gt;
  condensateurs de filtrage
 &lt;/strong&gt;
 aux bornes du moteur. Comme sur le montage suivant, on peut en placer un en parallèle des deux broches du moteur, et deux autres plus petits entre une broche et la carcasse du moteur.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Un peu de découplage" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/un-peu-de-decouplage.jpg"/&gt;
 &lt;figcaption&gt;
  Un peu de découplage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Un peu de découplage, schéma" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/un-peu-de-decouplage-schema.jpg"/&gt;
 &lt;figcaption&gt;
  Un peu de découplage, schéma
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ensuite, lorsque le moteur démarre il fera un appel de courant. Pour éviter d’avoir à faire transiter ce courant depuis la source de tension principale (une batterie par exemple), il est de bon usage de mettre un gros condensateur polarisé aux bornes de l’alimentation de puissance du pont en H. Ainsi, au moment du départ l’énergie sera en partie fournie par ce condensateur plutôt qu’en totalité par la batterie (ce qui évitera un échauffement abusif des conducteurs mais aussi une éventuelle baisse de la tension due à l’appel de courant).
&lt;/p&gt;
&lt;h4 id="des-solutions-intégrées-l293-l298"&gt;
 &lt;a aria-hidden="true" href="#des-solutions-intégrées-l293-l298"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Des solutions intégrées : L293, L298…
&lt;/h4&gt;
&lt;p&gt;
 Afin d’éviter de vous torturer avec les branchements des transistors et leur logique de contrôle, des composants "clés en main" ont été développés et produits. Nous allons maintenant étudier deux d’entre eux que nous retrouvons dans quasiment tous les shields moteurs Arduino : le L293(D) et son grand frère, plus costaud, le L298.
&lt;/p&gt;
&lt;h5 id="le-l293d"&gt;
 &lt;a aria-hidden="true" href="#le-l293d"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le L293(D)
&lt;/h5&gt;
&lt;p&gt;
 Tout d’abord, voici un lien vers
 &lt;a href="http://www.datasheetcatalog.org/datasheet/texasinstruments/l293d.pdf"&gt;
  la datasheet du composant
 &lt;/a&gt;
 . Les premières données nous apprennent que ce composant est un "quadruple demi-pont en H". Autrement formulé, c’est un double pont en H (car oui, 4 fois un demi ça fait 2 !). Ce composant est fait pour fonctionner avec des tensions de 4.5V à 36V et sera capable de délivrer 600 mA par canaux (dans notre cas cela fera 1,2A par moteur puisque nous utiliserons les demi-ponts par paire pour tourner dans les deux sens). Un courant de pic peut être toléré allant jusqu’à 1,2A par canaux (donc 2,4A dans notre cas). Enfin, ce composant existe en deux versions, le L293 et le L293D. La seule différence (non négligeable) entre les deux est que le L293D intègre déjà les diodes en parallèle des transistors. Un souci de moins à se préoccuper ! En revanche, cela implique donc des concessions sur les caractéristiques (le courant max passe à 1A par canaux et 2A pic pour la version sans les diodes). Le branchement de ce composant est assez simple (page 2 de la datasheet), mais nous allons le voir ensemble maintenant. Ce composant a 16 broches et fonctionne selon un système de symétrie assez simple.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Le L293" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/le-l293.png"/&gt;
 &lt;figcaption&gt;
  Le L293
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 De chaque côté les broches du milieu (4, 5, 12 et 13) servent à relier la masse mais aussi à dissiper la chaleur. On trouve les entrées d’activation des ponts (
 &lt;em&gt;
  enable
 &lt;/em&gt;
 ) sur les broches 1 et 9. Un état HAUT sur ces broches et les ponts seront activés, les transistors pourront s’ouvrir ou se fermer, alors qu’un état BAS désactive les ponts, les transistors restent ouverts. Ensuite, on trouve les broches pour piloter les transistors. Comme un bon tableau vaut mieux qu’un long discours, voici les cas possibles et leurs actions :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Input 1 (broche 2 et 10)
      &lt;/th&gt;
      &lt;th&gt;
       Input 2 (broche 7 et 15)
      &lt;/th&gt;
      &lt;th&gt;
       Effet
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       Tourne dans le sens horaire
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
      &lt;td&gt;
       Tourne dans le sens anti-horaire
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
      &lt;td&gt;
       Frein
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       Frein
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Commande et impact sur le moteur
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 Ainsi, en utilisant une PWM sur la broche d’activation des ponts on sera en mesure de faire varier la vitesse. Il ne nous reste plus qu’à brancher le moteur sur les sorties respectives (2 et 7 ou 11 et 14 selon le pont utilisé) pour le voir tourner.
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 Et voilà ! Vous savez à peu près tout ce qu’il faut savoir (pour l’instant
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 ) sur ce composant.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Attends attends attends, pourquoi il y a deux broches Vcc qui ont des noms différents, c’est louche ça !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Ah oui, c’est vrai et c’est important ! Le composant possède deux sources d’alimentation. Une pour la partie "logique" (contrôle correct des transistors), VCC1 ; et l’autre pour la partie puissance (utile pour alimenter les moteurs à la bonne tension), VCC2. Bien que ces deux entrées respectent les mêmes tensions (4.5V à 36V), nous ne sommes pas obligés de mettre des tensions identiques. Par exemple, la tension pour la logique pourrait venir du +5V de la carte Arduino tandis que la partie puissance pourrait être fournie par une pile 9V par exemple (n’oubliez pas de bien relier les masses entre elles pour avoir un référentiel commun).
&lt;/p&gt;
&lt;div class="custom-block alert alert-danger"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   N’utilisez
   &lt;strong&gt;
    JAMAIS
   &lt;/strong&gt;
   le +5V de la carte Arduino comme alimentation de puissance (pour la logique c’est OK). Son régulateur ne peut fournir que 250mA ce qui est faible. Si vous l’utilisez pour alimenter des moteurs vous risquez de le griller !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Comme je suis sympa (
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 ) je vous donne un exemple de branchement du composant avec un moteur et une carte Arduino (j’ai pris le modèle L293D pour ne pas m’embêter à devoir mettre les diodes de protection sur le schéma :roll: ) :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Schéma d'utilisation du L293D" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/schema-dutilisation-du-l293d.jpg"/&gt;
 &lt;figcaption&gt;
  Schéma d'utilisation du L293D
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Montage du L293D" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/montage-du-l293d.png"/&gt;
 &lt;figcaption&gt;
  Montage du L293D
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 &lt;strong&gt;
  Vous noterez la présence du gros condensateur polarisé (100 µF / 25V ou plus selon l’alimentation) pour découpler l’alimentation de puissance du L293D
 &lt;/strong&gt;
 . Comme je n’utilise qu’un seul pont, j’ai relié à la masse les entrées de celui qui est inutilisé afin de ne pas avoir des entrées qui "grésillent" et fassent consommer le montage pour rien. Enfin, vous remarquez que j’utilise trois broches de l’Arduino, deux pour le sens (2 et 4) et une PWM pour la vitesse (3).
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/VpuscclthLE" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="le-l298"&gt;
 &lt;a aria-hidden="true" href="#le-l298"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le L298
&lt;/h5&gt;
&lt;p&gt;
 Étudions maintenant le grand frère du L293 :
 &lt;a href="http://www.st.com/st-web-ui/static/active/en/resource/technical/document/datasheet/CD00000240.pdf"&gt;
  le L298
 &lt;/a&gt;
 . Si je parle de grand frère ce n’est pas innocent. En effet, son fonctionnement est très similaire à celui du L293, mais il est capable de débiter des courants jusqu’à 2A nominal par pont et jusqu’à 3A pendant un bref instant. Il propose aussi une fonction pouvant être intéressante qui est la mesure du courant passant au travers du pont (pour vérifier si votre moteur est "rendu en butée"
 &lt;sup id="fnref-1-apLa2ejZk-"&gt;
  &lt;a class="footnote-ref" href="#fn-1-apLa2ejZk-"&gt;
   1
  &lt;/a&gt;
 &lt;/sup&gt;
 par exemple). Que dire de plus ? On retrouve deux broches d’alimentation, une pour la logique et l’autre pour la puissance. Celle pour la logique peut aller de 4.5 à 7V (là encore on pourra utiliser celle de l’Arduino). L’entré puissance, en revanche, admet une tension comprise entre 5 et 46V. Pour un fonctionnement optimal, la documentation nous recommande de placer des condensateurs de 100nF sur chaque ligne d’alimentation. Et comme pour le L293, on pourra aussi placer un gros condensateur polarisé de 100µF (tension à choisir selon l’alimentation) sur la ligne d’alimentation de puissance. Comme le fonctionnement est le même que celui du L293, je vais juste vous proposer une liste des broches utiles (oui je suis fainéant !).
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="le L298" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/le-l298.png"/&gt;
 &lt;figcaption&gt;
  le L298
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Pour le premier pont :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Les sorties sont situées sur les broches 2 et 3.
 &lt;/li&gt;
 &lt;li&gt;
  Les entrées pour le sens de rotation sont la 5 et 7 et la PWM (
  &lt;em&gt;
   enable
  &lt;/em&gt;
  ) ira sur la broche 6.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Pour le second pont :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Les sorties sont situées sur les broches 13 et 14.
 &lt;/li&gt;
 &lt;li&gt;
  Les entrées pour le sens de rotation sont la 10 et 12 et la PWM (
  &lt;em&gt;
   enable
  &lt;/em&gt;
  ) ira sur la broche 11.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Pour les deux ponts :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  La masse, qui est au milieu sur la broche 8.
 &lt;/li&gt;
 &lt;li&gt;
  L’alimentation de la logique de commande (le 5V) sur la broche suivante, la 9.
 &lt;/li&gt;
 &lt;li&gt;
  Et l’alimentation de la partie puissance sur la broche 4.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Je ne mentionne pas les broches 1 et 15 qui sont celles servant à mesurer le courant traversant les ponts. Je doute que vous vous en serviez dans un premier temps et si vous arrivez jusque là je n’ai aucun doute que vous arriverez à les mettre en oeuvre (indice : il faudra utiliser une résistance
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 )
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Le L298 n’existe pas avec les diodes de roue libre intégrées. Prenez donc garde à bien les rajouter dans votre montage sous peine de voir votre composant griller.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Comme précédemment, voici un schéma d’illustration (l’image représentant le L298 n’est pas exacte, mais le boitier multiwatt n’existe pas encore dans Fritzing donc j’ai dû feinter) :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Schéma du L298 avec un moteur et ses diodes" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/schema-du-l298-avec-un-moteur-et-ses-diodes.jpg"/&gt;
 &lt;figcaption&gt;
  Schéma du L298 avec un moteur et ses diodes
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Montage du L298 avec un moteur et ses diodes" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/montage-du-l298-avec-un-moteur-et-ses-diodes.png"/&gt;
 &lt;figcaption&gt;
  Montage du L298 avec un moteur et ses diodes
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="et-arduino-dans-tout-ça"&gt;
 &lt;a aria-hidden="true" href="#et-arduino-dans-tout-ça"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Et Arduino dans tout ça ?
&lt;/h3&gt;
&lt;h4 id="bref-rappel-sur-les-pwm"&gt;
 &lt;a aria-hidden="true" href="#bref-rappel-sur-les-pwm"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Bref rappel sur les PWM
&lt;/h4&gt;
&lt;p&gt;
 Si vous avez bien lu la partie précédente, vous avez dû apprendre que pour pouvoir modifier la vitesse de rotation du moteur il faut utiliser un signal PWM. Mais vous souvenez-vous comment on s’en sert avec Arduino ? Allez, zou, petite piqûre de rappel ! Commençons par redire où sont situées les broches utilisables avec la PWM. Elles sont au nombre de 6 et ont les numéros 3, 5, 6, 9, 10 et 11. Pour les utiliser, vous devrez les configurer en sortie dans le setup() de votre programme :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; brochePWM = &lt;span class="hljs-number"&gt;3&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// configuration en sortie de la broche 3&lt;/span&gt;
    pinMode(brochePWM, OUTPUT);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ensuite, vous pourrez agir sur le
 &lt;em&gt;
  rapport cyclique
 &lt;/em&gt;
 du signal PWM (le ratio entre temps à l’état HAUT et temps à l’état BAS) en utilisant la fonction
 &lt;code&gt;
  analogWrite(broche, ratio)
 &lt;/code&gt;
 . L’argument
 &lt;em&gt;
  broche
 &lt;/em&gt;
 désigne… la broche à utiliser et l’argument
 &lt;em&gt;
  ratio
 &lt;/em&gt;
 indique la portion de temps à l’état haut du signal.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;/* le signal PWM est généré sur la broche 3 de la carte Arduino
   avec un rapport cyclique de 50%
   (état HAUT égal en temps à celui de l'état BAS */&lt;/span&gt;

analogWrite(brochePWM, &lt;span class="hljs-number"&gt;127&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  La fonction
  &lt;code&gt;
   analogWrite
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Le rapport cyclique est défini par un nombre allant de 0 à 255. Cela signifie qu’à 0, le signal de sortie sera nul et à 255, le signal de sortie sera à l’état HAUT. Toutes les valeurs comprises entre ces deux extrêmes donneront un rapport cyclique plus ou moins grand. Dans notre cas, le moteur tourne plus ou moins vite selon si le rapport cyclique est grand ou petit. Pour savoir quel rapport cyclique correspond avec quelle valeur, il faut faire une règle de trois :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Valeur argument
      &lt;/th&gt;
      &lt;th&gt;
       Rapport cyclique (%)
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       127
      &lt;/td&gt;
      &lt;td&gt;
       50
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       255
      &lt;/td&gt;
      &lt;td&gt;
       100
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Quelques exemples de rapport cyclique
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 Le calcul donnant la valeur pour chaque portion est défini par cette relation :
&lt;/p&gt;
&lt;p&gt;
 &lt;span class="inlineMath inlineMathDouble"&gt;
  &lt;span class="katex-display"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         a
        &lt;/mi&gt;
        &lt;mi&gt;
         r
        &lt;/mi&gt;
        &lt;mi&gt;
         g
        &lt;/mi&gt;
        &lt;mi&gt;
         u
        &lt;/mi&gt;
        &lt;mi&gt;
         m
        &lt;/mi&gt;
        &lt;mi&gt;
         e
        &lt;/mi&gt;
        &lt;mi&gt;
         n
        &lt;/mi&gt;
        &lt;mi&gt;
         t
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mfrac&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           x
          &lt;/mi&gt;
          &lt;mo&gt;
           ×
          &lt;/mo&gt;
          &lt;mn&gt;
           1
          &lt;/mn&gt;
          &lt;mn&gt;
           0
          &lt;/mn&gt;
          &lt;mn&gt;
           0
          &lt;/mn&gt;
         &lt;/mrow&gt;
         &lt;mrow&gt;
          &lt;mn&gt;
           2
          &lt;/mn&gt;
          &lt;mn&gt;
           5
          &lt;/mn&gt;
          &lt;mn&gt;
           5
          &lt;/mn&gt;
         &lt;/mrow&gt;
        &lt;/mfrac&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        argument = \frac{x \times 100}{255}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:1.32144em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:2.00744em;vertical-align:-0.686em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit"&gt;
       a
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
       r
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
       g
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       u
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       m
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       e
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       n
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       t
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mopen nulldelimiter"&gt;
       &lt;/span&gt;
       &lt;span class="mfrac"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:1.32144em;"&gt;
           &lt;span style="top:-2.314em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord"&gt;
              2
             &lt;/span&gt;
             &lt;span class="mord"&gt;
              5
             &lt;/span&gt;
             &lt;span class="mord"&gt;
              5
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.15em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="stretchy" style="height:0.2em;"&gt;
             &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
              &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
              &lt;/path&gt;
             &lt;/svg&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.677em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord mathit"&gt;
              x
             &lt;/span&gt;
             &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
             &lt;/span&gt;
             &lt;span class="mbin"&gt;
              ×
             &lt;/span&gt;
             &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
             &lt;/span&gt;
             &lt;span class="mord"&gt;
              1
             &lt;/span&gt;
             &lt;span class="mord"&gt;
              0
             &lt;/span&gt;
             &lt;span class="mord"&gt;
              0
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.686em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       &lt;span class="mclose nulldelimiter"&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 Le résultat de ce calcul donne la valeur de l’argument pour le rapport cyclique recherché. x est la valeur du rapport cyclique que vous souhaitez donner au signal.
&lt;/p&gt;
&lt;h4 id="utiliser-un-shield-moteur"&gt;
 &lt;a aria-hidden="true" href="#utiliser-un-shield-moteur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utiliser un shield moteur
&lt;/h4&gt;
&lt;p&gt;
 Comme nous l’avons vu précédemment, réaliser un pont en H demande quelques efforts (surtout si vous désirez tout faire vous mêmes
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 ). Afin de rendre ces derniers plus accessibles aux personnes ayant moins de moyens techniques (tout le monde ne dispose pas du matériel pour réaliser ses propres cartes électroniques !), l’équipe Arduino a développé et mis en productions un shield (une carte d’extension) pour pouvoir utiliser facilement des moteurs. Cette extension possède ainsi tout ce qu’il faut pour mettre en œuvre rapidement un ou des moteurs. La seule contrepartie est que les broches à utiliser sont imposées. Cependant, il existe une multitude de shields moteurs
 &lt;em&gt;
  non officiels
 &lt;/em&gt;
 pouvant faire les mêmes choses ou presque. L’avantage de ces derniers est indéniablement leur prix souvent moins cher. En revanche, il n’est pas toujours facile de trouver leur documentation et le format de la carte ne se soucie pas forcément du "standard" Arduino (et n’est donc pas forcément adaptable en "s’ajoutant par dessus" comme un shield officiel le ferait). Je vais donc maintenant vous présenter le shield officiel, son fonctionnement et son utilisation, puis ensuite un shield non-officiel (acheté pas cher sur le net) que je possède et avec lequel je ferai mes photos/vidéos. Vous devriez alors avoir assez de connaissances pour utiliser n’importe quel shield non-officiel que vous pourrez trouver. Les deux shields présentés ont un point commun : ils utilisent tous les deux le L298 comme composant pour les ponts en H.
&lt;/p&gt;
&lt;h5 id="le-shield-officiel-darduino"&gt;
 &lt;a aria-hidden="true" href="#le-shield-officiel-darduino"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le shield officiel d’Arduino
&lt;/h5&gt;
&lt;p&gt;
 Tout d’abord, voici l’adresse de description de ce shield :
 &lt;a href="http://arduino.cc/en/Main/ArduinoMotorShieldR3"&gt;
  le shield moteur
 &lt;/a&gt;
 . Comme vous avez bien lu la partie précédente à propos du L298, vous connaissez déjà la majeure partie des choses à savoir. Parmi elles, vous savez que le L298 nécessite trois broches de "pilotage" (par pont intégré) et envoie la puissance sur deux broches (par moteur). Éventuellement nous disposons aussi des deux "sondes de courant" mais nous y reviendrons plus tard. Voici un petit synoptique de résumé que je vous ai concocté pour l’occasion :
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Le shield moteur officiel en image" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/le-shield-moteur-officiel-en-image.jpg"/&gt;
 &lt;figcaption&gt;
  Le shield moteur officiel en image
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Voici comment il fonctionne et les quelques précautions d’utilisation.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  L’alimentation de puissance sur les borniers à visser à gauche est reliée à l’Arduino et peut donc lui servir de source d’alimentation. Si vous voulez dédier cette alimentation à la carte moteur, il faut donner un coup de cutter sur le strap marqué Vin en dessous de la carte
 &lt;/li&gt;
 &lt;li&gt;
  Les entrées/sorties du shield sont reliées à l’Arduino de la manière suivante :
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Fonction
      &lt;/th&gt;
      &lt;th&gt;
       Broches mot. A
      &lt;/th&gt;
      &lt;th&gt;
       Broches mot. B
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Direction
      &lt;/td&gt;
      &lt;td&gt;
       12
      &lt;/td&gt;
      &lt;td&gt;
       13
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       PWM
      &lt;/td&gt;
      &lt;td&gt;
       3
      &lt;/td&gt;
      &lt;td&gt;
       11
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Frein
      &lt;/td&gt;
      &lt;td&gt;
       9
      &lt;/td&gt;
      &lt;td&gt;
       8
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Mesure de courant
      &lt;/td&gt;
      &lt;td&gt;
       A0
      &lt;/td&gt;
      &lt;td&gt;
       A1
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Entrées/sorties du shield
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 La mesure de courant se fait sur les broches A0 et A1. Si vous avez besoin de ces broches pour d’autre applications, vous pouvez là encore désactiver la fonction en coupant le strap en dessous de la carte. Sinon, la mesure se fera simplement avec la fonction porte logique OU Exclusif, on peut déactiver la fonction de "frein" tout en gardant celle du sens. Grâce à cela, on peut se limiter à seulement deux broches pour commander chaque moteur : celle du sens et celle de la vitesse. Voici comment ils ont fait : Tout d’abord, regardons la table de vérité du OU EXCLUSIF. Cette dernière s’interprète comme suit : "La sortie est à 1 si une des deux entrées
 &lt;strong&gt;
  uniquement
 &lt;/strong&gt;
 est à 1". Sous forme de tableau on obtient ça:
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Entrée A
      &lt;/th&gt;
      &lt;th&gt;
       Entrée B
      &lt;/th&gt;
      &lt;th&gt;
       Sortie
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
      &lt;td&gt;
       &lt;strong&gt;
        0
       &lt;/strong&gt;
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
      &lt;td&gt;
       &lt;strong&gt;
        1
       &lt;/strong&gt;
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       &lt;strong&gt;
        1
       &lt;/strong&gt;
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       &lt;strong&gt;
        0
       &lt;/strong&gt;
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Le OU Exclusif (XOR)
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 Maintenant rappelez-vous, les conditions de freinage étaient justement représentées lorsque les deux entrées du pont étaient au même niveau. En couplant intelligemment le résultat de cette porte logique et les entrées de pilotage, on peut décider oui ou non d’avoir la fonction de frein. Afin de mieux comprendre, je vous invite à consulter cet extrait du schéma technique du shield :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Astuce de pilotage du moteur" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/astuce-de-pilotage-du-moteur.png"/&gt;
 &lt;figcaption&gt;
  Astuce de pilotage du moteur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Grâce à ce montage, vous pouvez choisir ou non d’avoir un mode de frein sur vos moteurs. Si vous préférez avoir deux broches disponibles et ne pas avoir de frein (juste une roue libre lorsque la PWM est à 0), alors il vous suffira une fois de plus de couper les straps en dessous de la carte.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   N’ayez pas peur d’avoir des regrets ! Si vous coupez un strap, vous pourrez toujours le remettre en ajoutant un petit point de soudure pour relier les deux pastilles prévues à cet effet.
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
   Le mieux aurait été d’avoir la possibilité de mettre des cavaliers que l’on enlève à la main, mais bon, c’est comme ça.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous savez maintenant tout à propos de ce shield. Je vais maintenant vous en présenter un non-officiel et ensuite nous passerons à un petit montage/code d’exemple pour finir ce chapitre.
&lt;/p&gt;
&lt;h5 id="mon-shield-non-officiel"&gt;
 &lt;a aria-hidden="true" href="#mon-shield-non-officiel"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Mon shield non-officiel
&lt;/h5&gt;
&lt;p&gt;
 Maintenant que vous connaissez le fonctionnement global du shield officiel, vous allez pouvoir utiliser sans problème la plupart des shields moteurs. Afin de ne pas faire de publicité pour un site ou un autre, je vais vous présenter mon shield qui vaut aussi bien qu’un autre (mais pas forcément mieux). Il n’y a aucun parti pris, j’ai acheté ce dernier afin de profiter de tarif intéressant lors d’une commande avec d’autres composants. Si j’avais été uniquement à la recherche d’un shield moteur, j’en aurais peut-être pris un autre qui sait ! Bref, assez de ma vie, passons à l’étude du module ! Afin de bien commencer les choses, je vais d’abord vous montrer une photo d’identité de ce dernier. Ensuite je vous expliquerai où sont les broches qui nous intéressent et ferai un parallèle avec le shield officiel. Les deux étant basés sur un L298 l’explication sera assez rapide car je n’ai pas envie de me répéter. Je ferai néanmoins un petit aparté sur les différences (avantages et inconvénients) entre les deux.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Le shield moteur étudié" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/le-shield-moteur-etudie.jpg"/&gt;
 &lt;figcaption&gt;
  Le shield moteur étudié
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Voici une petite liste des points importants :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  À gauche en
  &lt;strong&gt;
   jaune
  &lt;/strong&gt;
  : les entrées de commande.
  &lt;strong&gt;
   EnA
  &lt;/strong&gt;
  ,
  &lt;strong&gt;
   In1
  &lt;/strong&gt;
  ,
  &lt;strong&gt;
   In2
  &lt;/strong&gt;
  pour le moteur A ;
  &lt;strong&gt;
   EnB
  &lt;/strong&gt;
  ,
  &lt;strong&gt;
   In3
  &lt;/strong&gt;
  ,
  &lt;strong&gt;
   In4
  &lt;/strong&gt;
  pour le moteur B. On trouve aussi une broche de masse et une sortie 5V sur laquelle je reviendrai.
 &lt;/li&gt;
 &lt;li&gt;
  En bas en
  &lt;strong&gt;
   vert
  &lt;/strong&gt;
  différents
  &lt;em&gt;
   jumpers
  &lt;/em&gt;
  (des cavaliers si vous préférez
  &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  ) pour activer des résistances de pull-down (force une entrée/sortie à l’état bas) et câbler la mesure de courant de sortie des ponts
 &lt;/li&gt;
 &lt;li&gt;
  À droite en
  &lt;strong&gt;
   bleu
  &lt;/strong&gt;
  , les bornes pour brancher les moteurs A et B (respectivement en haut et en bas) et au milieu le bornier pour amener l’alimentation de puissance (et une entrée ou sortie) de 5V
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Au milieu on retrouve le L298 avec de chaque côté (en haut et en bas) les diodes de roue libre pour chaque moteur. Une petite précision s’impose par rapport à ce shield. La carte embarque un régulateur 5V (le petit bloc noir en haut à gauche marqué 78M05). Ce dernier peut être utilisé ou non (Activez-le avec le jumper vert juste à coté). Si vous le laissez activé, c’est lui qui fournira l’alimentation pour la logique du L298. Si vous le désactivez, vous devrez fournir vous-même le 5V pour la logique. Dans tous les cas, il vous faut relier les masses puissances et logiques entre Arduino et le shield afin d’avoir un référentiel commun. Si vous l’activez, alors vous obtiendrez une sortie de 5V sur le bornier bleu à droite (utile pour alimenter l’Arduino par exemple). Si vous le désactivez, alors vous devrez fournir le 5V (et donc le bornier bleu devra être utilisé comme une entrée). Ce shield n’est en fait qu’une simple carte électronique disposant du L298 et facilitant l’accès à ses broches. Le fonctionnement se fait exactement comme nous l’avons vu dans le chapitre précédent, lorsque je vous présentais le L293 et L298 pour la première fois. Pas de facétie avec des portes logiques pour gagner des broches. Ici, tout est brut de décoffrage, on commande directement le pont en H. Il vous faudra donc trois broches par moteur, deux pour gérer la direction et le frein et une (PWM) pour la vitesse.
&lt;/p&gt;
&lt;h4 id="petit-programme-de-test"&gt;
 &lt;a aria-hidden="true" href="#petit-programme-de-test"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Petit programme de test
&lt;/h4&gt;
&lt;p&gt;
 Nous allons maintenant pouvoir passer aux choses sérieuses : l’utilisation du moteur avec l’Arduino !
&lt;/p&gt;
&lt;h5 id="lélectronique"&gt;
 &lt;a aria-hidden="true" href="#lélectronique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’électronique
&lt;/h5&gt;
&lt;p&gt;
 Pour cela, nous allons commencer par câbler le shield. En ayant la partie précédente concernant le vôtre sous les yeux, vous devriez pouvoir vous en sortir sans trop de difficulté. (Désolé, pas de schéma ce coup-ci car le logiciel que j’utilise ne possède pas encore le shield moteur dans sa base de données, faites donc preuve d’imagination.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 ) Personnellement, je n’utiliserai qu’un seul moteur (car dans l’immédiat j’en ai qu’un sous la main
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 ). Je vais donc le brancher sur les bornes bleues "Moteur A". Ensuite, je vais relier les différentes broches de commande à mon Arduino. La broche EnA sera reliée à une sortie de PWM (dans mon cas la broche 3) et les broches In1 et In2 seront reliées à n’importe quelles broches numériques (2 et 4 pour moi). Il ne nous reste plus qu’à nous occuper de l’alimentation. Tout d’abord, je mets un fil entre la masse du shield et celle de l’Arduino (pour avoir un référentiel commun). Comme ma carte possède son propre régulateur de tension 5V, pas besoin de l’amener depuis Arduino. Enfin, je relie les deux fils pour la puissance. Dans mon cas ce sera une alimentation 12V (400 mA max, wouhou) qui vient d’un adaptateur allume-cigare (censé fournir du 5V) que j’ai démonté pour obtenir une source de 12V. Je vous propose aussi de rajouter un potentiomètre sur une entrée analogique. De cette façon nous allons pouvoir faire varier la vitesse sans recharger le programme
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 . Et voilà, point de vue électronique tout est prêt. Voilà ce que ça donne chez moi (un beau bazar
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 , mais j’ai oublié le potentiomètre) :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Le montage avec le shield et Arduino" src="./images/uploaded/tuto-arduino-601-le-moteur-à-courant-continu/le-montage-avec-le-shield-et-arduino.jpg"/&gt;
 &lt;figcaption&gt;
  Le montage avec le shield et Arduino
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="linformatique"&gt;
 &lt;a aria-hidden="true" href="#linformatique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’informatique
&lt;/h5&gt;
&lt;p&gt;
 Maintenant, nous allons devoir nous occuper du code et comme toujours, nous commençons par lister les variables concernant les broches utilisées :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// la PWM pour la vitesse&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; enable = &lt;span class="hljs-number"&gt;3&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// les broches de signal pour le sens de rotation&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; in1 = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; in2 = &lt;span class="hljs-number"&gt;4&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// une entrée analogique (A0) pour régler la vitesse manuellement&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; potar = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ces différentes broches seront bien entendu des broches de sortie (sauf l’analogique), donc nous les déclarons comme telles dans le
 &lt;code&gt;
  setup()
 &lt;/code&gt;
 :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    pinMode(enable, OUTPUT);
    pinMode(in1, OUTPUT);
    pinMode(in2, OUTPUT);
    &lt;span class="hljs-comment"&gt;// j'utilise la liaison série pour verifier&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// la vitesse définie par le potentiomètre&lt;/span&gt;
    Serial.begin(&lt;span class="hljs-number"&gt;115200&lt;/span&gt;);

    &lt;span class="hljs-comment"&gt;// on démarre moteur en avant et en roue libre&lt;/span&gt;
    analogWrite(enable, &lt;span class="hljs-number"&gt;0&lt;/span&gt;);
    digitalWrite(in1, LOW);
    digitalWrite(in2, HIGH);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Un setup pour l’utilisation d’un moteur à courant continu
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Et voila, si vous exécutez le code maintenant votre moteur sera… arrêté ! Eh oui, j’ai volontairement mis une vitesse nulle à la fin du setup() pour éviter que le moteur ne s’emballe au démarrage du programme. Mais si vous changez cette dernière (mettez 50 pour voir) vous verrez votre moteur se mettre à tourner. Nous allons donc rajouter un peu d’interactivité, pour que vous puissiez vous-même augmenter/diminuer la vitesse en fonction de la valeur lue sur le potentiomètre :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on lit la valeur du potentiomètre&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; vitesse = analogRead(potar);

    &lt;span class="hljs-comment"&gt;// division de la valeur lue par 4&lt;/span&gt;
    vitesse /= &lt;span class="hljs-number"&gt;4&lt;/span&gt;;

    &lt;span class="hljs-comment"&gt;// envoie la nouvelle vitesse sur le moteur&lt;/span&gt;
    analogWrite(enable, vitesse);

    &lt;span class="hljs-comment"&gt;// on affiche la vitesse sur le moniteur série&lt;/span&gt;
    Serial.println(vitesse);

    delay(&lt;span class="hljs-number"&gt;50&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Utilisation basique d’un moteur à courant continu
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Mais pourquoi tu divises la vitesse par 4 à la ligne 5 ? Je veux aller à fond moi !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 C’est très simple. La lecture analogique nous renvoie une valeur entre 0 et 1023 (soit 1024 valeur possibles). Or la fonction analogWrite ne peut aller qu’entre 0 et 255 (total de 256 valeurs). Je divise donc par 4 pour rester dans le bon intervalle ! Car :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        4
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mn&gt;
        5
       &lt;/mn&gt;
       &lt;mn&gt;
        6
       &lt;/mn&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mn&gt;
        4
       &lt;/mn&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       4 \times 256 = 1024
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.64444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.72777em;vertical-align:-0.08333em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      4
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      5
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      6
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      4
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 .
&lt;/p&gt;
&lt;h4 id="programme-plus-élaboré"&gt;
 &lt;a aria-hidden="true" href="#programme-plus-élaboré"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Programme plus élaboré
&lt;/h4&gt;
&lt;p&gt;
 Maintenant, je vous fais cadeau d’un code vous permettant d’aller dans les deux sens et à vitesse variable. Mais, je vous conseille d’essayer de le faire par vous-même avant de regarder ce qu’il y a dans la balise secret. Le potentiomètre est utilisé comme régulateur de vitesse, mais on va virtuellement décaler l’origine. Autrement dit, entre 0 et 511 nous irons dans un sens, et entre 512 et 1023 nous irons dans l’autre sens. Nous ferons aussi en sorte que la vitesse soit de plus en plus élevée lorsque l’on "s’éloigne" du 0 virtuel (de la valeur 512 donc). Je vous donne le code tel quel (avec des commentaires bien sûr). Libre à vous de le traiter comme un exercice. À sa suite, une petite vidéo du résultat.
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; enable = &lt;span class="hljs-number"&gt;3&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// la PWM&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; in1 = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;    &lt;span class="hljs-comment"&gt;// les broches de signal&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; in2 = &lt;span class="hljs-number"&gt;4&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; potar = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;  &lt;span class="hljs-comment"&gt;// la broche pour régler la vitesse&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
   pinMode(enable, OUTPUT);
   pinMode(in1, OUTPUT);
   pinMode(in2, OUTPUT);
   Serial.begin(&lt;span class="hljs-number"&gt;115200&lt;/span&gt;);

   &lt;span class="hljs-comment"&gt;// on démarre moteur en avant et en roue libre&lt;/span&gt;
   analogWrite(enable, &lt;span class="hljs-number"&gt;0&lt;/span&gt;);
   digitalWrite(in1, LOW);
   digitalWrite(in2, HIGH);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
   &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; vitesse = analogRead(potar);

   &lt;span class="hljs-comment"&gt;// dans le sens positif&lt;/span&gt;
   &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(vitesse &amp;gt; &lt;span class="hljs-number"&gt;512&lt;/span&gt;)
   {
       &lt;span class="hljs-comment"&gt;// on décale l'origine de 512&lt;/span&gt;
       vitesse -= &lt;span class="hljs-number"&gt;512&lt;/span&gt;;
       &lt;span class="hljs-comment"&gt;// le moteur va dans un sens&lt;/span&gt;
       digitalWrite(in1, LOW);
       digitalWrite(in2, HIGH);
       Serial.print(&lt;span class="hljs-string"&gt;"+"&lt;/span&gt;);
   }
   &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;span class="hljs-comment"&gt;// dans l'autre sens&lt;/span&gt;
   {
       &lt;span class="hljs-comment"&gt;// de même on décale pour que la vitesse augmente en s'éloignant de 512&lt;/span&gt;
       vitesse = &lt;span class="hljs-number"&gt;512&lt;/span&gt;-vitesse;
       &lt;span class="hljs-comment"&gt;// le moteur va dans l'autre sens&lt;/span&gt;
       digitalWrite(in1, HIGH);
       digitalWrite(in2, LOW);
       Serial.print(&lt;span class="hljs-string"&gt;"-"&lt;/span&gt;);
   }

   &lt;span class="hljs-comment"&gt;// pour rester dans l'intervalle [0;255] (sinon on est dans [0;512])&lt;/span&gt;
   vitesse /= &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
   &lt;span class="hljs-comment"&gt;// envoie la vitesse&lt;/span&gt;
   analogWrite(enable, vitesse);

   &lt;span class="hljs-comment"&gt;// et l'affiche&lt;/span&gt;
   Serial.println(vitesse);
   delay(&lt;span class="hljs-number"&gt;50&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    Exercice de rotation du moteur à courant continu
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Bravo à ceux qui ont essayé de faire ce programme, même s’ils n’y sont pas arrivé ! Dans ce dernier cas, vous pouvez aller voir sur les forums et poser vos éventuelles questions après avoir vérifié que vous avez bien tout essayé de comprendre.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 Voilà la vidéo qui montre le fonctionnement du programme :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/K1NRLzt_zSI" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Désolé pour la qualité de la vidéo, il faut vraiment que je change d’appareil…
&lt;/p&gt;
&lt;p&gt;
 Vous savez désormais comment fonctionne un moteur à courant continu et quels sont les moyens de le piloter. Il va dorénavant être possible de vous montrer l’existence de moteurs un peu particuliers qui se basent sur le moteur à courant continu pour fonctionner. Et vous allez voir que l’on va pouvoir faire plein de choses avec !
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;div class="footnotes"&gt;
 &lt;hr/&gt;
 &lt;ol&gt;
  &lt;li id="fn-1-apLa2ejZk-"&gt;
   &lt;p&gt;
    s’il rencontre un obstacle qui freine sa course
   &lt;/p&gt;
   &lt;a class="footnote-backref" href="#fnref-1-apLa2ejZk-" title="Retourner au texte de la note 1"&gt;
    ↩
   &lt;/a&gt;
  &lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Ajouter des sorties numériques à l'Arduino, le 74HC595</title><link href="https://eskimon.fr/tuto-arduino-901-ajouter-des-sorties-num%C3%A9riques-%C3%A0-larduino-le-74hc595" rel="alternate"></link><published>2013-12-11T22:27:00+01:00</published><updated>2013-12-11T22:27:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-11:/tuto-arduino-901-ajouter-des-sorties-numériques-à-larduino-le-74hc595</id><summary type="html">&lt;p&gt;
 Dans ce petit tutoriel, nous allons découvrir comment ajouter des sorties numériques à une carte Arduino. En effet, pour vos projets les plus fous, vous serez certainement amené à avoir besoin d’un grand nombre de sorties. Deux choix s’offrent alors à vous : le premier serait d’opter pour …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Dans ce petit tutoriel, nous allons découvrir comment ajouter des sorties numériques à une carte Arduino. En effet, pour vos projets les plus fous, vous serez certainement amené à avoir besoin d’un grand nombre de sorties. Deux choix s’offrent alors à vous : le premier serait d’opter pour une carte Arduino qui dispose de plus de sorties, telle que la Arduino Mega ; mais dans le cas où vous aurez besoin d’un énorme nombre de sorties, même la Mega ne pourrait suffire. Le deuxième choix c’est donc… de lire ce tuto !
&lt;/p&gt;
&lt;p&gt;
 Ce que vous allez découvrir se révélera fort utile, soyez-en certains.
&lt;/p&gt;
&lt;p&gt;
 Prenons l’exemple suivant : dans le cas où vous devrez gérer un grand nombre de LED pour réaliser un afficheur comme l’on en trouve parfois dans les vitrines de magasins, vous serez très vite limité par le nombre de sorties de votre Arduino. Surtout si votre afficheur contient plus de 1000 LEDs ! Ce chapitre va alors vous aider dans de pareils cas, car nous allons vous présenter un composant spécialisé dans ce domaine : le
 &lt;strong&gt;
  74HC595
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#présentation-du-74hc595"&gt;
    Présentation du 74HC595
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#principe"&gt;
     Principe
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#le-composant"&gt;
      Le composant
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#brochage"&gt;
       Brochage
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#fonctionnement"&gt;
       Fonctionnement
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#montage"&gt;
       Montage
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#programmons-pour-utiliser-ce-composant"&gt;
    Programmons pour utiliser ce composant
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#envoyer-un-ordre-au-74hc595"&gt;
      Envoyer un ordre au 74HC595
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-protocole"&gt;
       Le protocole
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#création-de-la-fonction-denvoi"&gt;
       Création de la fonction d’envoi
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#envoyer-un-char-en-tant-que-donnée-binaire"&gt;
       Envoyer un char en tant que donnée binaire
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-masques-en-programmation"&gt;
       Les masques en programmation
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#lévolution-du-masque"&gt;
       L’évolution du masque
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#un-petit-programme-dessai"&gt;
       Un petit programme d’essai
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#la-fonction-magique-shiftout"&gt;
     La fonction magique, ShiftOut
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#exercices-des-chenillards"&gt;
    Exercices : des chenillards !
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#javance-et-repars-"&gt;
      "J’avance et repars !"
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#consigne"&gt;
       Consigne
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#correction"&gt;
       Correction
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#javance-et-reviens-"&gt;
      "J’avance et reviens !"
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#consigne-1"&gt;
       Consigne
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#correction-1"&gt;
       Correction
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#un-dernier-pour-la-route"&gt;
      Un dernier pour la route !
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#consigne-2"&gt;
       Consigne
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#correction-2"&gt;
       Correction
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#exo-bonus"&gt;
      Exo bonus
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#consigne-3"&gt;
       Consigne
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#correction-3"&gt;
       Correction
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#pas-assez-augmentez-encore"&gt;
    Pas assez ? Augmentez encore !
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#branchement"&gt;
     Branchement
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#exemple-dun-affichage-simple"&gt;
     Exemple d’un affichage simple
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#exemple-dun-chenillard"&gt;
     Exemple d’un chenillard
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="présentation-du-74hc595"&gt;
 &lt;a aria-hidden="true" href="#présentation-du-74hc595"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Présentation du 74HC595
&lt;/h3&gt;
&lt;h4 id="principe"&gt;
 &lt;a aria-hidden="true" href="#principe"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Principe
&lt;/h4&gt;
&lt;p&gt;
 Comme je viens de l’énoncer, il peut arriver qu’il vous faille utiliser plus de broches qu’il n’en existe sur un micro-contrôleur, votre carte Arduino en l’occurrence (ou plutôt, l’ATMEGA328 présent sur votre carte Arduino). Dans cette idée, des ingénieurs ont développé un composant que l’on pourrait qualifier de "décodeur série -&amp;gt; parallèle". D’une manière assez simple, cela consiste à envoyer un octet de données (8 bits) à ce composant qui va alors décoder l’information reçue et changer l’état de chacune de ses sorties en conséquence. Le composant que nous avons choisi de vous faire utiliser dispose de huit sorties de données pour une seule entrée de données.
&lt;/p&gt;
&lt;p&gt;
 Concrètement, cela signifie que lorsque l’on enverra l’octet suivant : 00011000 au décodeur 74HC595, il va changer l’état (HAUT ou BAS) de ses sorties. On verra alors, en supposant qu’il y a une LED de connectée sur chacune de ses sorties, les 2 LED du "milieu" (géographiquement parlant) qui seront dans un état opposé de leurs congénères. Ainsi, en utilisant seulement deux sorties de votre carte Arduino, on peut
 &lt;em&gt;
  virtuellement
 &lt;/em&gt;
 en utiliser 8 (voir beaucoup plus, mais nous verrons cela plus tard).
&lt;/p&gt;
&lt;h4 id="le-composant"&gt;
 &lt;a aria-hidden="true" href="#le-composant"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le composant
&lt;/h4&gt;
&lt;p&gt;
 Rentrons maintenant dans les entrailles de ce fameux 595. Pour cela nous utiliserons
 &lt;a href="http://www.datasheetcatalog.org/datasheet/philips/74AHC_AHCT595_1.pdf"&gt;
  cette datasheet
 &lt;/a&gt;
 tout au long du tuto.
&lt;/p&gt;
&lt;h5 id="brochage"&gt;
 &lt;a aria-hidden="true" href="#brochage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Brochage
&lt;/h5&gt;
&lt;p&gt;
 Lisons ensemble quelques pages. La première nous donne, de par le titre, la fonctionnalité du composant. Elle est importante, car l’on sait à ce moment à quel composant nous allons avoir affaire. La seconde apporte déjà quelques informations utiles outre la fonctionnalité. Au-delà du résumé qu’il est toujours bon de lire, les caractéristiques du composant sont détaillées. On apprend également que ce composant peut fonctionner jusqu’à une fréquence de 170MHz. C’est très très rapide par rapport à notre carte Arduino qui tourne à 16MHz, nous sommes tranquilles de ce côté-là. Continuons… C’est la page 4 qui nous intéresse vraiment ici. On y retrouve le tableau et la figure suivants :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Brochage du 74HC595" src="./images/uploaded/tuto-arduino-901-ajouter-des-sorties-numériques-à-larduino-le-74hc595/brochage-du-74hc595.png"/&gt;
 &lt;figcaption&gt;
  Brochage du 74HC595
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Avec ce dernier, on va pouvoir faire le lien entre le nom de chaque broche et leur rôle. De plus, nous savons où elles sont placées sur le composant. Nous avons donc les sorties et la masse à gauche et les broches de commande à droite (plus la sortie Q0) et l’alimentation. Voyons maintenant comment faire fonctionner tout cela.
&lt;/p&gt;
&lt;h5 id="fonctionnement"&gt;
 &lt;a aria-hidden="true" href="#fonctionnement"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Fonctionnement
&lt;/h5&gt;
&lt;p&gt;
 Comme tout composant électronique, il faut commencer par l’alimenter pour le faire fonctionner. Le tableau que nous avons vu juste au-dessus nous indique que les broches d’alimentation sont la broche 16 (VCC) et la broche 8 (masse). Quelques pages plus loin dans la datasheet, page 7 précisément, nous voyons la tension à appliquer pour l’alimenter : entre 2V et 5.5V (et idéalement 5.0V).
&lt;/p&gt;
&lt;p&gt;
 Une fois que ce dernier est alimenté, il faut se renseigner sur le rôle des broches pour savoir comment l’utiliser correctement. Pour cela il faut revenir sur le tableau précédent et la table de vérité qui le suit. On découvre donc que les sorties sont les broches de 1 à 7 et la broche 15 (
 &lt;em&gt;
  Qn
 &lt;/em&gt;
 ) ; l’entrée des données série, qui va commander les sorties du composant, se trouve sur la broche 14 (
 &lt;em&gt;
  serial data input
 &lt;/em&gt;
 ) ; une sortie particulière est disponible sur la broche 9 (
 &lt;em&gt;
  serial data output
 &lt;/em&gt;
 , nous y reviendrons à la fin de ce chapitre). Sur la broche 10 on trouve le
 &lt;em&gt;
  Master Reset
 &lt;/em&gt;
 , pour mettre à zéro toutes les sorties. Elle est active à l’état BAS. Vous ferez alors attention, dans le cas où vous utiliseriez cette sortie, de la forcer à un état logique HAUT, en la reliant par exemple au +5V ou bien à une broche de l’Arduino que vous ne mettrez à l’état BAS que lorsque vous voudrez mettre toutes les sorties du 74HC595 à l’état bas. Nous, nous mettrons cette sortie sur le +5V.
&lt;/p&gt;
&lt;p&gt;
 La broche 13,
 &lt;em&gt;
  output enable input
 &lt;/em&gt;
 , est un broche de sélection qui permet d’inhiber les sorties. En clair, cela signifie que lorsque cette broche n’a pas l’état logique requis, les sorties du 74HC595 ne seront pas utilisables. Soit vous choisissez de l’utiliser en la connectant à une sortie de l’Arduino, soit on la force à l’état logique BAS pour utiliser pleinement chaque sortie. Nous, nous la relierons à la masse. Deux dernières broches sont importantes.
&lt;/p&gt;
&lt;p&gt;
 La n°11 et la n°12. Ce sont des "horloges". Nous allons expliquer quelles fonctions elles remplissent. Lorsque nous envoyons un ordre au 74HC595, nous envoyons cet ordre sous forme d’états logiques qui se suivent. Par exemple l’ordre 01100011. Cet ordre est composé de 8 états logiques, ou bits, et forme un octet (une suite de 8 bits). Cet ordre va précisément définir l’état de sortie de chacune des sorties du 74HC595. Le problème c’est que ce composant ne peut pas dissocier chaque bit qui arrive…
&lt;/p&gt;
&lt;p&gt;
 Prenons le cas des trois zéros qui se suivent dans l’octet que nous envoyons. On envoie le premier 0, la tension sur la ligne est alors de 0V. Le second 0 est envoyé, la tension est toujours de 0V. Enfin le dernier zéro est envoyé, avec la même tension de 0V puis vient un changement de tension à 5V avec l’envoi du 1 qui suit les trois 0. Au final, le composant n’aura vu en entrée qu’un seul 0 puisqu’il n’y a eu aucun changement d’état. De plus, il ne peut pas savoir quelle est la durée des états logiques qu’on lui envoie. S’il le connaissait, ce temps de "vie" des états logiques qu’on lui envoie, il pourrait aisément décoder l’ordre transmis. En effet, il pourrait se dire: "tiens ce bit (état logique) dépasse 10ms, donc un deuxième bit l’accompagne et est aussi au niveau logique 0". Encore 10ms d’écoulées et toujours pas de changement, eh bien c’est un troisième bit au niveau 0 qui vient d’arriver. C’est dans ce cas de figure que l’ordre reçu sera compris dans sa totalité par le composant.
&lt;/p&gt;
&lt;p&gt;
 Bon, eh bien c’est là qu’intervient le
 &lt;strong&gt;
  signal d’horloge
 &lt;/strong&gt;
 . Ce signal est en fait là dans l’unique but de dire si c’est un nouveau bit qui arrive, puisque le 74HC595 n’est pas capable de le voir tout seul. En fait, c’est très simple, l’horloge est un signal carré fixé à une certaine fréquence. À chaque front montant (quand le signal d’horloge passe du niveau 0 au niveau 1), le 74HC595 saura que sur son entrée, c’est un nouveau bit qui arrive. Il pourra alors facilement voir s’il y a trois 0 qui se suivent. Ce chronogramme vous aidera à mettre du concret dans vos idées :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Signaux" src="./images/uploaded/tuto-arduino-901-ajouter-des-sorties-numériques-à-larduino-le-74hc595/signaux.png"/&gt;
 &lt;figcaption&gt;
  Signaux
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Source : Wikipédia - SDA est le signal de données, l’ordre que l’on envoie ; SCL est le signal d’horloge
&lt;/p&gt;
&lt;p&gt;
 Pour câbler cette horloge, il faudra connecter une broche de l’Arduino à la broche numéro 11 du 74HC595. Ce signal travaillera donc en corrélation avec le signal de données relié sur la broche 14 du composant. La seconde horloge pourrait aussi s’appeler "verrou". Elle sert à déterminer si le composant doit mettre à jour les états de ses sorties ou non, en fonction de l’ordre qui est transmis. Lorsque ce signal passe de l’état BAS à l’état HAUT, le composant change les niveaux logiques de ses sorties en fonction des bits de données reçues. En clair, il copie les huit derniers bits transmis sur ses sorties. Ce verrou se présente sur la broche 12.
&lt;/p&gt;
&lt;h5 id="montage"&gt;
 &lt;a aria-hidden="true" href="#montage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Montage
&lt;/h5&gt;
&lt;p&gt;
 Voici un petit montage à titre d’illustration que nous utiliserons par la suite. Je vous laisse faire le câblage sur votre breadboard comme bon vous semble, pendant ce temps je vais aller me siroter un bon petit café. :roll:
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Utilisation du 74HC595 - schéma" src="./images/uploaded/tuto-arduino-901-ajouter-des-sorties-numériques-à-larduino-le-74hc595/utilisation-du-74hc595-schema.png"/&gt;
 &lt;figcaption&gt;
  Utilisation du 74HC595 - schéma
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Utilisation du 74HC595 - montage" src="./images/uploaded/tuto-arduino-901-ajouter-des-sorties-numériques-à-larduino-le-74hc595/utilisation-du-74hc595-montage.png"/&gt;
 &lt;figcaption&gt;
  Utilisation du 74HC595 - montage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Utilisation du 74HC595 et 8 LEDs" src="./images/uploaded/tuto-arduino-901-ajouter-des-sorties-numériques-à-larduino-le-74hc595/utilisation-du-74hc595-et-8-leds.jpg"/&gt;
 &lt;figcaption&gt;
  Utilisation du 74HC595 et 8 LEDs
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Utilisation du 74HC595 et 8 LEDs (zoom)" src="./images/uploaded/tuto-arduino-901-ajouter-des-sorties-numériques-à-larduino-le-74hc595/utilisation-du-74hc595-et-8-leds-zoom.jpg"/&gt;
 &lt;figcaption&gt;
  Utilisation du 74HC595 et 8 LEDs (zoom)
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="programmons-pour-utiliser-ce-composant"&gt;
 &lt;a aria-hidden="true" href="#programmons-pour-utiliser-ce-composant"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Programmons pour utiliser ce composant
&lt;/h3&gt;
&lt;h4 id="envoyer-un-ordre-au-74hc595"&gt;
 &lt;a aria-hidden="true" href="#envoyer-un-ordre-au-74hc595"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Envoyer un ordre au 74HC595
&lt;/h4&gt;
&lt;p&gt;
 Nous allons maintenant voir comment utiliser le composant de manière logicielle, avec Arduino. Pour cela, je vais vous expliquer la façon de faire pour lui envoyer un ordre. Puis, nous créerons nous-mêmes la fonction qui va commander le 74HC595.
&lt;/p&gt;
&lt;h5 id="le-protocole"&gt;
 &lt;a aria-hidden="true" href="#le-protocole"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le protocole
&lt;/h5&gt;
&lt;p&gt;
 Nous le verrons dans le chapitre sur la liaison série plus en détail, le protocole est en fait un moyen qui permet de faire communiquer deux dispositifs. C’est une sorte de convention qui établit des règles de langage.
&lt;/p&gt;
&lt;p&gt;
 Par exemple, si deux personnes parlent deux langues différentes, elles vont avoir un mal fou à se comprendre l’une de l’autre. Et bien le protocole sert à imposer un langage qui leur permettra de se comprendre. En l’occurrence, il va s’agir de l’anglais. Bon, cet exemple n’est pas parfait et a ses limites, c’est avant tout pour vous donner une vague idée de ce qu’est un protocole. Comme je vous l’ai dit, on en reparlera dans la partie suivante.
&lt;/p&gt;
&lt;p&gt;
 Nous l’avons vu tout à l’heure, pour envoyer un ordre au composant, il faut lui transmettre une série de bits. Autrement dit, il faut envoyer des bits les uns après les autres sur la même broche d’entrée. Cette broche sera nommée "data". Ensuite, rappelez-vous, le composant a besoin de savoir quand lire la donnée, quand est-ce qu’un nouveau bit est arrivé ? C’est donc le rôle de l’horloge, ce que je vous expliquais plus haut. On pourrait s’imaginer qu’elle dit au composant : " Top ! tu peux lire la valeur car c’est un autre bit qui arrive sur ton entrée ! ". Enfin, une troisième broche où l’on va amener l’horloge de verrou sert à dire au composant : " Nous sommes en train de mettre à jour la valeur de tes sorties, alors le temps de la mise à jour, garde chaque sortie à son état actuel ". Quand elle changera d’état, en passant du niveau BAS au niveau HAUT (front montant), cela donnera le "top" au composant pour qu’il puisse mettre à jour ses sorties avec les nouvelles valeurs.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si jamais vous voulez économiser une broche sur votre Arduino, l’horloge de verrou peut être reliée avec l’horloge de données. Dans ce cas l’affichage va "scintiller" lors de la mise à jour car les sorties seront rafraîchies en même temps que la donnée arrive. Ce n’est pas gênant pour faire de l’affichage sur des LEDs mais ça peut l’être beaucoup plus si on a un composant qui réagit en fonction du 595.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="création-de-la-fonction-denvoi"&gt;
 &lt;a aria-hidden="true" href="#création-de-la-fonction-denvoi"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Création de la fonction d’envoi
&lt;/h5&gt;
&lt;p&gt;
 Passons à la création de la fonction d’envoi des données. C’est avec cette fonction que nous enverrons les ordres au 74HC595, pour lui dire par exemple d’allumer une LED sur sa sortie 4. On va donc faire un peu de programmation, aller zou ! Commençons par nommer judicieusement cette fonction :
 &lt;code&gt;
  envoi_ordre()
 &lt;/code&gt;
 . Cette fonction va prendre quatre paramètres. Le premier sera le numéro de la broche de données. Nous l’appellerons "dataPin". Le second sera similaire puisque ce sera le numéro de la broche d’horloge. Nous l’appellerons "clockPin". Le troisième sera le "sens" d’envoi des données, je reviendrai là-dessus ensuite. Enfin le dernier paramètre sera la donnée elle-même, donc un char (sur 8 bits, exactement comme l’ordre qui est à envoyer), que nous appellerons "donnee". Le prototype de la fonction sera alors le suivant :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;envoi_ordre&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; dataPin, &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; clockPin, boolean sens, &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; donnee)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Le code de la fonction ne sera pas très compliqué. Comme expliqué plus tôt, il suffit de générer une horloge et d’envoyer la bonne donnée pour que tout se passe bien. Le 74HC595 copie le bit envoyé dans sa mémoire lorsque le signal d’horloge passe de 0 à 1. Pour cela, il faut donc débuter le cycle par une horloge à 0. Ensuite, nous allons placer la donnée sur la broche de donnée. Enfin, nous ferons basculer la broche d’horloge à l’état haut pour terminer le cycle. Nous ferons ça huit fois pour pouvoir envoyer les huit bits de l’octet concerné (l’octet d’ordre). Schématiquement le code serait donc le suivant :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class="hljs-number"&gt;8&lt;/span&gt;; i++) &lt;span class="hljs-comment"&gt;// on va parcourir chaque bit de l'octet&lt;/span&gt;
{
    &lt;span class="hljs-comment"&gt;// départ du cycle, on met l'horloge à l'état bas&lt;/span&gt;
    digitalWrite(clockPin, LOW);
    &lt;span class="hljs-comment"&gt;// on met le bit de donnée courant en place&lt;/span&gt;
    digitalWrite(dataPin, le_bit_a_envoyer);
    &lt;span class="hljs-comment"&gt;// enfin on remet l'horloge à l'état haut pour&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// faire prendre en compte ce dernier et finir le cycle&lt;/span&gt;
    digitalWrite(clockPin, HIGH);
}
&lt;span class="hljs-comment"&gt;// et on boucle 8 fois pour faire de même sur chaque bit de l'octet d'ordre&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Boucle pour envoyer un octet
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="envoyer-un-char-en-tant-que-donnée-binaire"&gt;
 &lt;a aria-hidden="true" href="#envoyer-un-char-en-tant-que-donnée-binaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Envoyer un
 &lt;code&gt;
  char
 &lt;/code&gt;
 en tant que donnée binaire
&lt;/h5&gt;
&lt;p&gt;
 Maintenant que l’on a défini une partie de la fonction
 &lt;code&gt;
  envoi_ordre()
 &lt;/code&gt;
 , il va nous rester un léger problème à régler : envoyer une donnée de type
 &lt;code&gt;
  char
 &lt;/code&gt;
 en tant que suite de bit (ou donnée binaire). Prenons un exemple : le nombre 231 s’écrit aussi sous la forme 11100111 en base 2 (et oui, c’est le moment de se rappeler les conversions décimales/binaires
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 ). Seulement, en voulant envoyer ce nombre sur la broche de donnée pour commander le 74HC595, cela ne marchera pas d’écrire :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;digitalWrite(dataPin, &lt;span class="hljs-number"&gt;231&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 En faisant de cette façon, la carte Arduino va simplement comprendre qu’il faut mettre un état HAUT (car 231 est différent de 0) sur sa broche de sortie que l’on a nommée
 &lt;code&gt;
  dataPin
 &lt;/code&gt;
 . Pour pouvoir donc envoyer ce nombre sous forme binaire, il va falloir ajouter à la fonction que l’on a créée un morceau de code supplémentaire. Ce que nous allons va faire va être une vraie boucherie : on va découper ce nombre en huit tranches et envoyer chaque morceau un par un sur la sortie
 &lt;code&gt;
  dataPin
 &lt;/code&gt;
 . :mrgreen: Pour découper ce nombre, ça va pas être de la tarte… euh… je m’égare. :roll: On va utiliser une technique qui se nomme, tenez-vous bien, le
 &lt;strong&gt;
  masquage
 &lt;/strong&gt;
 . On va en fait utiliser un masque qui va cacher la véritable valeur du nombre 231. Bon bon, je vous explique. Tout d’abord, on va considérer que le nombre 231 est vu sous sa forme binaire, qui je le rappel est 11100111, par votre carte Arduino. Donc, lorsque l’on va passer en paramètre
 &lt;code&gt;
  donnee
 &lt;/code&gt;
 le nombre 231, le programme verra la suite de 1 et de 0 : 11100111. Jusque-là, rien de bien sorcier. Voilà donc notre suite de 1 et de 0 que l’on va devoir découper. Alors, il n’existe pas de fonction toute prête spécialement conçue pour découper un nombre binaire. Non, ça va être à nous de faire cela. Et c’est pourquoi je vous parlais du masquage. Cette technique ne porte pas son nom par hasard, en effet, nous allons réellement utiliser un
 &lt;strong&gt;
  masque
 &lt;/strong&gt;
 . Quelques précisions s’imposent, je le sens bien. Reprenons notre suite binaire :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Une suite binaire" src="./images/uploaded/tuto-arduino-901-ajouter-des-sorties-numériques-à-larduino-le-74hc595/une-suite-binaire.jpg"/&gt;
 &lt;figcaption&gt;
  Une suite binaire
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Notre objectif étant d’envoyer chaque bit un par un, on va faire croire à l’Arduino que cette suite n’est composée que d’un seul bit. En clair, on va cacher les 7 autres bits en utilisant un masque :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="La suite masquée" src="./images/uploaded/tuto-arduino-901-ajouter-des-sorties-numériques-à-larduino-le-74hc595/la-suite-masquee.jpg"/&gt;
 &lt;figcaption&gt;
  La suite masquée
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ce qui, au final, donnera :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Résultat" src="./images/uploaded/tuto-arduino-901-ajouter-des-sorties-numériques-à-larduino-le-74hc595/resultat.jpg"/&gt;
 &lt;figcaption&gt;
  Résultat
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 L’Arduino ne verra donc qu’un seul bit.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Et les autres, il les voit pas, comment on peut envoyer les 8 bits alors ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Bien sûr, les autres, l’Arduino ne les voit pas. C’est pourquoi l’on va faire évoluer le masque et révéler chaque bit un par un. En faisant cela huit fois, on aura envoyé les 8 bits à la suite :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Envoi des 8 bits" src="./images/uploaded/tuto-arduino-901-ajouter-des-sorties-numériques-à-larduino-le-74hc595/envoi-des-8-bits.jpg"/&gt;
 &lt;figcaption&gt;
  Envoi des 8 bits
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 On peut aussi faire évoluer le masque dans le sens opposé :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Gestion du masque" src="./images/uploaded/tuto-arduino-901-ajouter-des-sorties-numériques-à-larduino-le-74hc595/gestion-du-masque.jpg"/&gt;
 &lt;figcaption&gt;
  Gestion du masque
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 L’étape qui suit est donc d’identifier le bit à envoyer en premier. C’est là que rentre en jeu le paramètre sens. On a le choix d’envoyer soit le bit de poids fort (on l’appelle
 &lt;strong&gt;
  MSB
 &lt;/strong&gt;
 , Most Significant Bit) en premier et finir par le bit de poids faible (Least Significant Bit,
 &lt;strong&gt;
  LSB
 &lt;/strong&gt;
 ) ; soit dans le sens opposé, du LSB vers le MSB. On parle alors d’envoi MSB First (pour "bit de poids fort en premier") ou LSB First. À présent, voyons comment appliquer la technique de masquage que je viens de vous présenter
&lt;/p&gt;
&lt;h5 id="les-masques-en-programmation"&gt;
 &lt;a aria-hidden="true" href="#les-masques-en-programmation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les masques en programmation
&lt;/h5&gt;
&lt;p&gt;
 Maintenant que vous connaissez cela, nous allons pouvoir voir comment isoler chacun des bits pour les envoyer un par un. En programmation, il est évident que l’on ne peut pas mettre un masque papier sur les bits pour les cacher.
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Il existe donc un moyen de les cacher. Cela va faire appel à la
 &lt;strong&gt;
  logique binaire
 &lt;/strong&gt;
 . Nous n’entrerons pas dans le détail, mais sachez que nous allons employer des
 &lt;strong&gt;
  opérateurs logiques
 &lt;/strong&gt;
 . Il en existe plusieurs, dont deux très utilisés, même dans la vie courante, l’opérateur
 &lt;strong&gt;
  ET
 &lt;/strong&gt;
 et
 &lt;strong&gt;
  OU
 &lt;/strong&gt;
 . Commençons par l’opérateur logique ET (je vous laisse regarder le OU tout seul, nous n’en aurons pas besoin ici). Il s’utilise avec le symbole
 &lt;strong&gt;
  &amp;amp;
 &lt;/strong&gt;
 que vous trouverez sous la touche 1 au-dessus de la lettre "a" sur un clavier azerty. Pour envoyer le premier bit de notre donnée, nous allons effectuer le masquage avec cet opérateur logique dont la table de vérité se trouve être la suivante :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Bit 2
      &lt;/th&gt;
      &lt;th&gt;
       Bit 1
      &lt;/th&gt;
      &lt;th&gt;
       Résultat
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Table de vérité du ET
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Je ne comprends pas trop où tu veux en venir ? :roll:
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Je vais vous expliquer. Pour faire le masquage, on va faire une opération avec ce fameux ET logique. Il s’agit de la même chose que si l’on additionnait deux nombres ensemble, ou si on les multipliait. Dans notre cas l’opération est "un peu bizarre". Disons que c’est une opération évoluée. Cette opération va utiliser deux nombres : le premier on le connaît bien, il s’agit de la suite logique 11100111, quant au second, il s’agira du masque. Pour l’instant, vous ne connaissez pas la valeur du masque, qui sera lui aussi sous forme binaire. Pour définir cette valeur, on va utiliser la table de vérité précédente. Afin que vous ne vous perdiez pas dans mes explications, on va prendre pour objectif d’envoyer le bit de poids faible de notre nombre 11100111 (celui tout à droite). Le code qui suit est un pseudo-code, mis sous forme d’une opération mathématique telle que l’on en ferait à l’école :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;  &lt;span class="hljs-number"&gt;11100111&lt;/span&gt; (donnée à transmettre)
&amp;amp; &lt;span class="hljs-number"&gt;00000001&lt;/span&gt; (on veut envoyer uniquement le bit de poids faible)
= --------
  &lt;span class="hljs-number"&gt;00000001&lt;/span&gt; (donnée à transmettre au final) -&amp;gt; soit &lt;span class="hljs-number"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Pour comprendre ce qui vient de se passer, il faut se référer à la table de vérité de l’opérateur ET : on sait que lorsque l’on fait 1 et 0 le résultat est 0. Donc, pour cacher tous les bits du nombre à masquer, il n’y a qu’à mettre que des 0 dans le masque. Là, l’Arduino ne verra que le bit 0 puisque le masque aura caché au complet le nombre du départ. On sait aussi que 1 ET 1 donne 1. Donc, lorsque l’on voudra montrer un bit à l’Arduino, on va mettre un 1 dans le masque, à l’emplacement du bit qui doit être montré. Pour monter ensuite le bit supérieur au bit de poids faible, on procède de la même manière :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;  &lt;span class="hljs-number"&gt;11100111&lt;/span&gt; (donnée à transmettre)
&amp;amp; &lt;span class="hljs-number"&gt;00000010&lt;/span&gt; (on veut envoyer uniquement le deuxième bit)
= --------
  &lt;span class="hljs-number"&gt;00000010&lt;/span&gt; (donnée à transmettre au final) -&amp;gt; soit &lt;span class="hljs-number"&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Pour le quatrième bit en partant de la droite :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;  &lt;span class="hljs-number"&gt;11100111&lt;/span&gt; (donnée à transmettre)
&amp;amp; &lt;span class="hljs-number"&gt;00001000&lt;/span&gt; (on veut envoyer uniquement le quatrième bit)
= --------
  &lt;span class="hljs-number"&gt;00000000&lt;/span&gt; (donnée à transmettre au final) -&amp;gt; soit &lt;span class="hljs-number"&gt;0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Dans le cas où vous voudriez montrer deux bits à l’Arduino (ce qui n’a aucun intérêt dans notre cas, je fais ça juste pour vous montrer) :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;  &lt;span class="hljs-number"&gt;11100111&lt;/span&gt; (donnée à transmettre)
&amp;amp; &lt;span class="hljs-number"&gt;01000100&lt;/span&gt; (on veut envoyer le septième et troisième bit)
= --------
  &lt;span class="hljs-number"&gt;01000100&lt;/span&gt; (donnée à transmettre au final) -&amp;gt; soit &lt;span class="hljs-number"&gt;68&lt;/span&gt; en base décimale
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="lévolution-du-masque"&gt;
 &lt;a aria-hidden="true" href="#lévolution-du-masque"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’évolution du masque
&lt;/h5&gt;
&lt;p&gt;
 Ce titre pourrait être apparenté à celui d’un film d’horreur, mais n’indique finalement que nous allons faire évoluer le masque automatiquement à chaque fois que l’on aura envoyé un bit. Cette fois, cela va être un peu plus simple, car nous n’avons qu’à rajouter un opérateur spécialisé dans le décalage. Si l’on veut déplacer le 1 du masque (qui permet de montrer un bit à l’Arduino) de la droite vers la gauche (pour le LSBFirst) ou dans l’autre sens (pour le MSBFirst), nous avons la possibilité d’utiliser l’opérateur
 &lt;strong&gt;
  «
 &lt;/strong&gt;
 pour décaler vers la gauche ou
 &lt;strong&gt;
  »
 &lt;/strong&gt;
 pour décaler vers la droite. Par exemple :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;  &lt;span class="hljs-number"&gt;00000001&lt;/span&gt; (masque initial)
  &amp;lt;&amp;lt; &lt;span class="hljs-number"&gt;3&lt;/span&gt;     (on décale de trois bits)
= --------
  &lt;span class="hljs-number"&gt;00001000&lt;/span&gt; (masque final, décalé)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Et dans le sens opposé :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;  &lt;span class="hljs-number"&gt;10000000&lt;/span&gt; (masque initial)
  &amp;gt;&amp;gt; &lt;span class="hljs-number"&gt;3&lt;/span&gt;     (on décale de trois bits)
= --------
  &lt;span class="hljs-number"&gt;00010000&lt;/span&gt; (masque final, décalé)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Avouez que ce n’est pas très compliqué maintenant que vous maîtrisez un peu les masques.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 On va donc pouvoir isoler un par un chacun des bits pour les envoyer au 74HC595. Comme le sens dépend d’un paramètre de la fonction, nous rajoutons un test pour décaler soit vers la droite, soit vers la gauche. Voici la fonction que nous obtenons à la fin :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;envoi_ordre&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; dataPin, &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; clockPin, boolean sens, &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; donnee)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class="hljs-number"&gt;8&lt;/span&gt;; i++) &lt;span class="hljs-comment"&gt;// on va parcourir chaque bit de l'octet&lt;/span&gt;
    {
        &lt;span class="hljs-comment"&gt;// on met l'horloge à l'état bas&lt;/span&gt;
        digitalWrite(clockPin, LOW);
        &lt;span class="hljs-comment"&gt;// on met le bit de donnée courante en place&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(sens)
        {
            &lt;span class="hljs-comment"&gt;// envoie la donnée en allant de droite à gauche,&lt;/span&gt;
            &lt;span class="hljs-comment"&gt;// en partant d'un masque de type "00000001"&lt;/span&gt;
            digitalWrite(dataPin, donnee &amp;amp; &lt;span class="hljs-number"&gt;0x01&lt;/span&gt; &amp;lt;&amp;lt; i);
        }
        &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
        {
            &lt;span class="hljs-comment"&gt;// envoie la donnée en allant de droite à gauche,&lt;/span&gt;
            &lt;span class="hljs-comment"&gt;// en partant d'un masque de type "10000000"&lt;/span&gt;
            digitalWrite(dataPin, donnee &amp;amp; &lt;span class="hljs-number"&gt;0x80&lt;/span&gt; &amp;gt;&amp;gt; i);
        }
        &lt;span class="hljs-comment"&gt;// enfin on remet l'horloge à l'état haut pour&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// faire prendre en compte cette dernière&lt;/span&gt;
        digitalWrite(clockPin, HIGH);
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  La fonction
  &lt;code&gt;
   envoi_ordre
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Oula ! Hé ! Stop ! C’est quoi ce 0x01 et ce 0x80 ? Qu’est-ce que ça vient faire là, c’est pas censé être le masque que l’on doit voir ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Si, c’est bien cela. Il s’agit du masque… écrit sous sa forme hexadécimale. Il aurait été bien entendu possible d’écrire :
 &lt;code&gt;
  0b00000001
 &lt;/code&gt;
 à la place de
 &lt;code&gt;
  0x01
 &lt;/code&gt;
 , ou
 &lt;code&gt;
  0b10000000
 &lt;/code&gt;
 à la place de
 &lt;code&gt;
  0x80
 &lt;/code&gt;
 . On a simplement opté pour la base hexadécimale qui est plus facile à manipuler.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Cette technique de masquage peut sembler difficile au premier abord, mais elle ne l’est pas réellement une fois que l’on a compris le principe. Il est essentiel de comprendre comment elle fonctionne pour aller loin dans la programmation de micro-contrôleur (pour paramétrer les registres par exemple), et vous en aurez besoin pour les exercices du chapitre suivant. Pour plus d’informations, un bon tuto plus complet mais rapide à lire est
   &lt;a href="http://fr.openclassrooms.com/informatique/cours/introduction-aux-operateurs-de-bits"&gt;
    rédigé ici
   &lt;/a&gt;
   … en PHP, mais c’est pareil !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="un-petit-programme-dessai"&gt;
 &lt;a aria-hidden="true" href="#un-petit-programme-dessai"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un petit programme d’essai
&lt;/h5&gt;
&lt;p&gt;
 Je vous propose maintenant d’essayer notre belle fonction. Pour cela, quelques détails sont à préciser/rajouter. Pour commencer, il nous faut déclarer les broches utilisées. Il y en a trois : verrou, horloge et data. Pour ma part elles sont branchées respectivement sur les broches 11, 12 et 10. Il faudra donc aussi les déclarer en sortie dans le setup(). Si vous faites de même, vous devriez obtenir le code suivant :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Broche connectée au ST_CP du 74HC595&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; verrou = &lt;span class="hljs-number"&gt;11&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// Broche connectée au SH_CP du 74HC595&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; horloge = &lt;span class="hljs-number"&gt;12&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// Broche connectée au DS du 74HC595&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; data = &lt;span class="hljs-number"&gt;10&lt;/span&gt;;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// On met les broches en sortie&lt;/span&gt;
    pinMode(verrou, OUTPUT);
    pinMode(horloge, OUTPUT);
    pinMode(data, OUTPUT);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Code de setup de nos expériences
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ensuite, nous allons nous amuser à afficher un nombre allant de 0 à 255 en binaire. Ce nombre peut tenir sur un octet, ça tombe bien car nous allons justement transmettre un octet ! Pour cela, nous allons utiliser une boucle for() allant de 0 à 255 et qui appellera notre fonction. Avant cela, je tiens à rappeler qu’il faut aussi mettre en place le verrou en encadrant l’appel de notre fonction. Rappelez-vous, si nous ne le faisons pas, l’affichage risque de scintiller.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// On active le verrou le temps de transférer les données&lt;/span&gt;
digitalWrite(verrou, LOW);
&lt;span class="hljs-comment"&gt;// on envoi toutes les données grâce à notre belle fonction (octet inversé avec l'opérateur de complément à 1 '~' pour piloter les LED à l'état bas)&lt;/span&gt;
envoi_ordre(data, horloge, &lt;span class="hljs-number"&gt;1&lt;/span&gt;, ~j);
&lt;span class="hljs-comment"&gt;// et enfin on relâche le verrou&lt;/span&gt;
digitalWrite(verrou, HIGH);
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Mécanisme de verrou
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Et voici le code complet que vous aurez sûrement deviné :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Broche connectée au ST_CP du 74HC595&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; verrou = &lt;span class="hljs-number"&gt;11&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// Broche connectée au SH_CP du 74HC595&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; horloge = &lt;span class="hljs-number"&gt;12&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// Broche connectée au DS du 74HC595&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; data = &lt;span class="hljs-number"&gt;10&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// On met les broches en sortie&lt;/span&gt;
    pinMode(verrou, OUTPUT);
    pinMode(horloge, OUTPUT);
    pinMode(data, OUTPUT);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on affiche les nombres de 0 à 255 en binaire&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt; (&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; i = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class="hljs-number"&gt;256&lt;/span&gt;; i++)
    {
        &lt;span class="hljs-comment"&gt;// On active le verrou le temps de transférer les données&lt;/span&gt;
        digitalWrite(verrou, LOW);
        &lt;span class="hljs-comment"&gt;// on envoi toutes les données grâce à notre belle fonction&lt;/span&gt;
        envoi_ordre(data, horloge, &lt;span class="hljs-number"&gt;1&lt;/span&gt;, ~i);
        &lt;span class="hljs-comment"&gt;// et enfin on relâche le verrou&lt;/span&gt;
        digitalWrite(verrou, HIGH);
        &lt;span class="hljs-comment"&gt;// une petite pause pour constater l'affichage&lt;/span&gt;
        delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
    }
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;envoi_ordre&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; dataPin, &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; clockPin, boolean sens, &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; donnee)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on va parcourir chaque bit de l'octet&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class="hljs-number"&gt;8&lt;/span&gt;; i++)
    {
        &lt;span class="hljs-comment"&gt;// on met l'horloge à l'état bas&lt;/span&gt;
        digitalWrite(clockPin, LOW);
        &lt;span class="hljs-comment"&gt;// on met le bit de donnée courante en place&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(sens)
        {
            digitalWrite(dataPin, donnee &amp;amp; &lt;span class="hljs-number"&gt;0x01&lt;/span&gt; &amp;lt;&amp;lt; i);
        }
        &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
        {
            digitalWrite(dataPin, donnee &amp;amp; &lt;span class="hljs-number"&gt;0x80&lt;/span&gt; &amp;gt;&amp;gt; i);
        }
        &lt;span class="hljs-comment"&gt;// enfin on remet l'horloge à l'état haut pour&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// faire prendre en compte cette dernière&lt;/span&gt;
        digitalWrite(clockPin, HIGH);
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Code complet d’envoi d’un octet
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Et voilà le travail ! :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/if2xNvj7DYo" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Et une petite démonstration avec le simulateur interactif :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/5JnMmA7XnqH" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="la-fonction-magique-shiftout"&gt;
 &lt;a aria-hidden="true" href="#la-fonction-magique-shiftout"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La fonction magique, ShiftOut
&lt;/h4&gt;
&lt;p&gt;
 Vous êtes content ? vous avez une belle fonction qui marche bien et fait le boulot proprement ? Alors laissez-moi vous présenter une nouvelle fonction qui s’appelle
 &lt;code&gt;
  shiftOut()
 &lt;/code&gt;
 . Quel est son rôle ? Faire exactement la même chose que la fonction dont l’on vient juste de finir la création.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   *#@"e !! :mad:
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Alors oui je sais, c’est pas sympa de ma part de vous avoir fait travailler, mais admettez que c’était un très bon exercice de développement non ? À présent vous comprenez comment agit cette fonction et vous serez mieux capable de créer votre propre système que si je vous avais donné la fonction au début en disant : "voilà, c’est celle-là, on l’utilise comme ça, ça marche, c’est beau… mais vous avez rien compris". Comme je vous le disais précédemment, cette fonction sert à faire ce que l’on vient de créer, mais elle est déjà intégrée à l’environnement Arduino (donc a été testée par de nombreux développeurs, ne laissant pas beaucoup de place pour les bugs !). Cette fonction prend quatre paramètres :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  La broche de donnée
 &lt;/li&gt;
 &lt;li&gt;
  La broche d’horloge
 &lt;/li&gt;
 &lt;li&gt;
  Le sens d’envoi des données (utiliser avec deux valeurs symboliques, MSBFIRST ou LSBFIRST)
 &lt;/li&gt;
 &lt;li&gt;
  L’octet à transmettre
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Son utilisation doit maintenant vous paraître assez triviale. Comme nous l’avons vu plutôt, il suffit de bloquer le verrou, envoyer la donnée avec la fonction puis relâcher le verrou pour constater la mise à jour des données. Voici un exemple de loop avec cette fonction :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on affiche les nombres de 0 à 255 en binaire&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt; (&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class="hljs-number"&gt;256&lt;/span&gt;; i++)
    {
        &lt;span class="hljs-comment"&gt;// On active le verrou le temps de transférer les données&lt;/span&gt;
        digitalWrite(verrou, LOW);
        &lt;span class="hljs-comment"&gt;// on envoi toutes les données grâce à shiftOut&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// (octet inversée avec '~' pour piloter les LED à l'état bas)&lt;/span&gt;
        shiftOut(data, horloge, LSBFIRST, ~i);
        &lt;span class="hljs-comment"&gt;// et enfin on relache le verrou&lt;/span&gt;
        digitalWrite(verrou, HIGH);
        &lt;span class="hljs-comment"&gt;// une petite pause pour constater l'affichage&lt;/span&gt;
        delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Utilisation de la fonction
  &lt;code&gt;
   shiftOut
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="exercices-des-chenillards"&gt;
 &lt;a aria-hidden="true" href="#exercices-des-chenillards"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Exercices : des chenillards !
&lt;/h3&gt;
&lt;p&gt;
 Je vous propose maintenant trois exercices pour jouer un peu avec ce nouveau composant et tester votre habileté au code. Le but du jeu est d’arriver à reproduire l’effet proposé sur chaque vidéo. Le but second est de le faire intelligemment… Autrement dit, tous les petits malins qui se proposeraient de faire un "tableau de motif" contenant les valeurs "affichages binaires" successives devront faire autrement.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 Amusez-vous bien !
&lt;/p&gt;
&lt;p&gt;
 PS : Les corrections seront juste composées du code de la loop avec des commentaires. Le schéma reste le même ainsi que les noms de broches utilisés précédemment.
&lt;/p&gt;
&lt;p&gt;
 &lt;sub&gt;
  PPS : La bande son des vidéos est juste là pour cacher le bruit ambiant… je n’y ai pas pensé quand je faisais les vidéos et Youtube ne permet pas de supprimer la bande audio…
 &lt;/sub&gt;
&lt;/p&gt;
&lt;h4 id="javance-et-repars-"&gt;
 &lt;a aria-hidden="true" href="#javance-et-repars-"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 "J’avance et repars !"
&lt;/h4&gt;
&lt;h5 id="consigne"&gt;
 &lt;a aria-hidden="true" href="#consigne"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Consigne
&lt;/h5&gt;
&lt;p&gt;
 Pour ce premier exercice, histoire de se mettre en jambe, nous allons faire une animation simple. Pour cela, il suffit de faire un chenillard très simple, consistant en une LED qui "avance" du début à la fin de la ligne. Arrivée à la fin elle repart au début. Si ce n’est pas clair, regardez la vidéo ci-dessous ! (Éventuellement vous pouvez ajouter un bouton pour inverser le sens de l’animation).
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/uMiJnwISEFA" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="correction"&gt;
 &lt;a aria-hidden="true" href="#correction"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Correction
&lt;/h5&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt; (&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class="hljs-number"&gt;8&lt;/span&gt;; i++)
    {
        &lt;span class="hljs-comment"&gt;// On active le verrou le temps de transférer les données&lt;/span&gt;
        digitalWrite(verrou, LOW);
        &lt;span class="hljs-comment"&gt;// on envoie la donnée&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// ici, c'est assez simple.&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// On va décaler l'octet 00000001 i fois puis l'envoyer&lt;/span&gt;
        shiftOut(data, horloge, LSBFIRST, ~(&lt;span class="hljs-number"&gt;0x01&lt;/span&gt; &amp;lt;&amp;lt; i));
        &lt;span class="hljs-comment"&gt;// et enfin on relache le verrou&lt;/span&gt;
        digitalWrite(verrou, HIGH);
        &lt;span class="hljs-comment"&gt;// une petite pause pour constater l'affichage&lt;/span&gt;
        delay(&lt;span class="hljs-number"&gt;250&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    Exercice chenillard "J’avance et repars !"
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="javance-et-reviens-"&gt;
 &lt;a aria-hidden="true" href="#javance-et-reviens-"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 "J’avance et reviens !"
&lt;/h4&gt;
&lt;h5 id="consigne-1"&gt;
 &lt;a aria-hidden="true" href="#consigne-1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Consigne
&lt;/h5&gt;
&lt;p&gt;
 Cette seconde animation ne sera pas trop compliquée non plus. La seule différence avec la première est que lorsque la "lumière" atteint la fin de la ligne, elle repart en arrière et ainsi de suite. Là encore si ce n’est pas clair, voici une vidéo :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/kYtlfWnNC34" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="correction-1"&gt;
 &lt;a aria-hidden="true" href="#correction-1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Correction
&lt;/h5&gt;
&lt;p&gt;
 Dans cet exercice, le secret est d’utiliser de manière intelligente le paramètre LSBFIRST ou MSBFIRST pour pouvoir facilement inverser le sens de l’animation sans écrire deux fois la boucle for.
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; sens = MSBFIRST;
&lt;span class="hljs-comment"&gt;// on commence à aller de droite vers gauche&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on ne fait la boucle que 7 fois pour&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// ne pas se répéter au début et à la fin&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt; (&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class="hljs-number"&gt;7&lt;/span&gt;; i++)
    {
        &lt;span class="hljs-comment"&gt;// On active le verrou le temps de transférer les données&lt;/span&gt;
        digitalWrite(verrou, LOW);
        &lt;span class="hljs-comment"&gt;// on envoie la donnée&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// On va décaler l'octet 00000001 i fois puis l'envoyer&lt;/span&gt;
        shiftOut(data, horloge, sens, ~(&lt;span class="hljs-number"&gt;0x01&lt;/span&gt; &amp;lt;&amp;lt; i));
        &lt;span class="hljs-comment"&gt;// et enfin on relache le verrou&lt;/span&gt;
        digitalWrite(verrou, HIGH);
        &lt;span class="hljs-comment"&gt;// une petite pause pour constater l'affichage&lt;/span&gt;
        delay(&lt;span class="hljs-number"&gt;250&lt;/span&gt;);
    }
    &lt;span class="hljs-comment"&gt;// on inverse le sens d'affichage pour la prochaine fois&lt;/span&gt;
    sens = !sens;
}
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    Exercice chenillard "J’avance et reviens !"
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="un-dernier-pour-la-route"&gt;
 &lt;a aria-hidden="true" href="#un-dernier-pour-la-route"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un dernier pour la route !
&lt;/h4&gt;
&lt;h5 id="consigne-2"&gt;
 &lt;a aria-hidden="true" href="#consigne-2"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Consigne
&lt;/h5&gt;
&lt;p&gt;
 Pour cette dernière animation, il vous faudra un peu d’imagination. Imaginez le chenillard numéro 1 allant dans les deux sens en même temps… C’est bon ? si non alors voici la vidéo :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/fjev82HNJaQ" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="correction-2"&gt;
 &lt;a aria-hidden="true" href="#correction-2"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Correction
&lt;/h5&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
  &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; donnee = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
  &lt;span class="hljs-keyword"&gt;for&lt;/span&gt; (&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class="hljs-number"&gt;8&lt;/span&gt;; i++)
  {
    &lt;span class="hljs-comment"&gt;// on saute la boucle si i vaut 4&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// (pour une histoire de fluidité de l'animation, testez sans et comparez)&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(i == &lt;span class="hljs-number"&gt;4&lt;/span&gt;)
      &lt;span class="hljs-keyword"&gt;continue&lt;/span&gt;;
    &lt;span class="hljs-comment"&gt;// calcule la donnée à envoyer&lt;/span&gt;
    donnee = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    &lt;span class="hljs-comment"&gt;//  on calcule l'image du balayage dans un sens&lt;/span&gt;
    donnee = donnee | (&lt;span class="hljs-number"&gt;0x01&lt;/span&gt; &amp;lt;&amp;lt; i);
    &lt;span class="hljs-comment"&gt;// et on ajoute aussi l'image du balayage dans l'autre sens&lt;/span&gt;
    donnee = donnee | (&lt;span class="hljs-number"&gt;0x80&lt;/span&gt; &amp;gt;&amp;gt; i);
    &lt;span class="hljs-comment"&gt;// On active le verrou le temps de transférer les données&lt;/span&gt;
    digitalWrite(verrou, LOW);
    &lt;span class="hljs-comment"&gt;// on envoie la donnée&lt;/span&gt;
    shiftOut(data, horloge, LSBFIRST, ~donnee);
    &lt;span class="hljs-comment"&gt;// et enfin on relache le verrou&lt;/span&gt;
    digitalWrite(verrou, HIGH);
    &lt;span class="hljs-comment"&gt;// une petite pause pour constater l'affichage&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;250&lt;/span&gt;);
  }
}
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    Exercice chenillard "Un dernier pour la route !"
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="exo-bonus"&gt;
 &lt;a aria-hidden="true" href="#exo-bonus"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Exo bonus
&lt;/h4&gt;
&lt;h5 id="consigne-3"&gt;
 &lt;a aria-hidden="true" href="#consigne-3"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Consigne
&lt;/h5&gt;
&lt;p&gt;
 Ici le but du jeu sera de donner un effet de "chargement / déchargement" en alternance… Comme d’habitude, voici la vidéo pour mieux comprendre…
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/1h0kh57GVps" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="correction-3"&gt;
 &lt;a aria-hidden="true" href="#correction-3"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Correction
&lt;/h5&gt;
&lt;p&gt;
 Dans cet exercice, tout repose sur l’utilisation du MSBFIRST ou LSBFIRST ainsi que du complément appliqué sur la donnée. Ce dernier permet d’activer ou non les LEDs et le premier atout permet d’inverser l’effet.
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// on commence à aller de droite vers gauche&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; extinction = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on démarre à 0 ou 1 selon...&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; donnee = extinction;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt; (&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class="hljs-number"&gt;8&lt;/span&gt;; i++)
    {
        &lt;span class="hljs-comment"&gt;// On active le verrou le temps de transférer les données&lt;/span&gt;
        digitalWrite(verrou, LOW);
        &lt;span class="hljs-comment"&gt;// si on est en train d'éteindre&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(extinction)
            &lt;span class="hljs-comment"&gt;// on envoie la donnée inversé&lt;/span&gt;
            shiftOut(data, horloge, MSBFIRST, ~donnee);
        &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;span class="hljs-comment"&gt;// sinon&lt;/span&gt;
            &lt;span class="hljs-comment"&gt;// on envoie la donnée normale&lt;/span&gt;
            shiftOut(data, horloge, LSBFIRST, donnee);

        &lt;span class="hljs-comment"&gt;// et enfin on relache le verrou&lt;/span&gt;
        digitalWrite(verrou, HIGH);
        &lt;span class="hljs-comment"&gt;// une petite pause pour constater l'affichage&lt;/span&gt;
        delay(&lt;span class="hljs-number"&gt;250&lt;/span&gt;);
        &lt;span class="hljs-comment"&gt;// et on met à jour la donnée en cumulant les décalages&lt;/span&gt;
        donnee = donnee | (&lt;span class="hljs-number"&gt;0x01&lt;/span&gt; &amp;lt;&amp;lt; i);
    }
    &lt;span class="hljs-comment"&gt;// permet d'inverser "MSBFIRST  LSBFIRST" comme dans l'exercice 2&lt;/span&gt;
    extinction = !extinction;
}
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    Exercice "effet de chargement / déchargement"
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="pas-assez-augmentez-encore"&gt;
 &lt;a aria-hidden="true" href="#pas-assez-augmentez-encore"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Pas assez ? Augmentez encore !
&lt;/h3&gt;
&lt;p&gt;
 Si jamais 8 nouvelles sorties ne vous suffisent pas (bien que cela n’en face que 5 au total puisque trois sont prises pour communiquer avec le composant), les ingénieurs ont déjà tout prévu. Ainsi il est possible de mettre en cascade plusieurs 74HC595 ! Pour cela, le 595 dispose d’une broche appelée "débordement". Lorsque vous envoyez un seul octet au 74HC595, rien ne se passe sur cette broche. Cependant, si vous envoyez plus d’un octet, les huit derniers bits seront conservés par le composant, tandis que les autres vont être "éjectés" vers cette fameuse sortie de débordement (numéro 9). Le premier bit envoyé ira alors vers le 74HC595 le plus loin dans la chaîne. Souvenez-vous, elle s’appelle "serial data output" et j’avais dit qu’on reviendrait dessus. D’une manière très simple, les bits éjectés vont servir aux éventuels 74HC595 qui seront mis en aval de celui-ci.
&lt;/p&gt;
&lt;h4 id="branchement"&gt;
 &lt;a aria-hidden="true" href="#branchement"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Branchement
&lt;/h4&gt;
&lt;p&gt;
 Il suffit dons de mettre deux 595 bout-à-bout en reliant la broche de débordement du premier sur la broche de donnée du second. Ainsi, les bits "en trop" du premier arriveront sur le second. Afin que le second fonctionne, il faut aussi également relier les mêmes broches pour l’horloge et le verrou (reliées en parallèle entre les deux).
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Les images proviennent d’une
   &lt;a href="http://arduino.cc/en/Tutorial/ShiftOut"&gt;
    explication du site Arduino
   &lt;/a&gt;
   . Dans ce schéma les LEDs sont branchées en cathode commune.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;figure&gt;
 &lt;img alt="Deux 74HC595 en cascade, schéma" src="./images/uploaded/tuto-arduino-901-ajouter-des-sorties-numériques-à-larduino-le-74hc595/deux-74hc595-en-cascade-schema.jpg"/&gt;
 &lt;figcaption&gt;
  Deux 74HC595 en cascade, schéma
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Deux 74HC595 en cascade, montage" src="./images/uploaded/tuto-arduino-901-ajouter-des-sorties-numériques-à-larduino-le-74hc595/deux-74hc595-en-cascade-montage.jpg"/&gt;
 &lt;figcaption&gt;
  Deux 74HC595 en cascade, montage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="exemple-dun-affichage-simple"&gt;
 &lt;a aria-hidden="true" href="#exemple-dun-affichage-simple"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Exemple d’un affichage simple
&lt;/h4&gt;
&lt;p&gt;
 Au niveau du programme, il suffira de faire appel deux fois de suite à la fonction shiftOut pour tout envoyer (2 fois 8 bits). Ces deux appels seront encadrés par le verrou pour actualiser l’affichage des données. On commence par envoyer la donnée qui doit avancer le plus pour atteindre le second 595, puis ensuite on fait celle qui concerne le premier 595. Voici un exemple :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; verrou = &lt;span class="hljs-number"&gt;11&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; donnee = &lt;span class="hljs-number"&gt;10&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; horloge = &lt;span class="hljs-number"&gt;12&lt;/span&gt;;

&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; premier = &lt;span class="hljs-number"&gt;8&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// en binaire : 00001000&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; second = &lt;span class="hljs-number"&gt;35&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// en binaire : 00100011&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on déclare les broches en sortie&lt;/span&gt;
    pinMode(verrou, OUTPUT);
    pinMode(donnee, OUTPUT);
    pinMode(horloge, OUTPUT);
    &lt;span class="hljs-comment"&gt;// puis on envoie les données juste une fois&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// on commence par mettre le verrou&lt;/span&gt;
    digitalWrite(verrou, LOW);
    &lt;span class="hljs-comment"&gt;// on envoie la seconde donnée d'abord&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// les LEDs vertes du montage&lt;/span&gt;
    shiftOut(donnee, horloge, LSBFIRST, ~second);
    &lt;span class="hljs-comment"&gt;// on envoie la première donnée&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// les LEDs rouges du montage&lt;/span&gt;
    shiftOut(donnee, horloge, LSBFIRST, ~premier);
    &lt;span class="hljs-comment"&gt;// et on relache le verrou pour mettre à jour les données&lt;/span&gt;
    digitalWrite(verrou, HIGH);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// rien à faire&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Envoi de deux octets consécutifs avec deux 74HC595
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Exemple de deux 74HC595 en cascade" src="./images/uploaded/tuto-arduino-901-ajouter-des-sorties-numériques-à-larduino-le-74hc595/exemple-de-deux-74hc595-en-cascade.jpg"/&gt;
 &lt;figcaption&gt;
  Exemple de deux 74HC595 en cascade
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="exemple-dun-chenillard"&gt;
 &lt;a aria-hidden="true" href="#exemple-dun-chenillard"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Exemple d’un chenillard
&lt;/h4&gt;
&lt;p&gt;
 Voici maintenant un petit exemple pour faire un chenillard sur 16 LEDs. Pour cela, j’utiliserai un int qui sera transformé en char au moment de l’envoi. Il faudra donc le décaler vers la droite de 8 bits pour pouvoir afficher ses 8 bits de poids fort. Voici une loop pour illustrer mes propos (le setup étant toujours le même). (Attention cependant, contrairement au montage précédent en cathode commune, j’utilise pour ma part un montage à anode commune et donc toutes les sorties sont inversé).
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; masque = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class="hljs-number"&gt;16&lt;/span&gt;; i++)
    {
        &lt;span class="hljs-comment"&gt;// on décale d'un cran le masque&lt;/span&gt;
        masque = &lt;span class="hljs-number"&gt;0x01&lt;/span&gt; &amp;lt;&amp;lt; i;
        &lt;span class="hljs-comment"&gt;// on commence par mettre le verrou&lt;/span&gt;
        digitalWrite(verrou, LOW);
        &lt;span class="hljs-comment"&gt;// on envoie la seconde donnée d'abord&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// on envoie les 8 premiers bits&lt;/span&gt;
        shiftOut(donnee, horloge, LSBFIRST, ~(masque &amp;amp; &lt;span class="hljs-number"&gt;0x00FF&lt;/span&gt;));
        &lt;span class="hljs-comment"&gt;// on envoie la première donnée&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// on envoie les 8 derniers bits&lt;/span&gt;
        shiftOut(donnee, horloge, LSBFIRST, ~((masque &amp;amp; &lt;span class="hljs-number"&gt;0xFF00&lt;/span&gt;) &amp;gt;&amp;gt; &lt;span class="hljs-number"&gt;8&lt;/span&gt;));
        &lt;span class="hljs-comment"&gt;// et on relache le verrou pour mettre à jour les données&lt;/span&gt;
        digitalWrite(verrou, HIGH);
        delay(&lt;span class="hljs-number"&gt;500&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Démonstration de l’utilisation de deux 74HC595
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/in_GIqS5CU4" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Et voici là encore la démonstration sur simulateur interactif :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/ibDMHV4H3Cl" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Ce composant peut vous paraître un peu superflu, mais il existe en fait de très nombreuses applications avec. Par exemple, si vous voulez réaliser un cube de LED (disons 4x4x4 pour commencer gentiment). Si vous vouliez donner une broche par LED vous seriez bloqué puisque Arduino n’en possède pas autant (il vous en faudrait 64). Ici le composant vous permet donc de gérer plus de sorties que vous ne le pourriez initialement.
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Les entrées analogiques de l’Arduino</title><link href="https://eskimon.fr/tuto-arduino-401-les-entr%C3%A9es-analogiques-de-larduino" rel="alternate"></link><published>2013-12-11T18:14:00+01:00</published><updated>2013-12-11T18:14:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-11:/tuto-arduino-401-les-entrées-analogiques-de-larduino</id><summary type="html">&lt;p&gt;
 Ce premier chapitre va vous faire découvrir comment gérer des tensions analogiques avec votre carte Arduino. Vous allez d’abord prendre en main le fonctionnement d’un certain composant essentiel à la mise en forme d’un signal analogique, puis je vous expliquerai comment vous en servir avec votre Arduino …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Ce premier chapitre va vous faire découvrir comment gérer des tensions analogiques avec votre carte Arduino. Vous allez d’abord prendre en main le fonctionnement d’un certain composant essentiel à la mise en forme d’un signal analogique, puis je vous expliquerai comment vous en servir avec votre Arduino. Rassurez-vous, il n’y a pas besoin de matériel supplémentaire pour ce chapitre !
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#un-signal-analogique-petits-rappels"&gt;
    Un signal analogique : petits rappels
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#signal-périodique"&gt;
       Signal périodique
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#notre-objectif"&gt;
       Notre objectif
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#les-convertisseurs-analogiques--numérique-ou-can"&gt;
    Les convertisseurs analogiques –&amp;gt; numérique ou CAN
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#la-diversité"&gt;
       La diversité
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#arduino-dispose-dun-can"&gt;
      Arduino dispose d’un CAN
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#principe-de-dichotomie"&gt;
       Principe de dichotomie
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#le-can-à-approximations-successives"&gt;
      Le CAN à approximations successives
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-comparateur"&gt;
       Le comparateur
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-démultiplexeur"&gt;
       Le démultiplexeur
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-mémoire"&gt;
       La mémoire
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-convertisseur-numérique-analogique"&gt;
       Le convertisseur numérique analogique
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#fonctionnement-global"&gt;
       Fonctionnement global
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#pas-de-calcul-du-can"&gt;
       Pas de calcul du CAN
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-inconvénients"&gt;
       Les inconvénients
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#lecture-analogique-on-y-vient"&gt;
    Lecture analogique, on y vient…
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#lire-la-tension-sur-une-broche-analogique"&gt;
      Lire la tension sur une broche analogique
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#analogreadpin"&gt;
       analogRead(pin)
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#convertir-la-valeur-lue"&gt;
      Convertir la valeur lue
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#conversion"&gt;
       Conversion
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#exemple-dutilisation"&gt;
    Exemple d’utilisation
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#le-potentiomètre"&gt;
      Le potentiomètre
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#cas-n°1-le-pont-diviseur-de-tension"&gt;
       Cas n°1 : le pont diviseur de tension
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#cas-n°2-la-résistance-variable"&gt;
       Cas n°2 : la résistance variable
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#utilisation-avec-arduino"&gt;
     Utilisation avec Arduino
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#une-meilleure-précision"&gt;
    Une meilleure précision ?
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#solution-1-modifier-la-plage-dentrée-du-convertisseur"&gt;
      Solution 1 : modifier la plage d’entrée du convertisseur
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#tension-de-référence-interne"&gt;
       Tension de référence interne
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#tension-de-référence-externe"&gt;
       Tension de référence externe
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#solution-2-utiliser-un-pont-diviseur-de-tension"&gt;
     Solution 2 : utiliser un pont diviseur de tension
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#solution-3-utiliser-un-can-externe"&gt;
     Solution 3 : utiliser un CAN externe
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#solution-4-modifier-la-fréquence-de-fonctionnement-de-ladc"&gt;
     Solution 4 : Modifier la fréquence de fonctionnement de l’ADC
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="un-signal-analogique-petits-rappels"&gt;
 &lt;a aria-hidden="true" href="#un-signal-analogique-petits-rappels"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un signal analogique : petits rappels
&lt;/h3&gt;
&lt;p&gt;
 Faisons un petit rappel sur ce que sont les signaux analogiques. D’abord, jusqu’à présent nous n’avons fait qu’utiliser des grandeurs numériques binaires. Autrement dit, nous n’avons utilisé que des états logiques HAUT et BAS. Ces deux niveaux correspondent respectivement aux tensions de 5V et 0V. Cependant, une valeur analogique ne se contentera pas d’être exprimée par 0 ou 1. Elle peut prendre
 &lt;em&gt;
  une infinité de valeurs
 &lt;/em&gt;
 dans un intervalle donné. Dans notre cas, par exemple, la grandeur analogique pourra varier aisément de 0 à 5V en passant par 1.45V, 2V, 4.99V, etc. Voici un exemple de signal analogique, le très connu signal sinusoïdal :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Un signal analogique périodique" src="./images/uploaded/tuto-arduino-401-les-entrées-analogiques-de-larduino/un-signal-analogique-periodique.jpg"/&gt;
 &lt;figcaption&gt;
  Un signal analogique périodique
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   On retiendra que l’on ne s’occupe que de la tension et non du courant, en fonction du temps.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Si on essaye de mettre ce signal (ce que je vous déconseille de faire) sur une entrée numérique de l’Arduino et qu’on lit les valeurs avec digitalRead(), on ne lira que 0 ou 1. Les broches numériques de l’Arduino étant incapable de lire les valeurs d’un signal analogique.
&lt;/p&gt;
&lt;h5 id="signal-périodique"&gt;
 &lt;a aria-hidden="true" href="#signal-périodique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Signal périodique
&lt;/h5&gt;
&lt;p&gt;
 Dans la catégorie des signaux analogiques et même numériques (dans le cas d’horloge de signal pour le cadencement des micro-contrôleurs par exemple) on a les
 &lt;strong&gt;
  signaux dits périodiques
 &lt;/strong&gt;
 . La période d’un signal est en fait un motif de ce signal qui se répète et qui donne ainsi la forme du signal. Prenons l’exemple d’un signal binaire qui prend un niveau logique 1 puis un 0, puis un 1, puis un 0, …
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Représentation d'une période" src="./images/uploaded/tuto-arduino-401-les-entrées-analogiques-de-larduino/representation-dune-periode.png"/&gt;
 &lt;figcaption&gt;
  Représentation d'une période
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 La période de ce signal est le motif qui se répète tant que le signal existe. Ici, c’est le niveau logique 1 et 0 qui forme le motif. Mais cela aurait pu être 1 1 et 0, ou bien 0 1 1, voir 0 0 0 1 1 1, les possibilités sont infinies ! Pour un signal analogique, il en va de même. Reprenons le signal de tout à l’heure :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Période d'un signal analogique" src="./images/uploaded/tuto-arduino-401-les-entrées-analogiques-de-larduino/periode-dun-signal-analogique.jpg"/&gt;
 &lt;figcaption&gt;
  Période d'un signal analogique
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ici le motif qui se répète est "la bosse de chameau" ou plus scientifiquement parlant : une période d’un signal sinusoïdal.
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 Pour terminer, la période désigne aussi le temps que met un motif à se répéter. Si j’ai une période de 1ms, cela veut dire que le motif met 1ms pour se dessiner complètement avant de commencer le suivant. Et en sachant le nombre de fois que se répète le motif en 1 seconde, on peut calculer la fréquence du signal selon la formule suivante :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        F
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mfrac&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
        &lt;mi&gt;
         T
        &lt;/mi&gt;
       &lt;/mfrac&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       F = \frac 1 T
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.845108em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
      F
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mopen nulldelimiter"&gt;
      &lt;/span&gt;
      &lt;span class="mfrac"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.845108em;"&gt;
          &lt;span style="top:-2.6550000000000002em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mathit mtight" style="margin-right:0.13889em;"&gt;
             T
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.15em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="stretchy" style="height:0.2em;"&gt;
            &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
             &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
             &lt;/path&gt;
            &lt;/svg&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.394em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             1
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.345em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mclose nulldelimiter"&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 ; avec F la fréquence, en hertz, du signal et T la période, en seconde, du signal.
&lt;/p&gt;
&lt;h5 id="notre-objectif"&gt;
 &lt;a aria-hidden="true" href="#notre-objectif"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Notre objectif
&lt;/h5&gt;
&lt;p&gt;
 L’objectif va donc être double. Tout d’abord, nous allons devoir être capables de convertir cette valeur analogique en une valeur numérique, que l’on pourra ensuite manipuler à l’intérieur de notre programme. Par exemple, lorsque l’on mesurera une tension de 2,5V nous aurons dans notre programme une variable nommée "tension" qui prendra la valeur 250 lorsque l’on fera la conversion (ce n’est qu’un exemple). Ensuite, nous verrons avec Arduino ce que l’on peut faire avec les signaux analogiques. Je ne vous en dis pas plus…
&lt;/p&gt;
&lt;h3 id="les-convertisseurs-analogiques--numérique-ou-can"&gt;
 &lt;a aria-hidden="true" href="#les-convertisseurs-analogiques--numérique-ou-can"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les convertisseurs analogiques –&amp;gt; numérique ou
 &lt;abbr title="Convertisseur Analogique Numérique"&gt;
  CAN
 &lt;/abbr&gt;
&lt;/h3&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Qu’est-ce que c’est ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 C’est un dispositif qui va convertir des grandeurs analogiques en grandeurs numériques. La valeur numérique obtenue sera proportionnelle à la valeur analogique fournie en entrée, bien évidemment. Il existe différentes façons de convertir une grandeur analogique, plus ou moins faciles à mettre en œuvre, plus ou moins précises et plus ou moins onéreuses. Pour simplifier, je ne parlerai que des tensions analogiques dans ce chapitre.
&lt;/p&gt;
&lt;h5 id="la-diversité"&gt;
 &lt;a aria-hidden="true" href="#la-diversité"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La diversité
&lt;/h5&gt;
&lt;p&gt;
 Je vais vous citer quelques types de convertisseurs, sachez cependant que nous n’en étudierons qu’un seul type.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;strong&gt;
   Convertisseur à simple rampe
  &lt;/strong&gt;
  : ce convertisseur "fabrique" une tension qui varie proportionnellement en un cours laps de temps entre deux valeurs extrêmes. En même temps qu’il produit cette tension, il compte. Lorsque la tension d’entrée du convertisseur devient égale à la tension générée par ce dernier, alors le convertisseur arrête de compter. Et pour terminer, avec la valeur du compteur, il détermine la valeur de la grandeur d’entrée. Malgré sa bonne précision, sa conversion reste assez lente et dépend de la grandeur à mesurer. Il est, de ce fait, peu utilisé.
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   Convertisseur flash
  &lt;/strong&gt;
  : ce type de convertisseur génère lui aussi des tensions analogiques. Pour être précis, il en génère plusieurs, chacune ayant une valeur plus grande que la précédente (par exemple 2V, 2.1V, 2.2V, 2.3V, etc.) et compare la grandeur d’entrée à chacun de ces paliers de tension. Ainsi, il sait entre quelle et quelle valeur se trouve la tension mesurée. Ce n’est pas très précis comme mesure, mais il a l’avantage d’être rapide et malheureusement cher.
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   Convertisseur à approximations successives
  &lt;/strong&gt;
  : Pour terminer, c’est ce convertisseur que nous allons étudier…
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="arduino-dispose-dun-can"&gt;
 &lt;a aria-hidden="true" href="#arduino-dispose-dun-can"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Arduino dispose d’un
 &lt;abbr title="Convertisseur Analogique Numérique"&gt;
  CAN
 &lt;/abbr&gt;
&lt;/h4&gt;
&lt;p&gt;
 Vous vous doutez bien que si je vous parle des
 &lt;abbr title="Convertisseur Analogique Numérique"&gt;
  CAN
 &lt;/abbr&gt;
 , c’est qu’il y a une raison. Votre carte Arduino dispose d’un tel dispositif intégré dans son cœur : le micro-contrôleur. Ce convertisseur est un convertisseur "à approximations successives". Je vais détailler un peu plus le fonctionnement de ce convertisseur par rapport aux autres dont je n’ai fait qu’un bref aperçu de leur fonctionnement (bien que suffisant).
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ceci rentre dans le cadre de votre culture générale électronique, ce n’est pas nécessaire de lire comment fonctionne ce type de convertisseur. Mais je vous recommande vivement de le faire, car il est toujours plus agréable de comprendre comment fonctionnent les outils qu’on utilise !
   &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="principe-de-dichotomie"&gt;
 &lt;a aria-hidden="true" href="#principe-de-dichotomie"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Principe de dichotomie
&lt;/h5&gt;
&lt;p&gt;
 La dichotomie, ça vous parle ? Peut-être que le nom ne vous dit rien, mais il est sûr que vous en connaissez le fonctionnement. Peut-être alors connaissez-vous
 &lt;a href="http://fr.openclassrooms.com/informatique/cours/apprenez-a-programmer-en-c/tp-plus-ou-moins-votre-premier-jeu#ss_part_1"&gt;
  le jeu "plus ou moins
 &lt;/a&gt;
 en programmation ? Si oui alors vous allez pouvoir comprendre ce que je vais expliquer, sinon lisez le principe sur le lien que je viens de vous donner, cela vous aidera un peu. La dichotomie est donc une méthode de recherche conditionnelle qui s’applique lorsque l’on recherche une valeur comprise entre un minimum et un maximum. L’exemple du jeu "plus ou moins" est parfait pour vous expliquer le fonctionnement. Prenons deux joueurs. Le joueur 1 choisit un nombre compris entre deux valeurs extrêmes, par exemple 0 et 100. Le joueur 2 ne connait pas ce nombre et doit le trouver. La méthode la plus rapide pour que le joueur 2 puisse trouver quel est le nombre choisi par le joueur 1 est :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-mipsasm"&gt;&lt;span class="hljs-keyword"&gt;Joueur &lt;/span&gt;&lt;span class="hljs-number"&gt;1&lt;/span&gt; &lt;span class="hljs-keyword"&gt;dit &lt;/span&gt;: &lt;span class="hljs-string"&gt;"quel est le nombre mystère ?"&lt;/span&gt;
&amp;gt; &lt;span class="hljs-number"&gt;40&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;Joueur &lt;/span&gt;&lt;span class="hljs-number"&gt;1&lt;/span&gt; &lt;span class="hljs-keyword"&gt;dit &lt;/span&gt;: &lt;span class="hljs-string"&gt;"Ce nombre est plus grand"&lt;/span&gt;
&amp;gt; &lt;span class="hljs-number"&gt;80&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;Joueur &lt;/span&gt;&lt;span class="hljs-number"&gt;1&lt;/span&gt; &lt;span class="hljs-keyword"&gt;dit &lt;/span&gt;: &lt;span class="hljs-string"&gt;"Ce nombre est plus petit"&lt;/span&gt;
&amp;gt; &lt;span class="hljs-number"&gt;60&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;Joueur &lt;/span&gt;&lt;span class="hljs-number"&gt;1&lt;/span&gt; &lt;span class="hljs-keyword"&gt;dit &lt;/span&gt;: &lt;span class="hljs-string"&gt;"Ce nombre est plus grand"&lt;/span&gt;
&amp;gt; &lt;span class="hljs-number"&gt;70&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;Joueur &lt;/span&gt;&lt;span class="hljs-number"&gt;1&lt;/span&gt; &lt;span class="hljs-keyword"&gt;dit &lt;/span&gt;: &lt;span class="hljs-string"&gt;"Ce nombre est plus grand"&lt;/span&gt;
&amp;gt; &lt;span class="hljs-number"&gt;75&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;Joueur &lt;/span&gt;&lt;span class="hljs-number"&gt;1&lt;/span&gt; &lt;span class="hljs-keyword"&gt;dit &lt;/span&gt;: &lt;span class="hljs-string"&gt;"Ce nombre est plus petit"&lt;/span&gt;
&amp;gt; &lt;span class="hljs-number"&gt;72&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;Bravo, &lt;/span&gt;&lt;span class="hljs-keyword"&gt;Joueur &lt;/span&gt;&lt;span class="hljs-number"&gt;2&lt;/span&gt; a trouvé le nombre mystère !
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Je le disais, le joueur 2, pour arriver le plus rapidement au résultat, doit choisir une méthode rapide. Cette méthode, vous l’aurez deviné, consiste à couper en deux l’espace de recherche. Au début, cet espace allait de 0 à 100, puis au deuxième essai de 40 à 100, au troisième essai de 40 à 80, etc.
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Cet exemple n’est qu’à titre indicatif pour bien comprendre le concept.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 En conclusion, cette méthode est vraiment simple, efficace et rapide ! Peut-être l’aurez-vous observé, on est pas obligé de couper l’espace de recherche en deux parties égales.
&lt;/p&gt;
&lt;h4 id="le-can-à-approximations-successives"&gt;
 &lt;a aria-hidden="true" href="#le-can-à-approximations-successives"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le
 &lt;abbr title="Convertisseur Analogique Numérique"&gt;
  CAN
 &lt;/abbr&gt;
 à approximations successives
&lt;/h4&gt;
&lt;p&gt;
 On y vient, je vais pouvoir vous expliquer comment il fonctionne. Voyez-vous le rapport avec le jeu précédent ? Pas encore ? Alors je m’explique. Prenons du concret avec une valeur de tension de 3.36V que l’on met à l’entrée d’un
 &lt;abbr title="Convertisseur Analogique Numérique"&gt;
  CAN
 &lt;/abbr&gt;
 à approximations successives (j’abrégerai par
 &lt;abbr title="Convertisseur Analogique Numérique"&gt;
  CAN
 &lt;/abbr&gt;
 dorénavant).
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Le CAN à approximations successives" src="./images/uploaded/tuto-arduino-401-les-entrées-analogiques-de-larduino/le-can-a-approximations-successives.jpg"/&gt;
 &lt;figcaption&gt;
  Le CAN à approximations successives
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Notez le symbole du
   &lt;abbr title="Convertisseur Analogique Numérique"&gt;
    CAN
   &lt;/abbr&gt;
   qui se trouve juste au-dessus de l’image. Il s’agit d’un "U" renversé et du caractère #.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Cette tension analogique de 3.36V va rentrer dans le
 &lt;abbr title="Convertisseur Analogique Numérique"&gt;
  CAN
 &lt;/abbr&gt;
 et va ressortir sous forme numérique (avec des 0 et 1). Mais que se passe-t-il à l’intérieur pour arriver à un tel résultat ? Pour que vous puissiez comprendre correctement comment fonctionne ce type de
 &lt;abbr title="Convertisseur Analogique Numérique"&gt;
  CAN
 &lt;/abbr&gt;
 , je vais être obligé de vous apprendre plusieurs choses avant.
&lt;/p&gt;
&lt;h5 id="le-comparateur"&gt;
 &lt;a aria-hidden="true" href="#le-comparateur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le comparateur
&lt;/h5&gt;
&lt;p&gt;
 Commençons par le
 &lt;strong&gt;
  comparateur
 &lt;/strong&gt;
 . Comme son nom le laisse deviner, c’est quelque chose qui compare. Ce quelque chose est un composant électronique. Je ne rentrerai absolument pas dans le détail, je vais simplement vous montrer comment il fonctionne.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Comparer, oui, mais quoi ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Des tensions !
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 Regardez son symbole, je vous explique ensuite…
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Le comparateur" src="./images/uploaded/tuto-arduino-401-les-entrées-analogiques-de-larduino/le-comparateur.jpg"/&gt;
 &lt;figcaption&gt;
  Le comparateur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Vous observez qu’il dispose de deux entrées
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         E
        &lt;/mi&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
       &lt;/msub&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       E_1
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
       E
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             1
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 et
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         E
        &lt;/mi&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
       &lt;/msub&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       E_2
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
       E
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             2
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 et d’une sortie
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        S
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       S
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
      S
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 . Le principe est simple :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Lorsque la tension
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          E
         &lt;/mi&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
        &lt;/msub&gt;
        &lt;mo&gt;
         &amp;gt;
        &lt;/mo&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          E
         &lt;/mi&gt;
         &lt;mn&gt;
          2
         &lt;/mn&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        E_1 &amp;gt; E_2
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
        E
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              1
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       &amp;gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
        E
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              2
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  alors
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         S
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mo&gt;
         +
        &lt;/mo&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          V
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           c
          &lt;/mi&gt;
          &lt;mi&gt;
           c
          &lt;/mi&gt;
         &lt;/mrow&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        S = +V_{cc}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
       S
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       +
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
        V
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.151392em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight"&gt;
               c
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               c
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  (
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mo&gt;
         +
        &lt;/mo&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          V
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           c
          &lt;/mi&gt;
          &lt;mi&gt;
           c
          &lt;/mi&gt;
         &lt;/mrow&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        +V_{cc}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       +
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
        V
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.151392em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight"&gt;
               c
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               c
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  étant la tension d’alimentation positive du comparateur)
 &lt;/li&gt;
 &lt;li&gt;
  Lorsque la tension
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          E
         &lt;/mi&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
        &lt;/msub&gt;
        &lt;mo&gt;
         &amp;lt;
        &lt;/mo&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          E
         &lt;/mi&gt;
         &lt;mn&gt;
          2
         &lt;/mn&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        E_1 &amp;lt; E_2
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
        E
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              1
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       &amp;lt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
        E
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              2
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  alors
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         S
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mo&gt;
         −
        &lt;/mo&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          V
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           c
          &lt;/mi&gt;
          &lt;mi&gt;
           c
          &lt;/mi&gt;
         &lt;/mrow&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        S = -V_{cc}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
       S
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       −
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
        V
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.151392em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight"&gt;
               c
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               c
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  (
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mo&gt;
         −
        &lt;/mo&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          V
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           c
          &lt;/mi&gt;
          &lt;mi&gt;
           c
          &lt;/mi&gt;
         &lt;/mrow&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        -V_{cc}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       −
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
        V
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.151392em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight"&gt;
               c
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               c
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  étant la tension d’alimentation négative, ou la masse, du comparateur)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          E
         &lt;/mi&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
        &lt;/msub&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          E
         &lt;/mi&gt;
         &lt;mn&gt;
          2
         &lt;/mn&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        E_1 = E_2
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
        E
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              1
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
        E
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              2
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  est une condition quasiment impossible, si tel est le cas (si on relie
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          E
         &lt;/mi&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        E_1
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
        E
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              1
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  et
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          E
         &lt;/mi&gt;
         &lt;mn&gt;
          2
         &lt;/mn&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        E_2
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
        E
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              2
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  ) le comparateur donnera un résultat faux
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Parlons un peu de la tension d’alimentation du comparateur. Le meilleur des cas est de l’alimenter entre 0V et +5V. Comme cela, sa sortie sera soit égale à 0V, soit égale à +5V. Ainsi, on rentre dans le domaine des tensions acceptées par les micro-contrôleurs et de plus il verra soit un état logique BAS, soit un état logique HAUT. On peut réécrire les conditions précédemment énoncées comme ceci :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          E
         &lt;/mi&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
        &lt;/msub&gt;
        &lt;mo&gt;
         &amp;gt;
        &lt;/mo&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          E
         &lt;/mi&gt;
         &lt;mn&gt;
          2
         &lt;/mn&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        E_1 &amp;gt; E_2
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
        E
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              1
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       &amp;gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
        E
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              2
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  alors
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         S
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        S = 1
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
       S
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       1
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          E
         &lt;/mi&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
        &lt;/msub&gt;
        &lt;mo&gt;
         &amp;lt;
        &lt;/mo&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          E
         &lt;/mi&gt;
         &lt;mn&gt;
          2
         &lt;/mn&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        E_1 &amp;lt; E_2
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
        E
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              1
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       &amp;lt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
        E
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              2
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  alors
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         S
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        S = 0
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
       S
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          E
         &lt;/mi&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
        &lt;/msub&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          E
         &lt;/mi&gt;
         &lt;mn&gt;
          2
         &lt;/mn&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        E_1 = E_2
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
        E
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              1
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
        E
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              2
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  , alors
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         S
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mi&gt;
         i
        &lt;/mi&gt;
        &lt;mi&gt;
         n
        &lt;/mi&gt;
        &lt;mi&gt;
         d
        &lt;/mi&gt;
        &lt;mi&gt;
         e
        &lt;/mi&gt;
        &lt;mi&gt;
         f
        &lt;/mi&gt;
        &lt;mi&gt;
         i
        &lt;/mi&gt;
        &lt;mi&gt;
         n
        &lt;/mi&gt;
        &lt;mi&gt;
         i
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        S = indefini
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.69444em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
       S
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       i
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       n
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       d
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       e
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.10764em;"&gt;
       f
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       i
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       n
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       i
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Simple n’est-ce pas ?
&lt;/p&gt;
&lt;h5 id="le-démultiplexeur"&gt;
 &lt;a aria-hidden="true" href="#le-démultiplexeur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le démultiplexeur
&lt;/h5&gt;
&lt;p&gt;
 Maintenant, je vais vous parler du
 &lt;strong&gt;
  démultiplexeur
 &lt;/strong&gt;
 . C’est en fait un nom un peu barbare pour désigner un composant électronique qui fait de
 &lt;em&gt;
  l’aiguillage de niveaux logiques
 &lt;/em&gt;
 (il en existe aussi qui font de l’aiguillage de tensions analogiques). Le principe est là encore très simple. Le démultiplexeur à plusieurs sorties, une entrée et des entrées de sélection :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Le démultiplexeur" src="./images/uploaded/tuto-arduino-401-les-entrées-analogiques-de-larduino/le-demultiplexeur.jpg"/&gt;
 &lt;figcaption&gt;
  Le démultiplexeur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         E
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        E
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
       E
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  est l’entrée où l’on impose un niveau logique 0 ou 1.
 &lt;/li&gt;
 &lt;li&gt;
  Les sorties
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         S
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        S
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
       S
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  sont là où se retrouve le niveau logique d’entrée. UNE seule sortie peut être active à la fois et recopier le niveau logique d’entrée.
 &lt;/li&gt;
 &lt;li&gt;
  Les entrées
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         A
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        A
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit"&gt;
       A
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  permettent de sélectionner quelle sera la sortie qui est active. La sélection se fait grâce aux combinaisons binaires. Par exemple, si je veux sélectionner la sortie 4, je vais écrire le code 0100 (qui correspond au chiffre décimal 4) sur les entrées
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          A
         &lt;/mi&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        A_1
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit"&gt;
        A
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              1
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  à
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          A
         &lt;/mi&gt;
         &lt;mn&gt;
          4
         &lt;/mn&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        A_4
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit"&gt;
        A
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              4
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
 &lt;img alt="Le démultiplexeur en action" src="./images/uploaded/tuto-arduino-401-les-entrées-analogiques-de-larduino/le-demultiplexeur-en-action.jpg"/&gt;
 &lt;figcaption&gt;
  Le démultiplexeur en action
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Je rappelle que, pour les entrées de sélection, le bit de poids fort est
   &lt;span class="inlineMath"&gt;
    &lt;span class="katex"&gt;
     &lt;span class="katex-mathml"&gt;
      &lt;math&gt;
       &lt;semantics&gt;
        &lt;mrow&gt;
         &lt;msub&gt;
          &lt;mi&gt;
           A
          &lt;/mi&gt;
          &lt;mn&gt;
           4
          &lt;/mn&gt;
         &lt;/msub&gt;
        &lt;/mrow&gt;
        &lt;annotation encoding="application/x-tex"&gt;
         A_4
        &lt;/annotation&gt;
       &lt;/semantics&gt;
      &lt;/math&gt;
     &lt;/span&gt;
     &lt;span aria-hidden="true" class="katex-html"&gt;
      &lt;span class="strut" style="height:0.68333em;"&gt;
      &lt;/span&gt;
      &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
      &lt;/span&gt;
      &lt;span class="base"&gt;
       &lt;span class="mord"&gt;
        &lt;span class="mord mathit"&gt;
         A
        &lt;/span&gt;
        &lt;span class="msupsub"&gt;
         &lt;span class="vlist-t vlist-t2"&gt;
          &lt;span class="vlist-r"&gt;
           &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
            &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
             &lt;span class="pstrut" style="height:2.7em;"&gt;
             &lt;/span&gt;
             &lt;span class="sizing reset-size6 size3 mtight"&gt;
              &lt;span class="mord mtight"&gt;
               4
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span class="vlist-s"&gt;
            ​
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-r"&gt;
           &lt;span class="vlist" style="height:0.15em;"&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
   et le bit de poids faible
   &lt;span class="inlineMath"&gt;
    &lt;span class="katex"&gt;
     &lt;span class="katex-mathml"&gt;
      &lt;math&gt;
       &lt;semantics&gt;
        &lt;mrow&gt;
         &lt;msub&gt;
          &lt;mi&gt;
           A
          &lt;/mi&gt;
          &lt;mn&gt;
           1
          &lt;/mn&gt;
         &lt;/msub&gt;
        &lt;/mrow&gt;
        &lt;annotation encoding="application/x-tex"&gt;
         A_1
        &lt;/annotation&gt;
       &lt;/semantics&gt;
      &lt;/math&gt;
     &lt;/span&gt;
     &lt;span aria-hidden="true" class="katex-html"&gt;
      &lt;span class="strut" style="height:0.68333em;"&gt;
      &lt;/span&gt;
      &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
      &lt;/span&gt;
      &lt;span class="base"&gt;
       &lt;span class="mord"&gt;
        &lt;span class="mord mathit"&gt;
         A
        &lt;/span&gt;
        &lt;span class="msupsub"&gt;
         &lt;span class="vlist-t vlist-t2"&gt;
          &lt;span class="vlist-r"&gt;
           &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
            &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
             &lt;span class="pstrut" style="height:2.7em;"&gt;
             &lt;/span&gt;
             &lt;span class="sizing reset-size6 size3 mtight"&gt;
              &lt;span class="mord mtight"&gt;
               1
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span class="vlist-s"&gt;
            ​
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-r"&gt;
           &lt;span class="vlist" style="height:0.15em;"&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
   . Idem pour les sorties,
   &lt;span class="inlineMath"&gt;
    &lt;span class="katex"&gt;
     &lt;span class="katex-mathml"&gt;
      &lt;math&gt;
       &lt;semantics&gt;
        &lt;mrow&gt;
         &lt;msub&gt;
          &lt;mi&gt;
           S
          &lt;/mi&gt;
          &lt;mn&gt;
           1
          &lt;/mn&gt;
         &lt;/msub&gt;
        &lt;/mrow&gt;
        &lt;annotation encoding="application/x-tex"&gt;
         S_1
        &lt;/annotation&gt;
       &lt;/semantics&gt;
      &lt;/math&gt;
     &lt;/span&gt;
     &lt;span aria-hidden="true" class="katex-html"&gt;
      &lt;span class="strut" style="height:0.68333em;"&gt;
      &lt;/span&gt;
      &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
      &lt;/span&gt;
      &lt;span class="base"&gt;
       &lt;span class="mord"&gt;
        &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
         S
        &lt;/span&gt;
        &lt;span class="msupsub"&gt;
         &lt;span class="vlist-t vlist-t2"&gt;
          &lt;span class="vlist-r"&gt;
           &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
            &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
             &lt;span class="pstrut" style="height:2.7em;"&gt;
             &lt;/span&gt;
             &lt;span class="sizing reset-size6 size3 mtight"&gt;
              &lt;span class="mord mtight"&gt;
               1
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span class="vlist-s"&gt;
            ​
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-r"&gt;
           &lt;span class="vlist" style="height:0.15em;"&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
   est le bit de poids faible et
   &lt;span class="inlineMath"&gt;
    &lt;span class="katex"&gt;
     &lt;span class="katex-mathml"&gt;
      &lt;math&gt;
       &lt;semantics&gt;
        &lt;mrow&gt;
         &lt;msub&gt;
          &lt;mi&gt;
           S
          &lt;/mi&gt;
          &lt;mrow&gt;
           &lt;mn&gt;
            1
           &lt;/mn&gt;
           &lt;mn&gt;
            0
           &lt;/mn&gt;
          &lt;/mrow&gt;
         &lt;/msub&gt;
        &lt;/mrow&gt;
        &lt;annotation encoding="application/x-tex"&gt;
         S_{10}
        &lt;/annotation&gt;
       &lt;/semantics&gt;
      &lt;/math&gt;
     &lt;/span&gt;
     &lt;span aria-hidden="true" class="katex-html"&gt;
      &lt;span class="strut" style="height:0.68333em;"&gt;
      &lt;/span&gt;
      &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
      &lt;/span&gt;
      &lt;span class="base"&gt;
       &lt;span class="mord"&gt;
        &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
         S
        &lt;/span&gt;
        &lt;span class="msupsub"&gt;
         &lt;span class="vlist-t vlist-t2"&gt;
          &lt;span class="vlist-r"&gt;
           &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
            &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
             &lt;span class="pstrut" style="height:2.7em;"&gt;
             &lt;/span&gt;
             &lt;span class="sizing reset-size6 size3 mtight"&gt;
              &lt;span class="mord mtight"&gt;
               &lt;span class="mord mtight"&gt;
                1
               &lt;/span&gt;
               &lt;span class="mord mtight"&gt;
                0
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span class="vlist-s"&gt;
            ​
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-r"&gt;
           &lt;span class="vlist" style="height:0.15em;"&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
   , le bit de poids fort.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="la-mémoire"&gt;
 &lt;a aria-hidden="true" href="#la-mémoire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La mémoire
&lt;/h5&gt;
&lt;p&gt;
 Ce composant électronique sert simplement à stocker des données sous forme binaire.
&lt;/p&gt;
&lt;h5 id="le-convertisseur-numérique-analogique"&gt;
 &lt;a aria-hidden="true" href="#le-convertisseur-numérique-analogique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le convertisseur numérique analogique
&lt;/h5&gt;
&lt;p&gt;
 Pour ce dernier composant avant l’acte final, il n’y a rien à savoir si ce n’est que c’est l’opposé du
 &lt;abbr title="Convertisseur Analogique Numérique"&gt;
  CAN
 &lt;/abbr&gt;
 . Il a donc plusieurs entrées et une seule sortie. Les entrées reçoivent des valeurs binaires et la sortie donne le résultat sous forme de tension.
&lt;/p&gt;
&lt;h5 id="fonctionnement-global"&gt;
 &lt;a aria-hidden="true" href="#fonctionnement-global"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Fonctionnement global
&lt;/h5&gt;
&lt;p&gt;
 Rentrons dans les explications du fonctionnement d’un
 &lt;abbr title="Convertisseur Analogique Numérique"&gt;
  CAN
 &lt;/abbr&gt;
 à approximations successives. Je vous ai fait un petit schéma rassemblant les éléments précédemment présentés :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Chaîne de fonctionnement du CAN" src="./images/uploaded/tuto-arduino-401-les-entrées-analogiques-de-larduino/chaine-de-fonctionnement-du-can.jpg"/&gt;
 &lt;figcaption&gt;
  Chaîne de fonctionnement du CAN
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Voilà donc comment se compose le
 &lt;abbr title="Convertisseur Analogique Numérique"&gt;
  CAN
 &lt;/abbr&gt;
 . Si vous avez compris le fonctionnement de chacun des composants qui le constituent, alors vous n’aurez pas trop de mal à suivre mes explications. Dans le cas contraire, je vous recommande de relire ce qui précède et de bien comprendre et rechercher sur internet de plus amples informations si cela vous est nécessaire.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Chaîne de fonctionnement du CAN en action" src="./images/uploaded/tuto-arduino-401-les-entrées-analogiques-de-larduino/chaine-de-fonctionnement-du-can-en-action.jpg"/&gt;
 &lt;figcaption&gt;
  Chaîne de fonctionnement du CAN en action
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 En premier lieu, commençons par les conditions initiales :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          V
         &lt;/mi&gt;
         &lt;mi&gt;
          e
         &lt;/mi&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        V_e
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
        V
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.151392em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mathit mtight"&gt;
              e
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  est la tension analogique d’entrée, celle que l’on veut mesurer en la convertissant en signal numérique.
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   La mémoire
  &lt;/strong&gt;
  contient pour l’instant que des
  &lt;strong&gt;
   0
  &lt;/strong&gt;
  sauf pour le bit de poids fort (
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          S
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mn&gt;
           1
          &lt;/mn&gt;
          &lt;mn&gt;
           0
          &lt;/mn&gt;
         &lt;/mrow&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        S_{10}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
        S
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mtight"&gt;
               1
              &lt;/span&gt;
              &lt;span class="mord mtight"&gt;
               0
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  ) qui est à
  &lt;strong&gt;
   1
  &lt;/strong&gt;
  . Ainsi, le convertisseur numérique
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mo&gt;
         →
        &lt;/mo&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        \to
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.36687em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.36687em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mrel"&gt;
       →
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  analogique va convertir ce nombre binaire en une tension analogique qui aura pour valeur 2.5V.
 &lt;/li&gt;
 &lt;li&gt;
  Pour l’instant, le démultiplexeur n’entre pas en jeu.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Suivons le fonctionnement étape par étape :
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  Étape 1 :
 &lt;/strong&gt;
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Chaîne de fonctionnement du CAN - Exemple - Etape 1" src="./images/uploaded/tuto-arduino-401-les-entrées-analogiques-de-larduino/chaine-de-fonctionnement-du-can-exemple-etape-1.jpg"/&gt;
 &lt;figcaption&gt;
  Chaîne de fonctionnement du CAN - Exemple - Etape 1
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
 &lt;li&gt;
  J’applique une tension
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          V
         &lt;/mi&gt;
         &lt;mi&gt;
          e
         &lt;/mi&gt;
        &lt;/msub&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mn&gt;
         3
        &lt;/mn&gt;
        &lt;mi mathvariant="normal"&gt;
         .
        &lt;/mi&gt;
        &lt;mn&gt;
         5
        &lt;/mn&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        V_e = 3.5100V
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
        V
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.151392em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mathit mtight"&gt;
              e
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       3
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       .
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       5
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       1
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  précisément.
 &lt;/li&gt;
 &lt;li&gt;
  Le comparateur compare la tension
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          V
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           c
          &lt;/mi&gt;
          &lt;mi&gt;
           o
          &lt;/mi&gt;
          &lt;mi&gt;
           m
          &lt;/mi&gt;
          &lt;mi&gt;
           p
          &lt;/mi&gt;
         &lt;/mrow&gt;
        &lt;/msub&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
        &lt;mi mathvariant="normal"&gt;
         .
        &lt;/mi&gt;
        &lt;mn&gt;
         5
        &lt;/mn&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        V_{comp} = 2.5V
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.969438em;vertical-align:-0.286108em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
        V
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15139200000000003em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight"&gt;
               c
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               o
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               m
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               p
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.286108em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       .
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       5
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  à la tension
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          V
         &lt;/mi&gt;
         &lt;mi&gt;
          e
         &lt;/mi&gt;
        &lt;/msub&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mn&gt;
         3
        &lt;/mn&gt;
        &lt;mi mathvariant="normal"&gt;
         .
        &lt;/mi&gt;
        &lt;mn&gt;
         5
        &lt;/mn&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        V_e = 3.5100V
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
        V
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.151392em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mathit mtight"&gt;
              e
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       3
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       .
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       5
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       1
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  . Étant donné que
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          V
         &lt;/mi&gt;
         &lt;mi&gt;
          e
         &lt;/mi&gt;
        &lt;/msub&gt;
        &lt;mo&gt;
         &amp;gt;
        &lt;/mo&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          V
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           c
          &lt;/mi&gt;
          &lt;mi&gt;
           o
          &lt;/mi&gt;
          &lt;mi&gt;
           m
          &lt;/mi&gt;
          &lt;mi&gt;
           p
          &lt;/mi&gt;
         &lt;/mrow&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        V_e  \gt V_{comp}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.969438em;vertical-align:-0.286108em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
        V
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.151392em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mathit mtight"&gt;
              e
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       &amp;gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
        V
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15139200000000003em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight"&gt;
               c
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               o
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               m
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               p
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.286108em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  , on a un Niveau Logique
  &lt;strong&gt;
   1
  &lt;/strong&gt;
  en sortie du comparateur.
 &lt;/li&gt;
 &lt;li&gt;
  Le multiplexeur entre alors en jeux. Avec ses signaux de sélections, il va sélectionner la sortie ayant le poids le plus élevé, soit
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          S
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mn&gt;
           1
          &lt;/mn&gt;
          &lt;mn&gt;
           0
          &lt;/mn&gt;
         &lt;/mrow&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        S_{10}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
        S
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mtight"&gt;
               1
              &lt;/span&gt;
              &lt;span class="mord mtight"&gt;
               0
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  .
 &lt;/li&gt;
 &lt;li&gt;
  La mémoire va alors enregistrer le niveau logique présent sur la broche
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          S
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mn&gt;
           1
          &lt;/mn&gt;
          &lt;mn&gt;
           0
          &lt;/mn&gt;
         &lt;/mrow&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        S_{10}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
        S
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mtight"&gt;
               1
              &lt;/span&gt;
              &lt;span class="mord mtight"&gt;
               0
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  , dans notre cas c’est
  &lt;strong&gt;
   1
  &lt;/strong&gt;
  .
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 &lt;strong&gt;
  Étape 2 :
 &lt;/strong&gt;
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Chaîne de fonctionnement du CAN - Exemple - Etape 2" src="./images/uploaded/tuto-arduino-401-les-entrées-analogiques-de-larduino/chaine-de-fonctionnement-du-can-exemple-etape-2.jpg"/&gt;
 &lt;figcaption&gt;
  Chaîne de fonctionnement du CAN - Exemple - Etape 2
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
 &lt;li&gt;
  Au niveau de la mémoire, on change le deuxième bit de poids fort (mais moins fort que le premier) correspondant à la broche
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          S
         &lt;/mi&gt;
         &lt;mn&gt;
          9
         &lt;/mn&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        S_9
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
        S
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              9
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  en le passant à
  &lt;strong&gt;
   1
  &lt;/strong&gt;
  .
 &lt;/li&gt;
 &lt;li&gt;
  En sortie du CNA, on aura alors une tension de
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mn&gt;
         3
        &lt;/mn&gt;
        &lt;mi mathvariant="normal"&gt;
         .
        &lt;/mi&gt;
        &lt;mn&gt;
         7
        &lt;/mn&gt;
        &lt;mn&gt;
         5
        &lt;/mn&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        3.75V
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       3
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       .
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       7
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       5
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Le comparateur compare, il voit
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          V
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           c
          &lt;/mi&gt;
          &lt;mi&gt;
           o
          &lt;/mi&gt;
          &lt;mi&gt;
           m
          &lt;/mi&gt;
          &lt;mi&gt;
           p
          &lt;/mi&gt;
         &lt;/mrow&gt;
        &lt;/msub&gt;
        &lt;mo&gt;
         &amp;gt;
        &lt;/mo&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          V
         &lt;/mi&gt;
         &lt;mi&gt;
          e
         &lt;/mi&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        V_{comp} \gt V_e
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.969438em;vertical-align:-0.286108em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
        V
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15139200000000003em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight"&gt;
               c
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               o
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               m
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               p
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.286108em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       &amp;gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
        V
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.151392em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mathit mtight"&gt;
              e
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  donc il donne un état logique
  &lt;strong&gt;
   0
  &lt;/strong&gt;
  .
 &lt;/li&gt;
 &lt;li&gt;
  La mémoire enregistre alors le niveau sur la broche
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          S
         &lt;/mi&gt;
         &lt;mn&gt;
          9
         &lt;/mn&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        S_9
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
        S
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              9
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  qui est à
  &lt;strong&gt;
   0
  &lt;/strong&gt;
  .
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 &lt;strong&gt;
  Étape 3 :
 &lt;/strong&gt;
&lt;/p&gt;
&lt;p&gt;
 Redondante aux précédentes
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Chaîne de fonctionnement du CAN - Exemple - Etape 3" src="./images/uploaded/tuto-arduino-401-les-entrées-analogiques-de-larduino/chaine-de-fonctionnement-du-can-exemple-etape-3.jpg"/&gt;
 &lt;figcaption&gt;
  Chaîne de fonctionnement du CAN - Exemple - Etape 3
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
 &lt;li&gt;
  On passe le troisième bit le plus fort (broche
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          S
         &lt;/mi&gt;
         &lt;mn&gt;
          8
         &lt;/mn&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        S_8
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
        S
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              8
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  ) à
  &lt;strong&gt;
   1
  &lt;/strong&gt;
  .
 &lt;/li&gt;
 &lt;li&gt;
  Le CNA converti le nombre binaire résultant en une tension de
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mn&gt;
         3
        &lt;/mn&gt;
        &lt;mi mathvariant="normal"&gt;
         .
        &lt;/mi&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
        &lt;mn&gt;
         5
        &lt;/mn&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        3.125V
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       3
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       .
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       1
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       5
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  .
 &lt;/li&gt;
 &lt;li&gt;
  Le comparateur voit
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          V
         &lt;/mi&gt;
         &lt;mi&gt;
          e
         &lt;/mi&gt;
        &lt;/msub&gt;
        &lt;mo&gt;
         &amp;gt;
        &lt;/mo&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          V
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           c
          &lt;/mi&gt;
          &lt;mi&gt;
           o
          &lt;/mi&gt;
          &lt;mi&gt;
           m
          &lt;/mi&gt;
          &lt;mi&gt;
           p
          &lt;/mi&gt;
         &lt;/mrow&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        V_e  \gt V_{comp}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.969438em;vertical-align:-0.286108em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
        V
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.151392em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mathit mtight"&gt;
              e
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       &amp;gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
        V
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15139200000000003em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight"&gt;
               c
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               o
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               m
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               p
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.286108em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  , sa sortie passe à
  &lt;strong&gt;
   1
  &lt;/strong&gt;
  .
 &lt;/li&gt;
 &lt;li&gt;
  La mémoire enregistre l’état logique de la broche
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          S
         &lt;/mi&gt;
         &lt;mn&gt;
          8
         &lt;/mn&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        S_8
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
        S
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              8
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  qui est à
  &lt;strong&gt;
   1
  &lt;/strong&gt;
  .
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Le
 &lt;abbr title="Convertisseur Analogique Numérique"&gt;
  CAN
 &lt;/abbr&gt;
 continue de cette manière pour arriver au dernier bit (celui de poids faible). En mémoire, à la fin de la conversion, se trouve le résultat. On va alors lire cette valeur binaire que l’on convertira ensuite pour l’exploiter. Bon, j’ai continué les calculs à la main (n’ayant pas de simulateur pour le faire à ma place), voici le tableau des valeurs :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Poids du bit
      &lt;/th&gt;
      &lt;th&gt;
       NL en sortie du comparateur
      &lt;/th&gt;
      &lt;th&gt;
       Bits stockés en mémoire
      &lt;/th&gt;
      &lt;th&gt;
       Tension en sortie du convertisseur CNA (en V)
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       10
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       2.5
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       9
      &lt;/td&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
      &lt;td&gt;
       3.75
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       8
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       3.125
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       7
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       3.4375
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       6
      &lt;/td&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
      &lt;td&gt;
       3.59375
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       5
      &lt;/td&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
      &lt;td&gt;
       3.515625
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       4
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       3.4765625
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       3
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       3.49609375
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       2
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       3.505859375
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
      &lt;td&gt;
       3.5107421875
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Lien entre tension et bits
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 &lt;strong&gt;
  Résultat :
 &lt;/strong&gt;
 Le résultat de la conversion donne :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Résultat de conversion (binaire)
      &lt;/th&gt;
      &lt;th&gt;
       Résultat de conversion (décimale)
      &lt;/th&gt;
      &lt;th&gt;
       Résultat de conversion (Volts)
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       1011001110
      &lt;/td&gt;
      &lt;td&gt;
       718
      &lt;/td&gt;
      &lt;td&gt;
       3,505859375
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Exemple de résultat d’une conversion
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 Observez la précision du convertisseur. Vous voyez que la conversion donne un résultat (très) proche de la tension réelle, mais elle n’est pas exactement égale. Ceci est dû au pas du convertisseur.
&lt;/p&gt;
&lt;h5 id="pas-de-calcul-du-can"&gt;
 &lt;a aria-hidden="true" href="#pas-de-calcul-du-can"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Pas de calcul du
 &lt;abbr title="Convertisseur Analogique Numérique"&gt;
  CAN
 &lt;/abbr&gt;
&lt;/h5&gt;
&lt;p&gt;
 Qu’est-ce que
 &lt;strong&gt;
  le pas de calcul
 &lt;/strong&gt;
 ? Eh bien il s’agit de la tension minimale que le convertisseur puisse "voir". Si je mets le bit de poids le plus faible à 1, quelle sera la valeur de la tension
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
        &lt;mrow&gt;
         &lt;mi&gt;
          c
         &lt;/mi&gt;
         &lt;mi&gt;
          o
         &lt;/mi&gt;
         &lt;mi&gt;
          m
         &lt;/mi&gt;
         &lt;mi&gt;
          p
         &lt;/mi&gt;
        &lt;/mrow&gt;
       &lt;/msub&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       V_{comp}
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.969438em;vertical-align:-0.286108em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15139200000000003em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mathit mtight"&gt;
              c
             &lt;/span&gt;
             &lt;span class="mord mathit mtight"&gt;
              o
             &lt;/span&gt;
             &lt;span class="mord mathit mtight"&gt;
              m
             &lt;/span&gt;
             &lt;span class="mord mathit mtight"&gt;
              p
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.286108em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 ? Le convertisseur a une tension de référence de 5V. Son nombre de bit est de 10. Donc il peut "lire" :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msup&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
        &lt;mrow&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
         &lt;mn&gt;
          0
         &lt;/mn&gt;
        &lt;/mrow&gt;
       &lt;/msup&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       2^{10}
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.8141079999999999em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
          &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              1
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              0
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 valeurs pour une seule tension. Ainsi, sa précision sera de :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mfrac&gt;
        &lt;mrow&gt;
         &lt;mn&gt;
          5
         &lt;/mn&gt;
        &lt;/mrow&gt;
        &lt;mrow&gt;
         &lt;msup&gt;
          &lt;mn&gt;
           2
          &lt;/mn&gt;
          &lt;mrow&gt;
           &lt;mn&gt;
            1
           &lt;/mn&gt;
           &lt;mn&gt;
            0
           &lt;/mn&gt;
          &lt;/mrow&gt;
         &lt;/msup&gt;
        &lt;/mrow&gt;
       &lt;/mfrac&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mo separator="true"&gt;
        ,
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mn&gt;
        4
       &lt;/mn&gt;
       &lt;mn&gt;
        8
       &lt;/mn&gt;
       &lt;mn&gt;
        8
       &lt;/mn&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mn&gt;
        8
       &lt;/mn&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mn&gt;
        5
       &lt;/mn&gt;
       &lt;mi&gt;
        V
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       \frac{5}{2^{10}} = 0,0048828125 V
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.845108em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mopen nulldelimiter"&gt;
      &lt;/span&gt;
      &lt;span class="mfrac"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.845108em;"&gt;
          &lt;span style="top:-2.6550000000000002em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mtight"&gt;
               2
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.7463142857142857em;"&gt;
                  &lt;span style="top:-2.786em;margin-right:0.07142857142857144em;"&gt;
                   &lt;span class="pstrut" style="height:2.5em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size3 size1 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mtight"&gt;
                      1
                     &lt;/span&gt;
                     &lt;span class="mord mtight"&gt;
                      0
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.15em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="stretchy" style="height:0.2em;"&gt;
            &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
             &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
             &lt;/path&gt;
            &lt;/svg&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.394em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              5
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.345em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mclose nulldelimiter"&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mpunct"&gt;
      ,
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.16666666666666666em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      4
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      8
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      8
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      8
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      5
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
      V
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 La formule à retenir sera donc :
&lt;/p&gt;
&lt;p&gt;
 &lt;span class="inlineMath inlineMathDouble"&gt;
  &lt;span class="katex-display"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mfrac&gt;
         &lt;mrow&gt;
          &lt;msub&gt;
           &lt;mi&gt;
            V
           &lt;/mi&gt;
           &lt;mrow&gt;
            &lt;mi&gt;
             r
            &lt;/mi&gt;
            &lt;mi&gt;
             e
            &lt;/mi&gt;
            &lt;mi&gt;
             f
            &lt;/mi&gt;
           &lt;/mrow&gt;
          &lt;/msub&gt;
         &lt;/mrow&gt;
         &lt;mrow&gt;
          &lt;msup&gt;
           &lt;mn&gt;
            2
           &lt;/mn&gt;
           &lt;mi&gt;
            N
           &lt;/mi&gt;
          &lt;/msup&gt;
         &lt;/mrow&gt;
        &lt;/mfrac&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        \frac{V_{ref}}{2^N}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:1.36033em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:2.04633em;vertical-align:-0.686em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mopen nulldelimiter"&gt;
       &lt;/span&gt;
       &lt;span class="mfrac"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:1.36033em;"&gt;
           &lt;span style="top:-2.314em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord"&gt;
              &lt;span class="mord"&gt;
               2
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.767331em;"&gt;
                  &lt;span style="top:-2.9890000000000003em;margin-right:0.05em;"&gt;
                   &lt;span class="pstrut" style="height:2.7em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size6 size3 mtight"&gt;
                    &lt;span class="mord mathit mtight" style="margin-right:0.10903em;"&gt;
                     N
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.15em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="stretchy" style="height:0.2em;"&gt;
             &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
              &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
              &lt;/path&gt;
             &lt;/svg&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.677em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord"&gt;
              &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
               V
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.3361079999999999em;"&gt;
                  &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
                   &lt;span class="pstrut" style="height:2.7em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size6 size3 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
                      r
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight"&gt;
                      e
                     &lt;/span&gt;
                     &lt;span class="mord mathit mtight" style="margin-right:0.10764em;"&gt;
                      f
                     &lt;/span&gt;
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.286108em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.686em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       &lt;span class="mclose nulldelimiter"&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 Avec :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          V
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           r
          &lt;/mi&gt;
          &lt;mi&gt;
           e
          &lt;/mi&gt;
          &lt;mi&gt;
           f
          &lt;/mi&gt;
         &lt;/mrow&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        V_{ref}
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.969438em;vertical-align:-0.286108em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
        V
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.3361079999999999em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
               r
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               e
              &lt;/span&gt;
              &lt;span class="mord mathit mtight" style="margin-right:0.10764em;"&gt;
               f
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.286108em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  : tension de référence du convertisseur
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         N
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        N
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
       N
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  : nombre de bit du convertisseur
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Il faut donc retenir que, pour ce convertisseur, sa précision est de
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        4
       &lt;/mn&gt;
       &lt;mi mathvariant="normal"&gt;
        .
       &lt;/mi&gt;
       &lt;mn&gt;
        8
       &lt;/mn&gt;
       &lt;mn&gt;
        8
       &lt;/mn&gt;
       &lt;mn&gt;
        3
       &lt;/mn&gt;
       &lt;mi&gt;
        m
       &lt;/mi&gt;
       &lt;mi&gt;
        V
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       4.883mV
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      4
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      .
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      8
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      8
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      3
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      m
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
      V
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 . Donc, si on lui met une tension de
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mi&gt;
        m
       &lt;/mi&gt;
       &lt;mi&gt;
        V
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       2mV
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      m
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
      V
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 par exemple sur son entrée, le convertisseur sera incapable de la voir et donnera un résultat égal à 0V.
&lt;/p&gt;
&lt;h5 id="les-inconvénients"&gt;
 &lt;a aria-hidden="true" href="#les-inconvénients"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les inconvénients
&lt;/h5&gt;
&lt;p&gt;
 Pour terminer avant de passer à l’utilisation du CNA avec Arduino, je vais vous parler de ses inconvénients. Il en existe trois principaux :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;strong&gt;
   la plage de tension d’entrée
  &lt;/strong&gt;
  : le convertisseur analogique de l’Arduino ne peut recevoir à son entrée que des tensions comprises entre 0V et +5V. On verra plus loin comment améliorer la précision du
  &lt;abbr title="Convertisseur Analogique Numérique"&gt;
   CAN
  &lt;/abbr&gt;
  .
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   la précision
  &lt;/strong&gt;
  : la précision du convertisseur est très bonne sauf pour les deux derniers bits de poids faible. On dit alors que la précision est de
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mo&gt;
         ±
        &lt;/mo&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
        &lt;mi&gt;
         L
        &lt;/mi&gt;
        &lt;mi&gt;
         S
        &lt;/mi&gt;
        &lt;mi&gt;
         B
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        \pm 2 LSB
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.76666em;vertical-align:-0.08333em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       ±
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       L
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.05764em;"&gt;
       S
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.05017em;"&gt;
       B
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  (à cause du pas de calcul que je viens de vous expliquer).
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   la vitesse de conversion
  &lt;/strong&gt;
  : le convertisseur N/A de la carte Arduino n’a pas une très grande vitesse de conversion par rapport à un signal audio par exemple. Ainsi , si l’on convertit un signal audio analogique en numérique grâce à la carte Arduino, on ne pourra entendre que les fréquences en dessous de 10kHz. Dans bien des cas cela peut être suffisant, mais d’en d’autre il faudra utiliser un convertisseur A/N externe (un composant en plus) qui sera plus rapide afin d’obtenir le spectre audio complet d’un signal sonore.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="lecture-analogique-on-y-vient"&gt;
 &lt;a aria-hidden="true" href="#lecture-analogique-on-y-vient"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Lecture analogique, on y vient…
&lt;/h3&gt;
&lt;h4 id="lire-la-tension-sur-une-broche-analogique"&gt;
 &lt;a aria-hidden="true" href="#lire-la-tension-sur-une-broche-analogique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Lire la tension sur une broche analogique
&lt;/h4&gt;
&lt;p&gt;
 Un truc très sympa avec Arduino, c’est que c’est facile à prendre en main. Et ça se voit une fois de plus avec l’utilisation des convertisseurs numérique -&amp;gt; analogique ! En effet, vous n’avez qu’une seule nouvelle fonction à retenir :
 &lt;code&gt;
  analogRead()
 &lt;/code&gt;
 !
&lt;/p&gt;
&lt;h5 id="analogreadpin"&gt;
 &lt;a aria-hidden="true" href="#analogreadpin"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 &lt;code&gt;
  analogRead(pin)
 &lt;/code&gt;
&lt;/h5&gt;
&lt;p&gt;
 Cette fonction va nous permettre de lire la valeur lue sur une entrée analogique de l’Arduino. Elle prend un argument et retourne la valeur lue :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  L’argument est le numéro de l’entrée analogique à lire (explication ci-dessous)
 &lt;/li&gt;
 &lt;li&gt;
  La valeur retournée (un
  &lt;code&gt;
   int
  &lt;/code&gt;
  ) sera le résultat de la conversion analogique- &amp;gt;numérique
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Sur une carte Arduino Uno, on retrouve 6
 &lt;abbr title="Convertisseur Analogique Numérique"&gt;
  CAN
 &lt;/abbr&gt;
 . Ils se trouvent tous du même côté de la carte, là où est écrit "Analog IN" :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Positions des entrées analogiques" src="./images/uploaded/tuto-arduino-401-les-entrées-analogiques-de-larduino/positions-des-entrees-analogiques.jpg"/&gt;
 &lt;figcaption&gt;
  Positions des entrées analogiques
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ces 6 entrées analogiques sont numérotées, tout comme les entrées/sorties logiques. Par exemple, pour aller lire la valeur en sortie d’un capteur branché sur le convertisseur de la broche analogique numéro 3, on fera :
 &lt;code&gt;
  valeur = analogRead(3);
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="custom-block alert alert-danger"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ne confondez pas les entrées analogiques et les entrées numériques ! Elles ont en effet le même numéro pour certaines, mais selon comment on les utilise, la carte Arduino saura si la broche est analogique ou non.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Mais comme nous sommes des programmeurs intelligents et organisés, on nommera les variables proprement pour bien travailler de la manière suivante :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// broche analogique 3 OU broche numérique 3&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; monCapteur = &lt;span class="hljs-number"&gt;3&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// la valeur lue sera comprise entre 0 et 1023&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; valeurLue = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// fonction setup()&lt;/span&gt;
{

}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on mesure la tension du capteur sur la broche analogique 3&lt;/span&gt;
    valeurLue = analogRead(monCapteur);

    &lt;span class="hljs-comment"&gt;// du code et encore du code ...&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Mesure simple d’une entrée analogique
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="convertir-la-valeur-lue"&gt;
 &lt;a aria-hidden="true" href="#convertir-la-valeur-lue"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Convertir la valeur lue
&lt;/h4&gt;
&lt;p&gt;
 Bon c’est bien, on a une valeur retournée par la fonction comprise entre 0 et 1023, mais ça ne nous donne pas vraiment une tension ça ! Il va être temps de faire un peu de code (et de math) pour
 &lt;strong&gt;
  convertir
 &lt;/strong&gt;
 cette valeur… Et si vous réfléchissiez un tout petit peu pour trouver la solution sans moi ?
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 … Trouvée ?
&lt;/p&gt;
&lt;h5 id="conversion"&gt;
 &lt;a aria-hidden="true" href="#conversion"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Conversion
&lt;/h5&gt;
&lt;p&gt;
 Comme je suis super sympa je vais vous donner la réponse, avec en prime : une explication ! Récapitulons. Nous avons une valeur entre 0 et 1023. Cette valeur est l’image de la tension mesurée, elle-même comprise entre 0V et +5V. Nous avons ensuite déterminé que le pas du convertisseur était de 4.88mV par unité. Donc, deux méthodes sont disponibles :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  avec un simple produit en croix
 &lt;/li&gt;
 &lt;li&gt;
  en utilisant le pas calculé plus tôt
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 &lt;strong&gt;
  Exemple :
 &lt;/strong&gt;
 La mesure nous retourne une valeur de 458.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Avec un produit en croix on obtient :
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mfrac&gt;
         &lt;mrow&gt;
          &lt;mn&gt;
           4
          &lt;/mn&gt;
          &lt;mn&gt;
           5
          &lt;/mn&gt;
          &lt;mn&gt;
           8
          &lt;/mn&gt;
          &lt;mo&gt;
           ×
          &lt;/mo&gt;
          &lt;mn&gt;
           5
          &lt;/mn&gt;
         &lt;/mrow&gt;
         &lt;mrow&gt;
          &lt;mn&gt;
           1
          &lt;/mn&gt;
          &lt;mn&gt;
           0
          &lt;/mn&gt;
          &lt;mn&gt;
           2
          &lt;/mn&gt;
          &lt;mn&gt;
           3
          &lt;/mn&gt;
         &lt;/mrow&gt;
        &lt;/mfrac&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
        &lt;mi mathvariant="normal"&gt;
         .
        &lt;/mi&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
        &lt;mn&gt;
         3
        &lt;/mn&gt;
        &lt;mn&gt;
         5
        &lt;/mn&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        \frac{458 \times 5}{1023} = 2.235V
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.845108em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mopen nulldelimiter"&gt;
       &lt;/span&gt;
       &lt;span class="mfrac"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.845108em;"&gt;
           &lt;span style="top:-2.6550000000000002em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mtight"&gt;
               1
              &lt;/span&gt;
              &lt;span class="mord mtight"&gt;
               0
              &lt;/span&gt;
              &lt;span class="mord mtight"&gt;
               2
              &lt;/span&gt;
              &lt;span class="mord mtight"&gt;
               3
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.15em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="stretchy" style="height:0.2em;"&gt;
             &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
              &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
              &lt;/path&gt;
             &lt;/svg&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.394em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mtight"&gt;
               4
              &lt;/span&gt;
              &lt;span class="mord mtight"&gt;
               5
              &lt;/span&gt;
              &lt;span class="mord mtight"&gt;
               8
              &lt;/span&gt;
              &lt;span class="mbin mtight"&gt;
               ×
              &lt;/span&gt;
              &lt;span class="mord mtight"&gt;
               5
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.345em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       &lt;span class="mclose nulldelimiter"&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       .
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       3
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       5
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  ;
 &lt;/li&gt;
 &lt;li&gt;
  En utilisant le pas calculé plus haut on obtient :
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mn&gt;
         4
        &lt;/mn&gt;
        &lt;mn&gt;
         5
        &lt;/mn&gt;
        &lt;mn&gt;
         8
        &lt;/mn&gt;
        &lt;mo&gt;
         ×
        &lt;/mo&gt;
        &lt;mn&gt;
         4
        &lt;/mn&gt;
        &lt;mi mathvariant="normal"&gt;
         .
        &lt;/mi&gt;
        &lt;mn&gt;
         8
        &lt;/mn&gt;
        &lt;mn&gt;
         8
        &lt;/mn&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
        &lt;mi mathvariant="normal"&gt;
         .
        &lt;/mi&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
        &lt;mn&gt;
         3
        &lt;/mn&gt;
        &lt;mn&gt;
         5
        &lt;/mn&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        458 \times 4.88 = 2.235V
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.76666em;vertical-align:-0.08333em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       4
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       5
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       8
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mbin"&gt;
       ×
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       4
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       .
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       8
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       8
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       .
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       3
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       5
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  .
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Les deux méthodes sont valides, et donnent les mêmes résultats. La première à l’avantage de faire ressortir l’aspect "physique" des choses en utilisant les tensions et la résolution du convertisseur.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voici une façon de le traduire en code :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// variable stockant la valeur lue sur le CAN&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; valeurLue;
&lt;span class="hljs-comment"&gt;// résultat stockant la conversion de valeurLue en Volts&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; tension;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    valeurLue = analogRead(uneBrocheAvecUnCapteur);
    &lt;span class="hljs-comment"&gt;// produit en croix, ATTENTION, donne un résultat en mV !&lt;/span&gt;
    tension = valeurLue * &lt;span class="hljs-number"&gt;4.88&lt;/span&gt;;
    &lt;span class="hljs-comment"&gt;// formule à aspect "physique", donne un résultat en V !&lt;/span&gt;
    tension = valeurLue * (&lt;span class="hljs-number"&gt;5&lt;/span&gt; / &lt;span class="hljs-number"&gt;1023&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Conversion d’une mesure en tension
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Mais il n’existe pas une méthode plus "automatique" que faire ce produit en croix ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Eh bien SI ! En effet, l’équipe Arduino a prévu que vous aimeriez faire des conversions facilement et donc une fonction est présente dans l’environnement Arduino afin de vous faciliter la tâche ! Cette fonction se nomme
 &lt;code&gt;
  map()
 &lt;/code&gt;
 . À partir d’une valeur d’entrée, d’un intervalle d’entrée et d’un intervalle de sortie, la fonction vous retourne la valeur équivalente comprise entre le deuxième intervalle. Voici son prototype de manière plus explicite :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;sortie = &lt;span class="hljs-built_in"&gt;map&lt;/span&gt;(valeur_d_entree,
    valeur_extreme_basse_d_entree,
    valeur_extreme_haute_d_entree,
    valeur_extreme_basse_de_sortie,
    valeur_extreme_haute_de_sortie
);
&lt;span class="hljs-comment"&gt;// cette fonction retourne la valeur calculée équivalente&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// entre les deux intervalles de sortie&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  La fonction
  &lt;code&gt;
   map
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Prenons notre exemple précédent. La valeur lue se nomme "valeurLue". L’intervalle d’entrée est la gamme de la conversion allant de 0 à 1023. La gamme (ou intervalle) de "sortie" sera la tension réelle à l’entrée du micro-contrôleur, donc entre 0 et 5V. En utilisant cette fonction nous écrirons donc :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// conversion de la valeur lue en tension en mV&lt;/span&gt;
tension = &lt;span class="hljs-built_in"&gt;map&lt;/span&gt;(valeurLue, &lt;span class="hljs-number"&gt;0&lt;/span&gt;, &lt;span class="hljs-number"&gt;1023&lt;/span&gt;, &lt;span class="hljs-number"&gt;0&lt;/span&gt;, &lt;span class="hljs-number"&gt;5000&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Utilisation de la fonction
  &lt;code&gt;
   map
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Pourquoi tu utilises 5000mV au lieu de mettre simplement 5V ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Pour la simple et bonne raison que la fonction
 &lt;code&gt;
  map
 &lt;/code&gt;
 utilise des entiers. Si j’utilisais 5V au lieu de 5000mV j’aurais donc seulement 6 valeurs possibles pour ma tension (0, 1, 2, 3, 4 et 5V). Pour terminer le calcul, il sera donc judicieux de rajouter une dernière ligne :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// conversion de la valeur lue en tension en mV&lt;/span&gt;
tension = &lt;span class="hljs-built_in"&gt;map&lt;/span&gt;(valeurLue, &lt;span class="hljs-number"&gt;0&lt;/span&gt;, &lt;span class="hljs-number"&gt;1023&lt;/span&gt;, &lt;span class="hljs-number"&gt;0&lt;/span&gt;, &lt;span class="hljs-number"&gt;5000&lt;/span&gt;);
&lt;span class="hljs-comment"&gt;// conversion des mV en V&lt;/span&gt;
tension = tension / &lt;span class="hljs-number"&gt;1000&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Au retour de la liaison série (seulement si on envoie les valeurs par la liaison série) on aurait donc (valeurs à titre d’exemple) :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-ini"&gt;&lt;span class="hljs-attr"&gt;valeurLue&lt;/span&gt; = &lt;span class="hljs-number"&gt;458&lt;/span&gt;
&lt;span class="hljs-attr"&gt;tension&lt;/span&gt; = &lt;span class="hljs-number"&gt;2.290&lt;/span&gt;V
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   On est moins précis que la tension calculée plus haut, mais on peut jouer en précision en modifiant les valeurs de sortie de la fonction map(). Ou bien garder le calcul théorique et le placer dans une "fonction maison".
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/ewRyGfjxhvw" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="exemple-dutilisation"&gt;
 &lt;a aria-hidden="true" href="#exemple-dutilisation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Exemple d’utilisation
&lt;/h3&gt;
&lt;h4 id="le-potentiomètre"&gt;
 &lt;a aria-hidden="true" href="#le-potentiomètre"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le potentiomètre
&lt;/h4&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Qu’est-ce que c’est que cette bête-là encore ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Le
 &lt;strong&gt;
  potentiomètre
 &lt;/strong&gt;
 (ou "potar" pour les (très) intimes) est un composant très fréquemment employé en électronique. On le retrouve aussi sous le nom de résistance variable. Comme ce dernier nom l’indique si bien, un potentiomètre nous permet
 &lt;em&gt;
  entre autres
 &lt;/em&gt;
 de réaliser une résistance variable. En effet, on retrouve deux applications principales que je vais vous présenter juste après. Avant toute chose, voici le symbole du potentiomètre :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Symbole du potentiomètre" src="./images/uploaded/tuto-arduino-401-les-entrées-analogiques-de-larduino/symbole-du-potentiometre.jpg"/&gt;
 &lt;figcaption&gt;
  Symbole du potentiomètre
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="cas-n°1-le-pont-diviseur-de-tension"&gt;
 &lt;a aria-hidden="true" href="#cas-n°1-le-pont-diviseur-de-tension"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Cas n°1 : le pont diviseur de tension
&lt;/h5&gt;
&lt;p&gt;
 On y remarque une première chose importante, le potentiomètre a trois broches. Deux servent à borner les tensions maximum (A) et minimum (B) que l’on peut obtenir à ses bornes, et la troisième © est reliée à un curseur mobile qui donne la tension variable obtenue entre les bornes précédemment fixées. Ainsi, on peut représenter notre premier cas d’utilisation comme un "diviseur de tension réglable". En effet, lorsque vous déplacez le curseur, en interne cela équivaut à modifier le point milieu. En termes électroniques, vous pouvez imaginer avoir deux résistances en série (R1 et R2 pour être original). Lorsque vous déplacez votre curseur vers la borne basse, R1 augmente alors que R2 diminue et lorsque vous déplacez votre curseur vers la borne haute, R2 augmente alors que R1 diminue. Voici un tableau montrant quelques cas de figure de manière schématique :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Schéma équivalent
      &lt;/th&gt;
      &lt;th&gt;
       Position du curseur
      &lt;/th&gt;
      &lt;th&gt;
       Tension sur la broche C
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;img alt="Curseur 50/50" src="./images/uploaded/tuto-arduino-401-les-entrées-analogiques-de-larduino/curseur-5050.jpg"/&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Curseur à
       &lt;strong&gt;
        la moitié
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;msub&gt;
              &lt;mi&gt;
               V
              &lt;/mi&gt;
              &lt;mrow&gt;
               &lt;mi&gt;
                s
               &lt;/mi&gt;
               &lt;mi&gt;
                i
               &lt;/mi&gt;
               &lt;mi&gt;
                g
               &lt;/mi&gt;
               &lt;mi&gt;
                n
               &lt;/mi&gt;
               &lt;mi&gt;
                a
               &lt;/mi&gt;
               &lt;mi&gt;
                l
               &lt;/mi&gt;
              &lt;/mrow&gt;
             &lt;/msub&gt;
             &lt;mo&gt;
              =
             &lt;/mo&gt;
             &lt;mo&gt;
              (
             &lt;/mo&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;mo&gt;
              −
             &lt;/mo&gt;
             &lt;mfrac&gt;
              &lt;mrow&gt;
               &lt;mn&gt;
                5
               &lt;/mn&gt;
               &lt;mn&gt;
                0
               &lt;/mn&gt;
              &lt;/mrow&gt;
              &lt;mrow&gt;
               &lt;mn&gt;
                1
               &lt;/mn&gt;
               &lt;mn&gt;
                0
               &lt;/mn&gt;
               &lt;mn&gt;
                0
               &lt;/mn&gt;
              &lt;/mrow&gt;
             &lt;/mfrac&gt;
             &lt;mo&gt;
              )
             &lt;/mo&gt;
             &lt;mo&gt;
              ×
             &lt;/mo&gt;
             &lt;mn&gt;
              5
             &lt;/mn&gt;
             &lt;mo&gt;
              =
             &lt;/mo&gt;
             &lt;mn&gt;
              2
             &lt;/mn&gt;
             &lt;mi mathvariant="normal"&gt;
              .
             &lt;/mi&gt;
             &lt;mn&gt;
              5
             &lt;/mn&gt;
             &lt;mi&gt;
              V
             &lt;/mi&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             V_{signal} = (1-\frac{50}{100})\times 5 = 2.5 V
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.845108em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
             V
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t vlist-t2"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.3361079999999999em;"&gt;
                &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    s
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    i
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight" style="margin-right:0.03588em;"&gt;
                    g
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    n
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    a
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight" style="margin-right:0.01968em;"&gt;
                    l
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
               &lt;span class="vlist-s"&gt;
                ​
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.286108em;"&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mrel"&gt;
            =
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mopen"&gt;
            (
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mbin"&gt;
            −
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mopen nulldelimiter"&gt;
            &lt;/span&gt;
            &lt;span class="mfrac"&gt;
             &lt;span class="vlist-t vlist-t2"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.845108em;"&gt;
                &lt;span style="top:-2.6550000000000002em;"&gt;
                 &lt;span class="pstrut" style="height:3em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    1
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    0
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    0
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span style="top:-3.15em;"&gt;
                 &lt;span class="pstrut" style="height:3em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="stretchy" style="height:0.2em;"&gt;
                  &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
                   &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
                   &lt;/path&gt;
                  &lt;/svg&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span style="top:-3.394em;"&gt;
                 &lt;span class="pstrut" style="height:3em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    5
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    0
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
               &lt;span class="vlist-s"&gt;
                ​
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.345em;"&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
            &lt;span class="mclose nulldelimiter"&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span class="mclose"&gt;
            )
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mbin"&gt;
            ×
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            5
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mrel"&gt;
            =
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            2
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            .
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            5
           &lt;/span&gt;
           &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
            V
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;img alt="Curseur 25/75" src="./images/uploaded/tuto-arduino-401-les-entrées-analogiques-de-larduino/curseur-2575.jpg"/&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Curseur à
       &lt;strong&gt;
        25% du départ
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;msub&gt;
              &lt;mi&gt;
               V
              &lt;/mi&gt;
              &lt;mrow&gt;
               &lt;mi&gt;
                s
               &lt;/mi&gt;
               &lt;mi&gt;
                i
               &lt;/mi&gt;
               &lt;mi&gt;
                g
               &lt;/mi&gt;
               &lt;mi&gt;
                n
               &lt;/mi&gt;
               &lt;mi&gt;
                a
               &lt;/mi&gt;
               &lt;mi&gt;
                l
               &lt;/mi&gt;
              &lt;/mrow&gt;
             &lt;/msub&gt;
             &lt;mo&gt;
              =
             &lt;/mo&gt;
             &lt;mo&gt;
              (
             &lt;/mo&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;mo&gt;
              −
             &lt;/mo&gt;
             &lt;mfrac&gt;
              &lt;mrow&gt;
               &lt;mn&gt;
                2
               &lt;/mn&gt;
               &lt;mn&gt;
                5
               &lt;/mn&gt;
              &lt;/mrow&gt;
              &lt;mrow&gt;
               &lt;mn&gt;
                1
               &lt;/mn&gt;
               &lt;mn&gt;
                0
               &lt;/mn&gt;
               &lt;mn&gt;
                0
               &lt;/mn&gt;
              &lt;/mrow&gt;
             &lt;/mfrac&gt;
             &lt;mo&gt;
              )
             &lt;/mo&gt;
             &lt;mo&gt;
              ×
             &lt;/mo&gt;
             &lt;mn&gt;
              5
             &lt;/mn&gt;
             &lt;mo&gt;
              =
             &lt;/mo&gt;
             &lt;mn&gt;
              3
             &lt;/mn&gt;
             &lt;mi mathvariant="normal"&gt;
              .
             &lt;/mi&gt;
             &lt;mn&gt;
              7
             &lt;/mn&gt;
             &lt;mn&gt;
              5
             &lt;/mn&gt;
             &lt;mi&gt;
              V
             &lt;/mi&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             V_{signal} = (1-\frac{25}{100})\times 5 = 3.75 V
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.845108em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
             V
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t vlist-t2"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.3361079999999999em;"&gt;
                &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    s
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    i
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight" style="margin-right:0.03588em;"&gt;
                    g
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    n
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    a
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight" style="margin-right:0.01968em;"&gt;
                    l
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
               &lt;span class="vlist-s"&gt;
                ​
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.286108em;"&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mrel"&gt;
            =
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mopen"&gt;
            (
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mbin"&gt;
            −
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mopen nulldelimiter"&gt;
            &lt;/span&gt;
            &lt;span class="mfrac"&gt;
             &lt;span class="vlist-t vlist-t2"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.845108em;"&gt;
                &lt;span style="top:-2.6550000000000002em;"&gt;
                 &lt;span class="pstrut" style="height:3em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    1
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    0
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    0
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span style="top:-3.15em;"&gt;
                 &lt;span class="pstrut" style="height:3em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="stretchy" style="height:0.2em;"&gt;
                  &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
                   &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
                   &lt;/path&gt;
                  &lt;/svg&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span style="top:-3.394em;"&gt;
                 &lt;span class="pstrut" style="height:3em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    2
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    5
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
               &lt;span class="vlist-s"&gt;
                ​
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.345em;"&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
            &lt;span class="mclose nulldelimiter"&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span class="mclose"&gt;
            )
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mbin"&gt;
            ×
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            5
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mrel"&gt;
            =
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            3
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            .
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            7
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            5
           &lt;/span&gt;
           &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
            V
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;img alt="Curseur 75/25" src="./images/uploaded/tuto-arduino-401-les-entrées-analogiques-de-larduino/curseur-7525.jpg"/&gt;
      &lt;/td&gt;
      &lt;td&gt;
       Curseur à
       &lt;strong&gt;
        75% du départ
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;msub&gt;
              &lt;mi&gt;
               V
              &lt;/mi&gt;
              &lt;mrow&gt;
               &lt;mi&gt;
                s
               &lt;/mi&gt;
               &lt;mi&gt;
                i
               &lt;/mi&gt;
               &lt;mi&gt;
                g
               &lt;/mi&gt;
               &lt;mi&gt;
                n
               &lt;/mi&gt;
               &lt;mi&gt;
                a
               &lt;/mi&gt;
               &lt;mi&gt;
                l
               &lt;/mi&gt;
              &lt;/mrow&gt;
             &lt;/msub&gt;
             &lt;mo&gt;
              =
             &lt;/mo&gt;
             &lt;mo&gt;
              (
             &lt;/mo&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;mo&gt;
              −
             &lt;/mo&gt;
             &lt;mfrac&gt;
              &lt;mrow&gt;
               &lt;mn&gt;
                7
               &lt;/mn&gt;
               &lt;mn&gt;
                5
               &lt;/mn&gt;
              &lt;/mrow&gt;
              &lt;mrow&gt;
               &lt;mn&gt;
                1
               &lt;/mn&gt;
               &lt;mn&gt;
                0
               &lt;/mn&gt;
               &lt;mn&gt;
                0
               &lt;/mn&gt;
              &lt;/mrow&gt;
             &lt;/mfrac&gt;
             &lt;mo&gt;
              )
             &lt;/mo&gt;
             &lt;mo&gt;
              ×
             &lt;/mo&gt;
             &lt;mn&gt;
              5
             &lt;/mn&gt;
             &lt;mo&gt;
              =
             &lt;/mo&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;mi mathvariant="normal"&gt;
              .
             &lt;/mi&gt;
             &lt;mn&gt;
              2
             &lt;/mn&gt;
             &lt;mn&gt;
              5
             &lt;/mn&gt;
             &lt;mi&gt;
              V
             &lt;/mi&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             V_{signal} = (1-\frac{75}{100})\times 5 = 1.25 V
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.845108em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
             V
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t vlist-t2"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.3361079999999999em;"&gt;
                &lt;span style="top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    s
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    i
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight" style="margin-right:0.03588em;"&gt;
                    g
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    n
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight"&gt;
                    a
                   &lt;/span&gt;
                   &lt;span class="mord mathit mtight" style="margin-right:0.01968em;"&gt;
                    l
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
               &lt;span class="vlist-s"&gt;
                ​
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.286108em;"&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mrel"&gt;
            =
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mopen"&gt;
            (
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mbin"&gt;
            −
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mopen nulldelimiter"&gt;
            &lt;/span&gt;
            &lt;span class="mfrac"&gt;
             &lt;span class="vlist-t vlist-t2"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.845108em;"&gt;
                &lt;span style="top:-2.6550000000000002em;"&gt;
                 &lt;span class="pstrut" style="height:3em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    1
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    0
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    0
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span style="top:-3.15em;"&gt;
                 &lt;span class="pstrut" style="height:3em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="stretchy" style="height:0.2em;"&gt;
                  &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
                   &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
                   &lt;/path&gt;
                  &lt;/svg&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span style="top:-3.394em;"&gt;
                 &lt;span class="pstrut" style="height:3em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    7
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    5
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
               &lt;span class="vlist-s"&gt;
                ​
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.345em;"&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
            &lt;span class="mclose nulldelimiter"&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span class="mclose"&gt;
            )
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mbin"&gt;
            ×
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            5
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mrel"&gt;
            =
           &lt;/span&gt;
           &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            .
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            2
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            5
           &lt;/span&gt;
           &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
            V
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Illustrations de la position du curseur et sa tension résultante
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si vous souhaitez avoir plus d’informations sur les résistances et leurs associations ainsi que sur les potentiomètres, je vous conseille d’aller jeter un œil sur
   &lt;a href="http://fr.openclassrooms.com/sciences/cours/l-electronique-de-zero/resistance-et-resistor"&gt;
    ce chapitre
   &lt;/a&gt;
   .
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/ELDDp_dOEC4" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="cas-n°2-la-résistance-variable"&gt;
 &lt;a aria-hidden="true" href="#cas-n°2-la-résistance-variable"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Cas n°2 : la résistance variable
&lt;/h5&gt;
&lt;p&gt;
 Le deuxième cas d’utilisation du potentiomètre est la
 &lt;strong&gt;
  résistance variable
 &lt;/strong&gt;
 . Cette configuration est très simple, il suffit d’utiliser le potentiomètre comme une simple résistance dont les bornes sont A et C ou B et C. On pourra alors faire varier la valeur ohmique de la résistance grâce à l’axe du potentiomètre.
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Attention, il existe des potentiomètres
   &lt;strong&gt;
    linéaires
   &lt;/strong&gt;
   (la valeur de la tension évolue de manière proportionnelle au déplacement du curseur), mais aussi des potentiomètres
   &lt;strong&gt;
    logarithmique/anti-logarithmique
   &lt;/strong&gt;
   (la valeur de la tension évolue de manière logarithmique ou anti-logarithmique par rapport à la position du curseur). Choisissez-en dont un qui est linéaire si vous souhaitez avoir une proportionnalité.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/fj7qhNn0cEc" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="utilisation-avec-arduino"&gt;
 &lt;a aria-hidden="true" href="#utilisation-avec-arduino"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utilisation avec Arduino
&lt;/h4&gt;
&lt;p&gt;
 Vous allez voir que l’utilisation avec Arduino n’est pas vraiment compliquée. Il va nous suffire de raccorder les alimentations sur les bornes extrêmes du potentiomètre, puis de relier la broche du milieu sur une entrée analogique de la carte Arduino :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Potentiomètre - Schéma" src="./images/uploaded/tuto-arduino-401-les-entrées-analogiques-de-larduino/potentiometre-schema.png"/&gt;
 &lt;figcaption&gt;
  Potentiomètre - Schéma
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Potentiomètre - Montage" src="./images/uploaded/tuto-arduino-401-les-entrées-analogiques-de-larduino/potentiometre-montage.png"/&gt;
 &lt;figcaption&gt;
  Potentiomètre - Montage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Une fois le raccordement fait, nous allons faire un petit programme pour tester cela. Ce programme va simplement effectuer une mesure de la tension obtenue sur le potentiomètre, puis envoyer la valeur lue sur la liaison série (ça nous fera réviser
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 ). Dans l’ordre, voici les choses à faire :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Déclarer la broche analogique utilisée (pour faire du code propre
 &lt;/li&gt;
 &lt;li&gt;
  Mesurer la valeur
 &lt;/li&gt;
 &lt;li&gt;
  L’afficher !
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Je vous laisse chercher ? Aller, au boulot !
 &lt;img alt=":diable:" class="smiley" src="./static/smileys/diable.png"/&gt;
 … Voici la correction, c’est le programme que j’ai fait, peut-être que le vôtre sera mieux :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// le potentiomètre, branché sur la broche analogique 0&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; potar = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// variable pour stocker la valeur lue après conversion&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; valeurLue;
&lt;span class="hljs-comment"&gt;// on convertit cette valeur en une tension&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; tension;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on se contente de démarrer la liaison série&lt;/span&gt;
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on convertit en nombre binaire la tension lue en sortie du potentiomètre&lt;/span&gt;
    valeurLue = analogRead(potar);

    &lt;span class="hljs-comment"&gt;// on traduit la valeur brute en tension (produit en croix)&lt;/span&gt;
    tension = valeurLue * &lt;span class="hljs-number"&gt;5.0&lt;/span&gt; / &lt;span class="hljs-number"&gt;1023&lt;/span&gt;;

    &lt;span class="hljs-comment"&gt;// on affiche la valeur lue sur la liaison série&lt;/span&gt;
    Serial.print(&lt;span class="hljs-string"&gt;"valeurLue = "&lt;/span&gt;);
    Serial.println(valeurLue);

    &lt;span class="hljs-comment"&gt;// on affiche la tension calculée&lt;/span&gt;
    Serial.print(&lt;span class="hljs-string"&gt;"Tension = "&lt;/span&gt;);
    Serial.print(tension,&lt;span class="hljs-number"&gt;2&lt;/span&gt;);
    Serial.println(&lt;span class="hljs-string"&gt;" V"&lt;/span&gt;);

    &lt;span class="hljs-comment"&gt;// on saute une ligne entre deux affichages&lt;/span&gt;
    Serial.println();
    &lt;span class="hljs-comment"&gt;// on attend une demi-seconde pour que l'affichage ne soit pas trop rapide&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;500&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Voltmètre simple
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Vous venez de créer votre premier voltmètre !
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
&lt;/p&gt;
&lt;p&gt;
 Simulation équivalente :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/krCu0Cc8OmC" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="une-meilleure-précision"&gt;
 &lt;a aria-hidden="true" href="#une-meilleure-précision"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Une meilleure précision ?
&lt;/h3&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Est-il possible d’améliorer la précision du convertisseur ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voilà une question intéressante à laquelle je répondrai qu’il existe deux solutions plus ou moins faciles à mettre en œuvre.
&lt;/p&gt;
&lt;h4 id="solution-1-modifier-la-plage-dentrée-du-convertisseur"&gt;
 &lt;a aria-hidden="true" href="#solution-1-modifier-la-plage-dentrée-du-convertisseur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Solution 1 : modifier la plage d’entrée du convertisseur
&lt;/h4&gt;
&lt;p&gt;
 C’est la solution la plus simple ! Voyons deux choses…
&lt;/p&gt;
&lt;h5 id="tension-de-référence-interne"&gt;
 &lt;a aria-hidden="true" href="#tension-de-référence-interne"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Tension de référence interne
&lt;/h5&gt;
&lt;p&gt;
 Le micro-contrôleur de l’Arduino possède plusieurs tensions de référence utilisables selon la plage de variation de la tension que l’on veut mesurer. Prenons une tension, en sortie d’un capteur, qui variera entre 0V et 1V et jamais au delà. Par défaut, la mesure se fera entre 0 et 5V sur 1024 niveaux (soit une précision de 4.88 mV). Ce qui veut dire qu’on aura seulement les 204 premiers niveaux d’utiles puisque tout le reste correspondra à plus d’un volt. Pour améliorer la précision de lecture, on va réduire la plage de mesure d’entrée du convertisseur analogique - &amp;gt; numérique en réduisant la tension de référence utilisée (initialement 5V). Pour cela, rien de matériel, tout se passe au niveau du programme puisqu’il y a une fonction qui existe :
 &lt;a href="http://arduino.cc/en/Reference/AnalogReference"&gt;
  &lt;code&gt;
   analogReference()
  &lt;/code&gt;
 &lt;/a&gt;
 . Cette fonction prend en paramètre le nom de la référence à utiliser :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  DEFAULT : La référence de 5V par défaut (ou 3,3V pour les cartes Arduino fonctionnant sous cette tension, telle la Due)
 &lt;/li&gt;
 &lt;li&gt;
  INTERNAL : Une référence interne de 1.1V (pour la Arduino Uno)
 &lt;/li&gt;
 &lt;li&gt;
  INTERNAL1V1 : Comme ci-dessus mais pour la Arduino Mega
 &lt;/li&gt;
 &lt;li&gt;
  INTERNAL2V56 : Une référence de 2.56V (uniquement pour la Mega)
 &lt;/li&gt;
 &lt;li&gt;
  EXTERNAL : La référence sera celle appliquée sur la broche ARef
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Dans notre cas, le plus intéressant sera de prendre la valeur INTERNAL pour pouvoir faire des mesures entre 0 et 1.1V. Ainsi, on aura 1024 niveaux ce qui nous fera une précision de 1.07mV. C’est bien meilleur ! Le code est à placer dans la fonction setup() de votre programme :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// permet de choisir une tension de référence de 1.1V&lt;/span&gt;
    analogReference(INTERNAL);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Changement de la référence : INTERNAL
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="tension-de-référence-externe"&gt;
 &lt;a aria-hidden="true" href="#tension-de-référence-externe"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Tension de référence externe
&lt;/h5&gt;
&lt;p&gt;
 Maintenant que se passe t’il si notre mesure devait être faite entre 0 et 3V ? On ne pourrait plus utiliser INTERNA1V1 puisqu’on dépasse les 1.1V. On risquerais alors de griller le comparateur. Dans le cas d’une Arduino Mega, on ne peut pas non plus utiliser INTERNAL2V56 puisqu’on dépasse les 2.56V. Nous allons donc ruser en prenant une référence externe à l’aide de la valeur EXTERNAL comme ceci :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// permet de choisir une tension de référence externe à la carte&lt;/span&gt;
    analogReference(EXTERNAL);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Changement de la référence : EXTERNAL
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ensuite, il ne restera plus qu’à apporter une tension de référence supérieur à 3V sur la broche ARef de la carte pour obtenir notre nouvelle référence.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Astuce : la carte Arduino produit une tension de 3.3V (à côté de la tension 5V). Vous pouvez donc utiliser cette tension directement pour la tension de référence du convertisseur.
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
   Il suffit pour cela de relier avec un fil la sortie indiquée 3.3V à l’entrée AREF.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-danger"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Attention cependant, la tension maximale de référence
   &lt;strong&gt;
    ne peut être supérieure à +5V
   &lt;/strong&gt;
   et
   &lt;strong&gt;
    la minimale inférieure à 0V
   &lt;/strong&gt;
   . En revanche, toutes les tensions comprises entre ces deux valeurs sont acceptables.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Mais, si je veux que ma tension d’entrée puisse varier au-delà de +5V, comment je fais ? Y a-t-il un moyen d’y parvenir ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Oui, voyez ce qui suit…
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Schéma du pont diviseur de tension" src="./images/uploaded/tuto-arduino-401-les-entrées-analogiques-de-larduino/schema-du-pont-diviseur-de-tension.png"/&gt;
 &lt;figcaption&gt;
  Schéma du pont diviseur de tension
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="solution-2-utiliser-un-pont-diviseur-de-tension"&gt;
 &lt;a aria-hidden="true" href="#solution-2-utiliser-un-pont-diviseur-de-tension"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Solution 2 : utiliser un pont diviseur de tension
&lt;/h4&gt;
&lt;p&gt;
 Nous avons vu cela à la partie précédente avec le potentiomètre. Il s’agit en fait de diviser votre signal par un certain ratio afin de l’adapter aux contraintes d’entrées du convertisseur. Par exemple, imaginons que nous ayons une mesure à faire sur un appareil qui délivre une tension comprise entre 0 et 10V. Cela ne nous arrange pas puisque nous ne sommes capable de lire des valeurs qu’entre 0 et 5V. Nous allons donc diviser cette mesure par deux afin de pouvoir la lire sans risque. Pour cela, on utilisera deux résistances de valeur identique (2 fois
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mi&gt;
        k
       &lt;/mi&gt;
       &lt;mi mathvariant="normal"&gt;
        Ω
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       10 k\Omega
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.69444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.69444em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.03148em;"&gt;
      k
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      Ω
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 par exemple) pour faire un pont diviseur de tension. La tension à mesurer rentre dans le pont (
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        U
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       U
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
      U
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 sur le schéma ci-contre) et la tension mesurable sort au milieu du pont (tension
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         U
        &lt;/mi&gt;
        &lt;mi&gt;
         s
        &lt;/mi&gt;
       &lt;/msub&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       U_s
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
       U
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.151392em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mathit mtight"&gt;
             s
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 ). Il ne reste plus qu’à connecter la sortie du pont à une entrée analogique de la carte Arduino et lire la valeur de la tension de sortie.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Libre à vous de modifier les valeurs des résistances du pont diviseur de tension pour faire rentrer des tensions différentes (même au delà de 10V !). Attention cependant à ne pas dépasser les +5V en sortie du pont !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="solution-3-utiliser-un-can-externe"&gt;
 &lt;a aria-hidden="true" href="#solution-3-utiliser-un-can-externe"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Solution 3 : utiliser un
 &lt;abbr title="Convertisseur Analogique Numérique"&gt;
  CAN
 &lt;/abbr&gt;
 externe
&lt;/h4&gt;
&lt;p&gt;
 La deuxième solution consisterait simplement en l’utilisation d’un convertisseur analogique -&amp;gt; numérique externe. A vous de choisir le bon. Il en existe beaucoup, ce qu’il faut principalement regarder c’est :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  la
  &lt;strong&gt;
   précision
  &lt;/strong&gt;
  (10 bits pour Arduino, existe d’autre en 12bits, 16bits, …)
 &lt;/li&gt;
 &lt;li&gt;
  la
  &lt;strong&gt;
   vitesse d’acquisition
  &lt;/strong&gt;
  (celui d’Arduino est à une vitesse de 100µs)
 &lt;/li&gt;
 &lt;li&gt;
  le
  &lt;strong&gt;
   mode de transfert
  &lt;/strong&gt;
  de la lecture (liaison série, I²C, …)
 &lt;/li&gt;
 &lt;li&gt;
  le
  &lt;strong&gt;
   nombre d’entrées
  &lt;/strong&gt;
  (6 sur Arduino Uno)
 &lt;/li&gt;
 &lt;li&gt;
  la
  &lt;strong&gt;
   tension d’entrée
  &lt;/strong&gt;
  maximale et minimale (max +5V et min 0V)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="solution-4-modifier-la-fréquence-de-fonctionnement-de-ladc"&gt;
 &lt;a aria-hidden="true" href="#solution-4-modifier-la-fréquence-de-fonctionnement-de-ladc"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Solution 4 : Modifier la fréquence de fonctionnement de l’ADC
&lt;/h4&gt;
&lt;p&gt;
 Cette solution et ses limites sont illustrées dans
 &lt;a href="https://zestedesavoir.com/billets/2068/arduino-accelerer-analogread/"&gt;
  ce billet de Titi_Alone
 &lt;/a&gt;
 . C’est une manipulation un peu plus avancée qui fera appel à la manipulation de registres internes au microcontrôleur de l’Arduino. Les paramètres de base devraient cependant convenir à la majorité de vos applications.
&lt;/p&gt;
&lt;p&gt;
 Au programme :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Le prochain chapitre est un TP faisant usage de ces voies analogiques
 &lt;/li&gt;
 &lt;li&gt;
  Le chapitre qui le suit est un chapitre qui vous permettra de créer des tensions analogiques avec votre carte Arduino, idéal pour mettre en œuvre la deuxième solution d’amélioration de la précision de lecteur du convertisseur !
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 En somme, ce chapitre vous a permis de vous familiariser un peu avec les tensions analogiques, ce qui vous permettra par la suite de gérer plus facilement les grandeurs renvoyées par des capteurs quelconques.
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>[TP] Vu-mètre à LED</title><link href="https://eskimon.fr/tuto-arduino-402-tp-vu-m%C3%A8tre-%C3%A0-led" rel="alternate"></link><published>2013-12-11T18:14:00+01:00</published><updated>2013-12-11T18:14:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-11:/tuto-arduino-402-tp-vu-mètre-à-led</id><summary type="html">&lt;p&gt;
 On commence cette partie sur l’analogique sur les chapeaux de roues en réalisant tout de suite notre premier TP. Ce dernier n’est pas très compliqué, à condition que vous ayez suivi correctement le tuto et que vous n’ayez pas oublié les bases des parties précédentes !
 &lt;img alt=":p" class="smiley" src="./static/smileys/langue.png"/&gt;
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#consigne"&gt;
    Consigne …&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;
 On commence cette partie sur l’analogique sur les chapeaux de roues en réalisant tout de suite notre premier TP. Ce dernier n’est pas très compliqué, à condition que vous ayez suivi correctement le tuto et que vous n’ayez pas oublié les bases des parties précédentes !
 &lt;img alt=":p" class="smiley" src="./static/smileys/langue.png"/&gt;
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#consigne"&gt;
    Consigne
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#vu-mètre-ça-vous-parle"&gt;
       Vu-mètre, ça vous parle ?
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#objectif"&gt;
       Objectif
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#correction"&gt;
    Correction !
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#schéma-électronique"&gt;
     Schéma électronique
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#le-code"&gt;
      Le code
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#variables-globales-et-setup"&gt;
       Variables globales et setup
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#boucle-principale"&gt;
       Boucle principale
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#fonction-daffichage"&gt;
       Fonction d’affichage
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#amélioration"&gt;
   Amélioration
  &lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="consigne"&gt;
 &lt;a aria-hidden="true" href="#consigne"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Consigne
&lt;/h3&gt;
&lt;h5 id="vu-mètre-ça-vous-parle"&gt;
 &lt;a aria-hidden="true" href="#vu-mètre-ça-vous-parle"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Vu-mètre, ça vous parle ?
&lt;/h5&gt;
&lt;p&gt;
 Dans ce TP, nous allons réaliser un
 &lt;strong&gt;
  vu-mètre
 &lt;/strong&gt;
 . Même si le nom ne vous dit rien, je suis sur que vous en avez déjà rencontré. Par exemple, sur une chaîne hi-fi ou sur une table de mixage on voit souvent des loupiotes s’allumer en fonction du volume de la note joué. Et bien c’est ça un vu-mètre, c’est un système d’affichage sur plusieurs LED, disposées en ligne, qui permettent d’avoir un retour visuel sur une information analogique (dans l’exemple, ce sera le volume).
&lt;/p&gt;
&lt;h5 id="objectif"&gt;
 &lt;a aria-hidden="true" href="#objectif"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Objectif
&lt;/h5&gt;
&lt;p&gt;
 Pour l’exercice, nous allons réaliser la visualisation d’une tension. Cette dernière sera donnée par un potentiomètre et sera affichée sur 10 LED. Lorsque le potentiomètre sera à 0V, on allumera 0 LED, puis lorsqu’il sera au maximum on les allumera toutes. Pour les valeurs comprises entre 0 et 5V, elles devront allumer les LED proportionnellement. Voilà, ce n’est pas plus compliqué que ça. Comme d’habitude voici une petite vidéo vous montrant le résultat attendu et bien entendu …
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;p&gt;
  &lt;strong&gt;
   BON COURAGE !
  &lt;/strong&gt;
 &lt;/p&gt;
&lt;/div&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/UkmQEM_5ZIE" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Là encore, le montage sans code est disponible dans un simulateur avant la correction du programme.
&lt;/p&gt;
&lt;h3 id="correction"&gt;
 &lt;a aria-hidden="true" href="#correction"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Correction !
&lt;/h3&gt;
&lt;p&gt;
 J’espère que tout c’est bien passé pour vous et que l’affichage cartonne ! Voici maintenant venu l’heure de la correction, en espérant que vous n’en aurez pas besoin et que vous la consulterez juste pour votre culture.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 Comme d’habitude nous allons commencer par voir le schéma puis ensuite nous étudierons le code.
&lt;/p&gt;
&lt;h4 id="schéma-électronique"&gt;
 &lt;a aria-hidden="true" href="#schéma-électronique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Schéma électronique
&lt;/h4&gt;
&lt;p&gt;
 Le schéma n’est pas très difficile. Nous allons retrouver 10 LEDs et leurs résistances de limitations de courant branchées sur 10 broches de l’Arduino (histoire d’être original nous utiliserons 2 à 11). Ensuite, nous brancherons un potentiomètre entre le +5V et la masse. Sa broche centrale, qui donne la tension variable sera connectée à l’entrée analogique 0 de l’Arduino. Voici le schéma obtenu :
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="text-center"&gt;
   &lt;p&gt;
    &lt;img alt="Vumètre - Schéma" src="./images/uploaded/tuto-arduino-402-tp-vu-mètre-à-led/vumetre-schema.png"/&gt;
   &lt;/p&gt;
   &lt;figure&gt;
    &lt;img alt="Vumètre - Montage" src="./images/uploaded/tuto-arduino-402-tp-vu-mètre-à-led/vumetre-montage.png"/&gt;
    &lt;figcaption&gt;
     Vumètre - Montage
    &lt;/figcaption&gt;
   &lt;/figure&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voici le montage sans code pour ceux qui souhaite juste faire le programme.
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/0p9Z2RvXNzO" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="le-code"&gt;
 &lt;a aria-hidden="true" href="#le-code"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le code
&lt;/h4&gt;
&lt;p&gt;
 Là encore vous commencez à avoir l’habitude, nous allons d’abord étudier le code des variables globales (pourquoi elles existent ?), voir la fonction setup(), puis enfin étudier la boucle principale et les fonctions annexes utilisées.
&lt;/p&gt;
&lt;h5 id="variables-globales-et-setup"&gt;
 &lt;a aria-hidden="true" href="#variables-globales-et-setup"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Variables globales et setup
&lt;/h5&gt;
&lt;p&gt;
 Dans ce TP nous utilisons 10 LEDs, ce qui représente autant de sorties sur la carte Arduino donc autant de "const int …" à écrire. Afin de ne pas se fatiguer de trop, nous allons déclarer un tableau de "const int" plutôt que de copier/coller 10 fois la même ligne. Ensuite, nous allons déclarer la broche analogique sur laquelle sera branché le potentiomètre. Enfin, nous déclarons une variable pour stocker la tension mesurée sur le potentiomètre. Et c’est tout pour les déclarations !
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Déclaration et remplissage du tableau...&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// ...représentant les broches des LEDs&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; leds[&lt;span class="hljs-number"&gt;10&lt;/span&gt;] = {&lt;span class="hljs-number"&gt;2&lt;/span&gt;,&lt;span class="hljs-number"&gt;3&lt;/span&gt;,&lt;span class="hljs-number"&gt;4&lt;/span&gt;,&lt;span class="hljs-number"&gt;5&lt;/span&gt;,&lt;span class="hljs-number"&gt;6&lt;/span&gt;,&lt;span class="hljs-number"&gt;7&lt;/span&gt;,&lt;span class="hljs-number"&gt;8&lt;/span&gt;,&lt;span class="hljs-number"&gt;9&lt;/span&gt;,&lt;span class="hljs-number"&gt;10&lt;/span&gt;,&lt;span class="hljs-number"&gt;11&lt;/span&gt;};
&lt;span class="hljs-comment"&gt;// le potentiomètre sera branché sur la broche analogique 0&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; potar = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// variable stockant la tension mesurée&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; tension = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  TP Vumètre, les variables
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Une fois que l’on à fait ces déclarations, il ne nous reste plus qu’à déclarer les broches en sortie et à les mettre à l’état HAUT pour éteindre les LEDs. Pour faire cela de manière simple (au lieu de 10 copier/coller), nous allons utiliser une boucle for pour effectuer l’opérations 10 fois (afin d’utiliser la puissance du tableau).
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(i = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class="hljs-number"&gt;10&lt;/span&gt;; i++)
    {
        &lt;span class="hljs-comment"&gt;// déclaration de la broche en sortie&lt;/span&gt;
        pinMode(leds[i], OUTPUT);
        &lt;span class="hljs-comment"&gt;// mise à l'état haut&lt;/span&gt;
        digitalWrite(leds[i], HIGH);
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  TP Vumètre, le
  &lt;code&gt;
   setup
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="boucle-principale"&gt;
 &lt;a aria-hidden="true" href="#boucle-principale"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Boucle principale
&lt;/h5&gt;
&lt;p&gt;
 Alors là vous allez peut-être être surpris mais nous allons avoir une fonction principale super light. En effet, elle ne va effectuer que deux opérations : Mesurer la tension du potentiomètre, puis appeler une fonction d’affichage pour faire le rendu visuel de cette tension. Voici ces deux lignes de code :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on récupère la valeur de la tension du potentiomètre&lt;/span&gt;
    tension = analogRead(potar);
    &lt;span class="hljs-comment"&gt;// et on affiche sur les LEDs cette tension&lt;/span&gt;
    afficher(tension);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  TP Vumètre, la
  &lt;code&gt;
   loop
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Encore plus fort, la même écriture mais en une seule ligne !
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// la même chose qu'avant même en une seule ligne !&lt;/span&gt;
    afficher(analogRead(potar));
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="fonction-daffichage"&gt;
 &lt;a aria-hidden="true" href="#fonction-daffichage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Fonction d’affichage
&lt;/h5&gt;
&lt;p&gt;
 Alors certes la fonction principale est très légère, mais ce n’est pas une raison pour ne pas avoir un peu de code autre part. En effet, le gros du traitement va se faire dans la fonction d’affichage, qui, comme son nom et ses arguments l’indiquent, va servir à afficher sur les LEDs la tension mesurée. Le but de cette dernière sera d’allumer les LEDs de manière proportionnelle à la tension mesuré. Par exemple, si la tension mesuré vaut 2,5V (sur 5V max) on allumera 5 LEDs (sur 10). Si la tension vaut 5V, on les allumera toutes. Je vais maintenant vous montrer une astuce toute simple qui va tirer pleinement parti du tableau de broches créé tout au début. Tout d’abord, mettons-nous d’accord. Lorsque l’on fait une mesure analogique, la valeur retournée est comprise entre 0 et 1023. Ce que je vous propose, c’est donc d’allumer une LED par tranche de 100 unités. Par exemple, si la valeur est comprise entre 0 et 100, une seule LED est allumée. Ensuite, entre 100 et 200, on allume une LED supplémentaire, etc. Pour une valeur entre 700 et 800 on allumera donc… 8 LEDs, bravo à ceux qui suivent ! :s Ce comportement va donc s’écrire simplement avec une boucle for, qui va incrémenter une variable i de 0 à 10. Dans cette boucle, nous allons tester si la valeur (image de la tension) est inférieure à i multiplier par 100 (ce qui représentera nos différents pas). Si le test vaut VRAI, on allume la LED i, sinon on l’éteint. Démonstration :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;afficher&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; valeur)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(i=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class="hljs-number"&gt;10&lt;/span&gt;; i++)
    {
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(valeur &amp;gt; (i*&lt;span class="hljs-number"&gt;100&lt;/span&gt;))
            digitalWrite(leds[i], LOW); &lt;span class="hljs-comment"&gt;// on allume la LED&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
            digitalWrite(leds[i], HIGH); &lt;span class="hljs-comment"&gt;// ou on éteint la LED&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  TP Vumètre, fonction d’affichage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Et voici la correction interactive :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/3hkd88VWgaG" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="amélioration"&gt;
 &lt;a aria-hidden="true" href="#amélioration"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Amélioration
&lt;/h3&gt;
&lt;p&gt;
 Si jamais vous avez trouvé l’exercice trop facile, pourquoi ne pas faire un peu de zèle en réalisant carrément un mini-voltmètre en affichant sur deux afficheurs 7 segments une tension mesurée (un afficheur pour les Volts et un autre pour la première décimale) ? Ceci n’est qu’une idée d’amélioration, la solution sera donnée, commentée, mais pas expliquée en détail car vous devriez maintenant avoir tout le savoir pour la comprendre. L’exercice est juste là pour vous entraîner et pour vous inspirer avec un nouveau montage.
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/mInJ5Uz7BH8" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// les broches du décodeur 7 segments&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_A = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_B = &lt;span class="hljs-number"&gt;3&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_C = &lt;span class="hljs-number"&gt;4&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_D = &lt;span class="hljs-number"&gt;5&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// les broches des transistors pour l'afficheur des dizaines et des unités&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; alim_dizaine = &lt;span class="hljs-number"&gt;6&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; alim_unite = &lt;span class="hljs-number"&gt;7&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// la broche du potar&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; potar = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; tension = &lt;span class="hljs-number"&gt;0.0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// tension mise en forme&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; val = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// tension brute lue (0 à 1023)&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;bool&lt;/span&gt; afficheur = &lt;span class="hljs-literal"&gt;false&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;long&lt;/span&gt; temps;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// Les broches sont toutes des sorties (sauf les boutons)&lt;/span&gt;
    pinMode(bit_A, OUTPUT);
    pinMode(bit_B, OUTPUT);
    pinMode(bit_C, OUTPUT);
    pinMode(bit_D, OUTPUT);
    pinMode(alim_dizaine, OUTPUT);
    pinMode(alim_unite, OUTPUT);

    &lt;span class="hljs-comment"&gt;// Les broches sont toutes mise à l'état bas (sauf led rouge éteinte)&lt;/span&gt;
    digitalWrite(bit_A, LOW);
    digitalWrite(bit_B, LOW);
    digitalWrite(bit_C, LOW);
    digitalWrite(bit_D, LOW);
    digitalWrite(alim_dizaine, LOW);
    digitalWrite(alim_unite, LOW);
    temps = millis(); &lt;span class="hljs-comment"&gt;// enregistre "l'heure"&lt;/span&gt;
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on fait la lecture analogique&lt;/span&gt;
    val = analogRead(potar);
    &lt;span class="hljs-comment"&gt;// mise en forme de la valeur lue&lt;/span&gt;
    tension = val * &lt;span class="hljs-number"&gt;5&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// simple regle de trois pour la conversion ( *5/1023)&lt;/span&gt;
    tension = tension / &lt;span class="hljs-number"&gt;1023&lt;/span&gt;;
    &lt;span class="hljs-comment"&gt;// à ce stade on a une valeur de type 3.452 Volts...&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// que l'on va multiplier par 10 pour afficher avec les vieilles fonctions&lt;/span&gt;
    tension = tension*&lt;span class="hljs-number"&gt;10&lt;/span&gt;;

    &lt;span class="hljs-comment"&gt;// si ca fait plus de 10 ms qu'on affiche, on change de 7 segments&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;((millis() - temps) &amp;gt; &lt;span class="hljs-number"&gt;10&lt;/span&gt;)
    {
        &lt;span class="hljs-comment"&gt;// on inverse la valeur de "afficheur"&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// pourchanger d'afficheur (unité ou dizaine)&lt;/span&gt;
        afficheur = !afficheur;
        &lt;span class="hljs-comment"&gt;// on affiche&lt;/span&gt;
        afficher_nombre(tension, afficheur);
        temps = millis(); &lt;span class="hljs-comment"&gt;// on met à jour le temps&lt;/span&gt;
    }
}

&lt;span class="hljs-comment"&gt;// fonction permettant d'afficher un nombre&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;afficher_nombre&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; nombre, &lt;span class="hljs-keyword"&gt;bool&lt;/span&gt; afficheur)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; temps;
    &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; unite = &lt;span class="hljs-number"&gt;0&lt;/span&gt;, dizaine = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(nombre &amp;gt; &lt;span class="hljs-number"&gt;9&lt;/span&gt;)
        dizaine = nombre / &lt;span class="hljs-number"&gt;10&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// on recupere les dizaines&lt;/span&gt;
    unite = nombre - (dizaine*&lt;span class="hljs-number"&gt;10&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// on recupere les unités&lt;/span&gt;

    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(afficheur)
    {
        &lt;span class="hljs-comment"&gt;// on affiche les dizaines&lt;/span&gt;
        digitalWrite(alim_unite, LOW);
        digitalWrite(alim_dizaine, HIGH);
        afficher(dizaine);
    }
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
    {
        &lt;span class="hljs-comment"&gt;// on affiche les unités&lt;/span&gt;
        digitalWrite(alim_dizaine, LOW);
        digitalWrite(alim_unite, HIGH);
        afficher(unite);
    }
}

&lt;span class="hljs-comment"&gt;// fonction écriveant sur un seul afficheur&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;afficher&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; chiffre)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on commence par écrire 0, donc tout à l'état bas&lt;/span&gt;
    digitalWrite(bit_A, LOW);
    digitalWrite(bit_B, LOW);
    digitalWrite(bit_C, LOW);
    digitalWrite(bit_D, LOW);

    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;8&lt;/span&gt;)
    {
        digitalWrite(bit_D, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;8&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;4&lt;/span&gt;)
    {
        digitalWrite(bit_C, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;4&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;2&lt;/span&gt;)
    {
        digitalWrite(bit_B, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;1&lt;/span&gt;)
    {
        digitalWrite(bit_A, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;1&lt;/span&gt;;
    }
    &lt;span class="hljs-comment"&gt;// Et voilà !!&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous savez maintenant comment utiliser et afficher des valeurs analogiques externes à la carte Arduino. En approfondissant vos recherches et vos expérimentations, vous pourrez certainement faire pas mal de choses telles qu’un robot en associant des capteurs et des actionneurs à la carte, des appareils de mesures (Voltmètre, Ampèremètre, Oscilloscope, etc.). Je compte sur vous pour créer par vous-même !
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 Direction, le prochain chapitre où vous découvrirez comment faire une conversion numérique -&amp;gt; analogique…
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Et les sorties “analogiques”, enfin… presque !</title><link href="https://eskimon.fr/tuto-arduino-403-et-les-sorties-analogiques-enfin-presque" rel="alternate"></link><published>2013-12-11T18:14:00+01:00</published><updated>2013-12-11T18:14:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-11:/tuto-arduino-403-et-les-sorties-analogiques-enfin-presque</id><summary type="html">&lt;p&gt;
 Vous vous souvenez du premier chapitre de cette partie ? Oui, lorsque je vous parlais de convertir une grandeur analogique (tension) en une donnée numérique. Eh bien là, il va s’agir de faire l’opération inverse. Comment ? C’est ce que nous allons voir. Je peux vous dire que ça …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Vous vous souvenez du premier chapitre de cette partie ? Oui, lorsque je vous parlais de convertir une grandeur analogique (tension) en une donnée numérique. Eh bien là, il va s’agir de faire l’opération inverse. Comment ? C’est ce que nous allons voir. Je peux vous dire que ça à un rapport avec la PWM…
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#convertir-des-données-binaires-en-signal-analogique"&gt;
    Convertir des données binaires en signal analogique
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#convertisseur-numérique-analogique"&gt;
     Convertisseur Numérique-&amp;gt;Analogique
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#pwm-ou-mli"&gt;
      PWM ou MLI
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#définition"&gt;
       Définition
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-fréquence-et-le-rapport-cyclique"&gt;
       La fréquence et le rapport cyclique
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#la-pwm-de-larduino"&gt;
    La PWM de l’Arduino
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#avant-de-commencer-à-programmer"&gt;
      Avant de commencer à programmer
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#les-broches-de-la-pwm"&gt;
       Les broches de la PWM
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-fréquence-de-la-pwm"&gt;
       La fréquence de la PWM
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-fonction-analogwrite"&gt;
       La fonction analogWrite()
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#utilisation"&gt;
       Utilisation
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#quelques-outils-essentiels"&gt;
      Quelques outils essentiels
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#la-led-rgb-ou-rvb"&gt;
       La LED RGB ou RVB
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#mixer-les-couleurs"&gt;
       Mixer les couleurs
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#À-vos-claviers-prêt-programmez"&gt;
      À vos claviers, prêt… programmez !
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#lobjectif"&gt;
       L’objectif
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-montage-à-réaliser"&gt;
       Le montage à réaliser
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#correction"&gt;
       Correction
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#transformation-pwm---signal-analogique"&gt;
    Transformation PWM -&amp;gt; signal analogique
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#la-valeur-moyenne-dun-signal"&gt;
      La valeur moyenne d’un signal
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-signal-carré"&gt;
       Le signal carré
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#explications"&gt;
       Explications
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#extraire-cette-valeur-moyenne"&gt;
      Extraire cette valeur moyenne
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-condensateur"&gt;
       Le condensateur
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-couple-rc"&gt;
       Le couple RC
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#explications-1"&gt;
       Explications
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#imposons-notre-pwm"&gt;
       Imposons notre PWM !
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#constante-de-temps-tau-supérieure-à-la-période"&gt;
       Constante de temps \tau supérieure à la période
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#calibrer-correctement-la-constante-rc"&gt;
      Calibrer correctement la constante RC
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-temps-de-stabilisation-entre-deux-paliers"&gt;
       Le temps de stabilisation entre deux paliers
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-perte-de-temps-en-conversion"&gt;
       La perte de temps en conversion
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#finalement-comment-calibrer-correctement-la-constante-rc"&gt;
       Finalement, comment calibrer correctement la constante RC ?
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#modifier-la-fréquence-de-la-pwm"&gt;
    Modifier la fréquence de la PWM
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#pourquoi-changer-la-fréquence-de-la-pwm"&gt;
       Pourquoi changer la fréquence de la PWM ?
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#utilisation-du-registre"&gt;
       Utilisation du registre
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#code-de-modification-de-la-fréquence-de-la-pwm"&gt;
       Code de modification de la fréquence de la PWM
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#traduction-sil-vous-plait"&gt;
       Traduction s’il vous plait !
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#test-de-vérification"&gt;
       Test de vérification
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="convertir-des-données-binaires-en-signal-analogique"&gt;
 &lt;a aria-hidden="true" href="#convertir-des-données-binaires-en-signal-analogique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Convertir des données binaires en signal analogique
&lt;/h3&gt;
&lt;p&gt;
 Je vais vous présenter deux méthodes possibles qui vont vous permettre de convertir des données numériques en grandeur analogique (je ne parlerai là encore de tension). Mais avant, plaçons-nous dans le contexte.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Convertir du binaire en analogique, pour quoi faire ? C’est vrai, avec la conversion analogique-&amp;gt;numérique il y avait une réelle utilité, mais là, qu’en est-il ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 L’utilité est tout aussi pesante que pour la conversion A-&amp;gt;N. Cependant, les applications sont différentes, à chaque outil un besoin dirais-je. En effet, la conversion A-&amp;gt;N permettait de transformer une grandeur analogique non-utilisable directement par un système à base numérique en une donnée utilisable pour une application numérique.
&lt;/p&gt;
&lt;p&gt;
 Ainsi, on a pu envoyer la valeur lue sur la liaison série. Quant à la conversion opposée, conversion N-&amp;gt;A, les applications sont différentes, je vais en citer une plus ou moins intéressante : par exemple commander une, ou plusieurs, LED tricolore (Rouge-Vert-Bleu) pour créer un luminaire dont la couleur est commandée par le son (nécessite une entrée analogique
 &lt;img alt=":-°" class="smiley" src="./static/smileys/siffle.png"/&gt;
 ). Tiens, en voilà un projet intéressant ! Je vais me le garder sous la main…
 &lt;img alt=":ninja:" class="smiley" src="./static/smileys/ninja.png"/&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Alors ! alors ! alors !! Comment on fait !?
   &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Serait-ce un léger soupçon de curiosité que je perçois dans vos yeux frétillants ?
 &lt;img alt=":p" class="smiley" src="./static/smileys/langue.png"/&gt;
 Comment fait-on ? Suivez -le guide !
&lt;/p&gt;
&lt;h4 id="convertisseur-numérique-analogique"&gt;
 &lt;a aria-hidden="true" href="#convertisseur-numérique-analogique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Convertisseur Numérique-&amp;gt;Analogique
&lt;/h4&gt;
&lt;p&gt;
 La première méthode consiste en l’utilisation d’un convertisseur Numérique-&amp;gt;Analogique (que je vais abréger CNA). Il en existe, tout comme le CAN, de plusieurs sortes :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;strong&gt;
   CNA à résistances pondérées
  &lt;/strong&gt;
  : ce convertisseur utilise un grand nombre de résistances qui ont chacune le double de la valeur de la résistance qui la précède. On a donc des résistances de valeur R, 2R, 4R, 8R, 16R, …, 256R, 512R, 1024R, etc. Chacune des résistances sera connectée grâce au micro-contrôleur à la masse ou bien au +5V. Ces niveaux logiques correspondent aux bits de données de la valeur numérique à convertir. Plus le bit est de poids fort, plus la résistance à laquelle il est adjoint est grande (maximum R). À l’inverse, plus il est de poids faible, plus il verra sa résistance de sortie de plus petite valeur. Après, grâce à un petit montage électronique, on arrive à créer une tension proportionnelle au nombre de bit à 1.
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   CNA de type R/2R
  &lt;/strong&gt;
  : là, chaque sortie du micro-contrôleur est reliée à une résistance de même valeur (2R), elle-même connectée au +5V par l’intermédiaire d’une résistance de valeur R. Toujours avec un petit montage, on arrive à créer une tension analogique proportionnelle au nombre de bit à 1.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Cependant, je n’expliquerai pas le fonctionnement ni l’utilisation de ces convertisseurs car ils doivent être connectés à autant de broches du micro-contrôleur qu’ils ne doivent avoir de précision. Pour une conversion sur 10 bits, le convertisseur doit utiliser 10 sorties du microcontrôleur !
&lt;/p&gt;
&lt;h4 id="pwm-ou-mli"&gt;
 &lt;a aria-hidden="true" href="#pwm-ou-mli"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 PWM ou MLI
&lt;/h4&gt;
&lt;p&gt;
 Bon, s’il n’y a pas moyen d’utiliser un CNA, alors on va
 &lt;del&gt;
  le créer
 &lt;/del&gt;
 utiliser ce que peut nous fournir la carte Arduino : la
 &lt;strong&gt;
  PWM
 &lt;/strong&gt;
 . Vous vous souvenez que j’ai évoqué ce terme dans le chapitre sur la conversion A-&amp;gt;N ? Mais concrètement, c’est quoi ?
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Avant de poursuivre, je vous conseille d’aller
   &lt;a href="https:// zestedesavoir.com/tutoriels/537/arduino-premiers-pas-en-informatique-embarquee/745/les-grandeurs-analogiques/3430/les-entrees-analogiques-de-larduino/#1-un-signal-analogique-petits-rappels"&gt;
    relire cette première partie
   &lt;/a&gt;
   du chapitre sur les entrées analogiques pour revoir les rappels que j’ai faits sur les signaux analogiques.
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="définition"&gt;
 &lt;a aria-hidden="true" href="#définition"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Définition
&lt;/h5&gt;
&lt;p&gt;
 N’ayez point peur, je vais vous expliquer ce que c’est au lieu de vous donner une définition tordue comme on peut en trouver parfois dans les dictionnaires.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 D’abord, la PWM sa veut dire :
 &lt;strong&gt;
  Pulse Width Modulation
 &lt;/strong&gt;
 et en français cela donne
 &lt;strong&gt;
  Modulation à Largeur d’Impulsion
 &lt;/strong&gt;
 (MLI). La PWM est en fait un signal numérique qui, à une
 &lt;strong&gt;
  fréquence
 &lt;/strong&gt;
 donnée, a un
 &lt;strong&gt;
  rapport cyclique
 &lt;/strong&gt;
 qui change.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Y’a plein de mots que je comprends pas, c’est normal ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Oui, car pour l’instant je n’en ai nullement parlé. Voilà donc notre prochain objectif.
&lt;/p&gt;
&lt;h5 id="la-fréquence-et-le-rapport-cyclique"&gt;
 &lt;a aria-hidden="true" href="#la-fréquence-et-le-rapport-cyclique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La fréquence et le rapport cyclique
&lt;/h5&gt;
&lt;p&gt;
 La
 &lt;em&gt;
  fréquence
 &lt;/em&gt;
 d’un signal périodique correspond au nombre de fois que la période se répète en UNE seconde. On la mesure en
 &lt;strong&gt;
  Hertz
 &lt;/strong&gt;
 , noté
 &lt;strong&gt;
  Hz
 &lt;/strong&gt;
 . Prenons l’exemple d’un signal logique qui émet un 1, puis un 0, puis un 1, puis un 0, etc. autrement dit un signal créneaux, on va mesurer sa période (en temps) entre le début du niveau 1 et la fin du niveau 0 :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Représentation d'une période" src="./images/uploaded/tuto-arduino-403-et-les-sorties-analogiques-enfin-presque/representation-dune-periode.png"/&gt;
 &lt;figcaption&gt;
  Représentation d'une période
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ensuite, lorsque l’on aura mesuré cette période, on va pouvoir calculer sa fréquence (le nombre de périodes en une seconde) grâce à la formule suivante :
&lt;/p&gt;
&lt;p&gt;
 &lt;span class="inlineMath inlineMathDouble"&gt;
  &lt;span class="katex-display"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         F
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mfrac&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
         &lt;mi&gt;
          T
         &lt;/mi&gt;
        &lt;/mfrac&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        F = \frac 1 T
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:1.32144em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:2.00744em;vertical-align:-0.686em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
       F
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mopen nulldelimiter"&gt;
       &lt;/span&gt;
       &lt;span class="mfrac"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:1.32144em;"&gt;
           &lt;span style="top:-2.314em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
             T
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.15em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="stretchy" style="height:0.2em;"&gt;
             &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
              &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
              &lt;/path&gt;
             &lt;/svg&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.677em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             1
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.686em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       &lt;span class="mclose nulldelimiter"&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 Avec :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         F
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        F
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
       F
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  : fréquence du signal en Hertz (Hz)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         T
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        T
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
       T
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  : temps de la période en seconde (s)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Le
 &lt;em&gt;
  rapport cyclique
 &lt;/em&gt;
 , un mot bien particulier pour désigner le fait que le niveau logique 1 peut ne pas durer le même temps que le niveau logique 0. C’est avec ça que tout repose le principe de la PWM. C’est-à-dire que la PWM est un signal de fréquence fixe qui a un rapport cyclique qui varie avec le temps suivant "les ordres qu’elle reçoit" (on reviendra dans un petit moment sur ces mots).
&lt;/p&gt;
&lt;p&gt;
 Le rapport cyclique est mesuré en pourcentage (%). Plus le pourcentage est élevé, plus le niveau logique 1 est présent dans la période et moins le niveau logique 0 l’est. Et inversement. Le rapport cyclique du signal est donc le pourcentage de temps de la période durant lequel le signal est au niveau logique 1. En somme, cette image extraite de la
 &lt;a href="http://arduino.cc/en/Tutorial/PWM"&gt;
  documentation officielle
 &lt;/a&gt;
 d’Arduino nous montre quelques exemples d’un signal avec des rapports cycliques différents :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Des signaux aux rapports cycliques différents" src="./images/uploaded/tuto-arduino-403-et-les-sorties-analogiques-enfin-presque/des-signaux-aux-rapports-cycliques-differents.png"/&gt;
 &lt;figcaption&gt;
  Des signaux aux rapports cycliques différents - (CC-BY-SA -
  &lt;a href="http://arduino.cc/en/Tutorial/PWM"&gt;
   Timothy Hirzel
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Astuce : Rapport cyclique ce dit
   &lt;strong&gt;
    Duty Cycle
   &lt;/strong&gt;
   en anglais.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Ce n’est pas tout ! Après avoir généré ce signal, il va nous falloir le transformer en signal analogique. Et oui ! Pour l’instant ce signal est encore constitué d’états logiques, on va donc devoir le transformer en extrayant sa
 &lt;em&gt;
  valeur moyenne
 &lt;/em&gt;
 … Je ne vous en dis pas plus, on verra plus bas ce que cela signifie.
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/3hTxY6cTBSE" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="la-pwm-de-larduino"&gt;
 &lt;a aria-hidden="true" href="#la-pwm-de-larduino"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La PWM de l’Arduino
&lt;/h3&gt;
&lt;h4 id="avant-de-commencer-à-programmer"&gt;
 &lt;a aria-hidden="true" href="#avant-de-commencer-à-programmer"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Avant de commencer à programmer
&lt;/h4&gt;
&lt;h5 id="les-broches-de-la-pwm"&gt;
 &lt;a aria-hidden="true" href="#les-broches-de-la-pwm"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les broches de la PWM
&lt;/h5&gt;
&lt;p&gt;
 Sur votre carte Arduino, vous devriez disposer de 6 broches qui sont compatibles avec la génération d’une PWM. Elles sont repérées par le symbole
 &lt;em&gt;
  tilde
 &lt;/em&gt;
 &lt;strong&gt;
  ~
 &lt;/strong&gt;
 . Voici les broches générant une PWM : 3, 5, 6, 9, 10 et 11.
&lt;/p&gt;
&lt;h5 id="la-fréquence-de-la-pwm"&gt;
 &lt;a aria-hidden="true" href="#la-fréquence-de-la-pwm"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La fréquence de la PWM
&lt;/h5&gt;
&lt;p&gt;
 Cette fréquence, je le disais, est fixe, elle ne varie pas au cours du temps. Pour votre carte Arduino elle est de environ 490Hz.
&lt;/p&gt;
&lt;h5 id="la-fonction-analogwrite"&gt;
 &lt;a aria-hidden="true" href="#la-fonction-analogwrite"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La fonction analogWrite()
&lt;/h5&gt;
&lt;p&gt;
 Je pense que vous ne serez pas étonné si je vous dis que Arduino intègre une fonction toute prête pour utiliser la PWM ? Plus haut, je vous disais ceci :
&lt;/p&gt;
&lt;figure&gt;
 &lt;blockquote&gt;
  &lt;p&gt;
   la PWM est un signal de fréquence fixe qui a un rapport cyclique qui varie avec le temps suivant "les ordres qu’elle reçoit"
  &lt;/p&gt;
 &lt;/blockquote&gt;
 &lt;figcaption&gt;
  Moi
  &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 C’est sur ce point que j’aimerais revenir un instant. En fait, les ordres dont je parle sont les paramètres passés dans la fonction qui génère la PWM. Ni plus ni moins. Étudions maintenant la fonction permettant de réaliser ce signal :
 &lt;code&gt;
  analogWrite()
 &lt;/code&gt;
 . Elle prend deux arguments :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Le premier est le numéro de la broche où l’on veut générer la PWM
 &lt;/li&gt;
 &lt;li&gt;
  Le second argument représente la valeur du rapport cyclique à appliquer. Malheureusement on n’exprime pas cette valeur en pourcentage, mais avec un nombre entier compris entre 0 et 255
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Si le premier argument va de soi, le second mérite quelques précisions. Le rapport cyclique s’exprime de 0 à 100 % en temps normal. Cependant, dans cette fonction il s’exprimera de 0 à 255 (sur 8 bits). Ainsi, pour un rapport cyclique de 0% nous enverrons la valeur 0, pour un rapport de 50% on enverra 127 et pour 100% ce sera 255. Les autres valeurs sont bien entendu considérées de manière proportionnelle entre les deux. Il vous faudra faire un petit calcul pour savoir quel est le pourcentage du rapport cyclique plutôt que l’argument passé dans la fonction.
&lt;/p&gt;
&lt;h5 id="utilisation"&gt;
 &lt;a aria-hidden="true" href="#utilisation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utilisation
&lt;/h5&gt;
&lt;p&gt;
 Voilà un petit exemple de code illustrant tout ça :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// une sortie analogique sur la broche 6&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; sortieAnalogique = &lt;span class="hljs-number"&gt;6&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    pinMode(sortieAnalogique, OUTPUT);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on met un rapport cyclique de 107/255 = 42 %&lt;/span&gt;
    analogWrite(sortieAnalogique, &lt;span class="hljs-number"&gt;107&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Exemple simple d’utilisation de la PWM
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/tYuo41uMQrI" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="quelques-outils-essentiels"&gt;
 &lt;a aria-hidden="true" href="#quelques-outils-essentiels"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Quelques outils essentiels
&lt;/h4&gt;
&lt;p&gt;
 Savez-vous que vous pouvez d’ores et déjà utiliser cette fonction pour allumer plus ou moins intensément une LED ? En effet, pour un rapport cyclique faible, la LED va se voir parcourir par un courant moins longtemps que lorsque le rapport cyclique est fort. Or, si elle est parcourue moins longtemps par le courant, elle s’éclairera également moins longtemps. En faisant varier le rapport cyclique, vous pouvez ainsi faire varier la luminosité de la LED.
&lt;/p&gt;
&lt;h5 id="la-led-rgb-ou-rvb"&gt;
 &lt;a aria-hidden="true" href="#la-led-rgb-ou-rvb"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La LED RGB ou RVB
&lt;/h5&gt;
&lt;p&gt;
 &lt;strong&gt;
  RGB
 &lt;/strong&gt;
 pour Red-Green-Blue en anglais. Cette LED est composée de trois LED de couleurs précédemment énoncées. Elle possède donc 4 broches et existe sous deux modèles : à anode commune et à cathode commune. Exactement comme les afficheurs 7 segments. Choisissez-en une à
 &lt;em&gt;
  anode commune
 &lt;/em&gt;
 .
&lt;/p&gt;
&lt;h5 id="mixer-les-couleurs"&gt;
 &lt;a aria-hidden="true" href="#mixer-les-couleurs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Mixer les couleurs
&lt;/h5&gt;
&lt;p&gt;
 Lorsque l’on utilise des couleurs, il est bon d’avoir quelques bases en arts plastiques. Révisons les fondements. La lumière, peut-être ne le savez-vous pas, est composée de trois couleurs primaires qui sont :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Le
  &lt;strong&gt;
   rouge
  &lt;/strong&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Le
  &lt;strong&gt;
   vert
  &lt;/strong&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Le
  &lt;strong&gt;
   bleu
  &lt;/strong&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 À partir de ces trois couleurs, il est possible de créer n’importe quelle autre couleur du spectre lumineux visible en mélangeant ces trois couleurs primaires entre elles. Par exemple, pour faire de l’orange on va mélanger du rouge (2/3 du volume final) et du vert (à 1/3 du volume final). Je vous le disais, la fonction analogWrite() prend un argument pour la PWM qui va de 0 à 255. Tout comme la proportion de couleur dans les logiciels de dessin ! On parle de "norme RGB" faisant référence aux trois couleurs primaires. Pour connaître les valeurs RGB d’une couleur, je vous propose de regarder avec le logiciel
 &lt;strong&gt;
  Gimp
 &lt;/strong&gt;
 (gratuit et multiplateforme)
 &lt;sup id="fnref-1-o74dBPrb0"&gt;
  &lt;a class="footnote-ref" href="#fn-1-o74dBPrb0"&gt;
   1
  &lt;/a&gt;
 &lt;/sup&gt;
 . Pour cela, il suffit de deux observations/clics :
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
  Tout d’abord on sélectionne la "boîte à couleurs" dans la boîte à outils
 &lt;/li&gt;
 &lt;li&gt;
  Ensuite, en jouant sur les valeurs R, G et B on peut voir la couleur obtenue
 &lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;
 &lt;img alt="La boite à couleur de Gimp" src="./images/uploaded/tuto-arduino-403-et-les-sorties-analogiques-enfin-presque/la-boite-a-couleur-de-gimp.jpg"/&gt;
 &lt;figcaption&gt;
  La boite à couleur de Gimp
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Le ColorPicker de Gimp" src="./images/uploaded/tuto-arduino-403-et-les-sorties-analogiques-enfin-presque/le-colorpicker-de-gimp.jpg"/&gt;
 &lt;figcaption&gt;
  Le ColorPicker de Gimp
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Afin de faire des jolies couleurs, nous utiliserons analogWrite() trois fois (une pour chaque LED). Prenons tout de suite un exemple avec du
 &lt;strong&gt;
  orange
 &lt;/strong&gt;
 et regardons sa composition sous Gimp :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="La couleur orange avec Gimp" src="./images/uploaded/tuto-arduino-403-et-les-sorties-analogiques-enfin-presque/la-couleur-orange-avec-gimp.png"/&gt;
 &lt;figcaption&gt;
  La couleur orange avec Gimp
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 À partir de cette image nous pouvons voir qu’il faut :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  100 % de rouge (255)
 &lt;/li&gt;
 &lt;li&gt;
  56 % de vert (144)
 &lt;/li&gt;
 &lt;li&gt;
  0% de bleu (0)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Nous allons donc pouvoir simplement utiliser ces valeurs pour faire une jolie couleur sur notre LED RGB :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; ledRouge = &lt;span class="hljs-number"&gt;11&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; ledVerte =  &lt;span class="hljs-number"&gt;9&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; ledBleue = &lt;span class="hljs-number"&gt;10&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on déclare les broches en sorties&lt;/span&gt;
    pinMode(ledRouge, OUTPUT);
    pinMode(ledVerte, OUTPUT);
    pinMode(ledBleue, OUTPUT);

    &lt;span class="hljs-comment"&gt;// on met la valeur de chaque couleur&lt;/span&gt;
    analogWrite(ledRouge, &lt;span class="hljs-number"&gt;255&lt;/span&gt;);
    analogWrite(ledVerte, &lt;span class="hljs-number"&gt;144&lt;/span&gt;);
    analogWrite(ledBleue, &lt;span class="hljs-number"&gt;0&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on ne change pas la couleur donc rien à faire dans la boucle principale&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Utilisation d’une led RGB
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Moi j’obtiens pas du tout de l’orange ! Plutôt un bleu étrange…
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 C’est exact. Souvenez-vous que c’est une LED à anode commune, or lorsqu’on met une tension de 5V en sortie du microcontrôleur, la LED sera éteinte. Les LED sont donc pilotées
 &lt;strong&gt;
  à l’état bas
 &lt;/strong&gt;
 . Autrement dit, ce n’est pas la durée de l’état haut qui est importante mais plutôt celle de l’état bas. Afin de pallier cela, il va donc falloir mettre la valeur "inverse" de chaque couleur sur chaque broche en faisant l’opération
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        V
       &lt;/mi&gt;
       &lt;mi&gt;
        a
       &lt;/mi&gt;
       &lt;mi&gt;
        l
       &lt;/mi&gt;
       &lt;mi&gt;
        e
       &lt;/mi&gt;
       &lt;mi&gt;
        u
       &lt;/mi&gt;
       &lt;mi&gt;
        r
       &lt;/mi&gt;
       &lt;mi&gt;
        R
       &lt;/mi&gt;
       &lt;mi&gt;
        e
       &lt;/mi&gt;
       &lt;mi&gt;
        e
       &lt;/mi&gt;
       &lt;mi&gt;
        l
       &lt;/mi&gt;
       &lt;mi&gt;
        l
       &lt;/mi&gt;
       &lt;mi&gt;
        e
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mn&gt;
        5
       &lt;/mn&gt;
       &lt;mn&gt;
        5
       &lt;/mn&gt;
       &lt;mo&gt;
        −
       &lt;/mo&gt;
       &lt;mi&gt;
        V
       &lt;/mi&gt;
       &lt;mi&gt;
        a
       &lt;/mi&gt;
       &lt;mi&gt;
        l
       &lt;/mi&gt;
       &lt;mi&gt;
        e
       &lt;/mi&gt;
       &lt;mi&gt;
        u
       &lt;/mi&gt;
       &lt;mi&gt;
        r
       &lt;/mi&gt;
       &lt;mi&gt;
        T
       &lt;/mi&gt;
       &lt;mi&gt;
        h
       &lt;/mi&gt;
       &lt;mi&gt;
        e
       &lt;/mi&gt;
       &lt;mi&gt;
        o
       &lt;/mi&gt;
       &lt;mi&gt;
        r
       &lt;/mi&gt;
       &lt;mi&gt;
        i
       &lt;/mi&gt;
       &lt;mi&gt;
        q
       &lt;/mi&gt;
       &lt;mi&gt;
        u
       &lt;/mi&gt;
       &lt;mi&gt;
        e
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       ValeurReelle = 255 - ValeurTheorique
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.69444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.8888799999999999em;vertical-align:-0.19444em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
      V
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      a
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.01968em;"&gt;
      l
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      e
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      u
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
      r
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.00773em;"&gt;
      R
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      e
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      e
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.01968em;"&gt;
      l
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.01968em;"&gt;
      l
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      e
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      5
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      5
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      −
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
      V
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      a
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.01968em;"&gt;
      l
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      e
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      u
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
      r
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
      T
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      h
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      e
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      o
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
      r
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      i
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      q
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      u
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      e
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 . Le code précédent devient donc :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; ledRouge = &lt;span class="hljs-number"&gt;11&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; ledVerte =  &lt;span class="hljs-number"&gt;9&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; ledBleue = &lt;span class="hljs-number"&gt;10&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on déclare les broches en sorties&lt;/span&gt;
    pinMode(ledRouge, OUTPUT);
    pinMode(ledVerte, OUTPUT);
    pinMode(ledBleue, OUTPUT);

    &lt;span class="hljs-comment"&gt;// on met la valeur de chaque couleur&lt;/span&gt;
    analogWrite(ledRouge, &lt;span class="hljs-number"&gt;255&lt;/span&gt;&lt;span class="hljs-number"&gt;-255&lt;/span&gt;);
    analogWrite(ledVerte, &lt;span class="hljs-number"&gt;255&lt;/span&gt;&lt;span class="hljs-number"&gt;-144&lt;/span&gt;);
    analogWrite(ledBleue, &lt;span class="hljs-number"&gt;255&lt;/span&gt;&lt;span class="hljs-number"&gt;-0&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Utilisation d’une led RGB à anode commune
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/vOB_grEVkwY" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 On en a fini avec les rappels, on va pouvoir commencer un petit exercice.
&lt;/p&gt;
&lt;h4 id="À-vos-claviers-prêt-programmez"&gt;
 &lt;a aria-hidden="true" href="#À-vos-claviers-prêt-programmez"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 À vos claviers, prêt… programmez !
&lt;/h4&gt;
&lt;h5 id="lobjectif"&gt;
 &lt;a aria-hidden="true" href="#lobjectif"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’objectif
&lt;/h5&gt;
&lt;p&gt;
 L’objectif est assez simple, vous allez générer trois PWM différentes (une pour chaque LED de couleur) et créer 7 couleurs (le noir ne compte pas !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 ) distinctes qui sont les suivantes :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  rouge
 &lt;/li&gt;
 &lt;li&gt;
  vert
 &lt;/li&gt;
 &lt;li&gt;
  bleu
 &lt;/li&gt;
 &lt;li&gt;
  jaune
 &lt;/li&gt;
 &lt;li&gt;
  bleu ciel
 &lt;/li&gt;
 &lt;li&gt;
  violet
 &lt;/li&gt;
 &lt;li&gt;
  blanc
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Ces couleurs devront "défiler" une par une (dans l’ordre que vous voudrez) toutes les 500ms.
&lt;/p&gt;
&lt;h5 id="le-montage-à-réaliser"&gt;
 &lt;a aria-hidden="true" href="#le-montage-à-réaliser"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le montage à réaliser
&lt;/h5&gt;
&lt;p&gt;
 Vous allez peut-être être surpris car je vais utiliser pour le montage une LED à anode commune, afin de bien éclairer les LED avec la bonne proportion de couleur. Donc, lorsqu’il y aura la valeur 255 dans analogWrite(), la LED de couleur rouge, par exemple, sera complètement illuminée.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="RGB schéma" src="./images/uploaded/tuto-arduino-403-et-les-sorties-analogiques-enfin-presque/rgb-schema.jpg"/&gt;
 &lt;figcaption&gt;
  RGB schéma
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="RGB montage" src="./images/uploaded/tuto-arduino-403-et-les-sorties-analogiques-enfin-presque/rgb-montage.png"/&gt;
 &lt;figcaption&gt;
  RGB montage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 ** C’est parti !
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 **
&lt;/p&gt;
&lt;h5 id="correction"&gt;
 &lt;a aria-hidden="true" href="#correction"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Correction
&lt;/h5&gt;
&lt;p&gt;
 Voilà le petit programme que j’ai fait pour répondre à l’objectif demandé :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// définition des broches utilisée (vous êtes libre de les changer)&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_verte = &lt;span class="hljs-number"&gt;9&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_bleue = &lt;span class="hljs-number"&gt;10&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_rouge = &lt;span class="hljs-number"&gt;11&lt;/span&gt;;

&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; compteur_defilement = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// variable permettant de changer de couleur&lt;/span&gt;


&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// définition des broches en sortie&lt;/span&gt;
    pinMode(led_rouge, OUTPUT);
    pinMode(led_verte, OUTPUT);
    pinMode(led_bleue, OUTPUT);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    couleur(compteur_defilement); &lt;span class="hljs-comment"&gt;// appel de la fonction d'affichage&lt;/span&gt;
    compteur_defilement++; &lt;span class="hljs-comment"&gt;// incrémentation de la couleur à afficher&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;// si le compteur dépasse 6 couleurs&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(compteur_defilement&amp;gt; &lt;span class="hljs-number"&gt;6&lt;/span&gt;)
        compteur_defilement = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

    delay(&lt;span class="hljs-number"&gt;500&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;couleur&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; numeroCouleur)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;switch&lt;/span&gt;(numeroCouleur)
    {
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;0&lt;/span&gt; : &lt;span class="hljs-comment"&gt;// rouge&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// rapport cyclique au minimum pour une meilleure luminosité de la LED&lt;/span&gt;
        analogWrite(led_rouge, &lt;span class="hljs-number"&gt;0&lt;/span&gt;);
        &lt;span class="hljs-comment"&gt;// qui je le rappel est commandée en "inverse"&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// (0 -&amp;gt; LED allumée ; 255 -&amp;gt; LED éteinte)&lt;/span&gt;
        analogWrite(led_verte, &lt;span class="hljs-number"&gt;255&lt;/span&gt;);
        analogWrite(led_bleue, &lt;span class="hljs-number"&gt;255&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;1&lt;/span&gt; : &lt;span class="hljs-comment"&gt;// vert&lt;/span&gt;
        analogWrite(led_rouge, &lt;span class="hljs-number"&gt;255&lt;/span&gt;);
        analogWrite(led_verte, &lt;span class="hljs-number"&gt;0&lt;/span&gt;);
        analogWrite(led_bleue, &lt;span class="hljs-number"&gt;255&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;2&lt;/span&gt; : &lt;span class="hljs-comment"&gt;// bleu&lt;/span&gt;
        analogWrite(led_rouge, &lt;span class="hljs-number"&gt;255&lt;/span&gt;);
        analogWrite(led_verte, &lt;span class="hljs-number"&gt;255&lt;/span&gt;);
        analogWrite(led_bleue, &lt;span class="hljs-number"&gt;0&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;3&lt;/span&gt; : &lt;span class="hljs-comment"&gt;// jaune&lt;/span&gt;
        analogWrite(led_rouge, &lt;span class="hljs-number"&gt;0&lt;/span&gt;);
        analogWrite(led_verte, &lt;span class="hljs-number"&gt;0&lt;/span&gt;);
        analogWrite(led_bleue, &lt;span class="hljs-number"&gt;255&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;4&lt;/span&gt; : &lt;span class="hljs-comment"&gt;// violet&lt;/span&gt;
        analogWrite(led_rouge, &lt;span class="hljs-number"&gt;0&lt;/span&gt;);
        analogWrite(led_verte, &lt;span class="hljs-number"&gt;255&lt;/span&gt;);
        analogWrite(led_bleue, &lt;span class="hljs-number"&gt;0&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;5&lt;/span&gt; : &lt;span class="hljs-comment"&gt;// bleu ciel&lt;/span&gt;
        analogWrite(led_rouge, &lt;span class="hljs-number"&gt;255&lt;/span&gt;);
        analogWrite(led_verte, &lt;span class="hljs-number"&gt;0&lt;/span&gt;);
        analogWrite(led_bleue, &lt;span class="hljs-number"&gt;0&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;6&lt;/span&gt; : &lt;span class="hljs-comment"&gt;// blanc&lt;/span&gt;
        analogWrite(led_rouge, &lt;span class="hljs-number"&gt;0&lt;/span&gt;);
        analogWrite(led_verte, &lt;span class="hljs-number"&gt;0&lt;/span&gt;);
        analogWrite(led_bleue, &lt;span class="hljs-number"&gt;0&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;default&lt;/span&gt; : &lt;span class="hljs-comment"&gt;// "noir"&lt;/span&gt;
        analogWrite(led_rouge, &lt;span class="hljs-number"&gt;255&lt;/span&gt;);
        analogWrite(led_verte, &lt;span class="hljs-number"&gt;255&lt;/span&gt;);
        analogWrite(led_bleue, &lt;span class="hljs-number"&gt;255&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Exercice, affichage de plusieurs couleurs
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Bon ben je vous laisse lire le code tout seul, vous êtes assez préparé pour le faire, du moins j’espère.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;p&gt;
 Voici la démonstration sur simulateur :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/hGkwStrLKVw" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/9PHZiwon6Or" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="transformation-pwm---signal-analogique"&gt;
 &lt;a aria-hidden="true" href="#transformation-pwm---signal-analogique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Transformation PWM -&amp;gt; signal analogique
&lt;/h3&gt;
&lt;p&gt;
 Bon, on est arrivé à modifier les couleurs d’une LED RGB juste avec des "impulsions", plus exactement en utilisant directement le signal PWM.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Mais comment faire si je veux un signal complètement analogique ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 C’est justement l’objet de cette sous-partie : créer un signal analogique à partir d’un signal numérique.
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Cependant, avant de continuer, je tiens à vous informer que l’on va aborder des notions plus profondes en électronique et que vous n’êtes pas obligé de lire cette sous-partie si vous ne vous en sentez pas capable. Revenez plus tard si vous le voulez. Pour ceux qui cela intéresserait vraiment, je ne peux que vous encourager à vous accrocher et éventuellement lire
   &lt;a href="http://fr.openclassrooms.com/sciences/cours/l-electronique-de-zero/le-condensateur-en-regime-continu"&gt;
    ce chapitre
   &lt;/a&gt;
   pour mieux comprendre certains points essentiels utilisés dans cette sous-partie.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="la-valeur-moyenne-dun-signal"&gt;
 &lt;a aria-hidden="true" href="#la-valeur-moyenne-dun-signal"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La valeur moyenne d’un signal
&lt;/h4&gt;
&lt;p&gt;
 Sur une période d’un signal périodique, on peut calculer sa valeur moyenne. En fait, il faut faire une moyenne de toutes les valeurs que prend le signal pendant ce temps donné. C’est une peu lorsque l’on fait la moyenne des notes des élèves dans une classe, on additionne toutes les notes et on divise le résultat par le nombre total de notes. Je ne vais prendre qu’un seul exemple, celui dont nous avons besoin : le signal carré.
&lt;/p&gt;
&lt;h5 id="le-signal-carré"&gt;
 &lt;a aria-hidden="true" href="#le-signal-carré"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le signal carré
&lt;/h5&gt;
&lt;p&gt;
 Reprenons notre signal carré :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Un signal carré" src="./images/uploaded/tuto-arduino-403-et-les-sorties-analogiques-enfin-presque/un-signal-carre.png"/&gt;
 &lt;figcaption&gt;
  Un signal carré
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 J’ai modifié un peu l’image pour vous faire apparaitre les temps. On observe donc que du temps
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       0
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.64444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.64444em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 (l’origine) au temps
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        T
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       T
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
      T
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 , on a une période du signal.
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        a
       &lt;/mi&gt;
       &lt;mi&gt;
        T
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       aT
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit"&gt;
      a
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
      T
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 correspond au moment où le signal change d’état. En somme, il s’agit du temps de l’état haut, qui donne aussi le temps à l’état bas et finalement permet de calculer le rapport cyclique du signal. Donnons quelques valeurs numériques à titre d’exemple :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         T
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
        &lt;mi&gt;
         m
        &lt;/mi&gt;
        &lt;mi&gt;
         s
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        T = 1ms
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
       T
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       1
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       m
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       s
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         a
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mi mathvariant="normal"&gt;
         .
        &lt;/mi&gt;
        &lt;mn&gt;
         5
        &lt;/mn&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        a = 0.5
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.64444em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.64444em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit"&gt;
       a
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       .
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       5
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  (correspond à un rapport cyclique de 50%)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 La formule permettant de calculer la valeur moyenne de cette période est la suivante :
&lt;/p&gt;
&lt;p&gt;
 &lt;span class="inlineMath inlineMathDouble"&gt;
  &lt;span class="katex-display"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mo&gt;
         ⟨
        &lt;/mo&gt;
        &lt;mi&gt;
         U
        &lt;/mi&gt;
        &lt;mo&gt;
         ⟩
        &lt;/mo&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mfrac&gt;
         &lt;mrow&gt;
          &lt;msub&gt;
           &lt;mi&gt;
            U
           &lt;/mi&gt;
           &lt;mn&gt;
            1
           &lt;/mn&gt;
          &lt;/msub&gt;
          &lt;mo&gt;
           ×
          &lt;/mo&gt;
          &lt;mi&gt;
           a
          &lt;/mi&gt;
          &lt;mi&gt;
           T
          &lt;/mi&gt;
          &lt;mo&gt;
           +
          &lt;/mo&gt;
          &lt;msub&gt;
           &lt;mi&gt;
            U
           &lt;/mi&gt;
           &lt;mn&gt;
            2
           &lt;/mn&gt;
          &lt;/msub&gt;
          &lt;mo&gt;
           ×
          &lt;/mo&gt;
          &lt;mo&gt;
           (
          &lt;/mo&gt;
          &lt;mi&gt;
           T
          &lt;/mi&gt;
          &lt;mo&gt;
           −
          &lt;/mo&gt;
          &lt;mi&gt;
           a
          &lt;/mi&gt;
          &lt;mi&gt;
           T
          &lt;/mi&gt;
          &lt;mo&gt;
           )
          &lt;/mo&gt;
         &lt;/mrow&gt;
         &lt;mi&gt;
          T
         &lt;/mi&gt;
        &lt;/mfrac&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        \langle U \rangle = \frac{U_1 \times aT + U_2 \times (T - aT)}T
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:1.427em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:2.113em;vertical-align:-0.686em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mopen"&gt;
       ⟨
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
       U
      &lt;/span&gt;
      &lt;span class="mclose"&gt;
       ⟩
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mopen nulldelimiter"&gt;
       &lt;/span&gt;
       &lt;span class="mfrac"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:1.427em;"&gt;
           &lt;span style="top:-2.314em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
             T
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.15em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="stretchy" style="height:0.2em;"&gt;
             &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
              &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
              &lt;/path&gt;
             &lt;/svg&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span style="top:-3.677em;"&gt;
            &lt;span class="pstrut" style="height:3em;"&gt;
            &lt;/span&gt;
            &lt;span class="mord"&gt;
             &lt;span class="mord"&gt;
              &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
               U
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
                  &lt;span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"&gt;
                   &lt;span class="pstrut" style="height:2.7em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size6 size3 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     1
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.15em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
             &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
             &lt;/span&gt;
             &lt;span class="mbin"&gt;
              ×
             &lt;/span&gt;
             &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
             &lt;/span&gt;
             &lt;span class="mord mathit"&gt;
              a
             &lt;/span&gt;
             &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
              T
             &lt;/span&gt;
             &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
             &lt;/span&gt;
             &lt;span class="mbin"&gt;
              +
             &lt;/span&gt;
             &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
             &lt;/span&gt;
             &lt;span class="mord"&gt;
              &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
               U
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
                  &lt;span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"&gt;
                   &lt;span class="pstrut" style="height:2.7em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size6 size3 mtight"&gt;
                    &lt;span class="mord mtight"&gt;
                     2
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.15em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
             &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
             &lt;/span&gt;
             &lt;span class="mbin"&gt;
              ×
             &lt;/span&gt;
             &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
             &lt;/span&gt;
             &lt;span class="mopen"&gt;
              (
             &lt;/span&gt;
             &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
              T
             &lt;/span&gt;
             &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
             &lt;/span&gt;
             &lt;span class="mbin"&gt;
              −
             &lt;/span&gt;
             &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
             &lt;/span&gt;
             &lt;span class="mord mathit"&gt;
              a
             &lt;/span&gt;
             &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
              T
             &lt;/span&gt;
             &lt;span class="mclose"&gt;
              )
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.686em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       &lt;span class="mclose nulldelimiter"&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   La valeur moyenne d’un signal se note avec des chevrons &amp;lt;, &amp;gt; autour de la lettre indiquant de quelle grandeur physique il s’agit.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="explications"&gt;
 &lt;a aria-hidden="true" href="#explications"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Explications
&lt;/h5&gt;
&lt;p&gt;
 Premièrement dans la formule, on calcule la tension du signal sur la première partie de la période, donc de
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       0
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.64444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.64444em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 à
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        a
       &lt;/mi&gt;
       &lt;mi&gt;
        T
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       aT
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit"&gt;
      a
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
      T
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 . Pour ce faire, on multiplie
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         U
        &lt;/mi&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
       &lt;/msub&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       U_1
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
       U
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             1
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 , qui est la tension du signal pendant cette période, par le temps de la première partie de la période, soit
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        a
       &lt;/mi&gt;
       &lt;mi&gt;
        T
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       aT
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit"&gt;
      a
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
      T
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 . Ce qui donne :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         U
        &lt;/mi&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
       &lt;/msub&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mi&gt;
        a
       &lt;/mi&gt;
       &lt;mi&gt;
        T
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       U_1 \times aT
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
       U
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             1
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      a
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
      T
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 . Deuxièmement, on fait de même avec la deuxième partie du signal. On multiplie le temps de ce bout de période par la tension
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         U
        &lt;/mi&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
       &lt;/msub&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       U_2
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
       U
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             2
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 pendant ce temps. Ce temps vaut
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        T
       &lt;/mi&gt;
       &lt;mo&gt;
        −
       &lt;/mo&gt;
       &lt;mi&gt;
        a
       &lt;/mi&gt;
       &lt;mi&gt;
        T
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       T - aT
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.76666em;vertical-align:-0.08333em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
      T
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      −
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      a
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
      T
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 . Le résultat donne alors :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         U
        &lt;/mi&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
       &lt;/msub&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mo&gt;
        (
       &lt;/mo&gt;
       &lt;mi&gt;
        T
       &lt;/mi&gt;
       &lt;mo&gt;
        −
       &lt;/mo&gt;
       &lt;mi&gt;
        a
       &lt;/mi&gt;
       &lt;mi&gt;
        T
       &lt;/mi&gt;
       &lt;mo&gt;
        )
       &lt;/mo&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       U_2 \times (T - aT)
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.75em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
       U
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             2
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mopen"&gt;
      (
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
      T
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      −
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      a
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
      T
     &lt;/span&gt;
     &lt;span class="mclose"&gt;
      )
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 Finalement, on divise le tout par le temps total de la période après avoir additionné les deux résultats précédents. Après simplification, la formule devient :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mo&gt;
        ⟨
       &lt;/mo&gt;
       &lt;mi&gt;
        U
       &lt;/mi&gt;
       &lt;mo&gt;
        ⟩
       &lt;/mo&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mi&gt;
        a
       &lt;/mi&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         U
        &lt;/mi&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
       &lt;/msub&gt;
       &lt;mo&gt;
        +
       &lt;/mo&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         U
        &lt;/mi&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
       &lt;/msub&gt;
       &lt;mo&gt;
        −
       &lt;/mo&gt;
       &lt;mi&gt;
        a
       &lt;/mi&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         U
        &lt;/mi&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
       &lt;/msub&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       \langle U \rangle = a \times U_1 + U_2 - a \times U_2
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.75em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mopen"&gt;
      ⟨
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
      U
     &lt;/span&gt;
     &lt;span class="mclose"&gt;
      ⟩
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      a
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
       U
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             1
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      +
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
       U
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             2
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      −
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      a
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
       U
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             2
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 Et cela se simplifie encore en :
&lt;/p&gt;
&lt;p&gt;
 &lt;span class="inlineMath inlineMathDouble"&gt;
  &lt;span class="katex-display"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mo&gt;
         ⟨
        &lt;/mo&gt;
        &lt;mi&gt;
         U
        &lt;/mi&gt;
        &lt;mo&gt;
         ⟩
        &lt;/mo&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mi&gt;
         a
        &lt;/mi&gt;
        &lt;mo&gt;
         ×
        &lt;/mo&gt;
        &lt;mo&gt;
         (
        &lt;/mo&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          U
         &lt;/mi&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
        &lt;/msub&gt;
        &lt;mo&gt;
         −
        &lt;/mo&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          U
         &lt;/mi&gt;
         &lt;mn&gt;
          2
         &lt;/mn&gt;
        &lt;/msub&gt;
        &lt;mo&gt;
         )
        &lt;/mo&gt;
        &lt;mo&gt;
         +
        &lt;/mo&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          U
         &lt;/mi&gt;
         &lt;mn&gt;
          2
         &lt;/mn&gt;
        &lt;/msub&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        \langle U \rangle = a \times (U_1 - U_2) + U_2
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.75em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mopen"&gt;
       ⟨
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
       U
      &lt;/span&gt;
      &lt;span class="mclose"&gt;
       ⟩
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       a
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mbin"&gt;
       ×
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mopen"&gt;
       (
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
        U
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              1
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mbin"&gt;
       −
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
        U
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              2
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mclose"&gt;
       )
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mbin"&gt;
       +
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
        U
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              2
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.15em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Dans notre cas, comme il s’agit d’un signal carré ayant que deux valeurs : 0V et 5V, on va pouvoir simplifier le calcul par celui-ci :
   &lt;span class="inlineMath"&gt;
    &lt;span class="katex"&gt;
     &lt;span class="katex-mathml"&gt;
      &lt;math&gt;
       &lt;semantics&gt;
        &lt;mrow&gt;
         &lt;mo&gt;
          ⟨
         &lt;/mo&gt;
         &lt;mi&gt;
          U
         &lt;/mi&gt;
         &lt;mo&gt;
          ⟩
         &lt;/mo&gt;
         &lt;mo&gt;
          =
         &lt;/mo&gt;
         &lt;mi&gt;
          a
         &lt;/mi&gt;
         &lt;mo&gt;
          ×
         &lt;/mo&gt;
         &lt;msub&gt;
          &lt;mi&gt;
           U
          &lt;/mi&gt;
          &lt;mn&gt;
           1
          &lt;/mn&gt;
         &lt;/msub&gt;
        &lt;/mrow&gt;
        &lt;annotation encoding="application/x-tex"&gt;
         \langle U \rangle = a \times U_1
        &lt;/annotation&gt;
       &lt;/semantics&gt;
      &lt;/math&gt;
     &lt;/span&gt;
     &lt;span aria-hidden="true" class="katex-html"&gt;
      &lt;span class="strut" style="height:0.75em;"&gt;
      &lt;/span&gt;
      &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
      &lt;/span&gt;
      &lt;span class="base"&gt;
       &lt;span class="mopen"&gt;
        ⟨
       &lt;/span&gt;
       &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
        U
       &lt;/span&gt;
       &lt;span class="mclose"&gt;
        ⟩
       &lt;/span&gt;
       &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
       &lt;/span&gt;
       &lt;span class="mrel"&gt;
        =
       &lt;/span&gt;
       &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
       &lt;/span&gt;
       &lt;span class="mord mathit"&gt;
        a
       &lt;/span&gt;
       &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
       &lt;/span&gt;
       &lt;span class="mbin"&gt;
        ×
       &lt;/span&gt;
       &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
       &lt;/span&gt;
       &lt;span class="mord"&gt;
        &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
         U
        &lt;/span&gt;
        &lt;span class="msupsub"&gt;
         &lt;span class="vlist-t vlist-t2"&gt;
          &lt;span class="vlist-r"&gt;
           &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
            &lt;span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"&gt;
             &lt;span class="pstrut" style="height:2.7em;"&gt;
             &lt;/span&gt;
             &lt;span class="sizing reset-size6 size3 mtight"&gt;
              &lt;span class="mord mtight"&gt;
               1
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span class="vlist-s"&gt;
            ​
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-r"&gt;
           &lt;span class="vlist" style="height:0.15em;"&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
   ,car
   &lt;span class="inlineMath"&gt;
    &lt;span class="katex"&gt;
     &lt;span class="katex-mathml"&gt;
      &lt;math&gt;
       &lt;semantics&gt;
        &lt;mrow&gt;
         &lt;msub&gt;
          &lt;mi&gt;
           U
          &lt;/mi&gt;
          &lt;mn&gt;
           2
          &lt;/mn&gt;
         &lt;/msub&gt;
         &lt;mo&gt;
          =
         &lt;/mo&gt;
         &lt;mn&gt;
          0
         &lt;/mn&gt;
        &lt;/mrow&gt;
        &lt;annotation encoding="application/x-tex"&gt;
         U_2 = 0
        &lt;/annotation&gt;
       &lt;/semantics&gt;
      &lt;/math&gt;
     &lt;/span&gt;
     &lt;span aria-hidden="true" class="katex-html"&gt;
      &lt;span class="strut" style="height:0.68333em;"&gt;
      &lt;/span&gt;
      &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
      &lt;/span&gt;
      &lt;span class="base"&gt;
       &lt;span class="mord"&gt;
        &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
         U
        &lt;/span&gt;
        &lt;span class="msupsub"&gt;
         &lt;span class="vlist-t vlist-t2"&gt;
          &lt;span class="vlist-r"&gt;
           &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
            &lt;span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"&gt;
             &lt;span class="pstrut" style="height:2.7em;"&gt;
             &lt;/span&gt;
             &lt;span class="sizing reset-size6 size3 mtight"&gt;
              &lt;span class="mord mtight"&gt;
               2
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
           &lt;span class="vlist-s"&gt;
            ​
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-r"&gt;
           &lt;span class="vlist" style="height:0.15em;"&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
       &lt;/span&gt;
       &lt;span class="mrel"&gt;
        =
       &lt;/span&gt;
       &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
       &lt;/span&gt;
       &lt;span class="mord"&gt;
        0
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-danger"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Les formules que l’on vient d’apprendre ne s’appliquent que pour
   &lt;strong&gt;
    une seule
   &lt;/strong&gt;
   période du signal. Si le signal a toujours la même période et le même rapport cyclique alors le résultat de la formule est admissible à l’ensemble du signal. En revanche, si le signal a un rapport cyclique qui varie au cours du temps, alors le résultat donné par la formule n’est valable que pour un rapport cyclique donné. Il faudra donc calculer la valeur moyenne pour chaque rapport cyclique que possède le signal.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 De ce fait, si on modifie le rapport cyclique de la PWM de façon maitrisée, on va pouvoir créer un signal analogique de la forme qu’on le souhaite, compris entre 0 et 5V, en extrayant la valeur moyenne du signal. On retiendra également que,
 &lt;strong&gt;
  dans cette formule uniquement
 &lt;/strong&gt;
 , le temps n’a pas d’importance.
&lt;/p&gt;
&lt;h4 id="extraire-cette-valeur-moyenne"&gt;
 &lt;a aria-hidden="true" href="#extraire-cette-valeur-moyenne"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Extraire cette valeur moyenne
&lt;/h4&gt;
&lt;p&gt;
 Alors, mais comment faire pour extraire la valeur moyenne du signal de la PWM, me direz-vous. Eh bien on va utiliser les propriétés d’un certain couple de composants très connu : le
 &lt;strong&gt;
  couple RC
 &lt;/strong&gt;
 ou
 &lt;strong&gt;
  résistance-condensateur
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   La résistance on connait, mais, le condensateur… tu nous avais pas dit qu’il servait à supprimer les parasites ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Si, bien sûr, mais il possède plein de caractéristiques intéressantes. C’est pour cela que c’est un des composants les plus utilisés en électronique. Cette fois, je vais vous montrer une de ses caractéristiques qui va nous permettre d’extraire cette fameuse valeur moyenne.
&lt;/p&gt;
&lt;h5 id="le-condensateur"&gt;
 &lt;a aria-hidden="true" href="#le-condensateur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le condensateur
&lt;/h5&gt;
&lt;p&gt;
 Je vous ai déjà parlé de la résistance, vous savez qu’elle limite le courant suivant la loi d’Ohm. Je vous ai aussi parlé du condensateur, je vous disais qu’il absorbait les parasites créés lors d’un appui sur un bouton poussoir. À présent, on va voir un peu plus en profondeur son fonctionnement car on est loin d’avoir tout vu ! Le condensateur, je rappelle ses symboles :
 &lt;img alt="Symbole des condensateurs polarisés" src="./images/uploaded/tuto-arduino-403-et-les-sorties-analogiques-enfin-presque/symbole-des-condensateurs-polarises.jpg"/&gt;
 est constitué de deux plaques métalliques, des
 &lt;strong&gt;
  armatures
 &lt;/strong&gt;
 , posées face à face et isolées par… un isolant !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Donc, en somme le condensateur
 &lt;strong&gt;
  est équivalent
 &lt;/strong&gt;
 à un interrupteur ouvert puisqu’il n’y a pas de courant qui peut passer entre les deux armatures. Chaque armature sera mise à un potentiel électrique. Il peut être égal sur les deux armatures, mais l’utilisation majoritaire fait que les deux armatures ont un potentiel différent.
&lt;/p&gt;
&lt;h5 id="le-couple-rc"&gt;
 &lt;a aria-hidden="true" href="#le-couple-rc"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le couple RC
&lt;/h5&gt;
&lt;p&gt;
 Bon, et maintenant ? Maintenant on va faire un petit montage électrique, vous pouvez le faire si vous voulez, non en fait faites-le vous comprendrez mes explications en même temps que vous ferez l’expérience qui va suivre. Voilà le montage à réaliser :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Un couple RC en action" src="./images/uploaded/tuto-arduino-403-et-les-sorties-analogiques-enfin-presque/un-couple-rc-en-action.jpg"/&gt;
 &lt;figcaption&gt;
  Un couple RC en action
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Les valeurs des composants sont :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         U
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mn&gt;
         5
        &lt;/mn&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        U = 5V
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
       U
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       5
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  (utilisez la tension 5V fournie par votre carte Arduino)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         C
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mi&gt;
         μ
        &lt;/mi&gt;
        &lt;mi&gt;
         F
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        C = 1000 \mu F
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.8777699999999999em;vertical-align:-0.19444em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.07153em;"&gt;
       C
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       1
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord mathit"&gt;
       μ
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
       F
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          R
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           c
          &lt;/mi&gt;
          &lt;mi&gt;
           h
          &lt;/mi&gt;
          &lt;mi&gt;
           a
          &lt;/mi&gt;
          &lt;mi&gt;
           r
          &lt;/mi&gt;
          &lt;mi&gt;
           g
          &lt;/mi&gt;
          &lt;mi&gt;
           e
          &lt;/mi&gt;
         &lt;/mrow&gt;
        &lt;/msub&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
        &lt;mi&gt;
         k
        &lt;/mi&gt;
        &lt;mi mathvariant="normal"&gt;
         Ω
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        R_{charge} = 1k\Omega
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.69444em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.980548em;vertical-align:-0.286108em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.00773em;"&gt;
        R
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.3361079999999999em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight"&gt;
               c
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               h
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               a
              &lt;/span&gt;
              &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
               r
              &lt;/span&gt;
              &lt;span class="mord mathit mtight" style="margin-right:0.03588em;"&gt;
               g
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               e
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.286108em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       1
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.03148em;"&gt;
       k
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       Ω
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          R
         &lt;/mi&gt;
         &lt;mrow&gt;
          &lt;mi&gt;
           d
          &lt;/mi&gt;
          &lt;mi&gt;
           e
          &lt;/mi&gt;
          &lt;mi&gt;
           c
          &lt;/mi&gt;
          &lt;mi&gt;
           h
          &lt;/mi&gt;
          &lt;mi&gt;
           a
          &lt;/mi&gt;
          &lt;mi&gt;
           r
          &lt;/mi&gt;
          &lt;mi&gt;
           g
          &lt;/mi&gt;
          &lt;mi&gt;
           e
          &lt;/mi&gt;
         &lt;/mrow&gt;
        &lt;/msub&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
        &lt;mi&gt;
         k
        &lt;/mi&gt;
        &lt;mi mathvariant="normal"&gt;
         Ω
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        R_{decharge} = 1k\Omega
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.69444em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.980548em;vertical-align:-0.286108em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       &lt;span class="mord mathit" style="margin-right:0.00773em;"&gt;
        R
       &lt;/span&gt;
       &lt;span class="msupsub"&gt;
        &lt;span class="vlist-t vlist-t2"&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.3361079999999999em;"&gt;
           &lt;span style="top:-2.5500000000000003em;margin-left:-0.00773em;margin-right:0.05em;"&gt;
            &lt;span class="pstrut" style="height:2.7em;"&gt;
            &lt;/span&gt;
            &lt;span class="sizing reset-size6 size3 mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight"&gt;
               d
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               e
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               c
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               h
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               a
              &lt;/span&gt;
              &lt;span class="mord mathit mtight" style="margin-right:0.02778em;"&gt;
               r
              &lt;/span&gt;
              &lt;span class="mord mathit mtight" style="margin-right:0.03588em;"&gt;
               g
              &lt;/span&gt;
              &lt;span class="mord mathit mtight"&gt;
               e
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span class="vlist-s"&gt;
           ​
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-r"&gt;
          &lt;span class="vlist" style="height:0.286108em;"&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       1
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.03148em;"&gt;
       k
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       Ω
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Le montage est terminé ? Alors fermez l’interrupteur…
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Que se passe-t-il ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Lorsque vous fermez l’interrupteur, le courant peut s’établir dans le circuit. Il va donc aller allumer la LED. Ceci fait abstraction du condensateur. Mais, justement, dans ce montage il y a un condensateur. Qu’observez-vous ? La LED ne s’allume pas immédiatement et met un peu de temps avant d’être complètement allumée. Ouvrez l’interrupteur. Et là, qu’y a-t-il de nouveau ? En théorie, la LED devrait être éteinte, cependant, le condensateur fait des siennes. On voit la LED s’éteindre tout doucement et pendant plus longtemps que lorsqu’elle s’allumait. Troublant, n’est-ce pas ?
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Vous pouvez réitérer l’expérience en changeant la valeur des composants, sans jamais descendre en dessous de 220 Ohm pour la résistance de décharge.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="explications-1"&gt;
 &lt;a aria-hidden="true" href="#explications-1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Explications
&lt;/h5&gt;
&lt;p&gt;
 Je vais vous expliquer ce phénomène assez étrange. Vous l’aurez sans doute deviné, c’est le condensateur qui joue le premier rôle ! En fait, lorsque l’on applique un potentiel différent sur chaque armature, le condensateur n’aime pas trop ça. Je ne dis pas que ça risque de l’endommager, simplement qu’il n’aime pas ça, comme si vous on vous forçait à manger quelque chose que vous n’aimez pas. Du coup, lorsqu’on lui applique une tension de 5V sur une de ses armatures et l’autre armature est reliée à la masse, il met du temps à accepter la tension. Et plus la tension croit, moins il aime ça et plus il met du temps à l’accepter. Si on regarde la tension aux bornes de ce pauvre condensateur, on peut observer ceci :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="La courbe de charge d'un condensateur" src="./images/uploaded/tuto-arduino-403-et-les-sorties-analogiques-enfin-presque/la-courbe-de-charge-dun-condensateur.jpg"/&gt;
 &lt;figcaption&gt;
  La courbe de charge d'un condensateur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 La tension augmente d’abord très rapidement, puis de moins en moins rapidement aux bornes du condensateur lorsqu’on le
 &lt;strong&gt;
  charge
 &lt;/strong&gt;
 à travers une résistance. Oui, on appelle ça la
 &lt;strong&gt;
  charge
 &lt;/strong&gt;
 du condensateur. C’est un peu comme si la résistance donnait un mauvais goût à la tension et plus la résistance est grande, plus le goût est horrible et moins le condensateur se charge vite. C’est l’explication de pourquoi la LED s’est éclairée lentement. Lorsque l’on ouvre l’interrupteur, il se passe le phénomène inverse. Là, le condensateur peut se débarrasser de ce mauvais goût qu’il a accumulé, sauf que la résistance et la LED l’en empêchent. Il met donc du temps à se
 &lt;strong&gt;
  décharger
 &lt;/strong&gt;
 et la LED s’éteint doucement :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="La courbe de décharge d'un condensateur" src="./images/uploaded/tuto-arduino-403-et-les-sorties-analogiques-enfin-presque/la-courbe-de-decharge-dun-condensateur.jpg"/&gt;
 &lt;figcaption&gt;
  La courbe de décharge d'un condensateur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Pour terminer, on peut déterminer le temps de charge et de décharge du condensateur à partir d’un paramètre très simple, que voici :
&lt;/p&gt;
&lt;p&gt;
 &lt;span class="inlineMath inlineMathDouble"&gt;
  &lt;span class="katex-display"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         τ
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mi&gt;
         R
        &lt;/mi&gt;
        &lt;mo&gt;
         ×
        &lt;/mo&gt;
        &lt;mi&gt;
         C
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        \tau = R \times C
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.76666em;vertical-align:-0.08333em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.1132em;"&gt;
       τ
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.00773em;"&gt;
       R
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mbin"&gt;
       ×
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.07153em;"&gt;
       C
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 Avec :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         τ
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        \tau
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.43056em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.43056em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.1132em;"&gt;
       τ
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  : (prononcez "to") temps de charge/décharge en secondes (s)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         R
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        R
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.00773em;"&gt;
       R
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  : valeur de la résistance en Ohm (
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi mathvariant="normal"&gt;
         Ω
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        \Omega
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       Ω
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  )
 &lt;/li&gt;
 &lt;li&gt;
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         C
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        C
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.07153em;"&gt;
       C
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  : valeur de la capacité du condensateur en Farad (F)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Cette formule donne le temps
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        τ
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       \tau
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.43056em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.43056em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.1132em;"&gt;
      τ
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 qui correspond à 63% de la charge à la tension appliquée au condensateur. On considère que le condensateur est complètement chargé à partir de
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        3
       &lt;/mn&gt;
       &lt;mi&gt;
        τ
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       3 \tau
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.64444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.64444em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      3
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.1132em;"&gt;
      τ
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 (soit 95% de la tension de charge) ou
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        5
       &lt;/mn&gt;
       &lt;mi&gt;
        τ
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       5\tau
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.64444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.64444em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      5
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.1132em;"&gt;
      τ
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 (99% de la tension de charge).
&lt;/p&gt;
&lt;h5 id="imposons-notre-pwm"&gt;
 &lt;a aria-hidden="true" href="#imposons-notre-pwm"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Imposons notre PWM !
&lt;/h5&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Bon, très bien, mais quel est le rapport avec la PWM ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Ha, haa ! Alors, pour commencer, vous connaissez la réponse.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Depuis quand ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Depuis que je vous ai donné les explications précédentes. Dès que l’on aura imposé notre PWM au couple RC, il va se passer quelque chose. Quelque chose que je viens de vous expliquer. À chaque fois que le signal de la PWM sera au NL 1 (Niveau Logique 1), le condensateur va se charger. Dès que le signal repasse au NL 0, le condensateur va se décharger. Et ainsi de suite. En somme, cela donne une variation de tension aux bornes du condensateur semblable à celle-ci :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Charge et décharge successive" src="./images/uploaded/tuto-arduino-403-et-les-sorties-analogiques-enfin-presque/charge-et-decharge-successive.jpg"/&gt;
 &lt;figcaption&gt;
  Charge et décharge successive
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Qu’y a-t-il de nouveau par rapport au signal carré, à part sa forme bizarroïde !?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Dans ce cas, rien de plus, si on calcule la valeur moyenne du signal bleu, on trouvera la même valeur que pour le signal rouge. (Ne me demandez pas pourquoi, c’est comme ça, c’est une formule très compliquée qui le dit
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 ). Précisons que dans ce cas, encore une fois, le temps de charge/décharge
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        3
       &lt;/mn&gt;
       &lt;mi&gt;
        τ
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       3\tau
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.64444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.64444em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      3
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.1132em;"&gt;
      τ
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 du condensateur est choisi de façon à ce qu’il soit égal à une demi-période du signal. Que se passera-t-il si on choisit un temps de charge/décharge plus petit ou plus grand ?
&lt;/p&gt;
&lt;h5 id="constante-de-temps-tau-supérieure-à-la-période"&gt;
 &lt;a aria-hidden="true" href="#constante-de-temps-tau-supérieure-à-la-période"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Constante de temps
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        τ
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       \tau
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.43056em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.43056em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.1132em;"&gt;
      τ
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 supérieure à la période
&lt;/h5&gt;
&lt;p&gt;
 Voilà le chronogramme lorsque la constante de temps de charge/décharge du condensateur est plus grande que la période du signal :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Charge et décharge successive" src="./images/uploaded/tuto-arduino-403-et-les-sorties-analogiques-enfin-presque/charge-et-decharge-successive.png"/&gt;
 &lt;figcaption&gt;
  Charge et décharge successive
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ce chronogramme permet d’observer un phénomène intéressant. En effet, on voit que la tension aux bornes du condensateur n’atteint plus le +5V et le 0V comme au chronogramme précédent. Le couple RC étant plus grand que précédemment, le condensateur met plus de temps à se charger, du coup, comme le signal "va plus vite" que le condensateur, ce dernier ne peut se charger/décharger complètement. Si on continue d’augmenter la valeur résultante du couple RC, on va arriver à un signal comme ceci :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Charge et décharge successive" src="./images/uploaded/tuto-arduino-403-et-les-sorties-analogiques-enfin-presque/charge-et-decharge-successive.png"/&gt;
 &lt;figcaption&gt;
  Charge et décharge successive
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Et ce signal, Mesdames et Messieurs, c’est la valeur moyenne du signal de la PWM !!
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
&lt;/p&gt;
&lt;h4 id="calibrer-correctement-la-constante-rc"&gt;
 &lt;a aria-hidden="true" href="#calibrer-correctement-la-constante-rc"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Calibrer correctement la constante RC
&lt;/h4&gt;
&lt;p&gt;
 Je vous sens venir avec vos grands airs en me disant : "
 &lt;em&gt;
  Oui, mais là le signal il est pas du tout constant pour un niveau de tension. Il arrête pas de bouger et monter descendre ! Comment on fait si on veut une belle droite ?
 &lt;/em&gt;
 " "
 &lt;em&gt;
  Eh bien
 &lt;/em&gt;
 , dirais-je,
 &lt;em&gt;
  cela n’est pas impossible, mais se révèle être une tâche difficile et contraignante. Plusieurs arguments viennent conforter mes dires
 &lt;/em&gt;
 ".
&lt;/p&gt;
&lt;h5 id="le-temps-de-stabilisation-entre-deux-paliers"&gt;
 &lt;a aria-hidden="true" href="#le-temps-de-stabilisation-entre-deux-paliers"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le temps de stabilisation entre deux paliers
&lt;/h5&gt;
&lt;p&gt;
 Je vais vous montrer un chronogramme qui représente le signal PWM avec deux rapports cycliques différents. Vous allez pouvoir observer un phénomène "qui se cache" :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Charge et décharge successive" src="./images/uploaded/tuto-arduino-403-et-les-sorties-analogiques-enfin-presque/charge-et-decharge-successive.jpg"/&gt;
 &lt;figcaption&gt;
  Charge et décharge successive
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Voyez donc ce fameux chronogramme. Qu’en pensez-vous ? Ce n’est pas merveilleux hein !
 &lt;img alt=":(" class="smiley" src="./static/smileys/triste.png"/&gt;
 Quelques explications : pour passer d’un palier à un autre, le condensateur met un certain temps. Ce temps est grosso modo celui de son temps de charge (constante RC). C’est-à-dire que plus on va augmenter le temps de charge, plus le condensateur mettra du temps pour se stabiliser au palier voulu. Or si l’on veut créer un signal analogique qui varie assez rapidement, cela va nous poser problème.
&lt;/p&gt;
&lt;h5 id="la-perte-de-temps-en-conversion"&gt;
 &lt;a aria-hidden="true" href="#la-perte-de-temps-en-conversion"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La perte de temps en conversion
&lt;/h5&gt;
&lt;p&gt;
 C’est ce que je viens d’énoncer, plus la constante de temps est grande, plus il faudra de périodes de PWM pour stabiliser la valeur moyenne du signal à la tension souhaitée. À l’inverse, si on diminue la constante de temps, changer de palier sera plus rapide, mais la tension aux bornes du condensateur aura tendance à suivre le signal. C’est le premier chronogramme que l’on a vu plus haut.
&lt;/p&gt;
&lt;h5 id="finalement-comment-calibrer-correctement-la-constante-rc"&gt;
 &lt;a aria-hidden="true" href="#finalement-comment-calibrer-correctement-la-constante-rc"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Finalement, comment calibrer correctement la constante RC ?
&lt;/h5&gt;
&lt;p&gt;
 Cela s’avère être délicat. Il faut trouver le juste milieu en fonction du besoin que l’on a.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Si l’on veut un signal qui soit le plus proche possible de la valeur moyenne, il faut une constante de temps très grande.
 &lt;/li&gt;
 &lt;li&gt;
  Si au contraire on veut un signal qui soit le plus rapide et que la valeur moyenne soit une approximation, alors il faut une constante de temps faible.
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   Si on veut un signal rapide et le plus proche possible de la valeur moyenne, on a deux solutions qui sont :
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    mettre un deuxième montage ayant une constante de temps un peu plus grande, en cascade du premier (on perd quand même en rapidité)
   &lt;/li&gt;
   &lt;li&gt;
    changer la fréquence de la PWM
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Cette expérience peut être visualisée sur le schéma interactif suivant (attention, il faut souvent relancer la simulation pour observer l’impact du changement de valeur du condensateur) :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/26HFCFSbYWI" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="modifier-la-fréquence-de-la-pwm"&gt;
 &lt;a aria-hidden="true" href="#modifier-la-fréquence-de-la-pwm"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Modifier la fréquence de la PWM
&lt;/h3&gt;
&lt;p&gt;
 On l’a vu, avec la fréquence actuelle de la PWM en sortie de l’Arduino, on va ne pouvoir créer que des signaux "lents". Lorsque vous aurez besoin d’aller plus vite, vous vous confronterez à ce problème. C’est pourquoi je vais vous expliquer comment modifier la fréquence de cette PWM.
&lt;/p&gt;
&lt;div class="custom-block alert alert-danger"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Nouveau message d’avertissement : cette fois, on va directement toucher aux registres du microcontrôleur, donc si vous comprenez pas tout, ce n’est pas très grave car cela requiert un niveau encore plus élevé que celui que vous avez actuellement.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Commençons cette très courte sous-partie.
&lt;/p&gt;
&lt;h5 id="pourquoi-changer-la-fréquence-de-la-pwm"&gt;
 &lt;a aria-hidden="true" href="#pourquoi-changer-la-fréquence-de-la-pwm"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Pourquoi changer la fréquence de la PWM ?
&lt;/h5&gt;
&lt;p&gt;
 Oui, pourquoi ? Tout simplement pour essayer de créer un signal qui se rapproche le plus de la valeur moyenne de la PWM à chaque instant. L’objectif est de pouvoir maximiser l’avantage de la structure ayant une faible constante de temps tout en éliminant au mieux son désavantage. Vous verrez peut-être mieux avec des chronogrammes. En voici deux, le premier est celui où la fréquence de la PWM est celle fournie d’origine par l’Arduino, le second est la PWM à une fréquence deux fois plus élevée, après modification du programme :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="L'impact de la modification de la PWM" src="./images/uploaded/tuto-arduino-403-et-les-sorties-analogiques-enfin-presque/limpact-de-la-modification-de-la-pwm.jpg"/&gt;
 &lt;figcaption&gt;
  L'impact de la modification de la PWM
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Pour une constante de temps identique pour chaque courbe réalisée, on relève que le temps de stabilisation du signal est plus rapide sur le chronogramme où la fréquence est deux fois plus élevée qu’avec la fréquence standard d’Arduino. Ici donc, on a :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         t
        &lt;/mi&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
       &lt;/msub&gt;
       &lt;mo&gt;
        −
       &lt;/mo&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         t
        &lt;/mi&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
       &lt;/msub&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mo&gt;
        (
       &lt;/mo&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         t
        &lt;/mi&gt;
        &lt;mn&gt;
         4
        &lt;/mn&gt;
       &lt;/msub&gt;
       &lt;mo&gt;
        −
       &lt;/mo&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         t
        &lt;/mi&gt;
        &lt;mn&gt;
         3
        &lt;/mn&gt;
       &lt;/msub&gt;
       &lt;mo&gt;
        )
       &lt;/mo&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       t_2 - t_1 = 2 \times (t_4 - t_3)
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.75em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit"&gt;
       t
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             2
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      −
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit"&gt;
       t
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             1
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mopen"&gt;
      (
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit"&gt;
       t
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             4
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      −
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit"&gt;
       t
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             3
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mclose"&gt;
      )
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 . En effet car le temps (T) est inversement proportionnel à la fréquence (F) selon cette formule :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        F
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mfrac&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
        &lt;mi&gt;
         T
        &lt;/mi&gt;
       &lt;/mfrac&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       F = \frac 1 T
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.845108em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
      F
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mopen nulldelimiter"&gt;
      &lt;/span&gt;
      &lt;span class="mfrac"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.845108em;"&gt;
          &lt;span style="top:-2.6550000000000002em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mathit mtight" style="margin-right:0.13889em;"&gt;
             T
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.15em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="stretchy" style="height:0.2em;"&gt;
            &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
             &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
             &lt;/path&gt;
            &lt;/svg&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.394em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             1
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.345em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mclose nulldelimiter"&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 Avec quelques mots pour expliquer cela, le temps de charge du condensateur, pour se stabiliser au nouveau palier de tension, est plus rapide avec une fréquence plus élevée. À comparaison, pour le premier signal, le temps de charge est deux fois plus grand que celui pour le deuxième signal où la fréquence est deux fois plus élevée.
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Mes dessins ne sont pas très rigoureux, mais mes talents de graphistes me limitent à ça. Soyez indulgent à mon égard.
   &lt;img alt=":-°" class="smiley" src="./static/smileys/siffle.png"/&gt;
   Quoi qu’il en soit, il s’agissait, ici, simplement d’illustrer mes propos et donner un exemple concret.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="utilisation-du-registre"&gt;
 &lt;a aria-hidden="true" href="#utilisation-du-registre"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utilisation du registre
&lt;/h5&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Bigre ! Je viens de comprendre pourquoi on avait besoin de changer la fréquence de la PWM.
   &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
   Mais euh… comment on fait ? C’est quoi les registres ?
   &lt;img alt=":-°" class="smiley" src="./static/smileys/siffle.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Les registres…………… eh bien…………… c’est compliqué !
 &lt;img alt=":ninja:" class="smiley" src="./static/smileys/ninja.png"/&gt;
 Non, je n’entrerai pas dans le détail en expliquant ce qu’est un registre, de plus c’est un sujet que je ne maitrise pas bien et qui vous sera certainement inutile dans le cas présent. Disons pour l’instant que le registre est une variable très spéciale.
&lt;/p&gt;
&lt;h5 id="code-de-modification-de-la-fréquence-de-la-pwm"&gt;
 &lt;a aria-hidden="true" href="#code-de-modification-de-la-fréquence-de-la-pwm"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Code de modification de la fréquence de la PWM
&lt;/h5&gt;
&lt;p&gt;
 Alors, pour modifier la fréquence de la PWM de l’Arduino on doit utiliser le code suivant :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// on définit une variable de type byte&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// qui contiendra l'octet à donner au registre pour diviser la fréquence de la PWM&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// division par : 1, 8, 64, 256, 1024&lt;/span&gt;
byte division_frequence=&lt;span class="hljs-number"&gt;0x01&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// fréquence : 62500Hz, 7692Hz, ...&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// temps de la période : 16µs, 130µs, ...&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    pinMode(&lt;span class="hljs-number"&gt;6&lt;/span&gt;, OUTPUT); &lt;span class="hljs-comment"&gt;// broche de sortie&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;// TCCR0B c'est le registre, on opère un masquage sur lui même&lt;/span&gt;
    TCCR0B = TCCR0B &amp;amp; &lt;span class="hljs-number"&gt;0b11111000&lt;/span&gt; | division_frequence;
    &lt;span class="hljs-comment"&gt;// ce qui permet de modifier la fréquence de la PWM&lt;/span&gt;
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt; &lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on écrit simplement la valeur de 0 à 255 du rapport cyclique du signal&lt;/span&gt;
    analogWrite(&lt;span class="hljs-number"&gt;6&lt;/span&gt;, &lt;span class="hljs-number"&gt;128&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// qui est à la nouvelle fréquence choisit&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Modification de la fréquence de la PWM
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Vous remarquerez que les nombres binaires avec Arduino s’écrivent avec les caractères
   &lt;strong&gt;
    0b
   &lt;/strong&gt;
   devant.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Cette sous-partie peut éventuellement être prise pour un
   &lt;em&gt;
    truc et astuce
   &lt;/em&gt;
   . C’est quelque peu le cas, malheureusement, mais pour éviter que cela ne le soit complètement, je vais vous expliquer des notions supplémentaires, par exemple la ligne 14 du code.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="traduction-sil-vous-plait"&gt;
 &lt;a aria-hidden="true" href="#traduction-sil-vous-plait"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Traduction s’il vous plait !
&lt;/h5&gt;
&lt;p&gt;
 Je le disais donc, on va voir ensemble comment fonctionne la ligne 14 du programme :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;TCCR0B = TCCR0B &amp;amp; &lt;span class="hljs-number"&gt;0b11111000&lt;/span&gt; | division_frequence;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Très simplement,
 &lt;code&gt;
  TCCR0B
 &lt;/code&gt;
 est le nom du registre utilisé. Cette ligne est donc là pour modifier le registre puisqu’on fait une opération avec et le résultat est inscrit dans le registre. Cette opération est, il faudra l’avouer, peu commune. On effectue, ce que l’on appelle en programmation, un
 &lt;strong&gt;
  masquage
 &lt;/strong&gt;
 . Le masquage est une opération logique que l’on utilise avec des données binaires. On peut faire différents masquages en utilisant les opérations logiques ET, OU, OU exclusif, … Dans le cas présent, on a la variable
 &lt;code&gt;
  TCCR0B
 &lt;/code&gt;
 qui est sous forme binaire et on effectue une opération
 &lt;strong&gt;
  ET
 &lt;/strong&gt;
 (symbole
 &lt;strong&gt;
  &amp;amp;
 &lt;/strong&gt;
 ) puis une opération
 &lt;strong&gt;
  OU
 &lt;/strong&gt;
 (symbole
 &lt;strong&gt;
  |
 &lt;/strong&gt;
 ). Les opérations ET et OU sont définies par une
 &lt;strong&gt;
  table de vérité
 &lt;/strong&gt;
 . Avec deux entrées, on a une sortie qui donne le résultat de l’opération effectuée avec les deux niveaux d’entrée.
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="table-wrapper"&gt;
  &lt;table class=" table table-bordered table-striped"&gt;
   &lt;thead&gt;
    &lt;tr&gt;
     &lt;th colspan="2" rowspan="1"&gt;
      &lt;p&gt;
       Entrées
      &lt;/p&gt;
     &lt;/th&gt;
     &lt;th colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       Sortie ET
      &lt;/p&gt;
     &lt;/th&gt;
     &lt;th colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       Sortie OU
      &lt;/p&gt;
     &lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;th colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       A
      &lt;/p&gt;
     &lt;/th&gt;
     &lt;th colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       B
      &lt;/p&gt;
     &lt;/th&gt;
     &lt;th colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       A ET B
      &lt;/p&gt;
     &lt;/th&gt;
     &lt;th colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       A OU B
      &lt;/p&gt;
     &lt;/th&gt;
    &lt;/tr&gt;
   &lt;/thead&gt;
   &lt;tbody&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       0
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       0
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       0
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       0
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       0
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       1
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       0
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       1
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       1
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       0
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       0
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       1
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       1
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       1
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       1
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       1
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
   &lt;/tbody&gt;
  &lt;/table&gt;
 &lt;/div&gt;
 &lt;p&gt;
  Table: Table de vérité de l’opérateur ET et OU
 &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
 Les opérations de type ET et OU ont un niveau de priorité comme la multiplication et l’addition. On commence toujours par effectuer l’opération ET, puis on termine avec l’opération OU. On pourrait donc écrire ceci :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;TCCR0B = (TCCR0B &amp;amp; &lt;span class="hljs-number"&gt;0b11111000&lt;/span&gt;) | division_frequence;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Prenons maintenant un exemple où la variable spéciale
 &lt;code&gt;
  TCCR0B
 &lt;/code&gt;
 serait un nombre binaire égal à :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;TCCR0B = &lt;span class="hljs-number"&gt;0b10011101&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// valeur du registre&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 À présent, on lui fait un masquage de type ET :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;TCCR0B = &lt;span class="hljs-number"&gt;0b10011101&lt;/span&gt;;

TCCR0B = TCCR0B &amp;amp; &lt;span class="hljs-number"&gt;0b11111000&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// masquage de type ET&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 On fait l’opération à l’aide de la table de vérité du ET (voir tableau ci-dessus) et on trouve le résultat :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;TCCR0B = &lt;span class="hljs-number"&gt;0b10011101&lt;/span&gt;;

TCCR0B = TCCR0B &amp;amp; &lt;span class="hljs-number"&gt;0b11111000&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// TCCR0B vaut maintenant : 0b10011000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 En somme, on conclut que l’on a gardé la valeur des 5 premiers bits, mais l’on a effacé la valeur des 3 derniers bits pour les mettre à zéro. Ainsi, quelle que soit la valeur binaire de TCCR0B, on met les bits que l’on veut à l’état bas. Ceci va ensuite nous permettre de changer l’état des bits mis à l’état bas en effectuant l’opération OU :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;byte division_frequence = &lt;span class="hljs-number"&gt;0x01&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// nombre haxadécimal qui vaut 0b00000001&lt;/span&gt;

TCCR0B = &lt;span class="hljs-number"&gt;0b10011101&lt;/span&gt;;

TCCR0B = TCCR0B &amp;amp; &lt;span class="hljs-number"&gt;0b11111000&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// TCCR0B vaut maintenant : 0b10011000&lt;/span&gt;

TCCR0B = TCCR0B | division_frequence;
&lt;span class="hljs-comment"&gt;// TCCR0B vaut maintenant : 0b10011001&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 D’après la table de vérité du OU logique, on a modifié la valeur de
 &lt;code&gt;
  TCCR0B
 &lt;/code&gt;
 en ne changeant que le ou les bits que l’on voulait.
&lt;/p&gt;
&lt;div class="custom-block alert alert-danger"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   La valeur de
   &lt;code&gt;
    TCCR0B
   &lt;/code&gt;
   que je vous ai donnée est bidon. C’est un exemple qui vous permet de comprendre comment fonctionne un masquage.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Ce qu’il faut retenir, pour changer la fréquence de la PWM, c’est que pour la variable
 &lt;code&gt;
  division_frequence
 &lt;/code&gt;
 , il faut lui donner les valeurs hexadécimales suivantes :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-number"&gt;0x01&lt;/span&gt; &lt;span class="hljs-comment"&gt;// la fréquence vaut 62500Hz (fréquence maximale fournie par la PWM =&amp;gt; provient de la fréquence du quartz / 256)&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// effectue une division par 1 de la fréquence max&lt;/span&gt;

&lt;span class="hljs-number"&gt;0x02&lt;/span&gt; &lt;span class="hljs-comment"&gt;// f = 7692Hz (division par 8 de la fréquence maximale)&lt;/span&gt;
&lt;span class="hljs-number"&gt;0x03&lt;/span&gt; &lt;span class="hljs-comment"&gt;// f = 976Hz, division par 64&lt;/span&gt;
&lt;span class="hljs-number"&gt;0x04&lt;/span&gt; &lt;span class="hljs-comment"&gt;// f = 244Hz, division par 256&lt;/span&gt;
&lt;span class="hljs-number"&gt;0x05&lt;/span&gt; &lt;span class="hljs-comment"&gt;// f = 61Hz, division par 1024&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Vous trouverez plus de détails sur
   &lt;a href="http://www.arcfn.com/2009/07/secrets-of-arduino-pwm.html"&gt;
    cette page
   &lt;/a&gt;
   (en anglais).
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="test-de-vérification"&gt;
 &lt;a aria-hidden="true" href="#test-de-vérification"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Test de vérification
&lt;/h5&gt;
&lt;p&gt;
 Pour vérifier que la fréquence a bien changé, on peut reprendre le montage que l’on a fait plus haut et enlever l’interrupteur en le remplaçant par un fil. On ne met plus un générateur de tension continue, mais on branche une sortie PWM de l’arduino avec le programme qui va bien. Pour deux fréquences différentes, on devrait voir la LED s’allumer plus ou moins rapidement. On compare le temps à l’état au lorsque l’on écrit 1000 fois un niveau de PWM à 255 à celui mis par le même programme avec une fréquence de PWM différente, grâce à une LED.
&lt;/p&gt;
&lt;p&gt;
 À partir de maintenant, vous allez pouvoir faire des choses amusantes avec la PWM. Cela va nous servir pour les moteurs pour ne citer qu’eux. Mais avant, car on en est pas encore là, je vous propose un petit TP assez sympa. Rendez-vous au prochain chapitre !
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
&lt;/p&gt;
&lt;div class="footnotes"&gt;
 &lt;hr/&gt;
 &lt;ol&gt;
  &lt;li id="fn-1-o74dBPrb0"&gt;
   &lt;p&gt;
    La même chose est réalisable avec des sites comme
    &lt;a href="http://htmlcolorcodes.com/color-picker/"&gt;
     http://htmlcolorcodes.com/color-picker/
    &lt;/a&gt;
   &lt;/p&gt;
   &lt;a class="footnote-backref" href="#fnref-1-o74dBPrb0" title="Retourner au texte de la note 1"&gt;
    ↩
   &lt;/a&gt;
  &lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>[Exercice] Une animation “YouTube”</title><link href="https://eskimon.fr/tuto-arduino-404-exercice-une-animation-youtube" rel="alternate"></link><published>2013-12-11T18:14:00+01:00</published><updated>2013-12-11T18:14:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-11:/tuto-arduino-404-exercice-une-animation-youtube</id><summary type="html">&lt;p&gt;
 Dans ce petit exercice, je vous propose de faire une animation que vous avez tous vu au moins une fois dans votre vie : le .gif de chargement YouTube ! Pour ceux qui se posent des questions, nous n’allons pas faire de Photoshop ou quoi que ce soit de ce genre …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Dans ce petit exercice, je vous propose de faire une animation que vous avez tous vu au moins une fois dans votre vie : le .gif de chargement YouTube ! Pour ceux qui se posent des questions, nous n’allons pas faire de Photoshop ou quoi que ce soit de ce genre. Non, nous (vous en fait
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 ) allons le faire … avec des LED ! Alors place à l’exercice !
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;a href="#Énoncé"&gt;
   Énoncé
  &lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#solution"&gt;
    Solution
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#le-schéma"&gt;
     Le schéma
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#le-code"&gt;
      Le code
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#les-variables-globales"&gt;
       Les variables globales
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-setup"&gt;
       Le setup
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-loop"&gt;
       La loop
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-étapes-de-lanimation"&gt;
       Les étapes de l’animation
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#mise-à-jour-des-led"&gt;
       Mise à jour des LED
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-programme-complet"&gt;
       Le programme complet
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="Énoncé"&gt;
 &lt;a aria-hidden="true" href="#Énoncé"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Énoncé
&lt;/h3&gt;
&lt;p&gt;
 Pour clôturer votre apprentissage avec les voies analogiques, nous allons faire un petit exercice pour se détendre. Le but de ce dernier est de réaliser une des animations les plus célèbres de l’internet : le .gif de chargement YouTube (qui est aussi utilisé sur d’autres plateformes et applications).
&lt;/p&gt;
&lt;p&gt;
 Nous allons le réaliser avec des LED et faire varier la vitesse de défilement grâce à un potentiomètre. Pour une fois, plutôt qu’une longue explication je vais juste vous donner une liste de composants utiles et une vidéo qui parle d’elle même !
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;p&gt;
  &lt;strong&gt;
   Bon courage !
  &lt;/strong&gt;
 &lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
 &lt;li&gt;
  6 LED + leurs résistances de limitation de courant
 &lt;/li&gt;
 &lt;li&gt;
  Un potentiomètre
 &lt;/li&gt;
 &lt;li&gt;
  Une Arduino, une breadboard et des fils !
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/SyxXHZzCoHY" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="solution"&gt;
 &lt;a aria-hidden="true" href="#solution"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Solution
&lt;/h3&gt;
&lt;h4 id="le-schéma"&gt;
 &lt;a aria-hidden="true" href="#le-schéma"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le schéma
&lt;/h4&gt;
&lt;p&gt;
 Voici tout d’abord le schéma, car une bonne base électronique permettra de faire un beau code ensuite. Pour tout les lecteurs qui ne pensent qu’aux circuits et ne regardent jamais la version "photo" du montage, je vous invite pour une fois à y faire attention, surtout pour l’aspect géométrique du placement des LED. En passant, dans l’optique de faire varier la luminosité des LED, il faudra les connecter sur les broches PWM (notées avec un '~’).
&lt;/p&gt;
&lt;p&gt;
 Le potentiomètre quant à lui sera bien entendu connecté à une entrée analogique (la 0 dans mon cas). Comme toujours, les LED auront leur anode reliées au +5V et seront pilotées par état bas (important de le rappeler pour le code ensuite).
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;img alt="Animation Youtube - Schéma" src="./images/uploaded/tuto-arduino-404-exercice-une-animation-youtube/animation-youtube-schema.png"/&gt;
   &lt;figcaption&gt;
    Animation Youtube - Schéma
   &lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;figure&gt;
   &lt;img alt="Animation Youtube - Montage" src="./images/uploaded/tuto-arduino-404-exercice-une-animation-youtube/animation-youtube-montage.png"/&gt;
   &lt;figcaption&gt;
    Animation Youtube - Montage
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voici le schéma sans code si vous souhaitez faire ce dernier vous-même :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/9b8W0uB0skv" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="le-code"&gt;
 &lt;a aria-hidden="true" href="#le-code"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le code
&lt;/h4&gt;
&lt;p&gt;
 Alors petit défi avant de regarder la solution… En combien de ligne avez vous réussi à écrire votre code (proprement, sans tout mettre sur une seule ligne, pas de triche !) ? Personnellement je l’ai fait en 23 lignes, en faisant des beaux espaces propres.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 Bon allez, trêve de plaisanterie, voici la solution, comme à l’accoutumé dans des balises secrètes…
&lt;/p&gt;
&lt;h5 id="les-variables-globales"&gt;
 &lt;a aria-hidden="true" href="#les-variables-globales"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les variables globales
&lt;/h5&gt;
&lt;p&gt;
 Comme vous devez vous en douter, nous allons commencer par déclarer les différentes broches que nous allons utiliser. Il nous en faut six pour les LED et une pour le potentiomètre de réglage de la vitesse d’animation. Pour des fins de simplicité dans le code, j’ai mis les six sorties dans un tableau. Pour d’autres fins de facilité, j’ai aussi mis les "niveaux" de luminosité dans un tableau de char que j’appellerai "pwm". Dans la balise suivante vous trouverez l’ensemble de ces données :
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-cpp"&gt; &lt;span class="hljs-comment"&gt;// sortie LEDs&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; LED[&lt;span class="hljs-number"&gt;6&lt;/span&gt;] = {&lt;span class="hljs-number"&gt;3&lt;/span&gt;,&lt;span class="hljs-number"&gt;5&lt;/span&gt;,&lt;span class="hljs-number"&gt;6&lt;/span&gt;,&lt;span class="hljs-number"&gt;9&lt;/span&gt;,&lt;span class="hljs-number"&gt;10&lt;/span&gt;,&lt;span class="hljs-number"&gt;11&lt;/span&gt;};
&lt;span class="hljs-comment"&gt;// niveaux de luminosité utilisé&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; pwm[&lt;span class="hljs-number"&gt;6&lt;/span&gt;] = {&lt;span class="hljs-number"&gt;255&lt;/span&gt;,&lt;span class="hljs-number"&gt;210&lt;/span&gt;,&lt;span class="hljs-number"&gt;160&lt;/span&gt;,&lt;span class="hljs-number"&gt;200&lt;/span&gt;,&lt;span class="hljs-number"&gt;220&lt;/span&gt;,&lt;span class="hljs-number"&gt;240&lt;/span&gt;};
&lt;span class="hljs-comment"&gt;// potentiometre sur la broche 0&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; potar = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="le-setup"&gt;
 &lt;a aria-hidden="true" href="#le-setup"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le setup
&lt;/h5&gt;
&lt;p&gt;
 Personne ne devrais se tromper dans cette fonction, on est dans le domaine du connu, vu et revu ! Il nous suffit juste de mettre en entrée le potentiomètre sur son convertisseur analogique et en sortie mettre les LED (une simple boucle
 &lt;code&gt;
  for
 &lt;/code&gt;
 suffit grace au tableau
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 ).
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// le potentiomètre en entrée&lt;/span&gt;
    pinMode(potar, INPUT);
    &lt;span class="hljs-comment"&gt;// les LEDs en sorties&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class="hljs-number"&gt;6&lt;/span&gt;; i++)
    pinMode(LED[i], OUTPUT);
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="la-loop"&gt;
 &lt;a aria-hidden="true" href="#la-loop"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La loop
&lt;/h5&gt;
&lt;p&gt;
 Passons au cœur du programme, la boucle
 &lt;code&gt;
  loop()
 &lt;/code&gt;
 ! Je vais vous la divulguer dès maintenant puis l’expliquer ensuite :
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// étape de l'animation&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class="hljs-number"&gt;6&lt;/span&gt;; i++)
    {
        &lt;span class="hljs-comment"&gt;// mise à jour des LEDs&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; n=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; n&amp;lt;&lt;span class="hljs-number"&gt;6&lt;/span&gt;; n++)
        {
            analogWrite(LED[n], pwm[(n+i)%&lt;span class="hljs-number"&gt;6&lt;/span&gt;]);
        }
        &lt;span class="hljs-comment"&gt;// récupère le temps&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; temps = analogRead(potar);
        &lt;span class="hljs-comment"&gt;// tmax = 190ms, tmin = 20ms&lt;/span&gt;
        delay(temps/&lt;span class="hljs-number"&gt;6&lt;/span&gt; + &lt;span class="hljs-number"&gt;20&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Comme vous pouvez le constater, cette fonction se contente de faire deux boucle. L’une sert à mettre à jour les "phases de mouvements" et l’autre met à jour les PWM sur chacune des LED.
&lt;/p&gt;
&lt;h5 id="les-étapes-de-lanimation"&gt;
 &lt;a aria-hidden="true" href="#les-étapes-de-lanimation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les étapes de l’animation
&lt;/h5&gt;
&lt;p&gt;
 Comme expliqué précédemment, la première boucle concerne les différentes phases de l’animation. Comme nous avons six LED nous avons six niveaux de luminosité et donc six étapes à appliquer (chaque LED prenant successivement chaque niveau). Nous verrons la seconde boucle après.
&lt;/p&gt;
&lt;p&gt;
 Avant de passer à la phase d’animation suivante, nous faisons une petite pause. La durée de cette pause détermine la vitesse de l’animation. Comme demandé dans le cahier des charges, cette durée sera réglable à l’aide d’un potentiomètre. La ligne 9 nous permet donc de récupérer la valeur lue sur l’entrée analogique. Pour rappel, elle variera de 0 à 1023.
&lt;/p&gt;
&lt;p&gt;
 Si l’on applique cette valeur directement au délai, nous aurions une animation pouvant aller de très très très rapide (potar au minimum) à très très très lent (delay de 1023 ms) lorsque le potar est dans l’autre sens.
&lt;/p&gt;
&lt;p&gt;
 Afin d’obtenir un réglage plus sympa, on fait une petite opération sur cette valeur. Pour ma part j’ai décidé de la diviser par 6, ce qui donne
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mi&gt;
        m
       &lt;/mi&gt;
       &lt;mi&gt;
        s
       &lt;/mi&gt;
       &lt;mo&gt;
        ≤
       &lt;/mo&gt;
       &lt;mi&gt;
        t
       &lt;/mi&gt;
       &lt;mi&gt;
        e
       &lt;/mi&gt;
       &lt;mi&gt;
        m
       &lt;/mi&gt;
       &lt;mi&gt;
        p
       &lt;/mi&gt;
       &lt;mi&gt;
        s
       &lt;/mi&gt;
       &lt;mo&gt;
        ≤
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mn&gt;
        7
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mi&gt;
        m
       &lt;/mi&gt;
       &lt;mi&gt;
        s
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       0 ms \leq temps \leq 170 ms
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.64444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.8388800000000001em;vertical-align:-0.19444em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      m
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      s
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      ≤
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      t
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      e
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      m
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      p
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      s
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      ≤
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      7
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      m
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      s
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 . Estimant que 0 ne permet pas de faire une animation (puisqu’on passerait directement à l’étape suivante sans attendre), j’ajoute 20 à ce résultat. Le temps final sera donc compris dans l’intervalle :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mi&gt;
        m
       &lt;/mi&gt;
       &lt;mi&gt;
        s
       &lt;/mi&gt;
       &lt;mo&gt;
        ≤
       &lt;/mo&gt;
       &lt;mi&gt;
        t
       &lt;/mi&gt;
       &lt;mi&gt;
        e
       &lt;/mi&gt;
       &lt;mi&gt;
        m
       &lt;/mi&gt;
       &lt;mi&gt;
        p
       &lt;/mi&gt;
       &lt;mi&gt;
        s
       &lt;/mi&gt;
       &lt;mo&gt;
        ≤
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mn&gt;
        9
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mi&gt;
        m
       &lt;/mi&gt;
       &lt;mi&gt;
        s
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       20 ms \leq temps \leq 190 ms
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.64444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.8388800000000001em;vertical-align:-0.19444em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      m
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      s
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      ≤
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      t
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      e
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      m
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      p
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      s
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      ≤
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      9
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      m
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      s
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 .
&lt;/p&gt;
&lt;h5 id="mise-à-jour-des-led"&gt;
 &lt;a aria-hidden="true" href="#mise-à-jour-des-led"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Mise à jour des LED
&lt;/h5&gt;
&lt;p&gt;
 La deuxième boucle possède une seule ligne qui est la clé de toute l’animation !
&lt;/p&gt;
&lt;p&gt;
 Cette boucle sert à mettre à jour les LED pour qu’elles aient toute la bonne luminosité. Pour cela, on utilisera la fonction analogWrite() (car après tout c’est le but du chapitre !). Le premier paramètre sera le numéro de la LED (grâce une fois de plus au tableau) et le second sera la valeur du PWM. C’est pour cette valeur que toute l’astuce survient.
&lt;/p&gt;
&lt;p&gt;
 En effet, j’utilise une opération mathématique un peu particulière que l’on appelle
 &lt;strong&gt;
  modulo
 &lt;/strong&gt;
 . Pour ceux qui ne se rappelle pas de ce dernier, nous l’avons vu il y a très longtemps dans la première partie, deuxième chapitres sur
 &lt;a href="https:// zestedesavoir.com/tutoriels/537/arduino-premiers-pas-en-informatique-embarquee/742/decouverte-de-larduino/3418/le-langage-arduino-12/#2-les-variables"&gt;
  les variables
 &lt;/a&gt;
 . Cet opérateur permet de donner le résultat de la division euclidienne (mais je vous laisse aller voir le cours pour plus de détail). Pour obtenir la bonne valeur de luminosité il me faut lire la bonne case du tableau pwm[].
&lt;/p&gt;
&lt;p&gt;
 Ayant six niveaux de luminosité, j’ai six case dans mon tableau. Mais comment obtenir le bonne ? Eh bien simplement en additionnant le numéro de la LED en train d’être mise à jour (donné par la seconde boucle) et le numéro de l’étape de l’animation en cours (donné par la première boucle). Seulement imaginons que nous mettions à jour la sixième LED (indice 5) pour la quatrième étape (indice 3). Ça nous donne 8. Hors 8 est plus grand que 6 (L’index 5 est la sixième led). En utilisant le modulo, nous prenons le reste de la division de 8/6 soit 2. Il nous faudra donc utiliser la case numéro 2 du tableau pwm[] pour cette utilisation.
 &lt;em&gt;
  Tout simplement
 &lt;/em&gt;
 &lt;img alt=":p" class="smiley" src="./static/smileys/langue.png"/&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Je suis conscient que cette écriture n’est pas simple. Il est tout a fait normal de ne pas l’avoir trouvé et demande une certaine habitude de la programmation et ses astuces pour y penser.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Pour ceux qui se demande encore quel est l’intérêt d’utiliser des tableaux de données, voici deux éléments de réponse.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Admettons j’utilise une Arduino Mega qui possède 15 pwm, j’aurais pu allumer 15 LEDs dans mon animation. Mais si j’avais fait mon setup de manière linéaire, il m’aurait fallu rajouter 9 lignes. Grâce au tableau, j’ai juste besoin de les ajouter à ce dernier et de modifier l’indice de fin pour l’initialisation dans la boucle
  &lt;code&gt;
   for
  &lt;/code&gt;
  .
 &lt;/li&gt;
 &lt;li&gt;
  La même remarque s’applique à l’animation. En modifiant simplement les tableaux je peux changer rapidement l’animation, ses niveaux de luminosité, le nombre de LEDs, l’ordre d’éclairage etc…
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="le-programme-complet"&gt;
 &lt;a aria-hidden="true" href="#le-programme-complet"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le programme complet
&lt;/h5&gt;
&lt;p&gt;
 Et pour tout ceux qui doute du fonctionnement du programme, voici dès maintenant le code complet de la machine ! (Attention lorsque vous faites vos branchement à mettre les LED dans le bon ordre, sous peine d’avoir une séquence anarchique).
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// sortie LEDs&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; LED[&lt;span class="hljs-number"&gt;6&lt;/span&gt;] = {&lt;span class="hljs-number"&gt;3&lt;/span&gt;,&lt;span class="hljs-number"&gt;5&lt;/span&gt;,&lt;span class="hljs-number"&gt;6&lt;/span&gt;,&lt;span class="hljs-number"&gt;9&lt;/span&gt;,&lt;span class="hljs-number"&gt;10&lt;/span&gt;,&lt;span class="hljs-number"&gt;11&lt;/span&gt;};
&lt;span class="hljs-comment"&gt;// niveaux de luminosité utilisé&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; pwm[&lt;span class="hljs-number"&gt;6&lt;/span&gt;] = {&lt;span class="hljs-number"&gt;255&lt;/span&gt;,&lt;span class="hljs-number"&gt;210&lt;/span&gt;,&lt;span class="hljs-number"&gt;160&lt;/span&gt;,&lt;span class="hljs-number"&gt;200&lt;/span&gt;,&lt;span class="hljs-number"&gt;220&lt;/span&gt;,&lt;span class="hljs-number"&gt;240&lt;/span&gt;};
&lt;span class="hljs-comment"&gt;// potentiometre sur la broche 0&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; potar = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    pinMode(potar, INPUT);
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class="hljs-number"&gt;6&lt;/span&gt;; i++)
        pinMode(LED[i], OUTPUT);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// étape de l'animation&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class="hljs-number"&gt;6&lt;/span&gt;; i++)
    {
        &lt;span class="hljs-comment"&gt;// mise à jour des LEDs&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; n=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; n&amp;lt;&lt;span class="hljs-number"&gt;6&lt;/span&gt;; n++)
        {
            analogWrite(LED[n], pwm[(n+i)%&lt;span class="hljs-number"&gt;6&lt;/span&gt;]);
        }
        &lt;span class="hljs-comment"&gt;// récupère le temps&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; temps = analogRead(potar);
        &lt;span class="hljs-comment"&gt;// tmax = 190ms, tmin = 20ms&lt;/span&gt;
        delay(temps/&lt;span class="hljs-number"&gt;6&lt;/span&gt; + &lt;span class="hljs-number"&gt;20&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Et voici la solution sur simulateur :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/6cSEQY3m7mQ" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 La mise en bouche des applications possibles avec les entrées/sortie PWM est maintenant terminée. Je vous laisse réfléchir à ce que vous pourriez faire avec. Tenez, d’ailleurs les chapitres de la partie suivante utilisent ces entrées/sorties et ce n’est pas par hasard…
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Les écrans LCD</title><link href="https://eskimon.fr/tuto-arduino-701-les-%C3%A9crans-lcd" rel="alternate"></link><published>2013-12-11T18:14:00+01:00</published><updated>2013-12-11T18:14:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-11:/tuto-arduino-701-les-écrans-lcd</id><summary type="html">&lt;p&gt;
 Vous avez appris plus tôt comment interagir avec l’ordinateur, lui envoyer de l’information. Mais maintenant, vous voudrez sûrement pouvoir afficher de l’information sans avoir besoin d’un ordinateur. Avec les écrans
 &lt;abbr title="Liquid Crystal Display"&gt;
  LCD
 &lt;/abbr&gt;
 , nous allons pouvoir afficher du texte sur un écran qui n’est pas très coûteux …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Vous avez appris plus tôt comment interagir avec l’ordinateur, lui envoyer de l’information. Mais maintenant, vous voudrez sûrement pouvoir afficher de l’information sans avoir besoin d’un ordinateur. Avec les écrans
 &lt;abbr title="Liquid Crystal Display"&gt;
  LCD
 &lt;/abbr&gt;
 , nous allons pouvoir afficher du texte sur un écran qui n’est pas très coûteux et ainsi faire des projets sensationnels !
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#un-écran-lcd-cest-quoi"&gt;
    Un écran LCD c’est quoi ?
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#fonctionnement-de-lécran"&gt;
       Fonctionnement de l’écran
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#commande-du-lcd"&gt;
      Commande du LCD
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-décodeur-de-caractères"&gt;
       Le décodeur de caractères
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#quel-écran-choisir"&gt;
    Quel écran choisir ?
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#les-caractéristiques"&gt;
      Les caractéristiques
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#texte-ou-graphique"&gt;
       Texte ou Graphique ?
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#ce-nest-pas-la-taille-qui-compte"&gt;
       Ce n’est pas la taille qui compte !
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-couleur-cest-important"&gt;
       La couleur, c’est important
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#communication-avec-lécran"&gt;
      Communication avec l’écran
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#la-communication-parallèle"&gt;
       La communication parallèle
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-communication-série"&gt;
       La communication série
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#et-par-liaison-i²c"&gt;
       Et par liaison I²C
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#comment-on-sen-sert"&gt;
    Comment on s’en sert ?
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#le-branchement"&gt;
      Le branchement
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-montage-à-8-broches-de-données"&gt;
       Le montage à 8 broches de données
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-montage-à-4-broches-de-données"&gt;
       Le montage à 4 broches de données
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#le-démarrage-de-lécran-avec-arduino"&gt;
     Le démarrage de l’écran avec Arduino
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="un-écran-lcd-cest-quoi"&gt;
 &lt;a aria-hidden="true" href="#un-écran-lcd-cest-quoi"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un écran
 &lt;abbr title="Liquid Crystal Display"&gt;
  LCD
 &lt;/abbr&gt;
 c’est quoi ?
&lt;/h3&gt;
&lt;p&gt;
 Mettons tout de suite au clair les termes :
 &lt;abbr title="Liquid Crystal Display"&gt;
  LCD
 &lt;/abbr&gt;
 signifie "Liquid Crystal Display" et se traduit, en français, par "Écran à Cristaux Liquides" (mais on n’a pas d’acronymes classe en français donc on parlera toujours de
 &lt;abbr title="Liquid Crystal Display"&gt;
  LCD
 &lt;/abbr&gt;
 ). Ces écrans sont PARTOUT ! Vous en trouverez dans plein d’appareils électroniques disposant d’afficheur : les montres, le tableau de bord de votre voiture, les calculatrices, etc. Cette utilisation intensive est due à leur faible consommation et coût. Mais ce n’est pas tout ! En effet, les écrans
 &lt;abbr title="Liquid Crystal Display"&gt;
  LCD
 &lt;/abbr&gt;
 sont aussi sous des formes plus complexes telles que la plupart des écrans d’ordinateur ainsi que les téléviseurs à écran plat. Cette technologie est bien maîtrisée et donc le coût de production est assez bas. Dans les années à venir, ils vont avoir tendance à être remplacés par les écrans à affichage LED qui sont pour le moment trop chers.
&lt;/p&gt;
&lt;div class="custom-block alert alert-danger"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   J’en profite pour mettre l’alerte sur la différence des écrans à LED. Il en existe deux types :
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    les écrans à rétro-éclairage LED : ce sont des écrans
    &lt;abbr title="Liquid Crystal Display"&gt;
     LCD
    &lt;/abbr&gt;
    tout à fait ordinaires qui ont simplement la particularité d’avoir un rétro-éclairage à LED à la place des tubes néon. Leur prix est du même ordre de grandeur que les
    &lt;abbr title="Liquid Crystal Display"&gt;
     LCD
    &lt;/abbr&gt;
    "normaux". En revanche, la qualité d’affichage des couleurs semble meilleure comparés aux
    &lt;abbr title="Liquid Crystal Display"&gt;
     LCD
    &lt;/abbr&gt;
    "normaux".
   &lt;/li&gt;
   &lt;li&gt;
    les écrans à affichage LED : ceux-ci ne disposent pas de rétro-éclairage et ne sont ni des écrans
    &lt;abbr title="Liquid Crystal Display"&gt;
     LCD
    &lt;/abbr&gt;
    , ni des écrans plasma. Ce sont des écrans qui, en lieu et place des pixels, se trouvent des LED de très très petite taille. Leur coût est prohibitif pour le moment, mais la qualité de contraste et de couleur inégale tous les écrans existants !
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Les deux catégories précédentes (écran
 &lt;abbr title="Liquid Crystal Display"&gt;
  LCD
 &lt;/abbr&gt;
 d’une montre par exemple et celui d’un moniteur d’ordinateur) peuvent être différenciées assez rapidement par une caractéristique simple :
 &lt;em&gt;
  la couleur
 &lt;/em&gt;
 . En effet, les premiers sont monochromes (une seule couleur) tandis que les seconds sont colorés (rouge, vert et bleu). Dans cette partie, nous utiliserons uniquement le premier type pour des raisons de simplicité et de coût.
&lt;/p&gt;
&lt;h5 id="fonctionnement-de-lécran"&gt;
 &lt;a aria-hidden="true" href="#fonctionnement-de-lécran"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Fonctionnement de l’écran
&lt;/h5&gt;
&lt;p&gt;
 N’étant pas un spécialiste de l’optique ni de l’électronique "bas-niveau" (jonction et tout le tralala) je ne vais pas vous faire un cours détaillé sur le "comment ca marche ?" mais plutôt aller à l’essentiel, vers le "pourquoi ça s’allume ?". Comme son nom l’indique, un écran
 &lt;abbr title="Liquid Crystal Display"&gt;
  LCD
 &lt;/abbr&gt;
 possède des cristaux liquides. Mais ce n’est pas tout ! En effet, pour fonctionner il faut plusieurs choses. Si vous regardez de très près votre écran (éteint pour ne pas vous bousiller les yeux) vous pouvez voir une grille de carré. Ces carrés sont appelés des pixels (de l’anglais "Picture Element", soit "Élément d’image" en français, encore une fois c’est moins classe).
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Chaque pixel est un cristal liquide. Lorsqu’aucun courant ne le traverse, ses molécules sont orientées dans un sens (admettons, 0°). En revanche lorsqu’un courant le traverse, ses molécules vont se tourner dans la même direction (90°). Voilà pour la base.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Composition d'un écran LCD" src="./images/uploaded/tuto-arduino-701-les-écrans-lcd/composition-dun-ecran-lcd.jpg"/&gt;
 &lt;figcaption&gt;
  Composition d’un écran
  &lt;abbr title="Liquid Crystal Display"&gt;
   LCD
  &lt;/abbr&gt;
  - (CC-BY,
  &lt;a href="http://commons.wikimedia.org/wiki/File:LCD_layers.svg"&gt;
   ed g2s
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Mais pourquoi il y a de la lumière dans un cas et pas dans l’autre ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Tout simplement parce que cette lumière est
 &lt;strong&gt;
  polarisée
 &lt;/strong&gt;
 . Cela signifie que la lumière est orientée dans une direction (c’est un peu compliqué à démontrer, je vous demanderais donc de l’admettre). En effet, entre les cristaux liquides et la source lumineuse se trouve un filtre polariseur de lumière. Ce filtre va orienter la lumière dans une direction précise. Entre vos yeux et les cristaux se trouve un autre écran polariseur, qui est perpendiculaire au premier. Ainsi, il faut que les cristaux liquides soient dans la bonne direction pour que la lumière passe de bout en bout et revienne à vos yeux. Un schéma vaut souvent mieux qu’un long discours, je vous conseille donc de regarder celui sur la droite de l’explication pour mieux comprendre (source : Wikipédia). Enfin, vient le rétro-éclairage (fait avec des LED) qui vous permettra de lire l’écran même en pleine nuit (sinon il vous faudrait l’éclairer pour voir le contraste).
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si vous voulez plus d’informations sur les écrans
   &lt;abbr title="Liquid Crystal Display"&gt;
    LCD
   &lt;/abbr&gt;
   , j’invite votre curiosité à se diriger vers ce lien
   &lt;a href="http://fr.wikipedia.org/wiki/Écran_à_cristaux_liquides"&gt;
    Wikipédia
   &lt;/a&gt;
   ou d’autres sources.
   &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/rUDZklikhAU" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="commande-du-lcd"&gt;
 &lt;a aria-hidden="true" href="#commande-du-lcd"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Commande du
 &lt;abbr title="Liquid Crystal Display"&gt;
  LCD
 &lt;/abbr&gt;
&lt;/h4&gt;
&lt;p&gt;
 Normalement, pour pouvoir afficher des caractères sur l’écran il nous faudrait activer individuellement chaque pixel de l’écran. Un caractère est représenté par un bloc de 7
 &lt;em&gt;
  5 pixels. Ce qui fait qu’un écran de 16 colonnes et 2 lignes représente un total de 16
 &lt;/em&gt;
 2
 &lt;em&gt;
  7
 &lt;/em&gt;
 5 = 1120 pixels !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Heureusement pour nous, des ingénieurs sont passés par là et nous ont simplifié la tâche.
&lt;/p&gt;
&lt;h5 id="le-décodeur-de-caractères"&gt;
 &lt;a aria-hidden="true" href="#le-décodeur-de-caractères"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le décodeur de caractères
&lt;/h5&gt;
&lt;p&gt;
 Tout comme il existe un driver vidéo pour votre carte graphique d’ordinateur, il existe un driver "
 &lt;abbr title="Liquid Crystal Display"&gt;
  LCD
 &lt;/abbr&gt;
 " pour votre afficheur. Rassurez-vous, aucun composant ne s’ajoute à votre liste d’achats puisqu’il est intégré dans votre écran. Ce composant va servir à décoder un ensemble "simple" de bits pour afficher un caractère à une position précise ou exécuter des commandes comme déplacer le curseur par exemple. Ce composant est fabriqué principalement par
 &lt;em&gt;
  Hitachi
 &lt;/em&gt;
 et se nomme le
 &lt;strong&gt;
  HC44780
 &lt;/strong&gt;
 . Il sert de
 &lt;strong&gt;
  décodeur de caractères
 &lt;/strong&gt;
 . Ainsi, plutôt que de devoir multiplier les signaux pour commander les pixels un à un, il nous suffira d’envoyer des octets de commandes pour lui dire "écris moi 'zeste' à partir de la colonne 3 sur la ligne 1". Ce composant possède 16 broches que je vais brièvement décrire :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       N°
      &lt;/th&gt;
      &lt;th&gt;
       Nom
      &lt;/th&gt;
      &lt;th&gt;
       Rôle
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       VSS
      &lt;/td&gt;
      &lt;td&gt;
       Masse
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       2
      &lt;/td&gt;
      &lt;td&gt;
       Vdd
      &lt;/td&gt;
      &lt;td&gt;
       +5V
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       3
      &lt;/td&gt;
      &lt;td&gt;
       V0
      &lt;/td&gt;
      &lt;td&gt;
       Réglage du contraste
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       4
      &lt;/td&gt;
      &lt;td&gt;
       RS
      &lt;/td&gt;
      &lt;td&gt;
       Sélection du registre (commande ou donnée)
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       5
      &lt;/td&gt;
      &lt;td&gt;
       R/W
      &lt;/td&gt;
      &lt;td&gt;
       Lecture ou écriture
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       6
      &lt;/td&gt;
      &lt;td&gt;
       E
      &lt;/td&gt;
      &lt;td&gt;
       Entrée de validation
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       7 à 14
      &lt;/td&gt;
      &lt;td&gt;
       D0 à D7
      &lt;/td&gt;
      &lt;td&gt;
       Bits de données
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       15
      &lt;/td&gt;
      &lt;td&gt;
       A
      &lt;/td&gt;
      &lt;td&gt;
       Anode du rétroéclairage (+5V)
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       16
      &lt;/td&gt;
      &lt;td&gt;
       K
      &lt;/td&gt;
      &lt;td&gt;
       Cathode du rétroéclairage (masse)
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Liste des broches du
   &lt;abbr title="Liquid Crystal Display"&gt;
    LCD
   &lt;/abbr&gt;
   et leur rôle
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Normalement, pour tous les écrans
   &lt;abbr title="Liquid Crystal Display"&gt;
    LCD
   &lt;/abbr&gt;
   (non graphiques) ce brochage est le même. Donc pas d’inquiétude lors des branchements, il vous suffira de vous rendre sur cette page pour consulter le tableau.
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Par la suite, les broches utiles qu’il faudra relier à l’Arduino sont les broches 4, 5 (facultatives), 6 et les données (7 à 14 pouvant être réduite à 8 à 14) en n’oubliant pas l’alimentation et la broche de réglage du contraste. Ce composant possède tout le système de traitement pour afficher les caractères. Il contient dans sa mémoire le schéma d’allumage des pixels pour afficher chacun d’entre eux. Voici la table des caractères affichables :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Une table ASCII" src="./images/uploaded/tuto-arduino-701-les-écrans-lcd/une-table-ascii.png"/&gt;
 &lt;figcaption&gt;
  Une table ASCII - (Domaine public -
  &lt;a href="http://commons.wikimedia.org/wiki/File:ASCII-Table-wide.svg"&gt;
   LanoxxthShaddow
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="quel-écran-choisir"&gt;
 &lt;a aria-hidden="true" href="#quel-écran-choisir"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Quel écran choisir ?
&lt;/h3&gt;
&lt;h4 id="les-caractéristiques"&gt;
 &lt;a aria-hidden="true" href="#les-caractéristiques"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les caractéristiques
&lt;/h4&gt;
&lt;h5 id="texte-ou-graphique"&gt;
 &lt;a aria-hidden="true" href="#texte-ou-graphique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Texte ou Graphique ?
&lt;/h5&gt;
&lt;p&gt;
 Dans la grande famille afficheur
 &lt;abbr title="Liquid Crystal Display"&gt;
  LCD
 &lt;/abbr&gt;
 , on distingue plusieurs catégories :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Les afficheurs alphanumériques
 &lt;/li&gt;
 &lt;li&gt;
  Les afficheurs graphiques monochromes
 &lt;/li&gt;
 &lt;li&gt;
  Les afficheurs graphiques couleur
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Les premiers sont les plus courants. Ils permettent d’afficher des lettres, des chiffres et quelques caractères spéciaux. Les caractères sont prédéfinis (voir table juste au-dessus) et on n’a donc aucunement besoin de gérer chaque pixel de l’écran. Les seconds sont déjà plus avancés. On a accès à chacun des pixels et on peut donc produire des dessins beaucoup plus évolués. Ils sont cependant légèrement plus onéreux que les premiers. Les derniers sont l’évolution des précédents, la couleur en plus (soit 3 fois plus de pixels à gérer : un sous-pixel pour le rouge, un autre pour le bleu et un dernier pour le vert, le tout forme la couleur d’un seul pixel). Pour le TP on se servira d’afficheur de la première catégorie, car ils suffisent à faire de nombreux montages et restent accessibles pour des zesteurs.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Un écran LCD alphanumérique" src="./images/uploaded/tuto-arduino-701-les-écrans-lcd/un-ecran-lcd-alphanumerique.jpg"/&gt;
 &lt;figcaption&gt;
  Un écran LCD alphanumérique
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="ce-nest-pas-la-taille-qui-compte"&gt;
 &lt;a aria-hidden="true" href="#ce-nest-pas-la-taille-qui-compte"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Ce n’est pas la taille qui compte !
&lt;/h5&gt;
&lt;p&gt;
 Les afficheurs existent dans de nombreuses tailles. Pour les afficheurs de type textes, on retrouve le plus fréquemment le format 2 lignes par 16 colonnes. Il en existe cependant de nombreux autres avec une seule ligne, ou 4 (ou plus) et 8 colonnes, ou 16, ou 20 ou encore plus ! Libre à vous de choisir la taille qui vous plait le plus, sachant que le TP devrait s’adapter sans souci à toute taille d’écran (pour ma part, ce sera un 2 lignes 16 colonnes) !
&lt;/p&gt;
&lt;h5 id="la-couleur-cest-important"&gt;
 &lt;a aria-hidden="true" href="#la-couleur-cest-important"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La couleur, c’est important
&lt;/h5&gt;
&lt;p&gt;
 Nan je blague ! Prenez la couleur qui vous plait ! Vert, blanc, bleu, jaune, amusez-vous ! (moi c’est écriture blanche sur fond bleu, mais je rêve d’un afficheur à la matrix, noir avec des écritures vertes !)
&lt;/p&gt;
&lt;h4 id="communication-avec-lécran"&gt;
 &lt;a aria-hidden="true" href="#communication-avec-lécran"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Communication avec l’écran
&lt;/h4&gt;
&lt;h5 id="la-communication-parallèle"&gt;
 &lt;a aria-hidden="true" href="#la-communication-parallèle"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La communication parallèle
&lt;/h5&gt;
&lt;p&gt;
 De manière classique, on communique avec l’écran de manière
 &lt;strong&gt;
  parallèle
 &lt;/strong&gt;
 . Cela signifie que l’on envoie des bits
 &lt;strong&gt;
  par blocs
 &lt;/strong&gt;
 , en utilisant plusieurs broches en même temps (opposée à une transmission série où les bits sont envoyés un par un sur une seule broche). Comme expliqué plus tôt dans ce chapitre, nous utilisons 10 broches différentes, 8 pour les données (en parallèle donc) et 2 pour de la commande (E : Enable et RS : Registre Selector). La ligne R/W peut être connecté à la masse si l’on souhaite uniquement faire de l’écriture.
&lt;/p&gt;
&lt;p&gt;
 Pour envoyer des données sur l’écran, c’est en fait assez simple. Il suffit de suivre un ordre logique et un certain timing pour que tout se passe bien. Tout d’abord, il nous faut placer la broche RS à 1 ou 0 selon que l’on veut envoyer une commande, par exemple "déplacer le curseur à la position (1;1)" ou que l’on veut envoyer une donnée : "écris le caractère 'a' ". Ensuite, on place sur les 8 broches de données (D0 à D7) la valeur de la donnée à afficher. Enfin, il suffit de faire une impulsion d’au moins 450 ns pour indiquer à l’écran que les données sont prêtes. C’est aussi simple que ça !
&lt;/p&gt;
&lt;p&gt;
 Cependant, comme les ingénieurs d’écrans sont conscients que la communication parallèle prend beaucoup de broches, ils ont inventé un autre mode que j’appellerai "semi-parallèle". Ce dernier se contente de travailler avec seulement les broches de données D4 à D7 (en plus de RS et E) et il faudra mettre les quatre autres (D0 à D3) à la masse. Il libère donc quatre broches. Dans ce mode, on fera donc deux fois le cycle "envoi des données puis impulsion sur E" pour envoyer un octet complet.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ne vous inquiétez pas à l’idée de tout cela. Pour la suite du chapitre, nous utiliserons une libraire nommée
   &lt;strong&gt;
    LiquidCrystal
   &lt;/strong&gt;
   qui se chargera de gérer les timings et l’ensemble du protocole.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Pour continuer ce chapitre, le mode "semi-parallèle" sera choisi. Il nous permettra de garder plus de broches disponibles pour de futurs montages et est souvent câblé par défaut dans de nombreux shields (dont le mien). La partie suivante vous montrera ce type de branchement. Et pas de panique, je vous indiquerai également la modification à faire pour connecter un écran en mode "parallèle complet".
&lt;/p&gt;
&lt;h5 id="la-communication-série"&gt;
 &lt;a aria-hidden="true" href="#la-communication-série"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La communication série
&lt;/h5&gt;
&lt;p&gt;
 Lorsque l’on ne possède que très peu de broches disponibles sur notre Arduino, il peut être intéressant de faire appel à un composant permettant de communiquer par voie série avec l’écran. Un tel composant se chargera de faire la conversion entre les données envoyées sur la voie série et ce qu’il faut afficher sur l’écran. Le gros avantage de cette solution est qu’elle nécessite seulement un seul fil de donnée (avec une masse et le VCC) pour fonctionner là où les autres méthodes ont besoin de presque une dizaine de broches.
&lt;/p&gt;
&lt;p&gt;
 Toujours dans le cadre du prochain TP, nous resterons dans le classique en utilisant une connexion parallèle. En effet, elle nous permet de garder l’approche "standard" de l’écran et nous permet de garder la liaison série pour autre chose (encore que l’on pourrait en émuler une sans trop de difficulté). Ce composant de conversion "Série -&amp;gt; parallèle" peut-être réalisé simplement avec un 74h595
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 (je vous laisse coder le driver comme exercice si vous voulez
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 )
&lt;/p&gt;
&lt;h5 id="et-par-liaison-i²c"&gt;
 &lt;a aria-hidden="true" href="#et-par-liaison-i²c"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Et par liaison I²C
&lt;/h5&gt;
&lt;p&gt;
 Un dernier point à voir, c’est la communication de la carte Arduino vers l’écran par la liaison I²C. Cette liaison est utilisable avec seulement 2 broches (une broche de donnée et une broche d’horloge) et nécessite l’utilisation de deux broches analogiques de l’Arduino (broche 4 et 5).
&lt;/p&gt;
&lt;h3 id="comment-on-sen-sert"&gt;
 &lt;a aria-hidden="true" href="#comment-on-sen-sert"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Comment on s’en sert ?
&lt;/h3&gt;
&lt;p&gt;
 Comme expliqué précédemment, je vous propose de travailler avec un écran dont seulement quatre broches de données sont utilisées. Pour le bien de tous je vais présenter ici les deux montages, mais ne soyez pas surpris si dans les autres montages ou les vidéos vous voyez seulement un des deux.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;h4 id="le-branchement"&gt;
 &lt;a aria-hidden="true" href="#le-branchement"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le branchement
&lt;/h4&gt;
&lt;p&gt;
 L’afficheur
 &lt;abbr title="Liquid Crystal Display"&gt;
  LCD
 &lt;/abbr&gt;
 utilise 6 à 10 broches de données ((D0 à D7) ou (D4 à D7) + RS + E) et deux d’alimentations (+5V et masse). La plupart des écrans possèdent aussi une entrée analogique pour régler le contraste des caractères. Nous brancherons dessus un potentiomètre de 10 kOhms. Les 10 broches de données peuvent être placées sur n’importe quelles entrées/sorties numériques de l’Arduino. En effet, nous indiquerons ensuite à la librairie LiquidCrystal qui est branché où.
&lt;/p&gt;
&lt;h5 id="le-montage-à-8-broches-de-données"&gt;
 &lt;a aria-hidden="true" href="#le-montage-à-8-broches-de-données"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le montage à 8 broches de données
&lt;/h5&gt;
&lt;figure&gt;
 &lt;img alt="Branchement du LCD avec  fils de données" src="./images/uploaded/tuto-arduino-701-les-écrans-lcd/branchement-du-lcd-avec-fils-de-donnees.jpg"/&gt;
 &lt;figcaption&gt;
  Branchement du LCD avec  fils de données
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Branchement du LCD avec 8 fils de données - montage" src="./images/uploaded/tuto-arduino-701-les-écrans-lcd/branchement-du-lcd-avec-8-fils-de-donnees-montage.jpg"/&gt;
 &lt;figcaption&gt;
  Branchement du LCD avec 8 fils de données - montage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="le-montage-à-4-broches-de-données"&gt;
 &lt;a aria-hidden="true" href="#le-montage-à-4-broches-de-données"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le montage à 4 broches de données
&lt;/h5&gt;
&lt;figure&gt;
 &lt;img alt="Branchement du LCD avec 4 fils de données" src="./images/uploaded/tuto-arduino-701-les-écrans-lcd/branchement-du-lcd-avec-4-fils-de-donnees.jpg"/&gt;
 &lt;figcaption&gt;
  Branchement du LCD avec 4 fils de données
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Branchement du LCD avec 4 fils de données - montage" src="./images/uploaded/tuto-arduino-701-les-écrans-lcd/branchement-du-lcd-avec-4-fils-de-donnees-montage.jpg"/&gt;
 &lt;figcaption&gt;
  Branchement du LCD avec 4 fils de données - montage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/xpALGVky4tc" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/B9nvcfBf4rU" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/z5Jzn9qg8vo" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="le-démarrage-de-lécran-avec-arduino"&gt;
 &lt;a aria-hidden="true" href="#le-démarrage-de-lécran-avec-arduino"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le démarrage de l’écran avec Arduino
&lt;/h4&gt;
&lt;p&gt;
 Comme écrit plus tôt, nous allons utiliser la librairie "LiquidCrystal". Pour l’intégrer, c’est très simple, il suffit de cliquer sur le menu "Import Library" et d’aller chercher la bonne. Une ligne
 &lt;code&gt;
  #include "LiquidCrystal.h"
 &lt;/code&gt;
 doit apparaitre en haut de la page de code (les prochaines fois vous pourrez aussi taper cette ligne à la main directement, ça aura le même effet).
&lt;/p&gt;
&lt;p&gt;
 Ensuite, il ne nous reste plus qu’à dire à notre carte Arduino où est branché l’écran (sur quelles broches) et quelle est la taille de ce dernier (nombre de lignes et de colonnes). Nous allons donc commencer par déclarer un objet (c’est en fait une variable évoluée, plus de détails dans la prochaine partie)
 &lt;code&gt;
  lcd
 &lt;/code&gt;
 , de type
 &lt;code&gt;
  LiquidCrystal
 &lt;/code&gt;
 et qui sera global à notre projet.
&lt;/p&gt;
&lt;p&gt;
 La déclaration de cette variable possède plusieurs formes
 &lt;a href="http://arduino.cc/en/Reference/LiquidCrystalConstructor"&gt;
  (lien vers la doc.)
 &lt;/a&gt;
 :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   LiquidCrystal(rs, enable, d0, d1, d2, d3, d4, d5, d6, d7)
  &lt;/code&gt;
  où rs est le numéro de la broche où est branché "RS", "enable" est la broche "E" et ainsi de suite pour les données.
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   LiquidCrystal(rs, enable, d4, d5, d6, d7)
  &lt;/code&gt;
  (même commentaire que précédemment)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Ensuite, dans le
 &lt;code&gt;
  setup()
 &lt;/code&gt;
 il nous faut démarrer l’écran en spécifiant son nombre de
 &lt;strong&gt;
  colonnes
 &lt;/strong&gt;
 puis de
 &lt;strong&gt;
  lignes
 &lt;/strong&gt;
 . Cela se fait grâce à la fonction
 &lt;code&gt;
  begin(cols,rows)
 &lt;/code&gt;
 . Voici un exemple complet de code correspondant aux deux branchements précédents (commentez la ligne qui ne vous concerne pas) :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;"LiquidCrystal.h"&lt;/span&gt; &lt;span class="hljs-comment"&gt;// ajout de la librairie&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// Vérifiez les broches !&lt;/span&gt;
&lt;span class="hljs-function"&gt;LiquidCrystal &lt;span class="hljs-title"&gt;lcd&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;11&lt;/span&gt;,&lt;span class="hljs-number"&gt;10&lt;/span&gt;,&lt;span class="hljs-number"&gt;9&lt;/span&gt;,&lt;span class="hljs-number"&gt;8&lt;/span&gt;,&lt;span class="hljs-number"&gt;7&lt;/span&gt;,&lt;span class="hljs-number"&gt;6&lt;/span&gt;,&lt;span class="hljs-number"&gt;5&lt;/span&gt;,&lt;span class="hljs-number"&gt;4&lt;/span&gt;,&lt;span class="hljs-number"&gt;3&lt;/span&gt;,&lt;span class="hljs-number"&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// liaison 8 bits de données&lt;/span&gt;
&lt;span class="hljs-function"&gt;LiquidCrystal &lt;span class="hljs-title"&gt;lcd&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;11&lt;/span&gt;,&lt;span class="hljs-number"&gt;10&lt;/span&gt;,&lt;span class="hljs-number"&gt;5&lt;/span&gt;,&lt;span class="hljs-number"&gt;4&lt;/span&gt;,&lt;span class="hljs-number"&gt;3&lt;/span&gt;,&lt;span class="hljs-number"&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// liaison 4 bits de données&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
   lcd.begin(&lt;span class="hljs-number"&gt;16&lt;/span&gt;,&lt;span class="hljs-number"&gt;2&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// utilisation d'un écran 16 colonnes et 2 lignes&lt;/span&gt;
   lcd.write(&lt;span class="hljs-string"&gt;"Salut ca zeste ?"&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// petit test pour vérifier que tout marche&lt;/span&gt;
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Setup minimal pour un écran
  &lt;abbr title="Liquid Crystal Display"&gt;
   LCD
  &lt;/abbr&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-danger"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Surtout ne mettez
   &lt;strong&gt;
    pas d’accents
   &lt;/strong&gt;
   ! L’afficheur ne les accepte pas par défaut et affichera du grand n’importe quoi à la place.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous remarquez que j’ai rajouté une ligne dont je n’ai pas parlé encore. Je l’ai juste mise pour vérifier que tout fonctionne bien avec votre écran, nous reviendrons dessus plus tard. Si tout se passe bien, vous devriez obtenir l’écran suivant :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;img alt="Notre premier texte !" src="./images/uploaded/tuto-arduino-701-les-écrans-lcd/notre-premier-texte.jpg"/&gt;
  &lt;figcaption&gt;
   Notre premier texte !
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si jamais rien ne s’affiche, essayez de tourner votre potentiomètre de contraste. Si cela ne marche toujours pas, vérifier les bonnes attributions des broches (surtout si vous utilisez un shield).
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/uwmt3q-6cOc" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voici une démonstration avec le simulateur interactif :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/eNZfTmhXLKL" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Maintenant que nous maîtrisons les subtilités concernant l’écran, nous allons pouvoir commencer à jouer avec… En avant !
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Votre premier texte sur le LCD !</title><link href="https://eskimon.fr/tuto-arduino-702-votre-premier-texte-sur-le-lcd" rel="alternate"></link><published>2013-12-11T18:14:00+01:00</published><updated>2013-12-11T18:14:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-11:/tuto-arduino-702-votre-premier-texte-sur-le-lcd</id><summary type="html">&lt;p&gt;
 Ça y est, on va pouvoir commencer à apprendre des trucs avec notre écran LCD ! Alors, au programme : afficher des variables, des tableaux, déplacer le curseur, etc. Après toutes ces explications, vous serez devenu un pro du LCD, du moins du LCD alphanumérique.
 &lt;img alt=":lol:" class="smiley" src="./static/smileys/rire.gif"/&gt;
 Aller, en route ! Après ça vous ferez …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Ça y est, on va pouvoir commencer à apprendre des trucs avec notre écran LCD ! Alors, au programme : afficher des variables, des tableaux, déplacer le curseur, etc. Après toutes ces explications, vous serez devenu un pro du LCD, du moins du LCD alphanumérique.
 &lt;img alt=":lol:" class="smiley" src="./static/smileys/rire.gif"/&gt;
 Aller, en route ! Après ça vous ferez un petit TP plutôt intéressant, notamment au niveau de l’utilisation pour l’affichage des mesures sans avoir besoin d’un ordinateur. De plus, pensez au fait que vous pouvez vous aider des afficheurs pour déboguer votre programme !
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#ecrire-du-texte-sur-le-lcd"&gt;
    Ecrire du texte sur le LCD
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#afficher-du-texte"&gt;
     Afficher du texte
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#afficher-une-variable"&gt;
     Afficher une variable
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#combo-afficher-du-texte-et-une-variable"&gt;
      Combo ! Afficher du texte ET une variable
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#la-fonction-solution"&gt;
       La fonction solution
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#son-fonctionnement"&gt;
       Son fonctionnement
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-marqueurs"&gt;
       Les marqueurs
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#exercice-faire-une-horloge"&gt;
      Exercice, faire une horloge
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#consigne"&gt;
       Consigne
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#solution"&gt;
       Solution
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#se-déplacer-sur-lécran"&gt;
    Se déplacer sur l’écran
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#gérer-laffichage"&gt;
     Gérer l’affichage
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#gérer-le-curseur"&gt;
      Gérer le curseur
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#se-déplacer-sur-lécran-1"&gt;
       Se déplacer sur l’écran
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#animer-le-curseur"&gt;
       Animer le curseur
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#jouer-avec-le-texte"&gt;
      Jouer avec le texte
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#déplacer-le-texte-à-la-main"&gt;
       Déplacer le texte à la main
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#déplacer-le-texte-automatiquement"&gt;
       Déplacer le texte automatiquement
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#créer-un-caractère"&gt;
    Créer un caractère
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#principe-de-la-création"&gt;
       Principe de la création
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#lenvoyer-à-lécran-et-lutiliser"&gt;
       L’envoyer à l’écran et l’utiliser
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="ecrire-du-texte-sur-le-lcd"&gt;
 &lt;a aria-hidden="true" href="#ecrire-du-texte-sur-le-lcd"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Ecrire du texte sur le LCD
&lt;/h3&gt;
&lt;h4 id="afficher-du-texte"&gt;
 &lt;a aria-hidden="true" href="#afficher-du-texte"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Afficher du texte
&lt;/h4&gt;
&lt;p&gt;
 Vous vous rappelez quand je vous disais il y a longtemps "Les développeurs Arduino sont des gens sympas, ils font les choses clairement et logiquement !" ? Eh bien, ce constat se reproduit (encore) pour la bibliothèque
 &lt;code&gt;
  LiquidCrystal
 &lt;/code&gt;
 ! En effet, une fois que votre écran LCD est bien paramétré, il nous suffira d’utiliser qu’une seule fonction pour afficher du texte ! Allez je vous laisse 10 secondes pour deviner le nom de la fonction que nous allons utiliser. Un indice, ça a un lien avec la voie série… C’est trouvé ? Félicitations à tous ceux qui auraient dit print(). En effet, une fois de plus nous retrouvons une fonction
 &lt;code&gt;
  print()
 &lt;/code&gt;
 , comme pour l’objet Serial, pour envoyer du texte. Ainsi, pour saluer tous les zesteurs de la terre nous aurons juste à écrire :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;lcd.print(&lt;span class="hljs-string"&gt;"Salut ca zeste ?"&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 et pour code complet avec les déclarations, on obtient :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;"LiquidCrystal.h"&lt;/span&gt; &lt;span class="hljs-comment"&gt;// on inclut la librairie&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// initialise l'écran avec les bonnes broches&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// ATTENTION, REMPLACER LES NOMBRES PAR VOS BRANCHEMENTS À VOUS !&lt;/span&gt;

&lt;span class="hljs-function"&gt;LiquidCrystal &lt;span class="hljs-title"&gt;lcd&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;11&lt;/span&gt;,&lt;span class="hljs-number"&gt;10&lt;/span&gt;,&lt;span class="hljs-number"&gt;5&lt;/span&gt;,&lt;span class="hljs-number"&gt;4&lt;/span&gt;,&lt;span class="hljs-number"&gt;3&lt;/span&gt;,&lt;span class="hljs-number"&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
   lcd.begin(&lt;span class="hljs-number"&gt;16&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;);
   lcd.print(&lt;span class="hljs-string"&gt;"Salut ca zeste ?"&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{

}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Mais c’est nul ton truc on affiche toujours au même endroit, en haut à gauche !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Oui je sais, mais chaque chose en son temps, on s’occupera du positionnement du texte bientôt, promis !
&lt;/p&gt;
&lt;h4 id="afficher-une-variable"&gt;
 &lt;a aria-hidden="true" href="#afficher-une-variable"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Afficher une variable
&lt;/h4&gt;
&lt;p&gt;
 Afficher du texte c’est bien, mais afficher du contenu dynamique c’est mieux ! Nous allons maintenant voir comment afficher une variable sur l’écran. Là encore, rien de difficile. Je ne vais donc pas faire un long discours pour vous dire qu’il n’y a qu’une seule fonction à retenir… le suspens est terrible… OUI évidemment cette fonction c’est
 &lt;strong&gt;
  &lt;code&gt;
   print()
  &lt;/code&gt;
 &lt;/strong&gt;
 !Décidément elle est vraiment tout-terrain (et rédacteur du tutoriel Arduino devient un vrai boulot de feignant, je vais finir par me copier-coller à chaque fois !) Allez zou, un petit code, une petite photo et en avant Guingamp !
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; mavariable = &lt;span class="hljs-number"&gt;42&lt;/span&gt;;
    lcd.print(mavariable);
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  &lt;code&gt;
   Print
  &lt;/code&gt;
  pour afficher une variable
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="combo-afficher-du-texte-et-une-variable"&gt;
 &lt;a aria-hidden="true" href="#combo-afficher-du-texte-et-une-variable"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Combo ! Afficher du texte ET une variable
&lt;/h4&gt;
&lt;p&gt;
 Bon vous aurez remarqué que notre code possède une certaine faiblesse… On n’affiche au choix qu’un texte ou qu’un nombre, mais pas les deux en même temps ! Nous allons donc voir maintenant une manière d’y remédier.
&lt;/p&gt;
&lt;h5 id="la-fonction-solution"&gt;
 &lt;a aria-hidden="true" href="#la-fonction-solution"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La fonction solution
&lt;/h5&gt;
&lt;p&gt;
 La solution se trouve dans les bases du langage C , grâce à une fonction qui s’appelle
 &lt;strong&gt;
  &lt;code&gt;
   sprintf()
  &lt;/code&gt;
 &lt;/strong&gt;
 (aussi appelé "string printf"). Les personnes qui ont fait du C doivent la connaitre, ou connaitre sa cousine "printf". Cette fonction est un peu particulière, car elle ne prend pas un nombre d’arguments fini. En effet, si vous voulez afficher 2 variables vous ne lui donnerez pas autant d’arguments que pour en afficher 4 (ce qui parait logique d’une certaine manière). Pour utiliser cette dernière, il va falloir utiliser un tableau de char qui nous servira de
 &lt;em&gt;
  &lt;abbr title="Zone tampon, permet de garder en mémoire un certain nombre de données"&gt;
   buffer
  &lt;/abbr&gt;
 &lt;/em&gt;
 . Ce tableau sera celui dans lequel nous allons écrire notre chaine de caractère. Une fois que nous aurons écrit dedans, il nous suffira de l’envoyer sur l’écran en utilisant… print() !
&lt;/p&gt;
&lt;h5 id="son-fonctionnement"&gt;
 &lt;a aria-hidden="true" href="#son-fonctionnement"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Son fonctionnement
&lt;/h5&gt;
&lt;p&gt;
 Comme dit rapidement plus tôt,
 &lt;code&gt;
  sprintf()
 &lt;/code&gt;
 n’a pas un nombre d’arguments fini. Cependant, elle en aura au minimum deux qui sont le tableau de la chaine de caractère et une chaine à écrire. Un exemple simple serait d’écrire :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; message[&lt;span class="hljs-number"&gt;16&lt;/span&gt;] = &lt;span class="hljs-string"&gt;""&lt;/span&gt;;
&lt;span class="hljs-built_in"&gt;sprintf&lt;/span&gt;(message,&lt;span class="hljs-string"&gt;"J'ai 42 ans"&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  &lt;code&gt;
   sprintf
  &lt;/code&gt;
  pour mettre une chaine dans une tableau de char
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Au début, le tableau message ne contient rien. Après la fonction
 &lt;code&gt;
  sprintf()
 &lt;/code&gt;
 , il possédera le texte "J’ai 42 ans". Simple non ?
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   J’utilise un tableau de 16 cases car mon écran fait 16 caractères de large au maximum, et donc inutile de gaspiller de la mémoire en prenant un tableau plus grand que nécessaire.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Nous allons maintenant voir comment changer mon âge en le mettant en dynamique dans la chaine grâce à une variable. Pour cela, nous allons utiliser des
 &lt;strong&gt;
  marqueurs de format
 &lt;/strong&gt;
 . Le plus connu est
 &lt;strong&gt;
  %d
 &lt;/strong&gt;
 pour indiquer un nombre entier (nous verrons les autres ensuite). Dans le contenu à écrire (le deuxième argument), nous placerons ces marqueurs à chaque endroit où l’on voudra mettre une variable. Nous pouvons en placer autant que nous voulons. Ensuite, il nous suffira de mettre dans le même ordre que les marqueurs les différentes variables en argument de
 &lt;code&gt;
  sprintf()
 &lt;/code&gt;
 . Tout va être plus clair avec un exemple !
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; message[&lt;span class="hljs-number"&gt;16&lt;/span&gt;] = &lt;span class="hljs-string"&gt;""&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; nbA = &lt;span class="hljs-number"&gt;3&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; nbB = &lt;span class="hljs-number"&gt;5&lt;/span&gt;;
&lt;span class="hljs-built_in"&gt;sprintf&lt;/span&gt;(message,&lt;span class="hljs-string"&gt;"%d + %d = %d"&lt;/span&gt;, nbA, nbB, nbA+nbB);
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  &lt;code&gt;
   sprintf
  &lt;/code&gt;
  pour enregistrer une (des) variables dans une chaine
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Cela affichera :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;3 + 5 = 8
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="les-marqueurs"&gt;
 &lt;a aria-hidden="true" href="#les-marqueurs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les marqueurs
&lt;/h5&gt;
&lt;p&gt;
 Comme je vous le disais, il existe plusieurs marqueurs. Je vais vous présenter ceux qui vous serviront le plus, et différentes astuces pour les utiliser à bon escient :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;strong&gt;
   %d
  &lt;/strong&gt;
  qui sera remplacé par un
  &lt;code&gt;
   int
  &lt;/code&gt;
  (signé)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   %s
  &lt;/strong&gt;
  sera remplacé par une chaine (un tableau de
  &lt;code&gt;
   char
  &lt;/code&gt;
  )
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   %u
  &lt;/strong&gt;
  pour un entier non signé (similaire à %d)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   %%
  &lt;/strong&gt;
  pour afficher le symbole '%'
  &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Malheureusement, Arduino ne les supporte pas tous. En effet, le %f des float ne fonctionne pas.
 &lt;img alt=":(" class="smiley" src="./static/smileys/triste.png"/&gt;
 Il vous faudra donc bricoler si vous désirez l’afficher en entier (je vous laisse deviner comment). Si jamais vous désirez forcer l’affichage d’un marqueur sur un certain nombre de caractères, vous pouvez utiliser un indicateur de taille de ce nombre entre le '%' et la lettre du marqueur. Par exemple, utiliser "%3d" forcera l’affichage du nombre en paramètre (quel qu’il soit)
 &lt;strong&gt;
  sur trois caractères au minimum
 &lt;/strong&gt;
 . La variable ne sera pas tronquée s’il est plus grand que l’emplacement prévu. Ce paramètre prendra donc toujours autant de place
 &lt;em&gt;
  au minimum
 &lt;/em&gt;
 sur l’écran (utile pour maitriser la disposition des caractères). Exemple :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; age1 = &lt;span class="hljs-number"&gt;42&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; age2 = &lt;span class="hljs-number"&gt;5&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; prenom1[&lt;span class="hljs-number"&gt;10&lt;/span&gt;] = &lt;span class="hljs-string"&gt;"Ben"&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; prenom2[&lt;span class="hljs-number"&gt;10&lt;/span&gt;] = &lt;span class="hljs-string"&gt;"Luc"&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; message[&lt;span class="hljs-number"&gt;16&lt;/span&gt;] = &lt;span class="hljs-string"&gt;""&lt;/span&gt;;
&lt;span class="hljs-built_in"&gt;sprintf&lt;/span&gt;(message,&lt;span class="hljs-string"&gt;"%s:%2d,%s:%2d"&lt;/span&gt;,prenom1, age1, prenom2, age2);
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Différents marqueurs de variable pour
  &lt;code&gt;
   sprintf
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 À l’écran, on aura un texte tel que :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;Ben:42,Luc: 5
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 On note l’espace avant le 5 grâce au forçage de l’écriture de la variable sur 2 caractères induits par
 &lt;em&gt;
  %2d
 &lt;/em&gt;
 .
&lt;/p&gt;
&lt;h4 id="exercice-faire-une-horloge"&gt;
 &lt;a aria-hidden="true" href="#exercice-faire-une-horloge"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Exercice, faire une horloge
&lt;/h4&gt;
&lt;h5 id="consigne"&gt;
 &lt;a aria-hidden="true" href="#consigne"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Consigne
&lt;/h5&gt;
&lt;p&gt;
 Afin de conclure cette partie, je vous propose un petit exercice. Comme le titre l’indique, je vous propose de réaliser une petite horloge. Bien entendu elle ne sera pas fiable du tout car nous n’avons aucun repère réel dans le temps, mais ça reste un bon exercice. L’objectif sera donc d’afficher le message suivant : "Il est hh:mm:ss" avec 'hh' pour les heures, 'mm' pour les minutes et 'ss’ pour les secondes. Ça vous ira ? Ouais, enfin je ne vois pas pourquoi je pose la question puisque de toute manière vous n’avez pas le choix !
 &lt;img alt=":diable:" class="smiley" src="./static/smileys/diable.png"/&gt;
 Une dernière chose avant de commencer. Si vous tentez de faire plusieurs affichages successifs, le curseur ne se replacera pas et votre écriture sera vite chaotique. Je vous donne donc rapidement une fonction qui vous permet de revenir à la position en haut à gauche de l’écran :
 &lt;code&gt;
  home()
 &lt;/code&gt;
 . Il vous suffira de faire un
 &lt;code&gt;
  lcd.home()
 &lt;/code&gt;
 pour replacer le curseur en haut à gauche. Nous reparlerons de la position curseur dans le chapitre suivant !
&lt;/p&gt;
&lt;h5 id="solution"&gt;
 &lt;a aria-hidden="true" href="#solution"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Solution
&lt;/h5&gt;
&lt;p&gt;
 Je vais directement vous parachuter le code, sans vraiment d’explications car je pense l’avoir suffisamment commenté (et entre nous, l’exercice est sympa et pas trop dur).
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;"LiquidCrystal.h"&lt;/span&gt; &lt;span class="hljs-comment"&gt;// on inclut la librairie&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// initialise l'écran avec les bonnes broches&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// ATTENTION, REMPLACER LES NOMBRES PAR VOS BRANCHEMENTS À VOUS !&lt;/span&gt;
&lt;span class="hljs-function"&gt;LiquidCrystal &lt;span class="hljs-title"&gt;lcd&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;11&lt;/span&gt;,&lt;span class="hljs-number"&gt;10&lt;/span&gt;,&lt;span class="hljs-number"&gt;5&lt;/span&gt;,&lt;span class="hljs-number"&gt;4&lt;/span&gt;,&lt;span class="hljs-number"&gt;3&lt;/span&gt;,&lt;span class="hljs-number"&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; heures,minutes,secondes;
&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; message[&lt;span class="hljs-number"&gt;16&lt;/span&gt;] = &lt;span class="hljs-string"&gt;""&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    lcd.begin(&lt;span class="hljs-number"&gt;16&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// règle la taille du LCD : 16 colonnes et 2 lignes&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;// changer les valeurs pour démarrer à l'heure souhaitée !&lt;/span&gt;
    heures = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    minutes = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    secondes = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on commence par gérer le temps qui passe...&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(secondes == &lt;span class="hljs-number"&gt;60&lt;/span&gt;) &lt;span class="hljs-comment"&gt;// une minute est atteinte ?&lt;/span&gt;
    {
        secondes = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// on recompte à partir de 0&lt;/span&gt;
        minutes++;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(minutes == &lt;span class="hljs-number"&gt;60&lt;/span&gt;) &lt;span class="hljs-comment"&gt;// une heure est atteinte ?&lt;/span&gt;
    {
        minutes = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
        heures++;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(heures == &lt;span class="hljs-number"&gt;24&lt;/span&gt;) &lt;span class="hljs-comment"&gt;// une journée est atteinte ?&lt;/span&gt;
    {
        heures = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    }

    &lt;span class="hljs-comment"&gt;// met le message dans la chaine à transmettre&lt;/span&gt;
    &lt;span class="hljs-built_in"&gt;sprintf&lt;/span&gt;(message,&lt;span class="hljs-string"&gt;"Il est %2d:%2d:%2d"&lt;/span&gt;,heures,minutes,secondes);

    lcd.home();           &lt;span class="hljs-comment"&gt;// met le curseur en position (0;0) sur l'écran&lt;/span&gt;

    lcd.write(message);   &lt;span class="hljs-comment"&gt;// envoi le message sur l'écran&lt;/span&gt;

    delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);          &lt;span class="hljs-comment"&gt;// attend une seconde&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// une seconde s'écoule...&lt;/span&gt;
    secondes++;
}

Et voici une solution interactive :
!(https:&lt;span class="hljs-comment"&gt;//www.tinkercad.com/embed/gSGIbqyX8rB)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/0Ps2UjdHYCI" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="se-déplacer-sur-lécran"&gt;
 &lt;a aria-hidden="true" href="#se-déplacer-sur-lécran"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Se déplacer sur l’écran
&lt;/h3&gt;
&lt;p&gt;
 Bon, autant vous prévenir, ce morceau de chapitre ne sera pas digne du nom de "tutoriel". Malheureusement, pour se déplacer sur l’écran (que ce soit le curseur ou du texte) il n’y a pas 36 solutions, juste quelques appels relativement simples à des fonctions. Désolé d’avance pour le "pseudo-listing" de fonctions que je vais faire tout en essayant de le garder intéressant…
&lt;/p&gt;
&lt;h4 id="gérer-laffichage"&gt;
 &lt;a aria-hidden="true" href="#gérer-laffichage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Gérer l’affichage
&lt;/h4&gt;
&lt;p&gt;
 Les premières fonctions que nous allons voir concernent l’écran dans son ensemble. Nous allons apprendre à enlever le texte de l’écran mais le garder dans la mémoire pour le réafficher ensuite. En d’autres termes, vous allez pouvoir faire un mode "invisible" où le texte est bien stocké en mémoire, mais pas affiché sur l’écran. Les deux fonctions permettant ce genre d’action sont les suivantes :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   noDisplay()
  &lt;/code&gt;
  : fait disparaître le texte
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   display()
  &lt;/code&gt;
  : fait apparaître le texte (s’il y en a évidemment)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Si vous tapez le code suivant, vous verrez le texte clignoter toutes les secondes :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;"LiquidCrystal.h"&lt;/span&gt; &lt;span class="hljs-comment"&gt;// on inclut la librairie&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// initialise l'écran avec les bonnes broches&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// ATTENTION, REMPLACER LES NOMBRES PAR VOS BRANCHEMENTS À VOUS !&lt;/span&gt;
&lt;span class="hljs-function"&gt;LiquidCrystal &lt;span class="hljs-title"&gt;lcd&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;11&lt;/span&gt;,&lt;span class="hljs-number"&gt;10&lt;/span&gt;,&lt;span class="hljs-number"&gt;5&lt;/span&gt;,&lt;span class="hljs-number"&gt;4&lt;/span&gt;,&lt;span class="hljs-number"&gt;3&lt;/span&gt;,&lt;span class="hljs-number"&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// règle la  taille du LCD&lt;/span&gt;
    lcd.begin(&lt;span class="hljs-number"&gt;16&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;);
    lcd.print(&lt;span class="hljs-string"&gt;"Salut ca zeste ?"&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
    lcd.noDisplay();
    delay(&lt;span class="hljs-number"&gt;500&lt;/span&gt;);
    lcd.display();
    delay(&lt;span class="hljs-number"&gt;500&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Afficher ou non un texte sur le LCD :
  &lt;code&gt;
   display
  &lt;/code&gt;
  et
  &lt;code&gt;
   noDisplay
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Utile si vous voulez attirer l’attention de l’utilisateur ! Une autre fonction utile est celle vous permettant de nettoyer l’écran. Contrairement à la précédente, cette fonction va supprimer le texte de manière permanente. Pour le réafficher, il faudra le renvoyer à l’afficheur. Cette fonction au nom évident est :
 &lt;code&gt;
  clear()
 &lt;/code&gt;
 (bien sûr, il faut être un peu anglophone pour s’en douter
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 ). Le code suivant vous permettra ainsi d’afficher un texte puis, au bout de 2 secondes, il disparaitra (pas de loop(), pas nécessaire) :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;"LiquidCrystal.h"&lt;/span&gt; &lt;span class="hljs-comment"&gt;// on inclut la librairie&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// initialise l'écran avec les bonnes broches&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// ATTENTION, REMPLACER LES NOMBRES PAR VOS BRANCHEMENTS À VOUS !&lt;/span&gt;
&lt;span class="hljs-function"&gt;LiquidCrystal &lt;span class="hljs-title"&gt;lcd&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;11&lt;/span&gt;,&lt;span class="hljs-number"&gt;10&lt;/span&gt;,&lt;span class="hljs-number"&gt;5&lt;/span&gt;,&lt;span class="hljs-number"&gt;4&lt;/span&gt;,&lt;span class="hljs-number"&gt;3&lt;/span&gt;,&lt;span class="hljs-number"&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// règle la  taille du LCD&lt;/span&gt;
    lcd.begin(&lt;span class="hljs-number"&gt;16&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;);
    lcd.print(&lt;span class="hljs-string"&gt;"Salut ca zeste ?"&lt;/span&gt;);
    delay(&lt;span class="hljs-number"&gt;2000&lt;/span&gt;);
    lcd.clear();
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Effacer l’écran LCD :
  &lt;code&gt;
   clear
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Cette fonction est très utile lorsque l’on fait des menus sur l’écran, pour pouvoir changer de page. Si on ne fait pas un
 &lt;code&gt;
  clear()
 &lt;/code&gt;
 , il risque d’ailleurs de subsister des caractères de la page précédente. Ce n’est pas très joli.
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Attention à ne pas appeler cette fonction plusieurs fois de suite, par exemple en la mettant dans la fonction
   &lt;code&gt;
    loop()
   &lt;/code&gt;
   , vous verrez le texte ne s’affichera que très rapidement puis disparaitra et ainsi de suite.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="gérer-le-curseur"&gt;
 &lt;a aria-hidden="true" href="#gérer-le-curseur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Gérer le curseur
&lt;/h4&gt;
&lt;h5 id="se-déplacer-sur-lécran-1"&gt;
 &lt;a aria-hidden="true" href="#se-déplacer-sur-lécran-1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Se déplacer sur l’écran
&lt;/h5&gt;
&lt;p&gt;
 Voici maintenant d’autres fonctions que vous attendez certainement, celles permettant de déplacer le curseur sur l’écran. En déplaçant le curseur, vous pourrez écrire à n’importe quel endroit sur l’écran (attention cependant à ce qu’il y ait suffisamment de place pour votre texte).
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Nous allons commencer par quelque chose de facile que nous avons vu très rapidement dans le chapitre précédent. Je parle bien sûr de la fonction
 &lt;code&gt;
  home()
 &lt;/code&gt;
 ! Souvenez-vous, cette fonction permet de replacer le curseur au début de l’écran.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Mais au fait, savez-vous comment est organisé le repère de l’écran ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 C’est assez simple, mais il faut être vigilant quand même. Tout d’abord, sachez que les coordonnées s’expriment de la manière suivante
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mo&gt;
        (
       &lt;/mo&gt;
       &lt;mi&gt;
        x
       &lt;/mi&gt;
       &lt;mo separator="true"&gt;
        ,
       &lt;/mo&gt;
       &lt;mi&gt;
        y
       &lt;/mi&gt;
       &lt;mo&gt;
        )
       &lt;/mo&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       (x,y)
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.75em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mopen"&gt;
      (
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      x
     &lt;/span&gt;
     &lt;span class="mpunct"&gt;
      ,
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.16666666666666666em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      y
     &lt;/span&gt;
     &lt;span class="mclose"&gt;
      )
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 .
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        x
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       x
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.43056em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.43056em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit"&gt;
      x
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 représente les abscisses, donc les pixels horizontaux et
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        y
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       y
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.43056em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      y
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 les ordonnées, les pixels verticaux. L’origine du repère sera logiquement le pixel le plus en haut à gauche (comme la lecture classique d’un livre, on commence en haut à gauche) et à pour coordonnées … (0,0) ! Eh oui, on ne commence pas aux pixels (1,1) mais bien (0,0). Quand on y réfléchit, c’est assez logique. Les caractères sont rangés dans des chaines de caractères, donc des tableaux, qui eux sont adressés à partir de la case 0. Il parait donc au final logique que les développeurs aient gardé une cohérence entre les deux.
&lt;/p&gt;
&lt;p&gt;
 Puisque nous commençons à 0, un écran de 16x2 caractères pourra donc avoir comme coordonnées de 0 à 15 pour
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        x
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       x
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.43056em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.43056em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit"&gt;
      x
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 et 0 ou 1 pour
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        y
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       y
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.43056em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.625em;vertical-align:-0.19444em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.03588em;"&gt;
      y
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 . Ceci étant dit, nous pouvons passer à la suite. La prochaine fonction que nous allons voir prend directement en compte ce que je viens de vous dire. Cette fonction nommée
 &lt;code&gt;
  setCursor()
 &lt;/code&gt;
 vous permet de positionner le curseur sur l’écran. On pourra donc faire
 &lt;code&gt;
  setCursor(0,0)
 &lt;/code&gt;
 pour se placer en haut à gauche (équivalent à la fonction "home()") et en faisant
 &lt;code&gt;
  setCursor(15,1)
 &lt;/code&gt;
 on se placera tout en bas à droite (toujours pour un écran de 16x2 caractères). Un exemple :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;"LiquidCrystal.h"&lt;/span&gt; &lt;span class="hljs-comment"&gt;// on inclut la librairie&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// initialise l'écran avec les bonnes broches&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// ATTENTION, REMPLACER LES NOMBRES PAR VOS BRANCHEMENTS À VOUS !&lt;/span&gt;
&lt;span class="hljs-function"&gt;LiquidCrystal &lt;span class="hljs-title"&gt;lcd&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;11&lt;/span&gt;,&lt;span class="hljs-number"&gt;10&lt;/span&gt;,&lt;span class="hljs-number"&gt;5&lt;/span&gt;,&lt;span class="hljs-number"&gt;4&lt;/span&gt;,&lt;span class="hljs-number"&gt;3&lt;/span&gt;,&lt;span class="hljs-number"&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    lcd.begin(&lt;span class="hljs-number"&gt;16&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;);
    lcd.setCursor(&lt;span class="hljs-number"&gt;2&lt;/span&gt;,&lt;span class="hljs-number"&gt;1&lt;/span&gt;);        &lt;span class="hljs-comment"&gt;// place le curseur aux coordonnées (2,1)&lt;/span&gt;
    lcd.print(&lt;span class="hljs-string"&gt;"Texte centré"&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// texte centré sur la ligne 2&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Positionner le curseur sur l’écran LCD :
  &lt;code&gt;
   setCursor
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="animer-le-curseur"&gt;
 &lt;a aria-hidden="true" href="#animer-le-curseur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Animer le curseur
&lt;/h5&gt;
&lt;p&gt;
 Tout comme nous pouvons faire disparaître le texte, nous pouvons aussi faire disparaître le curseur (comportement par défaut). La fonction
 &lt;code&gt;
  noCursor()
 &lt;/code&gt;
 va donc l’effacer. La fonction antagoniste
 &lt;code&gt;
  cursor()
 &lt;/code&gt;
 de son côté permettra de l’afficher (vous verrez alors un petit trait en bas du carré (5*8 pixels) où il est placé, comme lorsque vous appuyez sur la touche Insér. de votre clavier). Une dernière chose sympa à faire avec le curseur est de le faire clignoter. En anglais clignoter se dit "blink" et donc tout logiquement la fonction à appeler pour activer le clignotement est
 &lt;code&gt;
  blink()
 &lt;/code&gt;
 . Vous verrez alors le curseur remplir le carré concerné en blanc puis s’effacer (juste le trait) et revenir. S’il y a un caractère en dessous, vous verrez alternativement un carré tout blanc puis le caractère. Pour désactiver le clignotement, il suffit de faire appel à la fonction
 &lt;code&gt;
  noBlink()
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;"LiquidCrystal.h"&lt;/span&gt; &lt;span class="hljs-comment"&gt;// on inclut la librairie&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// ATTENTION, REMPLACER LES NOMBRES PAR VOS BRANCHEMENTS À VOUS !&lt;/span&gt;
&lt;span class="hljs-function"&gt;LiquidCrystal &lt;span class="hljs-title"&gt;lcd&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;11&lt;/span&gt;,&lt;span class="hljs-number"&gt;10&lt;/span&gt;,&lt;span class="hljs-number"&gt;5&lt;/span&gt;,&lt;span class="hljs-number"&gt;4&lt;/span&gt;,&lt;span class="hljs-number"&gt;3&lt;/span&gt;,&lt;span class="hljs-number"&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    lcd.begin(&lt;span class="hljs-number"&gt;16&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;);
    lcd.home();        &lt;span class="hljs-comment"&gt;// place le curseur aux coordonnées (0,0)&lt;/span&gt;
    lcd.setCursor();   &lt;span class="hljs-comment"&gt;// affiche le curseur&lt;/span&gt;
    lcd.blink();       &lt;span class="hljs-comment"&gt;// et le fait clignoter&lt;/span&gt;
    lcd.print(&lt;span class="hljs-string"&gt;"Curseur clignotant"&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// texte centré sur la ligne 2&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Faire clignoter le curseur :
  &lt;code&gt;
   blink
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si vous faites appel à blink() puis à noCursor() le carré blanc continuera de clignoter. En revanche, quand le curseur est dans sa phase "éteinte" vous ne verrez plus le trait du bas.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="jouer-avec-le-texte"&gt;
 &lt;a aria-hidden="true" href="#jouer-avec-le-texte"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Jouer avec le texte
&lt;/h4&gt;
&lt;p&gt;
 Nous allons maintenant nous amuser avec le texte. Ne vous attendez pas non plus à des miracles, il s’agira juste de déplacer le texte automatiquement ou non.
&lt;/p&gt;
&lt;h5 id="déplacer-le-texte-à-la-main"&gt;
 &lt;a aria-hidden="true" href="#déplacer-le-texte-à-la-main"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Déplacer le texte à la main
&lt;/h5&gt;
&lt;p&gt;
 Pour commencer, nous allons déplacer le texte manuellement, vers la droite ou vers la gauche. N’essayez pas de produire l’expérience avec votre main, ce n’est pas un écran tactile, hein !
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 Le comportement est simple à comprendre. Après avoir écrit du texte sur l’écran, on peut faire appel aux fonctions
 &lt;code&gt;
  scrollDisplayRight()
 &lt;/code&gt;
 et
 &lt;code&gt;
  scrollDisplayLeft()
 &lt;/code&gt;
 vous pourrez déplacer le texte d’un carré vers la droite ou vers la gauche. S’il y a du texte sur chacune des lignes avant de faire appel aux fonctions, c’est le texte de chaque ligne qui sera déplacé par la fonction. Utilisez deux petits boutons poussoirs pour utiliser le code suivant. Vous pourrez déplacer le texte en appuyant sur chacun des poussoirs !
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Pour ce montage j’ai du décaler mes fils de l’écran LCD par rapport à d’habitudes afin de libérer les entrées avec interruption sur les broches 2 et 3.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;"LiquidCrystal.h"&lt;/span&gt; &lt;span class="hljs-comment"&gt;// on inclut la librairie&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// les branchements&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; boutonGauche = &lt;span class="hljs-number"&gt;2&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// le bouton de gauche&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; boutonDroite = &lt;span class="hljs-number"&gt;3&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// le bouton de droite&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// initialise l'écran avec les bonnes broches&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// ATTENTION, REMPLACER LES NOMBRES PAR VOS BRANCHEMENTS À VOUS !&lt;/span&gt;
&lt;span class="hljs-function"&gt;LiquidCrystal &lt;span class="hljs-title"&gt;lcd&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;11&lt;/span&gt;,&lt;span class="hljs-number"&gt;10&lt;/span&gt;,&lt;span class="hljs-number"&gt;7&lt;/span&gt;,&lt;span class="hljs-number"&gt;6&lt;/span&gt;,&lt;span class="hljs-number"&gt;5&lt;/span&gt;,&lt;span class="hljs-number"&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// ------------------------------------------------------------------------------&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// règlage en entrées pullup&lt;/span&gt;
    pinMode(boutonGauche, INPUT);
    pinMode(boutonDroite, INPUT);
    digitalWrite(boutonGauche, HIGH);
    digitalWrite(boutonDroite, HIGH);

    &lt;span class="hljs-comment"&gt;// on attache des fonctions aux deux interruptions externes (les boutons)&lt;/span&gt;
    attachInterrupt(&lt;span class="hljs-number"&gt;0&lt;/span&gt;, aGauche, RISING);
    attachInterrupt(&lt;span class="hljs-number"&gt;1&lt;/span&gt;, aDroite RISING);

    &lt;span class="hljs-comment"&gt;// Réglage du LCD&lt;/span&gt;
    lcd.begin(&lt;span class="hljs-number"&gt;16&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// règle la  taille du LCD&lt;/span&gt;
    lcd.print(&lt;span class="hljs-string"&gt;"Salut ca zeste ?"&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// pas besoin de loop pour le moment&lt;/span&gt;
}

&lt;span class="hljs-comment"&gt;// fonction appelée par l'interruption du premier bouton&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;aGauche&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
    lcd.scrollDisplayLeft(); &lt;span class="hljs-comment"&gt;// on va à gauche !&lt;/span&gt;
}

&lt;span class="hljs-comment"&gt;// fonction appelée par l'interruption du deuxième bouton&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;aDroite&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
    lcd.scrollDisplayRight(); &lt;span class="hljs-comment"&gt;// on va à droite !&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Déplacer le texte :
  &lt;code&gt;
   scrollDisplay
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/G-uCc0qYdWg" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Et la démo sur simulateur :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/lF68lfZDFDD" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="déplacer-le-texte-automatiquement"&gt;
 &lt;a aria-hidden="true" href="#déplacer-le-texte-automatiquement"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Déplacer le texte automatiquement
&lt;/h5&gt;
&lt;p&gt;
 De temps en temps, il peut être utile d’écrire toujours sur le même pixel et de faire en sorte que le texte se décale tout seul (pour faire des effets zolis par exemple).
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 Un couple de fonctions va nous aider dans cette tâche. La première sert à définir la direction du défilement. Elle s’appelle
 &lt;code&gt;
  leftToRight()
 &lt;/code&gt;
 pour aller de la gauche vers la droite et
 &lt;code&gt;
  rightToLeft()
 &lt;/code&gt;
 pour l’autre sens. Ensuite, il suffit d’activer (ou pas si vous voulez arrêter l’effet) avec la fonction
 &lt;code&gt;
  autoScroll()
 &lt;/code&gt;
 (et
 &lt;code&gt;
  noAutoScroll()
 &lt;/code&gt;
 pour l’arrêter). Pour mieux voir cet effet, je vous propose d’essayer le code qui suit. Vous verrez ainsi les chiffres de 0 à 9 apparaitre et se "pousser" les uns après les autres :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;"LiquidCrystal.h"&lt;/span&gt; &lt;span class="hljs-comment"&gt;// on inclut la librairie&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// ATTENTION, REMPLACER LES NOMBRES PAR VOS BRANCHEMENTS À VOUS !&lt;/span&gt;
&lt;span class="hljs-function"&gt;LiquidCrystal &lt;span class="hljs-title"&gt;lcd&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;11&lt;/span&gt;,&lt;span class="hljs-number"&gt;10&lt;/span&gt;,&lt;span class="hljs-number"&gt;5&lt;/span&gt;,&lt;span class="hljs-number"&gt;4&lt;/span&gt;,&lt;span class="hljs-number"&gt;3&lt;/span&gt;,&lt;span class="hljs-number"&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    lcd.begin(&lt;span class="hljs-number"&gt;16&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;);
    lcd.setCursor(&lt;span class="hljs-number"&gt;14&lt;/span&gt;,&lt;span class="hljs-number"&gt;0&lt;/span&gt;);
    lcd.leftToRight();  &lt;span class="hljs-comment"&gt;// indique que le texte doit être déplacé vers la gauche&lt;/span&gt;
    lcd.autoscroll();   &lt;span class="hljs-comment"&gt;// rend automatique ce déplacement&lt;/span&gt;
    lcd.print(&lt;span class="hljs-string"&gt;"{"&lt;/span&gt;);
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i=&lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(i=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class="hljs-number"&gt;10&lt;/span&gt;; i++)
    {
        lcd.print(i);
        delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
    }
    lcd.print(&lt;span class="hljs-string"&gt;"}"&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Deplace le texte automatiquement :
  &lt;code&gt;
   autoscroll
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="créer-un-caractère"&gt;
 &lt;a aria-hidden="true" href="#créer-un-caractère"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Créer un caractère
&lt;/h3&gt;
&lt;p&gt;
 Dernière partie avant la pratique, on s’accroche vous serez bientôt incollable sur les écrans LCD ! En plus, réjouissez-vous ! je vous ai gardé un petit truc sympa pour la fin. En effet, dans ce dernier morceau, toute votre âme créatrice va pouvoir s’exprimer ! Nous allons créer des caractères !
&lt;/p&gt;
&lt;h5 id="principe-de-la-création"&gt;
 &lt;a aria-hidden="true" href="#principe-de-la-création"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Principe de la création
&lt;/h5&gt;
&lt;p&gt;
 Créer un caractère n’est pas très difficile, il suffit d’avoir un peu d’imagination. Sur l’écran, les pixels sont en réalité divisés en grille de 5x8 (5 en largeur et 8 en hauteur). C’est parce que le contrôleur de l’écran connait l’alphabet qu’il peut dessiner sur ces petites grilles les caractères et les chiffres. Comme je viens de le dire, les caractères sont une grille de 5x8. Cette grille sera symbolisée en mémoire par un tableau de huit octets (type
 &lt;code&gt;
  byte
 &lt;/code&gt;
 ). Les 5 bits de poids faible de chaque octet représenteront une ligne du nouveau caractère. Pour faire simple, prenons un exemple. Nous allons dessiner un smiley, avec ses deux yeux et sa bouche pour avoir le rendu suivant :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-text"&gt;0 0 0 0 0
X 0 0 0 X
0 0 0 0 0
0 0 0 0 0
X 0 0 0 X
0 X X X 0
0 0 0 0 0
0 0 0 0 0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ce dessin se traduira en mémoire par un tableau d’octet que l’on pourra coder de la manière suivante :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;byte smiley[&lt;span class="hljs-number"&gt;8&lt;/span&gt;] = {
    B00000,
    B10001,
    B00000,
    B00000,
    B10001,
    B01110,
    B00000,
    B00000
};
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Tableau de représentation d’un smiley
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 La lettre 'B' avant l’écriture des octets veut dire "
 &lt;em&gt;
  Je t’écris la valeur en binaire
 &lt;/em&gt;
 ". Cela nous permet d’avoir un rendu plus facile et rapide.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Oh le joli smiley !" src="./images/uploaded/tuto-arduino-702-votre-premier-texte-sur-le-lcd/oh-le-joli-smiley.jpg"/&gt;
 &lt;figcaption&gt;
  Oh le joli smiley !
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="lenvoyer-à-lécran-et-lutiliser"&gt;
 &lt;a aria-hidden="true" href="#lenvoyer-à-lécran-et-lutiliser"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’envoyer à l’écran et l’utiliser
&lt;/h5&gt;
&lt;p&gt;
 Une fois que votre caractère est créé, il faut l’envoyer à l’écran, pour que ce dernier puisse le connaitre, avant toute communication avec l’écran (oui oui avant le
 &lt;code&gt;
  begin()
 &lt;/code&gt;
 ). La fonction pour apprendre notre caractère à l’écran se nomme
 &lt;code&gt;
  createChar()
 &lt;/code&gt;
 signifiant "créer caractère". Cette fonction prend deux paramètres : "l’adresse" du caractère dans la mémoire de l’écran (de 0 à 7) et le tableau de byte représentant le caractère. Ensuite, l’étape de départ de communication avec l’écran peut-être faite (le begin). Ensuite, si vous voulez écrire ce nouveau caractère sur votre bel écran, nous allons utiliser une nouvelle (la dernière fonction) qui s’appelle
 &lt;code&gt;
  write()
 &lt;/code&gt;
 . En paramètre sera passé un
 &lt;code&gt;
  int
 &lt;/code&gt;
 représentant le numéro (adresse) du caractère que l’on veut afficher. Cependant, il y a là une faille dans le code Arduino. En effet, la fonction
 &lt;code&gt;
  write()
 &lt;/code&gt;
 existe aussi dans une librairie standard d’Arduino et prend un pointeur sur un char. Le seul moyen de les différencier pour le compilateur sera donc de regarder le paramètre de la fonction pour savoir ce que vous voulez faire. Dans notre cas, il faut passer un
 &lt;code&gt;
  int
 &lt;/code&gt;
 . On va donc forcer (on dit "caster") le paramètre dans le type "uint8
 &lt;em&gt;
  t" en écrivant la fonction de la manière suivante : `write(uint8
 &lt;/em&gt;
 t param)`. Le code complet sera ainsi le suivant :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;"LiquidCrystal.h"&lt;/span&gt; &lt;span class="hljs-comment"&gt;// on inclut la librairie&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// initialise l'écran avec les bonnes broches&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// ATTENTION, REMPLACER LES NOMBRES PAR VOS BRANCHEMENTS À VOUS !&lt;/span&gt;
&lt;span class="hljs-function"&gt;LiquidCrystal &lt;span class="hljs-title"&gt;lcd&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;11&lt;/span&gt;,&lt;span class="hljs-number"&gt;10&lt;/span&gt;,&lt;span class="hljs-number"&gt;5&lt;/span&gt;,&lt;span class="hljs-number"&gt;4&lt;/span&gt;,&lt;span class="hljs-number"&gt;3&lt;/span&gt;,&lt;span class="hljs-number"&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// notre nouveau caractère&lt;/span&gt;
byte smiley[&lt;span class="hljs-number"&gt;8&lt;/span&gt;] = {
    B00000,
    B10001,
    B00000,
    B00000,
    B10001,
    B01110,
    B00000,
};

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    lcd.createChar(&lt;span class="hljs-number"&gt;0&lt;/span&gt;, smiley); &lt;span class="hljs-comment"&gt;// apprend le caractère à l'écran LCD&lt;/span&gt;
    lcd.begin(&lt;span class="hljs-number"&gt;16&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;);
    lcd.write((&lt;span class="hljs-keyword"&gt;uint8_t&lt;/span&gt;) &lt;span class="hljs-number"&gt;0&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// affiche le caractère de l'adresse 0&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Insertion et utilisation d’un caractère dans la memoire du LCD
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Désormais, vous savez l’essentiel sur les LCD alphanumériques, vous êtes donc aptes pour passer au TP.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>[TP] Supervision avec un LCD</title><link href="https://eskimon.fr/tuto-arduino-703-tp-supervision-avec-un-lcd" rel="alternate"></link><published>2013-12-11T18:14:00+01:00</published><updated>2013-12-11T18:14:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-11:/tuto-arduino-703-tp-supervision-avec-un-lcd</id><summary type="html">&lt;p&gt;
 Chers lecteurs et lectrices, savez-vous qu’il est toujours aussi difficile de faire une introduction et une conclusion pour chaque chapitre ? C’est pourquoi je n’ai choisi ici que de dire ceci :
 &lt;em&gt;
  amusez-vous bien avec les LCD !
 &lt;/em&gt;
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#consigne"&gt;
    Consigne
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#comportement-de-lécran"&gt;
       Comportement de l’écran
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#correction"&gt;
    Correction
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#le-montage"&gt;
     Le montage
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#le-code"&gt;
      Le code
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#les-variables-utilisées"&gt;
       Les …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;
 Chers lecteurs et lectrices, savez-vous qu’il est toujours aussi difficile de faire une introduction et une conclusion pour chaque chapitre ? C’est pourquoi je n’ai choisi ici que de dire ceci :
 &lt;em&gt;
  amusez-vous bien avec les LCD !
 &lt;/em&gt;
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#consigne"&gt;
    Consigne
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#comportement-de-lécran"&gt;
       Comportement de l’écran
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#correction"&gt;
    Correction
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#le-montage"&gt;
     Le montage
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#le-code"&gt;
      Le code
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#les-variables-utilisées"&gt;
       Les variables utilisées
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-setup"&gt;
       Le setup
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#quelques-fonctions-utiles"&gt;
       Quelques fonctions utiles
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-boucle-principale"&gt;
       La boucle principale
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#programme-complet"&gt;
       Programme complet
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="consigne"&gt;
 &lt;a aria-hidden="true" href="#consigne"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Consigne
&lt;/h3&gt;
&lt;p&gt;
 Dans ce TP, on se propose de mettre en place un système de supervision, comme on pourrait en retrouver dans un milieu industriel (en plus simple ici, bien sûr !) ou dans d’autres applications. Le but sera d’afficher des informations sur l’écran LCD en fonction d’évènements qui se passent dans le milieu extérieur. Ce monde extérieur sera représenté par les composants suivants :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Deux boutons, qui pourraient représenter par exemple deux barrières infrarouges et dont le signal reçu passe de 1 à 0 lorsqu’un objet passe devant.
 &lt;/li&gt;
 &lt;li&gt;
  Deux potentiomètres. Le premier sert de "consigne" et est réglé par l’utilisateur. Le second représentera un capteur. À titre d’exemple, sur la vidéo à la suite vous verrez un potentiomètre rotatif qui représentera la consigne et un autre sous forme de glissière qui sera le capteur.
 &lt;/li&gt;
 &lt;li&gt;
  Enfin, une LED rouge nous permettra de faire une alarme visuelle. Elle sera normalement éteinte mais si la valeur du capteur dépasse celle de la consigne alors elle s’allumera.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="comportement-de-lécran"&gt;
 &lt;a aria-hidden="true" href="#comportement-de-lécran"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Comportement de l’écran
&lt;/h5&gt;
&lt;p&gt;
 L’écran que j’utilise ne propose que 2 lignes et 16 colonnes. Il n’est donc pas possible d’afficher toutes les informations de manière lisible en même temps. On se propose donc de faire un affichage alterné entre deux interfaces. Chaque interface sera affichée pendant cinq secondes à tour de rôle. La première affichera l’état des boutons. On pourra par exemple lire :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-text"&gt;Bouton G : ON
Bouton D : OFF
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 La seconde interface affichera la valeur de la consigne et celle du capteur. On aura par exemple :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-text"&gt;Consigne : 287
Capteur  : 115
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 (Sur la vidéo vous verrez "gauche / droite" pour symboliser les deux potentiomètres, chacun fait comme il veut/peut
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 ).
&lt;/p&gt;
&lt;p&gt;
 Enfin, bien que l’information "consigne/capteur" ne s’affiche que toutes les 5 secondes, l’alarme (la LED rouge), elle, doit être visible à tout moment si la valeur du capteur dépasse celle de la consigne. En effet, imaginez que cette alarme représentera une pression trop élevée, ce serait dommage que tout explose à cause d’un affichage 5 secondes sur 10 !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Je pense avoir fait le tour de mes attentes ! Je vous souhaite un bon courage, prenez votre temps, faites un beau schéma/montage/code et à bientôt pour la correction !
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/rGdUo7j2ou8" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Un montage sur simulateur interactif, sans code, est disponible dans la correction, après la partie qui explique le schéma électronique.
&lt;/p&gt;
&lt;h3 id="correction"&gt;
 &lt;a aria-hidden="true" href="#correction"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Correction
&lt;/h3&gt;
&lt;h4 id="le-montage"&gt;
 &lt;a aria-hidden="true" href="#le-montage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le montage
&lt;/h4&gt;
&lt;p&gt;
 Vous en avez l’habitude maintenant, je vais vous présenter le schéma puis ensuite le code. Pour le schéma, je n’ai pas des milliers de commentaires à faire. Parmi les choses auxquelles il faut être attentif se trouvent :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Des condensateurs de filtrage pour éviter les rebonds parasites créés par les boutons
 &lt;/li&gt;
 &lt;li&gt;
  Mettre les potentiomètres sur des entrées analogiques
 &lt;/li&gt;
 &lt;li&gt;
  Brancher la LED dans le bon sens et ne pas oublier sa résistance de limitation de courant
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Et en cas de doute, voici le schéma (qui est un peu fouillis par endroit, j’en suis désolé) !
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;img alt="Montage du TP - Schéma" src="./images/uploaded/tuto-arduino-703-tp-supervision-avec-un-lcd/montage-du-tp-schema.jpg"/&gt;
   &lt;figcaption&gt;
    Montage du TP - Schéma
   &lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;figure&gt;
   &lt;img alt="Montage du TP - Montage" src="./images/uploaded/tuto-arduino-703-tp-supervision-avec-un-lcd/montage-du-tp-montage.png"/&gt;
   &lt;figcaption&gt;
    Montage du TP - Montage
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voici le montage sans code sur simulateur :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/dtakMEfdxxs" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="le-code"&gt;
 &lt;a aria-hidden="true" href="#le-code"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le code
&lt;/h4&gt;
&lt;p&gt;
 Là encore, je vais reprendre le même schéma de fonctionnement que d’habitude en vous présentant tout d’abord les variables globales utilisées, puis les initialisations pour continuer avec quelques fonctions utiles et la boucle principale.
&lt;/p&gt;
&lt;h5 id="les-variables-utilisées"&gt;
 &lt;a aria-hidden="true" href="#les-variables-utilisées"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les variables utilisées
&lt;/h5&gt;
&lt;p&gt;
 Dans ce TP, beaucoup de variables vont être déclarées. En effet, il en faut déjà 5 pour les entrées/sorties (2 boutons, 2 potentiomètres, 1 LED), j’utilise aussi deux tableaux pour contenir et préparer les messages à afficher sur la première et deuxième ligne. Enfin, j’en utilise 4 pour contenir les mesures faites et 4 autres servant de mémoire pour ces mesures. Ah et j’oubliais, il me faut aussi une variable contenant le temps écoulé et une servant à savoir sur quelle "interface" nous sommes en train d’écrire. Voici un petit tableau résumant tout cela ainsi que le type des variables.
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="text-center"&gt;
   &lt;figure&gt;
    &lt;div class="table-wrapper"&gt;
     &lt;table class=" table table-bordered table-striped"&gt;
      &lt;thead&gt;
       &lt;tr&gt;
        &lt;th&gt;
         Nom
        &lt;/th&gt;
        &lt;th&gt;
         Type
        &lt;/th&gt;
        &lt;th&gt;
         Description
        &lt;/th&gt;
       &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
       &lt;tr&gt;
        &lt;td&gt;
         boutonGauche
        &lt;/td&gt;
        &lt;td&gt;
         &lt;code&gt;
          const int
         &lt;/code&gt;
        &lt;/td&gt;
        &lt;td&gt;
         Broche du bouton de gauche
        &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
        &lt;td&gt;
         boutonDroite
        &lt;/td&gt;
        &lt;td&gt;
         &lt;code&gt;
          const int
         &lt;/code&gt;
        &lt;/td&gt;
        &lt;td&gt;
         Broche du bouton de droite
        &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
        &lt;td&gt;
         potentiometreGauche
        &lt;/td&gt;
        &lt;td&gt;
         &lt;code&gt;
          const int
         &lt;/code&gt;
        &lt;/td&gt;
        &lt;td&gt;
         Broche du potar "consigne"
        &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
        &lt;td&gt;
         potentiometreDroite
        &lt;/td&gt;
        &lt;td&gt;
         &lt;code&gt;
          const int
         &lt;/code&gt;
        &lt;/td&gt;
        &lt;td&gt;
         Broche du potar "alarme"
        &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
        &lt;td&gt;
         ledAlarme
        &lt;/td&gt;
        &lt;td&gt;
         &lt;code&gt;
          const int
         &lt;/code&gt;
        &lt;/td&gt;
        &lt;td&gt;
         Broche de la LED d’alarme
        &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
        &lt;td&gt;
         messageHaut[16]
        &lt;/td&gt;
        &lt;td&gt;
         &lt;code&gt;
          char
         &lt;/code&gt;
        &lt;/td&gt;
        &lt;td&gt;
         Tableau représentant la ligne du haut
        &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
        &lt;td&gt;
         messageBas[16]
        &lt;/td&gt;
        &lt;td&gt;
         &lt;code&gt;
          char
         &lt;/code&gt;
        &lt;/td&gt;
        &lt;td&gt;
         Tableau représentant la ligne du bas
        &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
        &lt;td&gt;
         etatGauche
        &lt;/td&gt;
        &lt;td&gt;
         &lt;code&gt;
          int
         &lt;/code&gt;
        &lt;/td&gt;
        &lt;td&gt;
         État du bouton de gauche
        &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
        &lt;td&gt;
         etatDroite
        &lt;/td&gt;
        &lt;td&gt;
         &lt;code&gt;
          int
         &lt;/code&gt;
        &lt;/td&gt;
        &lt;td&gt;
         État du bouton de droite
        &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
        &lt;td&gt;
         niveauGauche
        &lt;/td&gt;
        &lt;td&gt;
         &lt;code&gt;
          int
         &lt;/code&gt;
        &lt;/td&gt;
        &lt;td&gt;
         Conversion du potar de gauche
        &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
        &lt;td&gt;
         niveauDroite
        &lt;/td&gt;
        &lt;td&gt;
         &lt;code&gt;
          int
         &lt;/code&gt;
        &lt;/td&gt;
        &lt;td&gt;
         Conversion du potar de droite
        &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
        &lt;td&gt;
         etatGauche_old
        &lt;/td&gt;
        &lt;td&gt;
         &lt;code&gt;
          int
         &lt;/code&gt;
        &lt;/td&gt;
        &lt;td&gt;
         Mémoire de l’état du bouton de gauche
        &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
        &lt;td&gt;
         etatDroite_old
        &lt;/td&gt;
        &lt;td&gt;
         &lt;code&gt;
          int
         &lt;/code&gt;
        &lt;/td&gt;
        &lt;td&gt;
         Mémoire de l’état du bouton de droite
        &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
        &lt;td&gt;
         niveauGauche_old
        &lt;/td&gt;
        &lt;td&gt;
         &lt;code&gt;
          int
         &lt;/code&gt;
        &lt;/td&gt;
        &lt;td&gt;
         Mémoire de la conversion du potar de gauche
        &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
        &lt;td&gt;
         niveauDroite_old
        &lt;/td&gt;
        &lt;td&gt;
         &lt;code&gt;
          int
         &lt;/code&gt;
        &lt;/td&gt;
        &lt;td&gt;
         Mémoire de la conversion du potar de droite
        &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
        &lt;td&gt;
         temps
        &lt;/td&gt;
        &lt;td&gt;
         &lt;code&gt;
          unsigned long
         &lt;/code&gt;
        &lt;/td&gt;
        &lt;td&gt;
         Pour mémoriser le temps écoulé
        &lt;/td&gt;
       &lt;/tr&gt;
       &lt;tr&gt;
        &lt;td&gt;
         ecran
        &lt;/td&gt;
        &lt;td&gt;
         &lt;code&gt;
          boolean
         &lt;/code&gt;
        &lt;/td&gt;
        &lt;td&gt;
         Pour savoir sur quelle interface on écrit
        &lt;/td&gt;
       &lt;/tr&gt;
      &lt;/tbody&gt;
     &lt;/table&gt;
    &lt;/div&gt;
    &lt;figcaption&gt;
     Liste des broches utilisées
    &lt;/figcaption&gt;
   &lt;/figure&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="le-setup"&gt;
 &lt;a aria-hidden="true" href="#le-setup"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le setup
&lt;/h5&gt;
&lt;p&gt;
 Maintenant que les présentations sont faites, nous allons passer à toutes les initialisations. Le setup n’aura que peu de choses à faire puisqu’il suffira de régler les broches en entrées/sorties et de mettre en marche l’écran LCD.
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// règlage des entrées/sorties&lt;/span&gt;
    pinMode(boutonGauche, INPUT);
    pinMode(boutonDroite, INPUT);
    digitalWrite(boutonGauche, HIGH);
    digitalWrite(boutonDroite, HIGH);
    pinMode(ledAlarme, OUTPUT);
    digitalWrite(ledAlarme, HIGH);

    &lt;span class="hljs-comment"&gt;// réglage du LCD&lt;/span&gt;
    lcd.begin(&lt;span class="hljs-number"&gt;16&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// règle la  taille du LCD&lt;/span&gt;
    lcd.noBlink(); &lt;span class="hljs-comment"&gt;// pas de clignotement&lt;/span&gt;
    lcd.noCursor(); &lt;span class="hljs-comment"&gt;// pas de curseur&lt;/span&gt;
    lcd.noAutoscroll(); &lt;span class="hljs-comment"&gt;// pas de défilement&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    Correction de l’exercice :
    &lt;code&gt;
     setup
    &lt;/code&gt;
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="quelques-fonctions-utiles"&gt;
 &lt;a aria-hidden="true" href="#quelques-fonctions-utiles"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Quelques fonctions utiles
&lt;/h5&gt;
&lt;p&gt;
 Afin de bien séparer notre code en morceaux logiques, nous allons écrire plusieurs fonctions, qui ont toutes un rôle particulier. La première d’entre elles sera celle chargée de faire le relevé des valeurs. Son objectif sera de faire les conversions analogiques et de regarder l’état des entrées numériques. Elle stockera bien entendu chacune des mesures dans la variable concernée.
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;recupererDonnees&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// efface les anciens avec les "nouveaux anciens"&lt;/span&gt;
    etatGauche_old = etatGauche;
    etatDroite_old = etatDroite;
    niveauGauche_old = niveauGauche;
    niveauDroite_old = niveauDroite;

    &lt;span class="hljs-comment"&gt;// effectue les mesures&lt;/span&gt;
    etatGauche = digitalRead(boutonGauche);
    etatDroite = digitalRead(boutonDroite);
    niveauGauche = analogRead(potentiometreGauche);
    niveauDroite = analogRead(potentiometreDroite);

    &lt;span class="hljs-comment"&gt;// pour s'assurer que les conversions analogiques sont terminées&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// avant de passer à la suite on fait une petite pause&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;2&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    Correction de l’exercice : fonction
    &lt;code&gt;
     recupererDonnees
    &lt;/code&gt;
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Ensuite, deux fonctions vont nous permettre de déterminer si oui ou non il faut mettre à jour l’écran. En effet, afin d’éviter un phénomène de scintillement qui se produit si on envoi des données sans arrêt, on préfère écrire sur l’écran que si nécessaire. Pour décider si l’on doit mettre à jour les "phrases" concernant les boutons, il suffit de vérifier l’état "ancien" et l’état courant de chaque bouton. Si l’état est différent, notre fonction renvoie
 &lt;code&gt;
  true
 &lt;/code&gt;
 , sinon elle renvoie
 &lt;code&gt;
  false
 &lt;/code&gt;
 . Une même fonction sera codée pour les valeurs analogiques. Cependant, comme les valeurs lues par le convertisseur de la carte Arduino ne sont pas toujours très stables (je rappelle que le convertisseur offre plus ou moins deux bits de précision, soit 20mV de précision totale), on va faire une petite opération. Cette opération consiste à regarder si la valeur absolue de la différence entre la valeur courante et la valeur ancienne est supérieure à deux unités. Si c’est le cas, on renvoi
 &lt;code&gt;
  true
 &lt;/code&gt;
 , sinon
 &lt;code&gt;
  false
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;boolean &lt;span class="hljs-title"&gt;boutonsChanged&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// si un bouton à changé d'état&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(etatGauche_old != etatGauche || etatDroite_old != etatDroite)
        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-literal"&gt;true&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-literal"&gt;false&lt;/span&gt;;
}

&lt;span class="hljs-function"&gt;boolean &lt;span class="hljs-title"&gt;potarChanged&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// si un potentiomètre affiche une différence de plus de 2 unités&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// entre ces deux valeurs, alors on met à jour&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(&lt;span class="hljs-built_in"&gt;abs&lt;/span&gt;(niveauGauche_old-niveauGauche) &amp;gt; &lt;span class="hljs-number"&gt;2&lt;/span&gt; ||
       &lt;span class="hljs-built_in"&gt;abs&lt;/span&gt;(niveauDroite_old-niveauDroite) &amp;gt; &lt;span class="hljs-number"&gt;2&lt;/span&gt;)
    {
        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-literal"&gt;true&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
    {
        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-literal"&gt;false&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    Correction de l’exercice : fonction
    &lt;code&gt;
     boutonsChanged
    &lt;/code&gt;
    et
    &lt;code&gt;
     potarChanged
    &lt;/code&gt;
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Une dernière fonction nous servira à faire la mise à jour de l’écran. Elle va préparer les deux chaines de caractères (celle du haut et celle du bas) et va ensuite les envoyer successivement sur l’écran. Pour écrire dans les chaines, on vérifiera la valeur de la variable
 &lt;code&gt;
  ecran
 &lt;/code&gt;
 pour savoir si on doit écrire les valeurs des potentiomètres ou celles des boutons. L’envoi à l’écran se fait simplement avec
 &lt;code&gt;
  print()
 &lt;/code&gt;
 comme vu antérieurement. On notera le
 &lt;code&gt;
  clear()
 &lt;/code&gt;
 de l’écran avant de faire les mises à jour. En effet, sans cela les valeurs pourraient se chevaucher (essayez d’écrire un OFF puis un ON, sans clear(), cela vous fera un "ONF" à la fin).
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;updateEcran&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(ecran)
    {
        &lt;span class="hljs-comment"&gt;// prépare les chaines à mettre sur l'écran : boutons&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(etatGauche)
            &lt;span class="hljs-built_in"&gt;sprintf&lt;/span&gt;(messageHaut,&lt;span class="hljs-string"&gt;"Bouton G : ON"&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
            &lt;span class="hljs-built_in"&gt;sprintf&lt;/span&gt;(messageHaut,&lt;span class="hljs-string"&gt;"Bouton G : OFF"&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(etatDroite)
            &lt;span class="hljs-built_in"&gt;sprintf&lt;/span&gt;(messageBas,&lt;span class="hljs-string"&gt;"Bouton D : ON"&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
            &lt;span class="hljs-built_in"&gt;sprintf&lt;/span&gt;(messageBas,&lt;span class="hljs-string"&gt;"Bouton D : OFF"&lt;/span&gt;);
        }
        &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
        {
            &lt;span class="hljs-comment"&gt;// prépare les chaines à mettre sur l'écran : potentiomètres&lt;/span&gt;
            &lt;span class="hljs-built_in"&gt;sprintf&lt;/span&gt;(messageHaut,&lt;span class="hljs-string"&gt;"gauche = %4d"&lt;/span&gt;, niveauGauche);
            &lt;span class="hljs-built_in"&gt;sprintf&lt;/span&gt;(messageBas,&lt;span class="hljs-string"&gt;"droite = %4d"&lt;/span&gt;, niveauDroite);
    }

    &lt;span class="hljs-comment"&gt;// on envoie le texte&lt;/span&gt;
    lcd.clear();
    lcd.setCursor(&lt;span class="hljs-number"&gt;0&lt;/span&gt;,&lt;span class="hljs-number"&gt;0&lt;/span&gt;);
    lcd.print(messageHaut);
    lcd.setCursor(&lt;span class="hljs-number"&gt;0&lt;/span&gt;,&lt;span class="hljs-number"&gt;1&lt;/span&gt;);
    lcd.print(messageBas);
}
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    Correction de l’exercice : fonction
    &lt;code&gt;
     updateEcran
    &lt;/code&gt;
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="la-boucle-principale"&gt;
 &lt;a aria-hidden="true" href="#la-boucle-principale"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La boucle principale
&lt;/h5&gt;
&lt;p&gt;
 Nous voici enfin au cœur du programme, la boucle principale. Cette dernière est relativement légère, grâce aux fonctions permettant de repartir le code en unité logique. La boucle principale n’a plus qu’à les utiliser à bon escient et dans le bon ordre (
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 ) pour faire son travail. Dans l’ordre il nous faudra donc :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Récupérer toutes les données (faire les conversions, etc.).
 &lt;/li&gt;
 &lt;li&gt;
  Selon l’interface courante, afficher soit les états des boutons soit les valeurs des potentiomètres si ils/elles ont changé(e)s.
 &lt;/li&gt;
 &lt;li&gt;
  Tester les valeurs des potentiomètres pour déclencher l’alarme ou non.
 &lt;/li&gt;
 &lt;li&gt;
  Enfin, si 5 secondes se sont écoulées, changer d’interface et mettre à jour l’écran.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Simple non ? On ne le dira jamais assez, un code bien séparé est toujours plus facile à comprendre et à retoucher si nécessaire !
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 Allez, comme vous êtes sages, voici le code de cette boucle (qui va de paire avec les fonctions expliquées précédemment) :
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{

    &lt;span class="hljs-comment"&gt;// commence par récupérer les données des boutons et capteurs&lt;/span&gt;
    recupererDonnees();

    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(ecran) &lt;span class="hljs-comment"&gt;// quel écran affiche t'on ? (bouton ou potentiomètre ?)&lt;/span&gt;
    {
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(boutonsChanged()) &lt;span class="hljs-comment"&gt;// si un bouton a changé d'état&lt;/span&gt;
        updateEcran();
    }
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
    {
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(potarChanged()) &lt;span class="hljs-comment"&gt;// si un potentiomètre a changé d'état&lt;/span&gt;
        updateEcran();
    }

    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(niveauDroite &amp;gt; niveauGauche)
        &lt;span class="hljs-comment"&gt;// RAPPEL : piloté à l'état bas donc on allume !&lt;/span&gt;
        digitalWrite(ledAlarme, LOW);
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
        digitalWrite(ledAlarme, HIGH);

    &lt;span class="hljs-comment"&gt;// si ça fait 5s qu'on affiche la même donnée&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(millis() - temps &amp;gt; &lt;span class="hljs-number"&gt;5000&lt;/span&gt;)
    {
        ecran = ~ecran;
        lcd.clear();
        updateEcran();
        temps = millis();
    }
}
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    Correction de l’exercice :
    &lt;code&gt;
     loop
    &lt;/code&gt;
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="programme-complet"&gt;
 &lt;a aria-hidden="true" href="#programme-complet"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Programme complet
&lt;/h5&gt;
&lt;p&gt;
 Voici enfin le code complet. Vous pourrez le copier/coller et l’essayer pour comparer si vous voulez.
 &lt;strong&gt;
  Attention cependant à déclarer les bonnes broches en fonction de votre montage (notamment pour le LCD)
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;"LiquidCrystal.h"&lt;/span&gt; &lt;span class="hljs-comment"&gt;// on inclut la librairie&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// les branchements&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; boutonGauche = &lt;span class="hljs-number"&gt;11&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// le bouton de gauche&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; boutonDroite = &lt;span class="hljs-number"&gt;12&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// le bouton de droite&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; potentiometreGauche = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// le potentiomètre de gauche (analogique 0)&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; potentiometreDroite = &lt;span class="hljs-number"&gt;1&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// le potentiomètre de droite (analogique 1)&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; ledAlarme = &lt;span class="hljs-number"&gt;2&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// la LED est branché sur la sortie 2&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// initialise l'écran avec les bonnes broches&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// ATTENTION, REMPLACER LES NOMBRES PAR VOS BRANCHEMENTS À VOUS !&lt;/span&gt;
&lt;span class="hljs-function"&gt;LiquidCrystal &lt;span class="hljs-title"&gt;lcd&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;11&lt;/span&gt;,&lt;span class="hljs-number"&gt;10&lt;/span&gt;,&lt;span class="hljs-number"&gt;5&lt;/span&gt;,&lt;span class="hljs-number"&gt;4&lt;/span&gt;,&lt;span class="hljs-number"&gt;3&lt;/span&gt;,&lt;span class="hljs-number"&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; messageHaut[&lt;span class="hljs-number"&gt;16&lt;/span&gt;] = &lt;span class="hljs-string"&gt;""&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// Message sur la ligne du dessus&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; messageBas[&lt;span class="hljs-number"&gt;16&lt;/span&gt;] = &lt;span class="hljs-string"&gt;""&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// Message sur la ligne du dessous&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; temps = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// pour garder une trace du temps qui s'écoule&lt;/span&gt;
boolean ecran = LOW; &lt;span class="hljs-comment"&gt;// savoir si on affiche les boutons ou les conversions&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; etatGauche = LOW; &lt;span class="hljs-comment"&gt;// état du bouton de gauche&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; etatDroite = LOW; &lt;span class="hljs-comment"&gt;// état du bouton de droite&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; niveauGauche = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// conversion du potentiomètre de gauche&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; niveauDroite = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// conversion du potentiomètre de droite&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// les mêmes variables mais "old"&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// servant de mémoire pour constater un changement&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; etatGauche_old = LOW; &lt;span class="hljs-comment"&gt;// état du bouton de gauche&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; etatDroite_old = LOW; &lt;span class="hljs-comment"&gt;// état du bouton de droite&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; niveauGauche_old = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// conversion du potentiomètre de gauche&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; niveauDroite_old = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// conversion du potentiomètre de droite&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// -------------------------------------------------------------------------&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// réglage des entrées/sorties&lt;/span&gt;
    pinMode(boutonGauche, INPUT);
    pinMode(boutonDroite, INPUT);
    digitalWrite(boutonGauche, HIGH);
    digitalWrite(boutonDroite, HIGH);
    pinMode(ledAlarme, OUTPUT);
    digitalWrite(ledAlarme, HIGH);

    &lt;span class="hljs-comment"&gt;// paramétrage du LCD&lt;/span&gt;
    lcd.begin(&lt;span class="hljs-number"&gt;16&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// règle la  taille du LCD&lt;/span&gt;
    lcd.noBlink(); &lt;span class="hljs-comment"&gt;// pas de clignotement&lt;/span&gt;
    lcd.noCursor(); &lt;span class="hljs-comment"&gt;// pas de curseur&lt;/span&gt;
    lcd.noAutoscroll(); &lt;span class="hljs-comment"&gt;// pas de défilement&lt;/span&gt;
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{

    &lt;span class="hljs-comment"&gt;// commence par récupérer les données des boutons et capteurs&lt;/span&gt;
    recupererDonnees();

    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(ecran) &lt;span class="hljs-comment"&gt;// quel écran affiche-t'on ? (bouton ou potentiomètre ?)&lt;/span&gt;
    {
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(boutonsChanged()) &lt;span class="hljs-comment"&gt;// si un bouton a changé d'état&lt;/span&gt;
            updateEcran();
    }
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
    {
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(potarChanged()) &lt;span class="hljs-comment"&gt;// si un potentiomètre a changé d'état&lt;/span&gt;
            updateEcran();
    }

    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(niveauDroite &amp;gt; niveauGauche)
        &lt;span class="hljs-comment"&gt;// RAPPEL : piloté à l'état bas donc on allume !&lt;/span&gt;
        digitalWrite(ledAlarme, LOW);
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
        digitalWrite(ledAlarme, HIGH);

    &lt;span class="hljs-comment"&gt;// si ça fait 5s qu'on affiche la même donnée&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(millis() - temps &amp;gt; &lt;span class="hljs-number"&gt;5000&lt;/span&gt;)
    {
        ecran = ~ecran;
        lcd.clear();
        updateEcran();
        temps = millis();
    }
}

&lt;span class="hljs-comment"&gt;// -------------------------------------------------------------------------&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;recupererDonnees&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// efface les anciens avec les "nouveaux anciens"&lt;/span&gt;
    etatGauche_old = etatGauche;
    etatDroite_old = etatDroite;
    niveauGauche_old = niveauGauche;
    niveauDroite_old = niveauDroite;

    etatGauche = digitalRead(boutonGauche);
    etatDroite = digitalRead(boutonDroite);
    niveauGauche = analogRead(potentiometreGauche);
    niveauDroite = analogRead(potentiometreDroite);

    &lt;span class="hljs-comment"&gt;// pour s'assurer que les conversions analogiques sont terminées&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// on fait une petite pause avant de passer à la suite&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;1&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;boolean &lt;span class="hljs-title"&gt;boutonsChanged&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(etatGauche_old != etatGauche || etatDroite_old != etatDroite)
        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-literal"&gt;true&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-literal"&gt;false&lt;/span&gt;;
}

&lt;span class="hljs-function"&gt;boolean &lt;span class="hljs-title"&gt;potarChanged&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// si un potentiomètre affiche une différence de plus de 2 unités&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// entre ces deux valeurs, alors on met à jour&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(&lt;span class="hljs-built_in"&gt;abs&lt;/span&gt;(niveauGauche_old-niveauGauche) &amp;gt; &lt;span class="hljs-number"&gt;2&lt;/span&gt; ||
       &lt;span class="hljs-built_in"&gt;abs&lt;/span&gt;(niveauDroite_old-niveauDroite) &amp;gt; &lt;span class="hljs-number"&gt;2&lt;/span&gt;)
    {
        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-literal"&gt;true&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
    {
        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; &lt;span class="hljs-literal"&gt;false&lt;/span&gt;;
    }
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;updateEcran&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(ecran)
    {
        &lt;span class="hljs-comment"&gt;// prépare les chaines à mettre sur l'écran&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(etatGauche)
            &lt;span class="hljs-built_in"&gt;sprintf&lt;/span&gt;(messageHaut,&lt;span class="hljs-string"&gt;"Bouton G : ON"&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
            &lt;span class="hljs-built_in"&gt;sprintf&lt;/span&gt;(messageHaut,&lt;span class="hljs-string"&gt;"Bouton G : OFF"&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(etatDroite)
            &lt;span class="hljs-built_in"&gt;sprintf&lt;/span&gt;(messageBas,&lt;span class="hljs-string"&gt;"Bouton D : ON"&lt;/span&gt;);
        &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
            &lt;span class="hljs-built_in"&gt;sprintf&lt;/span&gt;(messageBas,&lt;span class="hljs-string"&gt;"Bouton D : OFF"&lt;/span&gt;);
    }
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
    {
        &lt;span class="hljs-comment"&gt;// prépare les chaines à mettre sur l'écran&lt;/span&gt;
        &lt;span class="hljs-built_in"&gt;sprintf&lt;/span&gt;(messageHaut,&lt;span class="hljs-string"&gt;"gauche = %4d"&lt;/span&gt;, niveauGauche);
        &lt;span class="hljs-built_in"&gt;sprintf&lt;/span&gt;(messageBas,&lt;span class="hljs-string"&gt;"droite = %4d"&lt;/span&gt;, niveauDroite);
    }

    &lt;span class="hljs-comment"&gt;// on envoie le texte&lt;/span&gt;
    lcd.clear();
    lcd.setCursor(&lt;span class="hljs-number"&gt;0&lt;/span&gt;,&lt;span class="hljs-number"&gt;0&lt;/span&gt;);
    lcd.print(messageHaut);
    lcd.setCursor(&lt;span class="hljs-number"&gt;0&lt;/span&gt;,&lt;span class="hljs-number"&gt;1&lt;/span&gt;);
    lcd.print(messageBas);
}
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    Correction de l’exercice : programme complet
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Et la solution interactive qui va bien (attention cette dernière s’execute assez lentement) :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/gTNctfyQIyi" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Présentation d’Arduino</title><link href="https://eskimon.fr/tuto-arduino-101-pr%C3%A9sentation-darduino" rel="alternate"></link><published>2013-12-10T20:03:00+01:00</published><updated>2013-12-10T20:03:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-10:/tuto-arduino-101-présentation-darduino</id><summary type="html">&lt;p&gt;
 Comment faire de l’électronique en utilisant un langage de programmation ? La réponse, c’est le projet Arduino qui l’apporte. Vous allez le voir, celui-ci a été conçu pour être accessible à tous par sa simplicité. Mais il peut également être d’usage professionnel, tant les possibilités d’applications …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Comment faire de l’électronique en utilisant un langage de programmation ? La réponse, c’est le projet Arduino qui l’apporte. Vous allez le voir, celui-ci a été conçu pour être accessible à tous par sa simplicité. Mais il peut également être d’usage professionnel, tant les possibilités d’applications sont nombreuses.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#quest-ce-que-cest"&gt;
    Qu’est-ce que c’est ?
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;a href="#une-carte-électronique"&gt;
         Une carte électronique
        &lt;/a&gt;
       &lt;/li&gt;
      &lt;/ul&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#programmable"&gt;
      Programmable ?
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#un-programme"&gt;
       Un programme
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#et-un-logiciel"&gt;
      Et un logiciel ?
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#un-compilateur"&gt;
       Un compilateur
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#envoyer-le-programme-dans-la-carte"&gt;
       Envoyer le programme dans la carte
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#pourquoi-choisir-arduino"&gt;
    Pourquoi choisir Arduino ?
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#que-va-t-on-faire-avec"&gt;
      Que va-t-on faire avec ?
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#dabord-arduino-cest"&gt;
       D’abord, Arduino c’est…
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#mais-aussi"&gt;
       Mais aussi
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#et-enfin-les-applications-possibles"&gt;
       Et enfin, les applications possibles
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#arduino-dans-ce-tutoriel"&gt;
       Arduino dans ce tutoriel
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#arduino-à-lécole"&gt;
      Arduino à l’école
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#des-exemples"&gt;
       Des exemples
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#des-outils-existant"&gt;
       Des outils existant :
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#les-cartes-arduino"&gt;
    Les cartes Arduino
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#les-fabricants"&gt;
      Les fabricants
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#les-types-de-cartes"&gt;
       Les types de cartes
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#les-différentes-cartes"&gt;
     Les différentes cartes
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#où-acheter"&gt;
     Où acheter ?
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#liste-dachat"&gt;
    Liste d’achat
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#liste-globale"&gt;
     Liste Globale
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#les-revendeurs"&gt;
     Les revendeurs
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#les-kits"&gt;
     Les kits
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="quest-ce-que-cest"&gt;
 &lt;a aria-hidden="true" href="#quest-ce-que-cest"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Qu’est-ce que c’est ?
&lt;/h3&gt;
&lt;p&gt;
 Une équipe de développeurs composée de
 &lt;em&gt;
  Massimo Banzi, David Cuartielles, Tom Igoe, Gianluca Martino, David Mellis
 &lt;/em&gt;
 et
 &lt;em&gt;
  Nicholas Zambetti
 &lt;/em&gt;
 a imaginé un projet répondant au doux nom de
 &lt;strong&gt;
  Arduino
 &lt;/strong&gt;
 et mettant en œuvre une petite carte électronique programmable et un logiciel multiplateforme, qui puisse être accessible à tout un chacun dans le but de créer facilement des systèmes électroniques. Étant donné qu’il y a des débutants parmi nous, commençons par voir un peu le vocabulaire commun propre au domaine de l’électronique et de l’informatique.
&lt;/p&gt;
&lt;h6 id="une-carte-électronique"&gt;
 &lt;a aria-hidden="true" href="#une-carte-électronique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Une carte électronique
&lt;/h6&gt;
&lt;p&gt;
 Une
 &lt;strong&gt;
  carte électronique
 &lt;/strong&gt;
 est un support plan, flexible ou rigide, généralement composé d'
 &lt;a href="http://fr.wikipedia.org/wiki/Polyépoxyde"&gt;
  epoxy
 &lt;/a&gt;
 ou de fibre de verre. Elle possède des pistes électriques disposées sur une, deux ou plusieurs couches (en surface et/ou en interne) qui permettent la mise en relation électrique des composants électroniques. Chaque piste relie tel composant à tel autre, de façon à créer un système électronique qui fonctionne et qui réalise les opérations demandées.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Exemple de carte électronique : Arduino Severino" src="./images/uploaded/tuto-arduino-101-présentation-darduino/exemple-de-carte-electronique-arduino-severino.jpg"/&gt;
 &lt;figcaption&gt;
  Exemple de carte électronique : Arduino Severino - (CC-BY-SA,
  &lt;a href="http://arduino.cc/en/Main/Boards"&gt;
   arduino.cc
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img src="./images/uploaded/tuto-arduino-101-présentation-darduino/f5db282c-cfa7-4b76-bd06-a14aaa4665bepng.png"/&gt;
 &lt;figcaption&gt;
  Carte Arduino Duemilanove - (CC-BY-SA,
  &lt;a href="http://arduino.cc/en/Main/ArduinoBoardDuemilanove"&gt;
   arduino.cc
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Évidemment, tous les composants d’une carte électronique ne sont pas forcément reliés entre eux. Le câblage des composants suit un plan spécifique à chaque carte électronique, qui se nomme le
 &lt;strong&gt;
  schéma électronique
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Exemple de schéma électronique - carte Arduino Uno" src="./images/uploaded/tuto-arduino-101-présentation-darduino/exemple-de-schema-electronique-carte-arduino-uno.jpg"/&gt;
 &lt;figcaption&gt;
  Exemple de schéma électronique - carte Arduino Uno - (CC-BY-SA,
  &lt;a href="http://arduino.cc/en/Main/ArduinoBoardUno"&gt;
   arduino.cc
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Enfin, avant de passer à la réalisation d’un carte électronique, il est nécessaire de transformer le schéma électronique en un
 &lt;strong&gt;
  schéma de câblage
 &lt;/strong&gt;
 , appelé
 &lt;strong&gt;
  typon
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Exemple de typon - carte Arduino" src="./images/uploaded/tuto-arduino-101-présentation-darduino/exemple-de-typon-carte-arduino.jpg"/&gt;
 &lt;figcaption&gt;
  Exemple de typon - carte Arduino - (CC-BY-SA,
  &lt;a href="http://arduino.cc/en/Main/ArduinoBoardUno"&gt;
   arduino.cc
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Une fois que l’on a une carte électronique, on fait quoi avec ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Eh bien une fois que la carte électronique est faite, nous n’avons plus qu’à la tester et l’utiliser ! Dans notre cas, avec Arduino, nous n’aurons pas à fabriquer la carte et encore moins à la concevoir. Elle existe, elle est déjà prête à l’emploi et nous n’avons plus qu’à l’utiliser. Et pour cela, vous allez devoir apprendre comment l’utiliser, ce que je vais vous montrer dans ce tutoriel.
&lt;/p&gt;
&lt;h4 id="programmable"&gt;
 &lt;a aria-hidden="true" href="#programmable"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Programmable ?
&lt;/h4&gt;
&lt;p&gt;
 J’ai parlé de
 &lt;strong&gt;
  carte électronique programmable
 &lt;/strong&gt;
 au début de ce chapitre. Mais savez-vous ce que c’est exactement ? Non pas vraiment. Alors voyons ensemble de quoi il s’agit. La carte Arduino est une carte électronique
 &lt;em&gt;
  qui ne sait rien faire
 &lt;/em&gt;
 sans qu’on lui dise
 &lt;em&gt;
  quoi faire
 &lt;/em&gt;
 . Pourquoi ? Eh bien c’est dû au fait qu’elle est
 &lt;strong&gt;
  programmable
 &lt;/strong&gt;
 . Cela signifie qu’elle a besoin d’un
 &lt;strong&gt;
  programme
 &lt;/strong&gt;
 pour fonctionner.
&lt;/p&gt;
&lt;h5 id="un-programme"&gt;
 &lt;a aria-hidden="true" href="#un-programme"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un programme
&lt;/h5&gt;
&lt;p&gt;
 Un programme est une liste d’instructions qui est exécutée par un système. Par exemple votre navigateur internet, avec lequel vous lisez probablement ce cours, est un programme. On peut analogiquement faire référence à une liste de course :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Exemple, une liste de course" src="./images/uploaded/tuto-arduino-101-présentation-darduino/exemple-une-liste-de-course.jpg"/&gt;
 &lt;figcaption&gt;
  Exemple, une liste de course
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Chaque élément de cette liste est une
 &lt;strong&gt;
  instruction
 &lt;/strong&gt;
 qui vous dit : "Va chercher le lait" ou "Va chercher le pain", etc. Dans un programme le fonctionnement est similaire :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Attendre que l’utilisateur rentre un site internet à consulter
 &lt;/li&gt;
 &lt;li&gt;
  Rechercher sur internet la page demandée
 &lt;/li&gt;
 &lt;li&gt;
  Afficher le résultat
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Tel pourrait être le fonctionnement de votre navigateur internet. Il va attendre que vous lui demandiez quelque chose pour aller le chercher et ensuite vous le montrer. Eh bien, tout aussi simplement que ces deux cas, une carte électronique programmable suit une liste d’instructions pour effectuer les opérations demandées par le programme.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Et on les trouves où ces programmes ? Comment on fait pour le mettre dans la carte ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Des programmes, on peut en trouver de partout. Mais restons concentrés sur Arduino. Le programme que nous allons mettre dans la carte Arduino, c’est nous qui allons le réaliser. Oui, vous avez bien lu : nous allons programmer cette carte Arduino. Bien sûr, ce ne sera pas aussi simple qu’une liste de course, mais rassurez-vous cependant car nous allons réussir quand même ! Je vous montrerai comment y parvenir, puisque avant tout c’est un des objectifs de ce tutoriel. Voici un exemple de programme :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// définition de la broche 2 de la carte en tant que variable&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_rouge = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// fonction d'initialisation de la carte&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// initialisation de la broche 2 comme étant une sortie&lt;/span&gt;
    pinMode(led_rouge, OUTPUT);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// allume la LED&lt;/span&gt;
    digitalWrite(led_rouge, LOW);
    &lt;span class="hljs-comment"&gt;// fait une pause de 1 seconde&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// éteint la LED&lt;/span&gt;
    digitalWrite(led_rouge, HIGH);
    &lt;span class="hljs-comment"&gt;// fait une pause de 1 seconde&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Un exemple de programme simple
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Vous le voyez comme moi, il s’agit de plusieurs lignes de texte, chacune étant une instruction. Ce langage ressemble à un véritable baragouin et ne semble vouloir
 &lt;em&gt;
  a priori
 &lt;/em&gt;
 rien dire du tout… Et pourtant, c’est ce que nous saurons faire dans quelques temps ! Car nous apprendrons le
 &lt;strong&gt;
  langage informatique
 &lt;/strong&gt;
 utilisé pour programmer la carte Arduino. Je ne m’attarde pas sur les détails, nous aurons amplement le temps de revenir sur le sujet plus tard. Pour répondre à la deuxième question, nous allons avoir besoin d’un logiciel…
&lt;/p&gt;
&lt;h4 id="et-un-logiciel"&gt;
 &lt;a aria-hidden="true" href="#et-un-logiciel"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Et un logiciel ?
&lt;/h4&gt;
&lt;p&gt;
 Bon, je ne vais pas vous faire le détail de ce qu’est un logiciel, vous savez sans aucun doute de quoi il s’agit. Ce n’est autre qu’un programme informatique exécuté sur un ordinateur. Oui, pour programmer la carte Arduino, nous allons utiliser un programme ! En fait, il va s’agir d’un
 &lt;strong&gt;
  compilateur
 &lt;/strong&gt;
 . Alors qu’est-ce que c’est exactement ?
&lt;/p&gt;
&lt;h5 id="un-compilateur"&gt;
 &lt;a aria-hidden="true" href="#un-compilateur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un compilateur
&lt;/h5&gt;
&lt;p&gt;
 En informatique, ce terme désigne un logiciel qui est capable de traduire un langage informatique, ou plutôt un programme utilisant un langage informatique, vers un langage plus approprié afin que la machine qui va le lire puisse le comprendre. C’est un peu comme si le patron anglais d’une firme Chinoise donnait des instructions en anglais à un de ses ouvriers chinois. L’ouvrier ne pourrait comprendre ce qu’il doit faire. Pour cela, il a besoin que l’on traduise ce que lui dit son patron. C’est le rôle du
 &lt;strong&gt;
  traducteur
 &lt;/strong&gt;
 . Le compilateur va donc traduire les instructions du programme précédent, écrites en langage texte, vers un langage dit "machine". Ce langage utilise uniquement des 0 et des 1. Nous verrons plus tard pourquoi. Cela pourrait être imagé de la façon suivante :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Le rôle du compilateur" src="./images/uploaded/tuto-arduino-101-présentation-darduino/le-role-du-compilateur.jpg"/&gt;
 &lt;figcaption&gt;
  Le rôle du compilateur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Donc, pour traduire le langage texte vers le langage machine (avec des 0 et des 1), nous aurons besoin de ce fameux compilateur. Et pas n’importe lequel, il faut celui qui soit capable de traduire le
 &lt;em&gt;
  langage texte Arduino
 &lt;/em&gt;
 vers le
 &lt;em&gt;
  langage machine Arduino
 &lt;/em&gt;
 . Et oui, sinon rien ne va fonctionner. Si vous mettez un traducteur Français vers Allemand entre notre patron anglais et son ouvrier chinois, ça ne fonctionnera pas mieux que s’ils discutaient directement. Vous comprenez ?
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Et pourquoi on doit utiliser un traducteur, on peut pas simplement apprendre le langage machine directement ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Comment dire… non ! Non parce que le langage machine est quasiment impossible à utiliser tel quel. Par exemple, comme il est composé de 0 et de 1, si je vous montre ça : "0001011100111010101000111", vous serez incapable, tout comme moi, de dire ce que cela signifie ! Et même si je vous dis que la suite "01000001" correspond à la lettre "A", je vous donne bien du courage pour coder rien qu’une phrase !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Bref, oubliez cette idée. C’est quand même plus facile d’utiliser des mots anglais (car oui nous allons être obligés de faire un peu d’anglais pour programmer, mais rien de bien compliqué rassurez-vous) que des suites de 0 et de 1. Vous ne croyez pas ?
&lt;/p&gt;
&lt;h5 id="envoyer-le-programme-dans-la-carte"&gt;
 &lt;a aria-hidden="true" href="#envoyer-le-programme-dans-la-carte"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Envoyer le programme dans la carte
&lt;/h5&gt;
&lt;p&gt;
 Là, je ne vais pas vous dire grand chose car c’est l’environnement de développement qui va gérer tout ça. Nous n’aurons qu’à apprendre comment utiliser ce dernier et il se débrouillera tout seul pour envoyer le programme dans la carte. Nah ! Nous n’aurons donc qu’à créer le programme sans nous soucier du reste.
&lt;/p&gt;
&lt;h3 id="pourquoi-choisir-arduino"&gt;
 &lt;a aria-hidden="true" href="#pourquoi-choisir-arduino"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Pourquoi choisir Arduino ?
&lt;/h3&gt;
&lt;h4 id="que-va-t-on-faire-avec"&gt;
 &lt;a aria-hidden="true" href="#que-va-t-on-faire-avec"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Que va-t-on faire avec ?
&lt;/h4&gt;
&lt;p&gt;
 Avec Arduino, nous allons commencer par apprendre à programmer puis à utiliser des composants électroniques. En fin de compte, nous saurons créer des systèmes électroniques plus ou moins complexes. Mais ce n’est pas tout…
&lt;/p&gt;
&lt;h5 id="dabord-arduino-cest"&gt;
 &lt;a aria-hidden="true" href="#dabord-arduino-cest"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 D’abord, Arduino c’est…
&lt;/h5&gt;
&lt;p&gt;
 … une carte électronique programmable et un logiciel gratuit :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Carte Arduino Uno" src="./images/uploaded/tuto-arduino-101-présentation-darduino/carte-arduino-uno.jpg"/&gt;
 &lt;figcaption&gt;
  Carte Arduino Uno - (CC-BY-SA,
  &lt;a href="http://arduino.cc/en/Main/ArduinoBoardUno"&gt;
   arduino.cc
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="mais-aussi"&gt;
 &lt;a aria-hidden="true" href="#mais-aussi"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Mais aussi
&lt;/h5&gt;
&lt;ul&gt;
 &lt;li&gt;
  Un prix dérisoire étant donné l’étendue des applications possibles. On comptera 20 euros pour la carte que l’on va utiliser dans le cours. Le logiciel est fourni gratuitement !
 &lt;/li&gt;
 &lt;li&gt;
  Une compatibilité sous toutes les plateformes, à savoir : Windows, Linux et Mac OS.
 &lt;/li&gt;
 &lt;li&gt;
  Une communauté ultra développée ! Des milliers de forums d’entre-aide, de présentations de projets, de propositions de programmes et de bibliothèques, …
 &lt;/li&gt;
 &lt;li&gt;
  Un site en anglais
  &lt;a href="http://www.arduino.cc/"&gt;
   arduino.cc
  &lt;/a&gt;
  et un autre en français
  &lt;a href="http://www.arduino.cc/fr/"&gt;
   arduino.cc
  &lt;/a&gt;
  où vous trouverez tout de la référence Arduino, le matériel, des exemples d’utilisations, de l’aide pour débuter, des explications sur le logiciel et le matériel, etc.
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   Une liberté quasi absolue. Elle constitue en elle-même deux choses :
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    Le logiciel : gratuit et open source, développé en Java, dont la simplicité d’utilisation relève du savoir cliquer sur la souris.
   &lt;/li&gt;
   &lt;li&gt;
    Le matériel : cartes électroniques dont les schémas sont en libre circulation sur internet.
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Cette liberté a une condition : le nom « Arduino » ne doit être employé que pour les cartes « officielles ». En somme, vous ne pouvez pas fabriquer votre propre carte sur le modèle Arduino et lui assigner le nom « Arduino ».
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="et-enfin-les-applications-possibles"&gt;
 &lt;a aria-hidden="true" href="#et-enfin-les-applications-possibles"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Et enfin, les applications possibles
&lt;/h5&gt;
&lt;p&gt;
 Voici une liste non exhaustive des applications possibles réalisées grâce à Arduino :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  contrôler des appareils domestiques
 &lt;/li&gt;
 &lt;li&gt;
  donner une "intelligence" à un robot
 &lt;/li&gt;
 &lt;li&gt;
  réaliser des jeux de lumières
 &lt;/li&gt;
 &lt;li&gt;
  permettre à un ordinateur de communiquer avec une carte électronique et différents capteurs
 &lt;/li&gt;
 &lt;li&gt;
  télécommander un appareil mobile (modélisme)
 &lt;/li&gt;
 &lt;li&gt;
  etc.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Il y a une infinité d’autres utilisations, vous pouvez simplement chercher sur votre moteur de recherche préféré ou sur Youtube le mot "Arduino" pour découvrir les milliers de projets réalisés avec !
&lt;/p&gt;
&lt;h5 id="arduino-dans-ce-tutoriel"&gt;
 &lt;a aria-hidden="true" href="#arduino-dans-ce-tutoriel"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Arduino dans ce tutoriel
&lt;/h5&gt;
&lt;p&gt;
 Je vais quand même rappeler les principaux objectifs de ce cours. Nous allons avant tout découvrir Arduino dans son ensemble et apprendre à l’utiliser. Dans un premier temps, il s’agira de vous présenter ce qu’est Arduino, comment cela fonctionne globalement, pour ensuite entrer un peu plus dans le détail. Nous allons alors apprendre à utiliser le langage Arduino pour pouvoir créer des programmes très simples pour débuter. Nous enchaînerons ensuite avec les différentes fonctionnalités de la carte et ferons de petits TP qui vous permettront d’assimiler chaque notion abordée. Dès lors que vous serez plutôt à l’aise avec toutes les bases, nous nous rapprocherons de l’utilisation de composants électroniques plus ou moins complexes et finirons par un plus "gros" TP alliant la programmation et l’électronique. De quoi vous mettre de l’eau à la bouche !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
&lt;/p&gt;
&lt;h4 id="arduino-à-lécole"&gt;
 &lt;a aria-hidden="true" href="#arduino-à-lécole"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Arduino à l’école
&lt;/h4&gt;
&lt;p&gt;
 Pédagogiquement, Arduino a aussi pas mal d’atouts. En effet, ses créateurs ont d’abord pensé ce projet pour qu’il soit facile d’accès. Il permet ainsi une très bonne approche de nombreux domaines et ainsi d’apprendre plein de choses assez simplement.
&lt;/p&gt;
&lt;h5 id="des-exemples"&gt;
 &lt;a aria-hidden="true" href="#des-exemples"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Des exemples
&lt;/h5&gt;
&lt;p&gt;
 Voici quelques exemples d’utilisation possible :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Simuler le fonctionnement des portes logiques
 &lt;/li&gt;
 &lt;li&gt;
  Permettre l’utilisation de différents capteurs
 &lt;/li&gt;
 &lt;li&gt;
  Mettre en œuvre et faciliter la compréhension d’un réseau informatique
 &lt;/li&gt;
 &lt;li&gt;
  Se servir d’Arduino pour créer des maquettes animées montrant le fonctionnement des collisions entres les plaques de la croûte terrestre, par exemple
  &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Donner un exemple concret d’utilisation des matrices avec un clavier alphanumérique 16 touches ou plus
 &lt;/li&gt;
 &lt;li&gt;
  Être la base pour des élèves ayant un TPE à faire pour le BAC
 &lt;/li&gt;
 &lt;li&gt;
  …
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 De plus, énormément de ressources et tutoriels (mais souvent en anglais) se trouvent sur internet, ce qui offre un autonomie particulière à l’apprenant.
&lt;/p&gt;
&lt;h5 id="des-outils-existant"&gt;
 &lt;a aria-hidden="true" href="#des-outils-existant"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Des outils existant :
&lt;/h5&gt;
&lt;p&gt;
 Enfin, pour terminer de vous convaincre d’utiliser Arduino pour découvrir le monde merveilleux de l’embarqué, il existe différents outils qui peuvent être utilisés avec Arduino. Je vais en citer deux qui me semblent être les principaux :
 &lt;a href="blog.ardublock.com"&gt;
  Ardublock
 &lt;/a&gt;
 est un outil qui se greffe au logiciel Arduino et qui permet de programmer avec des blocs. Chaque bloc est une instruction. On peut aisément faire des programmes avec cet outil et même des plutôt complexes. Cela permet par exemple de se concentrer sur ce que l’on doit faire avec Arduino et non se concentrer sur Arduino pour ensuite ce que l’on doit comprendre avec. Citons entre autre la simulation de porte logique : il vaut mieux créer des programmes rapidement sans connaitre le langage pour comprendre plus facilement comment fonctionne une porte logique. Et ce n’est qu’un exemple. Cela permet aussi à de jeunes enfants de commencer à programmer sans de trop grandes complications.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Exemple de programme avec Ardublock" src="./images/uploaded/tuto-arduino-101-présentation-darduino/exemple-de-programme-avec-ardublock.png"/&gt;
 &lt;figcaption&gt;
  Exemple de programme avec Ardublock
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 &lt;a href="http://processing.org"&gt;
  Processing
 &lt;/a&gt;
 est une autre plateforme en lien avec Arduino. Là il n’y a pas de matériel, uniquement un logiciel. Il permet entre autre de créer des interfaces graphiques avec un langage de programmation très similaire à celui d’Arduino. Par contre, cela demande un niveau un peu plus élevé pour pouvoir l’utiliser, même si cela reste simple dans l’ensemble.
&lt;/p&gt;
&lt;p&gt;
 Voilà un exemple de ce que j’avais réalisé avec Processing pour faire communiquer mon ordinateur avec ma carte Arduino :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Une interface réalisée avec Processing" src="./images/uploaded/tuto-arduino-101-présentation-darduino/une-interface-realisee-avec-processing.jpg"/&gt;
 &lt;figcaption&gt;
  Une interface réalisée avec Processing
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 J’espère avoir été assez convaincant afin que vous franchissiez le pas et ayez du plaisir à apprendre !
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
&lt;/p&gt;
&lt;h3 id="les-cartes-arduino"&gt;
 &lt;a aria-hidden="true" href="#les-cartes-arduino"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les cartes Arduino
&lt;/h3&gt;
&lt;p&gt;
 Le matériel que j’ai choisi d’utiliser tout au long de ce cours n’a pas un prix excessif et, je l’ai dit, tourne aux alentours de 25 € TTC. Il existe plusieurs magasins en ligne et en boutiques qui vendent des cartes Arduino. Je vais vous en donner quelques-uns, mais avant, il va falloir différencier certaines choses.
&lt;/p&gt;
&lt;h4 id="les-fabricants"&gt;
 &lt;a aria-hidden="true" href="#les-fabricants"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les fabricants
&lt;/h4&gt;
&lt;p&gt;
 Le projet Arduino est libre et les schémas des cartes circulent librement sur internet. D’où la mise en garde que je vais faire : il se peut qu’un illustre inconnu fabrique
 &lt;em&gt;
  lui-même
 &lt;/em&gt;
 ses cartes Arduino. Cela n’a rien de mal en soi, s’il veut les commercialiser, il peut. Mais s’il est malhonnête, il peut vous vendre un produit défectueux. Bien sûr, tout le monde ne cherchera pas à vous arnaquer. Mais la prudence est de rigueur. Faites donc attention
 &lt;em&gt;
  où vous achetez vos cartes
 &lt;/em&gt;
 .
&lt;/p&gt;
&lt;h5 id="les-types-de-cartes"&gt;
 &lt;a aria-hidden="true" href="#les-types-de-cartes"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les types de cartes
&lt;/h5&gt;
&lt;figure&gt;
 &lt;img alt="Logo Arduino" src="./images/uploaded/tuto-arduino-101-présentation-darduino/logo-arduino.jpg"/&gt;
 &lt;figcaption&gt;
  Logo Arduino
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Il y a trois types de cartes :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Lesdites « officielles », qui sont fabriquées en Italie par le fabricant officiel :
  &lt;em&gt;
   Smart Projects
  &lt;/em&gt;
  .
 &lt;/li&gt;
 &lt;li&gt;
  Lesdits « compatibles », qui ne sont pas fabriqués par
  &lt;em&gt;
   Smart Projects
  &lt;/em&gt;
  , mais qui sont totalement compatibles avec les Arduino officielles.
 &lt;/li&gt;
 &lt;li&gt;
  Les « autres », fabriquées par diverses entreprises et commercialisées sous un nom différent (Freeduino, Seeduino, Femtoduino, …).
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="les-différentes-cartes"&gt;
 &lt;a aria-hidden="true" href="#les-différentes-cartes"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les différentes cartes
&lt;/h4&gt;
&lt;p&gt;
 Des cartes Arduino il en existe beaucoup ! Voyons celles qui nous intéressent… *
 &lt;em&gt;
  Les cartes *Uno
 &lt;/em&gt;
 et
 &lt;em&gt;
  Duemilanove
 &lt;/em&gt;
 **. Nous choisirons d’utiliser la carte portant le nom de « Uno » ou « Duemilanove ». Ces deux versions sont presque identiques.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img src="./images/uploaded/tuto-arduino-101-présentation-darduino/e0c39fb1-ba60-4e03-8e95-416d01721e89png.png"/&gt;
 &lt;figcaption&gt;
  Carte Arduino Duemilanove - (CC-BY-SA,
  &lt;a href="http://arduino.cc/en/Main/ArduinoBoardDuemilanove"&gt;
   arduino.cc
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img src="./images/uploaded/tuto-arduino-101-présentation-darduino/ca768b2a-5580-4a88-9b22-25e3f58cf9d3gif.gif"/&gt;
 &lt;figcaption&gt;
  Carte Arduino Uno - (CC-BY-SA,
  &lt;a href="http://arduino.cc/en/Main/ArduinoBoardUno"&gt;
   arduino.cc
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 *
 &lt;em&gt;
  La carte *Mega
 &lt;/em&gt;
 **. La carte Arduino Mega est une autre carte qui offre toutes les fonctionnalités de la carte précédente, mais avec des fonctionnalités supplémentaires. On retrouve notamment un nombre d’entrées et de sorties plus important ainsi que plusieurs liaisons séries. Bien sûr, le prix est plus élevé : &amp;gt; 40 € !
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt='Une carte Arduino "Mega"' src="./images/uploaded/tuto-arduino-101-présentation-darduino/une-carte-arduino-mega.jpg"/&gt;
 &lt;figcaption&gt;
  Carte Arduino Mega - (CC-BY-SA,
  &lt;a href="http://arduino.cc/en/Main/ArduinoBoardMega2560"&gt;
   arduino.cc
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 &lt;strong&gt;
  Les autres cartes
 &lt;/strong&gt;
 . Il existe encore beaucoup d’autres cartes, je vous laisse vous débrouiller pour trouver celle qui conviendra à vos projets. Cela dit, je vous conseil dans un premier temps d’utiliser la carte Arduino Uno ou Duemilanove d’une part car elle vous sera largement suffisante pour débuter et d’autre part car c’est avec celle-ci que nous présentons le cours.
&lt;/p&gt;
&lt;h4 id="où-acheter"&gt;
 &lt;a aria-hidden="true" href="#où-acheter"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Où acheter ?
&lt;/h4&gt;
&lt;p&gt;
 Il existe sur le net une multitude de magasins (des vendeurs professionnels, des importateurs mais aussi des petits détaillants de quartier) qui proposent des cartes Arduino.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   J’ai vu des cartes officielles "édition SMD/CMS". Ça à l’air bien aussi, c’est quoi la différence ? Je peux m’en servir ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Il n’y a pas de différence ! Enfin presque… "SMD" signifie
 &lt;strong&gt;
  Surface Mount Device
 &lt;/strong&gt;
 , en français on appelle ça des "CMS" pour
 &lt;strong&gt;
  Composants Montés en Surface
 &lt;/strong&gt;
 . Ces composants sont soudés directement sur le cuivre de la carte, il ne la traverse pas comme les autres. Pour les cartes Arduino, on retrouve le composant principal en édition SMD dans ces cartes. La carte est donc la même, aucune différence pour le tuto. Les composants sont les mêmes, seule l’allure "physique" est différente. Par exemple, ci-dessus la "Mega" est en SMD et la Uno est "classique".
&lt;/p&gt;
&lt;h3 id="liste-dachat"&gt;
 &lt;a aria-hidden="true" href="#liste-dachat"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Liste d’achat
&lt;/h3&gt;
&lt;p&gt;
 Tout au long du cours, nous allons utiliser du matériel en supplément de la carte. Rassurez-vous le prix est bien moindre. Je vous donne cette liste, cela vous évitera d’acheter en plusieurs fois. Vous allez devoir me croire sur parole sur leur intérêt. Nous découvrirons comment chaque composant fonctionne et comment les utiliser tout au long du tutoriel.
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Attention, cette liste ne contient que les composants en quantités minimales strictes. Libre à vous de prendre plus de LED et de résistances par exemple (au cas où vous en perdriez ou détruisiez…). Pour ce qui est des prix, j’ai regardé sur différents sites grand public (donc pas Farnell par exemple), ils peuvent donc paraître plus élevés que la normale dans la mesure où ces sites amortissent moins sur des ventes à des clients fidèles qui prennent tout en grande quantité…
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Avant que j’oublie, quatre éléments n’apparaîtront pas dans la liste et sont indispensables :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="table-wrapper"&gt;
  &lt;table class=" table table-bordered table-striped"&gt;
   &lt;thead&gt;
    &lt;tr&gt;
     &lt;th&gt;
      Une Arduino Uno ou Duemilanove
     &lt;/th&gt;
     &lt;th&gt;
      Un câble USB A mâle/B mâle
     &lt;/th&gt;
    &lt;/tr&gt;
   &lt;/thead&gt;
   &lt;tbody&gt;
    &lt;tr&gt;
     &lt;td&gt;
      &lt;img src="./images/uploaded/tuto-arduino-101-présentation-darduino/fd4789fe-b607-4b67-9fba-9f88a6cb9b79gif.gif"/&gt;
     &lt;/td&gt;
     &lt;td&gt;
      &lt;img src="./images/uploaded/tuto-arduino-101-présentation-darduino/d5f0021b-9590-415c-9024-54bf2516fe85png.png"/&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
   &lt;/tbody&gt;
  &lt;/table&gt;
 &lt;/div&gt;
 &lt;div class="table-wrapper"&gt;
  &lt;table class=" table table-bordered table-striped"&gt;
   &lt;thead&gt;
    &lt;tr&gt;
     &lt;th&gt;
      Une BreadBoard (plaque d’essai)
     &lt;/th&gt;
     &lt;th&gt;
      Un lot de fils pour brancher le tout !
     &lt;/th&gt;
    &lt;/tr&gt;
   &lt;/thead&gt;
   &lt;tbody&gt;
    &lt;tr&gt;
     &lt;td&gt;
      &lt;img src="./images/uploaded/tuto-arduino-101-présentation-darduino/016bdd3e-0207-41ad-8e5b-cf432808c911jpg.jpg"/&gt;
     &lt;/td&gt;
     &lt;td&gt;
      &lt;img src="./images/uploaded/tuto-arduino-101-présentation-darduino/99d85f2b-af7e-4d16-8825-9e9a91aaff75png.png"/&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
   &lt;/tbody&gt;
  &lt;/table&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="liste-globale"&gt;
 &lt;a aria-hidden="true" href="#liste-globale"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Liste Globale
&lt;/h4&gt;
&lt;p&gt;
 Voici donc la liste du matériel nécessaire pour suivre le cours. Libre à vous de tout acheter ou non.
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;p&gt;
  &lt;a href="https://zestedesavoir.com/media/galleries/954/9983e5d0-4ca2-4087-9bb5-62f82213e998.png"&gt;
   &lt;img alt="Liste du matériel nécessaire" src="./images/uploaded/tuto-arduino-101-présentation-darduino/liste-du-materiel-necessaire.png"/&gt;
  &lt;/a&gt;
 &lt;/p&gt;
&lt;/div&gt;
&lt;h4 id="les-revendeurs"&gt;
 &lt;a aria-hidden="true" href="#les-revendeurs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les revendeurs
&lt;/h4&gt;
&lt;p&gt;
 De nombreux revendeurs existent sur internet, allant du très professionnel avec un grand choix au petit détaillant de quartier sans oublier les grands importateurs chinois aux tarifs imbattables si vous savez être patient.
&lt;/p&gt;
&lt;h4 id="les-kits"&gt;
 &lt;a aria-hidden="true" href="#les-kits"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les kits
&lt;/h4&gt;
&lt;p&gt;
 Enfin, il existe des kits tout prêts chez certains revendeurs.
Nous n’en conseillerons aucun pour plusieurs raisons. Tout d’abord, pour ne pas faire trop de publicité et rester conforme avec la charte du site. Ensuite, car il est difficile de trouver un kit "complet". Ils ont tous des avantages et des inconvénients mais aucun (au moment de la publication de ces lignes) ne propose absolument tous les composants que nous allons utiliser. Nous ne voulons donc pas que vous reveniez vous plaindre sur les forums car nous vous aurions fait dépenser votre argent inutilement !
&lt;/p&gt;
&lt;div class="custom-block alert alert-danger"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Cela étant dit, merci de
   &lt;strong&gt;
    ne pas nous spammer de MP
   &lt;/strong&gt;
   pour que l’on donne notre avis sur tel ou tel kit !
Usez des forums pour cela, il y a toujours quelqu’un qui sera là pour vous aider.
Et puis nous n’avons pas les moyens de tous les acheter et tester leur qualité !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Quelques bases élémentaires</title><link href="https://eskimon.fr/tuto-arduino-102-quelques-bases-%C3%A9l%C3%A9mentaires" rel="alternate"></link><published>2013-12-10T20:03:00+01:00</published><updated>2013-12-10T20:03:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-10:/tuto-arduino-102-quelques-bases-élémentaires</id><summary type="html">&lt;p&gt;
 En attendant que vous achetiez votre matériel, je vais vous présenter les bases de l’électronique et de la programmation. Cela vous demandera tout de même une bonne concentration pour essayer de comprendre des concepts pas évidents en soi.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   La première partie de ce chapitre ne fait que reprendre quelques …&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;
 En attendant que vous achetiez votre matériel, je vais vous présenter les bases de l’électronique et de la programmation. Cela vous demandera tout de même une bonne concentration pour essayer de comprendre des concepts pas évidents en soi.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   La première partie de ce chapitre ne fait que reprendre quelques éléments du
   &lt;a href="http://fr.openclassrooms.com/sciences/cours/l-electronique-de-zero"&gt;
    cours sur l’électronique
   &lt;/a&gt;
   , que vous pouvez consulter pour de plus amples explications.
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#le-courant-la-tension-et-la-masse"&gt;
    Le courant, la tension et la masse
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#la-source-dénergie"&gt;
       La source d’énergie
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#le-courant-électrique"&gt;
      Le courant électrique
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#charges-électriques"&gt;
       Charges électriques
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#conductibilité-des-matériaux"&gt;
       Conductibilité des matériaux
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#sens-du-courant"&gt;
       Sens du courant
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#intensité-du-courant"&gt;
       Intensité du courant
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#tension"&gt;
      Tension
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#notation-et-unité"&gt;
       Notation et unité
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-différence-de-potentiel"&gt;
       La différence de potentiel
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#la-masse"&gt;
      La masse
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#notion-de-référentiel"&gt;
       Notion de référentiel
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#quest-ce-que-cest"&gt;
       Qu’est ce que c’est ?
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#représentation-et-notation"&gt;
       Représentation et notation
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#une-référence-arbitraire"&gt;
       Une référence arbitraire
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#la-résistance-et-sa-loi"&gt;
    La résistance et sa loi !
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#présentation"&gt;
       Présentation
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#symbole"&gt;
       Symbole
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#loi-dohm"&gt;
       Loi d’ohm
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#unité"&gt;
       Unité
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-code-couleur"&gt;
       Le code couleur
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#le-microcontrôleur"&gt;
    Le microcontrôleur
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#la-programmation-en-électronique"&gt;
      La programmation en électronique
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#comment-programmer-de-lélectronique"&gt;
       Comment programmer de l’électronique ?
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;p&gt;
       &lt;a href="#composition-des-éléments-internes-dun-micro-contrôleur"&gt;
        Composition des éléments internes d’un micro-contrôleur
       &lt;/a&gt;
      &lt;/p&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;a href="#la-mémoire"&gt;
         La mémoire
        &lt;/a&gt;
       &lt;/li&gt;
       &lt;li&gt;
        &lt;a href="#le-processeur"&gt;
         Le processeur
        &lt;/a&gt;
       &lt;/li&gt;
       &lt;li&gt;
        &lt;a href="#diverses-choses"&gt;
         Diverses choses
        &lt;/a&gt;
       &lt;/li&gt;
      &lt;/ul&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#fonctionnement"&gt;
       Fonctionnement
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#les-bases-de-comptage-210-et-16"&gt;
    Les bases de comptage (2,10 et 16)
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#les-bases-du-de-comptage"&gt;
      Les bases du de comptage
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#cas-simple-la-base-10"&gt;
       Cas simple, la base 10
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#cas-informatique-la-base-2-et-la-base-16"&gt;
       Cas informatique, la base 2 et la base 16
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-notations"&gt;
       Les notations
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#conversions"&gt;
      Conversions
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#décimale---binaire"&gt;
       Décimale - Binaire
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#binaire---hexadécimal"&gt;
       Binaire - Hexadécimal
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#décimal---hexadécimal"&gt;
       Décimal - Hexadécimal
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#méthode-rapide"&gt;
       Méthode rapide
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="le-courant-la-tension-et-la-masse"&gt;
 &lt;a aria-hidden="true" href="#le-courant-la-tension-et-la-masse"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le courant, la tension et la masse
&lt;/h3&gt;
&lt;p&gt;
 Pour faire de l’électronique, il est indispensable de connaître sur le bout des doigts ce que sont les grandeurs physiques. Alors, avant de commencer à voir lesquelles on va manipuler, voyons un peu ce qu’est une grandeur physique. Une
 &lt;strong&gt;
  grandeur physique
 &lt;/strong&gt;
 est quelque chose qui se mesure. Plus précisément, il s’agit d’un élément mesurable, grâce à un appareil ou dispositif de mesure, régit par les lois de la physique. Par exemple, la pression atmosphérique est une grandeur physique, ou bien la vitesse à laquelle circule une voiture. En électronique cependant, nous ne mesurons pas ces grandeurs-là, nous avons nos propres grandeurs, qui sont :
 &lt;strong&gt;
  le courant
 &lt;/strong&gt;
 et
 &lt;strong&gt;
  la tension
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;h5 id="la-source-dénergie"&gt;
 &lt;a aria-hidden="true" href="#la-source-dénergie"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La source d’énergie
&lt;/h5&gt;
&lt;p&gt;
 L’énergie que l’on va manipuler (courant et tension) provient d’un
 &lt;strong&gt;
  générateur
 &lt;/strong&gt;
 . Par exemple, on peut citer : la pile électrique, la batterie électrique, le secteur électrique. Cette énergie qui est fournie par le générateur est restituée à un ou plusieurs
 &lt;strong&gt;
  récepteurs
 &lt;/strong&gt;
 . Le récepteur, d’après son nom, reçoit de l’énergie. On dit qu’il la
 &lt;strong&gt;
  consomme
 &lt;/strong&gt;
 . On peut citer pour exemples : un chauffage d’appoint, un sèche-cheveux, une perceuse.
&lt;/p&gt;
&lt;h4 id="le-courant-électrique"&gt;
 &lt;a aria-hidden="true" href="#le-courant-électrique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le courant électrique
&lt;/h4&gt;
&lt;h5 id="charges-électriques"&gt;
 &lt;a aria-hidden="true" href="#charges-électriques"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Charges électriques
&lt;/h5&gt;
&lt;p&gt;
 Les charges électriques sont des grandeurs physiques mesurables. Elles constituent la matière en elle-même. Dans un atome, qui est élément primaire de la matière, il y a trois charges électriques différentes : les charges
 &lt;strong&gt;
  positives
 &lt;/strong&gt;
 ,
 &lt;strong&gt;
  négatives
 &lt;/strong&gt;
 et
 &lt;strong&gt;
  neutres
 &lt;/strong&gt;
 , appelées respectivement
 &lt;strong&gt;
  protons
 &lt;/strong&gt;
 ,
 &lt;strong&gt;
  électrons
 &lt;/strong&gt;
 et
 &lt;strong&gt;
  neutrons
 &lt;/strong&gt;
 . Bien, maintenant nous pouvons définir le courant : il s’agit d’un
 &lt;strong&gt;
  déplacement ordonné de charges électriques
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;h5 id="conductibilité-des-matériaux"&gt;
 &lt;a aria-hidden="true" href="#conductibilité-des-matériaux"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Conductibilité des matériaux
&lt;/h5&gt;
&lt;p&gt;
 La notion de conductibilité est importante à connaître car elle permet de comprendre pas mal de phénomènes. On peut définir la
 &lt;strong&gt;
  conductibilité
 &lt;/strong&gt;
 comme étant la capacité d’un matériau à se laisser traverser par un courant électrique. De ces matériaux, on peut distinguer quatre grandes familles :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  les isolants : leurs propriétés empêchent le passage d’un courant électrique (plastique, bois, verre)
 &lt;/li&gt;
 &lt;li&gt;
  les semi-conducteurs : ce sont des isolants, mais qui laissent passer le courant dès lors que l’on modifie légèrement leur structure interne (diode, transistor, LED)
 &lt;/li&gt;
 &lt;li&gt;
  les conducteurs : pour eux, le courant peut passer librement à travers tout en opposant une faible résistance selon le matériau utilisé (or, cuivre, métal en général)
 &lt;/li&gt;
 &lt;li&gt;
  les supraconducteurs : ce sont des types bien particuliers qui, à une température extrêmement basse, n’opposent quasiment aucune résistance au passage d’un courant électrique
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="sens-du-courant"&gt;
 &lt;a aria-hidden="true" href="#sens-du-courant"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sens du courant
&lt;/h5&gt;
&lt;p&gt;
 Le courant électrique se déplace selon un sens de circulation. Un générateur électrique, par exemple une pile, produit un courant. Et bien ce courant va circuler du pôle positif vers le pôle négatif de la pile si, et seulement si, ces deux pôles sont reliés entre eux par un fil métallique ou un autre conducteur. C’est que l’on appelle le
 &lt;strong&gt;
  sens conventionnel
 &lt;/strong&gt;
 du courant. On note le courant par une flèche qui indique le sens conventionnel de circulation du courant :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;img alt="Indication du sens du courant" src="./images/uploaded/tuto-arduino-102-quelques-bases-élémentaires/indication-du-sens-du-courant.jpg"/&gt;
  &lt;figcaption&gt;
   Indication du sens du courant
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;h5 id="intensité-du-courant"&gt;
 &lt;a aria-hidden="true" href="#intensité-du-courant"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Intensité du courant
&lt;/h5&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   L’intensité du courant est la vitesse à laquelle circule ce courant. Tandis que le courant est un déplacement ordonné de charges électriques. Voilà un point à ne pas confondre.
   &lt;br/&gt;
   On mesure la vitesse du courant, appelée
   &lt;strong&gt;
    intensité
   &lt;/strong&gt;
   , en
   &lt;strong&gt;
    Ampères
   &lt;/strong&gt;
   (noté
   &lt;strong&gt;
    A
   &lt;/strong&gt;
   ) avec un
   &lt;em&gt;
    Ampèremètre
   &lt;/em&gt;
   . En général, en électronique de faible puissance, on utilise principalement le milli-Ampère (
   &lt;strong&gt;
    mA
   &lt;/strong&gt;
   ) et le micro-Ampère (
   &lt;strong&gt;
    µA
   &lt;/strong&gt;
   ), mais jamais bien au-delà. C’est tout ce qu’il faut savoir sur le courant, pour l’instant.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="tension"&gt;
 &lt;a aria-hidden="true" href="#tension"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Tension
&lt;/h4&gt;
&lt;p&gt;
 Autant le courant se déplace, ou du moins est un déplacement de charges électriques, autant la
 &lt;strong&gt;
  tension
 &lt;/strong&gt;
 est quelque chose de
 &lt;strong&gt;
  statique
 &lt;/strong&gt;
 . Pour bien définir ce qu’est la tension, sachez qu’on la compare à la pression d’un fluide. Par exemple, lorsque vous arrosez votre jardin (ou une plante, comme vous préférez) avec un tuyau d’arrosage, eh bien dans ce tuyau, il y a une certaine pression exercée par l’eau fournie par le robinet. Cette pression permet le déplacement de l’eau dans le tuyau, donc crée un courant. Mais si la pression n’est pas assez forte, le courant ne sera lui non plus pas assez fort. Pour preuve, vous n’avez qu’à pincer le tuyau pour constater que le courant ne circule plus. On appelle ce "phénomène de pression" : la
 &lt;strong&gt;
  tension
 &lt;/strong&gt;
 . Je n’en dis pas plus car ce serait vous embrouiller.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;h5 id="notation-et-unité"&gt;
 &lt;a aria-hidden="true" href="#notation-et-unité"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Notation et unité
&lt;/h5&gt;
&lt;p&gt;
 La tension est mesurée en
 &lt;strong&gt;
  Volts
 &lt;/strong&gt;
 (notée
 &lt;strong&gt;
  V
 &lt;/strong&gt;
 ) par un
 &lt;em&gt;
  Voltmètre
 &lt;/em&gt;
 . On utilise principalement le Volt, mais aussi son sous-multiple qui est le milli-Volt (
 &lt;strong&gt;
  mV
 &lt;/strong&gt;
 ). On représente la tension, d’une pile par exemple, grâce à une flèche toujours orientée dans le sens du courant aux bornes d’un générateur et toujours opposée au courant, aux bornes d’un récepteur :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;img alt="Fléchage de la tension" src="./images/uploaded/tuto-arduino-102-quelques-bases-élémentaires/flechage-de-la-tension.jpg"/&gt;
  &lt;figcaption&gt;
   Fléchage de la tension
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;h5 id="la-différence-de-potentiel"&gt;
 &lt;a aria-hidden="true" href="#la-différence-de-potentiel"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La différence de potentiel
&lt;/h5&gt;
&lt;p&gt;
 Sur le schéma précédent, on a au point M une tension de 0V et au point P, une tension de 5V. Prenons notre Voltmètre et mesurons la tension aux bornes du générateur. La borne COM du Voltmètre doit être reliée au point M et la borne "+" au point P. Le potentiel au point P, soustrait par le potentiel au point M vaut :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         U
        &lt;/mi&gt;
        &lt;mi&gt;
         P
        &lt;/mi&gt;
       &lt;/msub&gt;
       &lt;mo&gt;
        −
       &lt;/mo&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         U
        &lt;/mi&gt;
        &lt;mi&gt;
         M
        &lt;/mi&gt;
       &lt;/msub&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        5
       &lt;/mn&gt;
       &lt;mo&gt;
        −
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        5
       &lt;/mn&gt;
       &lt;mi&gt;
        V
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       U_P - U_M = 5 - 0 = 5V
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
       U
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.32833099999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mathit mtight" style="margin-right:0.13889em;"&gt;
             P
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      −
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
       U
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.32833099999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mathit mtight" style="margin-right:0.10903em;"&gt;
             M
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      5
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      −
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      5
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
      V
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 . On dit que la
 &lt;strong&gt;
  différence de potentiel
 &lt;/strong&gt;
 entre ces deux points est de 5V. Cette mesure se note donc :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         U
        &lt;/mi&gt;
        &lt;msub&gt;
         &lt;mi&gt;
          P
         &lt;/mi&gt;
         &lt;mi&gt;
          M
         &lt;/mi&gt;
        &lt;/msub&gt;
       &lt;/msub&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       U_{P_M}
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.933635em;vertical-align:-0.250305em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
       U
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.32833099999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              &lt;span class="mord mathit mtight" style="margin-right:0.13889em;"&gt;
               P
              &lt;/span&gt;
              &lt;span class="msupsub"&gt;
               &lt;span class="vlist-t vlist-t2"&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.3448em;"&gt;
                  &lt;span style="top:-2.3567071428571427em;margin-left:-0.13889em;margin-right:0.07142857142857144em;"&gt;
                   &lt;span class="pstrut" style="height:2.5em;"&gt;
                   &lt;/span&gt;
                   &lt;span class="sizing reset-size3 size1 mtight"&gt;
                    &lt;span class="mord mathit mtight" style="margin-right:0.10903em;"&gt;
                     M
                    &lt;/span&gt;
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                 &lt;span class="vlist-s"&gt;
                  ​
                 &lt;/span&gt;
                &lt;/span&gt;
                &lt;span class="vlist-r"&gt;
                 &lt;span class="vlist" style="height:0.14329285714285717em;"&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.250305em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 . Si on inverse le sens de branchement du Voltmètre, la borne "+" est reliée au point M et la borne COM au point P. La mesure que l’on prend est la différence de tension (= potentiel) entre le point M et le point P :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         U
        &lt;/mi&gt;
        &lt;mi&gt;
         M
        &lt;/mi&gt;
       &lt;/msub&gt;
       &lt;mo&gt;
        −
       &lt;/mo&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         U
        &lt;/mi&gt;
        &lt;mi&gt;
         P
        &lt;/mi&gt;
       &lt;/msub&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mo&gt;
        −
       &lt;/mo&gt;
       &lt;mn&gt;
        5
       &lt;/mn&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mo&gt;
        −
       &lt;/mo&gt;
       &lt;mn&gt;
        5
       &lt;/mn&gt;
       &lt;mi&gt;
        V
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       U_M - U_P = 0 - 5 = -5V
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
       U
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.32833099999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mathit mtight" style="margin-right:0.10903em;"&gt;
             M
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      −
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
       U
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.32833099999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mathit mtight" style="margin-right:0.13889em;"&gt;
             P
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      −
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      5
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      −
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      5
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
      V
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 Cette démonstration un peu surprenante vient du fait que la masse est arbitraire.
&lt;/p&gt;
&lt;h4 id="la-masse"&gt;
 &lt;a aria-hidden="true" href="#la-masse"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La masse
&lt;/h4&gt;
&lt;p&gt;
 Justement, parlons-en ! La
 &lt;strong&gt;
  masse
 &lt;/strong&gt;
 est, en électronique, un point de référence.
&lt;/p&gt;
&lt;h5 id="notion-de-référentiel"&gt;
 &lt;a aria-hidden="true" href="#notion-de-référentiel"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Notion de référentiel
&lt;/h5&gt;
&lt;p&gt;
 Quand on prend une mesure, en général, on la prend entre deux points bien définis. Par exemple, si vous vous mesurez, vous prenez la mesure de la plante de vos pieds jusqu’au sommet de votre tête. Si vous prenez la plante de vos pieds pour référence (c’est-à-dire le chiffre zéro inscrit sur le mètre), vous lirez 1m70 (par exemple). Si vous inversez, non pas la tête, mais le mètre et que le chiffre zéro de celui-ci se retrouve donc au sommet de votre tête, vous serez obligé de lire la mesure à -1m70. Eh bien, ce chiffre zéro est la référence qui vous permet de vous mesurer. En électronique, cette référence existe, on l’appelle la
 &lt;strong&gt;
  masse
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;h5 id="quest-ce-que-cest"&gt;
 &lt;a aria-hidden="true" href="#quest-ce-que-cest"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Qu’est ce que c’est ?
&lt;/h5&gt;
&lt;p&gt;
 La masse, c’est un référentiel. En électronique, on voit la masse d’un montage comme étant le zéro Volt (0V). C’est le point qui permet de mesurer une bonne partie des tensions présentes dans un montage.
&lt;/p&gt;
&lt;h5 id="représentation-et-notation"&gt;
 &lt;a aria-hidden="true" href="#représentation-et-notation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Représentation et notation
&lt;/h5&gt;
&lt;p&gt;
 Elle se représente par ce symbole, sur un schéma électronique :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;img alt="Symbole de la masse" src="./images/uploaded/tuto-arduino-102-quelques-bases-élémentaires/symbole-de-la-masse.jpg"/&gt;
  &lt;figcaption&gt;
   Symbole de la masse
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous ne le verrez pas souvent dans les schémas de ce cours, pour la simple raison qu’elle est présente sur la carte que l’on va utiliser sous un autre nom :
 &lt;strong&gt;
  GND
 &lt;/strong&gt;
 . GND est une abréviation du terme anglais "
 &lt;em&gt;
  Ground
 &lt;/em&gt;
 " qui veut dire terre/sol. Donc, pour nous et tous les montages que l’on réalisera, ce sera le point de référence pour la mesure des tensions présentes sur nos circuits et le zéro Volt de tous nos circuits.
&lt;/p&gt;
&lt;h5 id="une-référence-arbitraire"&gt;
 &lt;a aria-hidden="true" href="#une-référence-arbitraire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Une référence arbitraire
&lt;/h5&gt;
&lt;p&gt;
 Pour votre culture, sachez que la masse est quelque chose d’arbitraire. Je l’ai bien montré dans l’exemple au début de ce paragraphe. On peut changer l’emplacement de cette référence et, par exemple, très bien dire que le 5V est la masse. Ce qui aura pour conséquence de modifier l’ancienne masse en -5V.
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/sp3yxkD2CB4" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/5yW-1bFqli8" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="la-résistance-et-sa-loi"&gt;
 &lt;a aria-hidden="true" href="#la-résistance-et-sa-loi"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La résistance et sa loi !
&lt;/h3&gt;
&lt;p&gt;
 En électronique, il existe plein de composants qui ont chacun une ou plusieurs fonctions. Nous allons voir quels sont ces composants dans le cours, mais pas tout de suite. Car, maintenant, on va aborder la résistance qui est LE composant de base en électronique.
&lt;/p&gt;
&lt;h5 id="présentation"&gt;
 &lt;a aria-hidden="true" href="#présentation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Présentation
&lt;/h5&gt;
&lt;p&gt;
 C’est le composant le plus utilisé en électronique. Sa principale fonction est de réduire l’intensité du courant (mais pas uniquement). Ce composant se présente sous la forme d’un petit boitier fait de divers matériaux et repéré par des anneaux de couleur indiquant la valeur de la résistance.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Photo de résistance" src="./images/uploaded/tuto-arduino-102-quelques-bases-élémentaires/photo-de-resistance.jpg"/&gt;
 &lt;figcaption&gt;
  Photo de résistance
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="symbole"&gt;
 &lt;a aria-hidden="true" href="#symbole"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Symbole
&lt;/h5&gt;
&lt;p&gt;
 Le symbole de la résistance ressemble étrangement à la forme de son boitier :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Symbole de la résistance" src="./images/uploaded/tuto-arduino-102-quelques-bases-élémentaires/symbole-de-la-resistance.png"/&gt;
 &lt;figcaption&gt;
  Symbole de la résistance
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="loi-dohm"&gt;
 &lt;a aria-hidden="true" href="#loi-dohm"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Loi d’ohm
&lt;/h5&gt;
&lt;p&gt;
 Le courant traversant une résistance est régi par une formule assez simple qui se nomme
 &lt;strong&gt;
  la loi d’Ohm
 &lt;/strong&gt;
 :
&lt;/p&gt;
&lt;p&gt;
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        I
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mfrac&gt;
        &lt;mrow&gt;
         &lt;mi&gt;
          U
         &lt;/mi&gt;
        &lt;/mrow&gt;
        &lt;mrow&gt;
         &lt;mi&gt;
          R
         &lt;/mi&gt;
        &lt;/mrow&gt;
       &lt;/mfrac&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       I = \frac{U}{R}
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.872331em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1.217331em;vertical-align:-0.345em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.07847em;"&gt;
      I
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mopen nulldelimiter"&gt;
      &lt;/span&gt;
      &lt;span class="mfrac"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.872331em;"&gt;
          &lt;span style="top:-2.6550000000000002em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mathit mtight" style="margin-right:0.00773em;"&gt;
              R
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.15em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="stretchy" style="height:0.2em;"&gt;
            &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
             &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
             &lt;/path&gt;
            &lt;/svg&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.394em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mathit mtight" style="margin-right:0.10903em;"&gt;
              U
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.345em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mclose nulldelimiter"&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;strong&gt;
   I
  &lt;/strong&gt;
  : intensité qui traverse la résistance en Ampères, notée
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         A
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        A
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit"&gt;
       A
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   U
  &lt;/strong&gt;
  : tension aux bornes de la résistance en Volts, notée
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         V
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        V
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
       V
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   R
  &lt;/strong&gt;
  : valeur de la résistance en Ohms, notée
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi mathvariant="normal"&gt;
         Ω
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        \Omega
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       Ω
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 En général, on retient mieux la formule sous cette forme :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        U
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mi&gt;
        R
       &lt;/mi&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mi&gt;
        I
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       U = R \times I
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.76666em;vertical-align:-0.08333em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
      U
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.00773em;"&gt;
      R
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.07847em;"&gt;
      I
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;h5 id="unité"&gt;
 &lt;a aria-hidden="true" href="#unité"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Unité
&lt;/h5&gt;
&lt;p&gt;
 L’unité de la résistance est l'
 &lt;strong&gt;
  ohm
 &lt;/strong&gt;
 . On le note avec le symbole grec oméga majuscule :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi mathvariant="normal"&gt;
        Ω
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       \Omega
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      Ω
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 .
&lt;/p&gt;
&lt;h5 id="le-code-couleur"&gt;
 &lt;a aria-hidden="true" href="#le-code-couleur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le code couleur
&lt;/h5&gt;
&lt;p&gt;
 La résistance possède une suite d’anneaux de couleurs différentes sur son boitier. Ces couleurs servent à expliciter la valeur de la résistance sans avoir besoin d’écrire en chiffre dessus (car vous avez déjà essayé d’écrire sur un cylindre
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 ?) Le premier anneau représente le chiffre des centaines, le second celui des dizaines et le troisième celui des unités. Enfin, après un petit espace vient celui du coefficient multiplicateur. Avec ces quatre anneaux et un peu d’entrainement vous pouvez alors deviner la valeur de la résistance en un clin d’oeil
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 . Ce tableau vous permettra de lire ce code qui correspond à la valeur de la résistance :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Couleur
      &lt;/th&gt;
      &lt;th&gt;
       Chiffre
      &lt;/th&gt;
      &lt;th&gt;
       Coefficient multiplicateur
      &lt;/th&gt;
      &lt;th&gt;
       Puissance
      &lt;/th&gt;
      &lt;th&gt;
       Tolérance
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        Noir
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       0
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;msup&gt;
              &lt;mn&gt;
               0
              &lt;/mn&gt;
              &lt;mn&gt;
               0
              &lt;/mn&gt;
             &lt;/msup&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             10^{0}
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.8141079999999999em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mord"&gt;
             0
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
                &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    0
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        Brun
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       1
      &lt;/td&gt;
      &lt;td&gt;
       10
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;msup&gt;
              &lt;mn&gt;
               0
              &lt;/mn&gt;
              &lt;mn&gt;
               1
              &lt;/mn&gt;
             &lt;/msup&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             10^{1}
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.8141079999999999em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mord"&gt;
             0
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
                &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    1
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mo&gt;
              ±
             &lt;/mo&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             \pm
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.58333em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.66666em;vertical-align:-0.08333em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            ±
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       1 %
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        Rouge
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       2
      &lt;/td&gt;
      &lt;td&gt;
       100
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;msup&gt;
              &lt;mn&gt;
               0
              &lt;/mn&gt;
              &lt;mn&gt;
               2
              &lt;/mn&gt;
             &lt;/msup&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             10^{2}
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.8141079999999999em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mord"&gt;
             0
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
                &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    2
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mo&gt;
              ±
             &lt;/mo&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             \pm
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.58333em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.66666em;vertical-align:-0.08333em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            ±
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       2 %
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        Orange
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       3
      &lt;/td&gt;
      &lt;td&gt;
       1000
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;msup&gt;
              &lt;mn&gt;
               0
              &lt;/mn&gt;
              &lt;mn&gt;
               3
              &lt;/mn&gt;
             &lt;/msup&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             10^{3}
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.8141079999999999em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mord"&gt;
             0
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
                &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    3
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        Jaune
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       4
      &lt;/td&gt;
      &lt;td&gt;
       10 000
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;msup&gt;
              &lt;mn&gt;
               0
              &lt;/mn&gt;
              &lt;mn&gt;
               4
              &lt;/mn&gt;
             &lt;/msup&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             10^{4}
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.8141079999999999em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mord"&gt;
             0
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
                &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    4
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        Vert
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       5
      &lt;/td&gt;
      &lt;td&gt;
       100 000
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;msup&gt;
              &lt;mn&gt;
               0
              &lt;/mn&gt;
              &lt;mn&gt;
               5
              &lt;/mn&gt;
             &lt;/msup&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             10^{5}
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.8141079999999999em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mord"&gt;
             0
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
                &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    5
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mo&gt;
              ±
             &lt;/mo&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             \pm
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.58333em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.66666em;vertical-align:-0.08333em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            ±
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       0.5 %
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        Bleu
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       6
      &lt;/td&gt;
      &lt;td&gt;
       1 000 000
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;msup&gt;
              &lt;mn&gt;
               0
              &lt;/mn&gt;
              &lt;mn&gt;
               6
              &lt;/mn&gt;
             &lt;/msup&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             10^{6}
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.8141079999999999em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mord"&gt;
             0
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
                &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    6
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mo&gt;
              ±
             &lt;/mo&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             \pm
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.58333em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.66666em;vertical-align:-0.08333em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            ±
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       0.25 %
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        Violet
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       7
      &lt;/td&gt;
      &lt;td&gt;
       10 000 000
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;msup&gt;
              &lt;mn&gt;
               0
              &lt;/mn&gt;
              &lt;mn&gt;
               7
              &lt;/mn&gt;
             &lt;/msup&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             10^{7}
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.8141079999999999em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mord"&gt;
             0
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
                &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    7
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mo&gt;
              ±
             &lt;/mo&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             \pm
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.58333em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.66666em;vertical-align:-0.08333em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            ±
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       0.10 %
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        Gris
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       8
      &lt;/td&gt;
      &lt;td&gt;
       100 000 000
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;msup&gt;
              &lt;mn&gt;
               0
              &lt;/mn&gt;
              &lt;mn&gt;
               8
              &lt;/mn&gt;
             &lt;/msup&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             10^{8}
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.8141079999999999em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mord"&gt;
             0
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
                &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    8
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mo&gt;
              ±
             &lt;/mo&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             \pm
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.58333em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.66666em;vertical-align:-0.08333em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            ±
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       0.05 %
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        Blanc
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       9
      &lt;/td&gt;
      &lt;td&gt;
       1 000 000 000
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;msup&gt;
              &lt;mn&gt;
               0
              &lt;/mn&gt;
              &lt;mn&gt;
               9
              &lt;/mn&gt;
             &lt;/msup&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             10^{9}
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.8141079999999999em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mord"&gt;
             0
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
                &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    9
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        Or
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       0.1
      &lt;/td&gt;
      &lt;td&gt;
       0.1
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;msup&gt;
              &lt;mn&gt;
               0
              &lt;/mn&gt;
              &lt;mrow&gt;
               &lt;mo&gt;
                −
               &lt;/mo&gt;
               &lt;mn&gt;
                1
               &lt;/mn&gt;
              &lt;/mrow&gt;
             &lt;/msup&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             10^{-1}
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.8141079999999999em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mord"&gt;
             0
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
                &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    −
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    1
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mo&gt;
              ±
             &lt;/mo&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             \pm
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.58333em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.66666em;vertical-align:-0.08333em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            ±
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       5 %
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        Argent
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       0.01
      &lt;/td&gt;
      &lt;td&gt;
       0.01
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;msup&gt;
              &lt;mn&gt;
               0
              &lt;/mn&gt;
              &lt;mrow&gt;
               &lt;mo&gt;
                −
               &lt;/mo&gt;
               &lt;mn&gt;
                2
               &lt;/mn&gt;
              &lt;/mrow&gt;
             &lt;/msup&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             10^{-2}
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.8141079999999999em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mord"&gt;
             0
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
                &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    −
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    2
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mo&gt;
              ±
             &lt;/mo&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             \pm
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.58333em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.66666em;vertical-align:-0.08333em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            ±
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       10 %
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       (absent)
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
      &lt;td&gt;
       -
      &lt;/td&gt;
      &lt;td&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mo&gt;
              ±
             &lt;/mo&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             \pm
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.58333em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.66666em;vertical-align:-0.08333em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            ±
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       20 %
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Tableau du code couleurs des résistances
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/mU8e0EPsElk" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="le-microcontrôleur"&gt;
 &lt;a aria-hidden="true" href="#le-microcontrôleur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le microcontrôleur
&lt;/h3&gt;
&lt;p&gt;
 Nous avons déjà un peu abordé le sujet dans la présentation du cours. Je vous ai expliqué "brièvement" comment fonctionnait un programme et surtout ce que c’était !
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 Bon, dès à présent, je vais rentrer un petit peu plus dans le détail en vous introduisant des notions basées sur le matériel étroitement lié à la programmation. Nous allons en effet aborder le microcontrôleur dans un niveau de complexité supérieur à ce que je vous avais introduit tout à l’heure. Oh, rien de bien insurmontable, soyez sans craintes.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;h4 id="la-programmation-en-électronique"&gt;
 &lt;a aria-hidden="true" href="#la-programmation-en-électronique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La programmation en électronique
&lt;/h4&gt;
&lt;p&gt;
 Aujourd’hui, l’électronique est de plus en plus composée de composants numériques programmables. Leur utilisation permet de simplifier les schémas électroniques et par conséquent, réduire le coût de fabrication d’un produit. Il en résulte des systèmes plus complexes et performants pour un espace réduit.
&lt;/p&gt;
&lt;h5 id="comment-programmer-de-lélectronique"&gt;
 &lt;a aria-hidden="true" href="#comment-programmer-de-lélectronique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Comment programmer de l’électronique ?
&lt;/h5&gt;
&lt;p&gt;
 Pour faire de l’électronique programmée, il faut un ordinateur et un
 &lt;strong&gt;
  composant programmable
 &lt;/strong&gt;
 . Il existe tout plein de variétés différentes de composants programmables, à noter : les microcontrôleurs, les circuits logiques programmables, … Nous, nous allons programmer des microcontrôleurs. Mais, à ce propos, vous ai-je dit qu’est ce que c’était qu’un microcontrôleur ?
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Qu’est ce que c’est ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Je l’ai dit à l’instant, le microcontrôleur est un composant électronique programmable. On le programme par le biais d’un ordinateur grâce à un langage informatique, souvent propre au type de microcontrôleur utilisé. Je n’entrerai pas dans l’utilisation poussée de ces derniers car le niveau est rudement élevé et la compréhension difficile.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Des microcontrôleurs de différentes tailles" src="./images/uploaded/tuto-arduino-102-quelques-bases-élémentaires/des-microcontroleurs-de-differentes-tailles.jpg"/&gt;
 &lt;figcaption&gt;
  Des microcontrôleurs de différentes tailles (licence CC-0)
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 C’est donc le microcontrôleur qui va être le cerveau de la carte Arduino, pour en revenir à nos moutons. C’est lui que nous allons programmer. On aura le temps d’en rediscuter, pour l’instant je veux uniquement vous présenter les éléments principaux qui le composent.
&lt;/p&gt;
&lt;h5 id="composition-des-éléments-internes-dun-micro-contrôleur"&gt;
 &lt;a aria-hidden="true" href="#composition-des-éléments-internes-dun-micro-contrôleur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Composition des éléments internes d’un micro-contrôleur
&lt;/h5&gt;
&lt;p&gt;
 Un microcontrôleur est constitué par un ensemble d’éléments qui ont chacun une fonction bien déterminée. Il est en fait composé des mêmes éléments que sur la carte mère d’un ordinateur. Si l’on veut, c’est un ordinateur (sans écran, sans disque dur, sans lecteur de disque) dans un espace très restreint. Parmi les différents éléments d’un microcontrôleur typique, je vais vous présenter ceux qui vont nous être utiles.
&lt;/p&gt;
&lt;h6 id="la-mémoire"&gt;
 &lt;a aria-hidden="true" href="#la-mémoire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La mémoire
&lt;/h6&gt;
&lt;p&gt;
 La mémoire du microcontrôleur sert à plusieurs choses. On peut aisément citer le stockage du programme et de données autres que le programme. Il existe cinq types de mémoire :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  La mémoire Flash : c’est celle qui contiendra le programme à exécuter (celui que vous allez créer !). Cette mémoire est effaçable et ré-inscriptible (c’est la même que celle d’une clé USB par exemple).
 &lt;/li&gt;
 &lt;li&gt;
  &lt;abbr title="en anglais 'Random Access Memory'"&gt;
   RAM
  &lt;/abbr&gt;
  : c’est la mémoire dite "vive", elle va contenir les variables de votre programme. Elle est dite "volatile" car elle s’efface si on coupe l’alimentation du micro-contrôleur (comme sur un ordinateur).
 &lt;/li&gt;
 &lt;li&gt;
  &lt;abbr title="en anglais 'Electricaly-Erasable Programmable Read-Only Memory'"&gt;
   EEPROM
  &lt;/abbr&gt;
  : c’est le "disque dur" du microcontrôleur. Vous pourrez y enregistrer des infos qui ont besoin de survivre dans le temps, même si la carte doit être arrêtée et coupée de son alimentation. Cette mémoire ne s’efface pas lorsque l’on éteint le microcontrôleur ou lorsqu’on le reprogramme.
 &lt;/li&gt;
 &lt;li&gt;
  Les registres : c’est un type particulier de mémoire utilisé par le processeur. Nous n’en parlerons pas tout de suite.
 &lt;/li&gt;
 &lt;li&gt;
  La mémoire cache : c’est une mémoire qui fait la liaison entre les registres et la
  &lt;abbr title="en anglais 'Random Access Memory'"&gt;
   RAM
  &lt;/abbr&gt;
  . Nous n’en parlerons également pas tout de suite.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   &lt;a href="https://zestedesavoir.com/tutoriels/638/gestion-de-la-memoire-sur-arduino/"&gt;
    Une annexe au tutoriel
   &lt;/a&gt;
   vous fournit plus de détails concernant les mémoires utilisables dans vos programmes.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h6 id="le-processeur"&gt;
 &lt;a aria-hidden="true" href="#le-processeur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le processeur
&lt;/h6&gt;
&lt;p&gt;
 C’est le composant principal du microcontrôleur. C’est lui qui va exécuter le programme que nous lui donnerons à traiter. On le nomme souvent le
 &lt;abbr title="pour Central Processing Unit"&gt;
  CPU
 &lt;/abbr&gt;
 .
&lt;/p&gt;
&lt;h6 id="diverses-choses"&gt;
 &lt;a aria-hidden="true" href="#diverses-choses"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Diverses choses
&lt;/h6&gt;
&lt;p&gt;
 Nous verrons plus en détail l’intérieur d’un microcontrôleur, mais pas tout de suite, c’est bien trop compliqué. Je ne voudrais pas perdre la moitié des visiteurs en un instant !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
&lt;/p&gt;
&lt;h5 id="fonctionnement"&gt;
 &lt;a aria-hidden="true" href="#fonctionnement"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Fonctionnement
&lt;/h5&gt;
&lt;p&gt;
 Avant tout, pour que le microcontrôleur fonctionne, il lui faut une alimentation ! Cette alimentation se fait en générale par du +5V. D’autres ont besoin d’une tension plus faible, du +3,3V (c’est le cas de la Arduino Due par exemple). En plus d’une alimentation, il a besoin d’un signal d’horloge. C’est en fait une succession de 0 et de 1 ou plutôt une succession de tensions 0V et 5V. Elle permet en outre de cadencer le fonctionnement du microcontrôleur à un rythme régulier. Grâce à elle, il peut introduire la notion de temps en programmation. Nous le verrons plus loin. Bon, pour le moment, vous n’avez pas besoin d’en savoir plus. Passons à autre chose.
&lt;/p&gt;
&lt;h3 id="les-bases-de-comptage-210-et-16"&gt;
 &lt;a aria-hidden="true" href="#les-bases-de-comptage-210-et-16"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les bases de comptage (2,10 et 16)
&lt;/h3&gt;
&lt;h4 id="les-bases-du-de-comptage"&gt;
 &lt;a aria-hidden="true" href="#les-bases-du-de-comptage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les bases
 &lt;del&gt;
  du
 &lt;/del&gt;
 de comptage
&lt;/h4&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   On va apprendre à compter ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Non, je vais simplement vous expliquer ce que sont les
 &lt;strong&gt;
  bases de comptage
 &lt;/strong&gt;
 . C’est en fait un
 &lt;strong&gt;
  système de numération
 &lt;/strong&gt;
 qui permet de compter en utilisant des caractères de numérations, on appelle ça des
 &lt;strong&gt;
  chiffres
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;h5 id="cas-simple-la-base-10"&gt;
 &lt;a aria-hidden="true" href="#cas-simple-la-base-10"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Cas simple, la base 10
&lt;/h5&gt;
&lt;p&gt;
 La base 10, vous la connaissez bien, c’est celle que l’on utilise tous les jours pour compter. Elle regroupe un ensemble de 10 chiffres : 0,1,2,3,4,5,6,7,8,9. Avec ces chiffres, on peut créer une infinité de nombres (ex : 42, 89, 12872, 14.56, 9.3, etc…). Cependant, voyons cela d’un autre œil…
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  L'
  &lt;em&gt;
   unité
  &lt;/em&gt;
  sera représenté par un chiffre multiplié par 10 à la puissance 0.
 &lt;/li&gt;
 &lt;li&gt;
  La
  &lt;em&gt;
   dizaine
  &lt;/em&gt;
  sera représenté par un chiffre multiplié par 10 à la puissance 1.
 &lt;/li&gt;
 &lt;li&gt;
  La
  &lt;em&gt;
   centaine
  &lt;/em&gt;
  sera représenté par un chiffre multiplié par 10 à la puissance 2.
 &lt;/li&gt;
 &lt;li&gt;
  […]
 &lt;/li&gt;
 &lt;li&gt;
  Le
  &lt;em&gt;
   million
  &lt;/em&gt;
  sera représenté par un chiffre multiplié par 10 à la puissance 6.
 &lt;/li&gt;
 &lt;li&gt;
  etc…
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 En généralisant, on peut donc dire qu’un nombre (composé de chiffres) est la somme des chiffres multipliés par 10 à une certaine puissance. Par exemple, si on veut écrire 1024, on peut l’écrire :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mo&gt;
        +
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mo&gt;
        +
       &lt;/mo&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mo&gt;
        +
       &lt;/mo&gt;
       &lt;mn&gt;
        4
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mn&gt;
        4
       &lt;/mn&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       1\times 1000 + 0\times 100 + 2\times 10 + 4\times 1 = 1024
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.64444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.72777em;vertical-align:-0.08333em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      +
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      +
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      +
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      4
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      4
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 ce qui est équivalent à écrire :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;msup&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mn&gt;
         3
        &lt;/mn&gt;
       &lt;/msup&gt;
       &lt;mo&gt;
        +
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;msup&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
       &lt;/msup&gt;
       &lt;mo&gt;
        +
       &lt;/mo&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;msup&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
       &lt;/msup&gt;
       &lt;mo&gt;
        +
       &lt;/mo&gt;
       &lt;mn&gt;
        4
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;msup&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
       &lt;/msup&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mn&gt;
        4
       &lt;/mn&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       1\times 10^3 + 0\times 10^2 + 2\times 10^1 + 4\times 10^0 = 1024
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.8141079999999999em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.897438em;vertical-align:-0.08333em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
          &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             3
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      +
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
          &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             2
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      +
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
          &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             1
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      +
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      4
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
          &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             0
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      4
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 . Eh bien c’est ça, compter en base 10 ! Vous allez mieux comprendre avec la partie suivante.
&lt;/p&gt;
&lt;h5 id="cas-informatique-la-base-2-et-la-base-16"&gt;
 &lt;a aria-hidden="true" href="#cas-informatique-la-base-2-et-la-base-16"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Cas informatique, la base 2 et la base 16
&lt;/h5&gt;
&lt;p&gt;
 En informatique, on utilise beaucoup les bases 2 et 16. Elles sont composées des chiffres suivants :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  pour la
  &lt;strong&gt;
   base 2
  &lt;/strong&gt;
  : les chiffres 0 et 1.
 &lt;/li&gt;
 &lt;li&gt;
  pour la
  &lt;strong&gt;
   base 16
  &lt;/strong&gt;
  : on retrouve les chiffres de la base 10, plus quelques lettres : 0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 On appelle la base 2, la
 &lt;strong&gt;
  base binaire
 &lt;/strong&gt;
 . Elle représente des états logiques 0 ou 1. Dans un signal numérique, ces états correspondent à des niveaux de tension. En électronique numérique, très souvent il s’agira d’une tension de 0V pour un état logique 0 ; d’une tension de 5V pour un état logique 1. On parle aussi de niveau HAUT ou BAS (in english : HIGH or LOW). Elle existe à cause de la conception physique des ordinateurs. En effet, ces derniers utilisent des millions de transistors, utilisés pour traiter des données binaires, donc deux états distincts uniquement (0 ou 1). Pour compter en base 2, ce n’est pas très difficile si vous avez saisi ce qu’est une base. Dans le cas de la base 10, chaque chiffre était multiplié par 10 à une certaine puissance en partant de la puissance 0. Eh bien en base 2, plutôt que d’utiliser 10, on utilise 2. Par exemple, pour obtenir 11 en base 2 on écrira : 1011… En effet, cela équivaut à faire :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;msup&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
        &lt;mn&gt;
         3
        &lt;/mn&gt;
       &lt;/msup&gt;
       &lt;mo&gt;
        +
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;msup&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
       &lt;/msup&gt;
       &lt;mo&gt;
        +
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;msup&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
        &lt;mn&gt;
         1
        &lt;/mn&gt;
       &lt;/msup&gt;
       &lt;mo&gt;
        +
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;msup&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
       &lt;/msup&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       1\times 2^3 + 0\times 2^2 + 1\times 2^1 + 1\times 2^0
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.8141079999999999em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.897438em;vertical-align:-0.08333em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
          &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             3
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      +
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
          &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             2
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      +
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
          &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             1
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      +
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
          &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             0
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 soit :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        8
       &lt;/mn&gt;
       &lt;mo&gt;
        +
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        4
       &lt;/mn&gt;
       &lt;mo&gt;
        +
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mo&gt;
        +
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       1\times 8 + 0\times 4 + 1\times 2 + 1\times 1
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.64444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.72777em;vertical-align:-0.08333em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      8
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      +
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      4
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      +
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      +
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Un chiffre en base 2 s’appelle un
   &lt;strong&gt;
    bit
   &lt;/strong&gt;
   . Un regroupement de 8 bits s’appelle un
   &lt;strong&gt;
    octet
   &lt;/strong&gt;
   . Ce vocabulaire est très important donc retenez-le !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 La base 16, ou
 &lt;strong&gt;
  base hexadécimale
 &lt;/strong&gt;
 est utilisée en programmation, notamment pour représenter des octets facilement. Reprenons nos bits. Si on en utilise quatre, on peut représenter des nombres de 0 (0000) à 15 (1111). Ça tombe bien, c’est justement la portée d’un nombre hexadécimale ! En effet, comme dit plus haut il va de 0 (0000 ou 0) à F (1111 ou 15), ce qui représente 16 "chiffres" en hexadécimal. Grâce à cela, on peut représenter "simplement" des octets, en utilisant juste deux chiffres hexadécimaux.
&lt;/p&gt;
&lt;h5 id="les-notations"&gt;
 &lt;a aria-hidden="true" href="#les-notations"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les notations
&lt;/h5&gt;
&lt;p&gt;
 Ici, rien de très compliqué, je vais simplement vous montrer comment on peut noter un nombre en disant à quelle base il appartient.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Base binaire : (10100010)
  &lt;sub&gt;
   2
  &lt;/sub&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Base décimale : (162)
  &lt;sub&gt;
   10
  &lt;/sub&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Base hexadécimale : (A2)
  &lt;sub&gt;
   16
  &lt;/sub&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 À présent, voyons les différentes méthodes pour passer d’une base à l’autre grâce aux
 &lt;strong&gt;
  conversions
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;h4 id="conversions"&gt;
 &lt;a aria-hidden="true" href="#conversions"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Conversions
&lt;/h4&gt;
&lt;p&gt;
 Souvent, on a besoin de convertir les nombres dans des bases différentes. On retrouvera deux méthodes, bonnes à savoir l’une comme l’autre. La première vous apprendra à faire les conversions "à la main", vous permettant de bien comprendre les choses. La seconde, celle de la calculatrice, vous permettra de faire des conversions sans vous fatiguer.
&lt;/p&gt;
&lt;h5 id="décimale---binaire"&gt;
 &lt;a aria-hidden="true" href="#décimale---binaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Décimale - Binaire
&lt;/h5&gt;
&lt;p&gt;
 Pour convertir un nombre décimal (en base 10) vers un nombre binaire (en base 2, vous suivez c’est bien !), il suffit de savoir diviser par … 2 ! Ça ira ? Prenez votre nombre, puis divisez le par 2. Divisez ensuite le quotient obtenu par 2… puis ainsi de suite jusqu’à avoir un quotient nul. Il vous suffit alors de lire les restes de bas en haut pour obtenir votre nombre binaire… Par exemple le nombre
 &lt;strong&gt;
  42
 &lt;/strong&gt;
 s’écrira
 &lt;strong&gt;
  101010
 &lt;/strong&gt;
 en binaire. Voilà un schéma de démonstration de cette méthode :
&lt;/p&gt;
&lt;p&gt;
 &lt;img alt="Conversion décimale binaire" src="./images/uploaded/tuto-arduino-102-quelques-bases-élémentaires/conversion-decimale-binaire.jpg"/&gt;
 Figure : On garde les restes (en rouge) et on lit le résultat de bas en haut.
&lt;/p&gt;
&lt;h5 id="binaire---hexadécimal"&gt;
 &lt;a aria-hidden="true" href="#binaire---hexadécimal"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Binaire - Hexadécimal
&lt;/h5&gt;
&lt;p&gt;
 La conversion de binaire à l’hexadécimal est la plus simple à réaliser. Tout d’abord, commencez à regrouper les bits par blocs de quatre en commençant par la droite. S’il n’y a pas assez de bits à gauche pour faire le dernier groupe de quatre, on rajoute des zéros. Prenons le nombre 42, qui s’écrit en binaire, on l’a vu,
 &lt;strong&gt;
  101010
 &lt;/strong&gt;
 , on obtiendra deux groupes de 4 bits qui seront
 &lt;strong&gt;
  0010 1010
 &lt;/strong&gt;
 . Ensuite, il suffit de calculer bloc par bloc pour obtenir un chiffre hexadécimal en prenant en compte la valeur de chaque bit. Le premier bit, de poids faible (tout à droite), vaudra par exemple A (
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        8
       &lt;/mn&gt;
       &lt;mo&gt;
        +
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        4
       &lt;/mn&gt;
       &lt;mo&gt;
        +
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mo&gt;
        +
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       1\times8 + 0\times4 + 1\times2 + 0\times1 = 10
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.64444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.72777em;vertical-align:-0.08333em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      8
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      +
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      4
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      +
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      +
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 : A en hexadécimal). Ensuite, l’autre bloc vaudra simplement 2 (
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        8
       &lt;/mn&gt;
       &lt;mo&gt;
        +
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        4
       &lt;/mn&gt;
       &lt;mo&gt;
        +
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mo&gt;
        +
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mo&gt;
        ×
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       0\times8 + 0\times4 + 1\times2 + 0\times1 = 2
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.64444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.72777em;vertical-align:-0.08333em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      8
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      +
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      4
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      +
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      +
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ×
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 ). Donc 42 en base décimale vaut 2A en base hexadécimale, ce qui s’écrit aussi
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mo&gt;
        (
       &lt;/mo&gt;
       &lt;mn&gt;
        4
       &lt;/mn&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;msub&gt;
        &lt;mo&gt;
         )
        &lt;/mo&gt;
        &lt;mrow&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
         &lt;mn&gt;
          0
         &lt;/mn&gt;
        &lt;/mrow&gt;
       &lt;/msub&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mo&gt;
        (
       &lt;/mo&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mi&gt;
        A
       &lt;/mi&gt;
       &lt;msub&gt;
        &lt;mo&gt;
         )
        &lt;/mo&gt;
        &lt;mrow&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
         &lt;mn&gt;
          6
         &lt;/mn&gt;
        &lt;/mrow&gt;
       &lt;/msub&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       (42)_{10} = (2A)_{16}
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.75em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mopen"&gt;
      (
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      4
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mclose"&gt;
      &lt;span class="mclose"&gt;
       )
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              1
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              0
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mopen"&gt;
      (
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      A
     &lt;/span&gt;
     &lt;span class="mclose"&gt;
      &lt;span class="mclose"&gt;
       )
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              1
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              6
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 Pour passer de hexadécimal à binaire, il suffit de faire le fonctionnement inverse en s’aidant de la base décimale de temps en temps. La démarche à suivre est la suivante :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Je sépare les chiffres un par un (on obtient 2 et A)
 &lt;/li&gt;
 &lt;li&gt;
  Je "convertis" leurs valeurs en décimal (ce qui nous fait 2 et 10)
 &lt;/li&gt;
 &lt;li&gt;
  Je met ces valeurs en binaire (et on a donc 0010 1010)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="décimal---hexadécimal"&gt;
 &lt;a aria-hidden="true" href="#décimal---hexadécimal"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Décimal - Hexadécimal
&lt;/h5&gt;
&lt;p&gt;
 Ce cas est plus délicat à traiter, car il nécessite de bien connaître la table de multiplication par 16.
 &lt;img alt=":euh:" class="smiley" src="./static/smileys/unsure.gif"/&gt;
 Comme vous avez bien suivi les explications précédentes, vous comprenez comment faire ici… Mais comme je suis nul en math, je vous conseillerais de faire un passage par la base binaire pour faire les conversions !
&lt;/p&gt;
&lt;h5 id="méthode-rapide"&gt;
 &lt;a aria-hidden="true" href="#méthode-rapide"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Méthode rapide
&lt;/h5&gt;
&lt;p&gt;
 Pour cela, je vais dans
 &lt;em&gt;
  Démarrer / Tous les programmes / Accessoires / Calculatrice
 &lt;/em&gt;
 (ou en faisant une petite recherche dans le menu Démarrer ou directement depuis l’écran d’accueil de Windows 8). Qui a dit que j’étais fainéant ?
 &lt;img alt=":colere2:" class="smiley" src="./static/smileys/mechant.png"/&gt;
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Utilisation de la calculatrice Windows" src="./images/uploaded/tuto-arduino-102-quelques-bases-élémentaires/utilisation-de-la-calculatrice-windows.png"/&gt;
 &lt;figcaption&gt;
  Utilisation de la calculatrice Windows
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Pour obtenir cet affichage, il vous faudra peut-être utiliser le menu
   &lt;em&gt;
    Affichage
   &lt;/em&gt;
   puis sélectionner
   &lt;em&gt;
    Programmeur
   &lt;/em&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Sur le côté gauche, il y a des options à cocher pour afficher le nombre entré dans la base que l’on veut. Présentement, je suis en base 10 (décimale - bouton
 &lt;em&gt;
  Déc
 &lt;/em&gt;
 ). Si je clique sur
 &lt;em&gt;
  Hex
 &lt;/em&gt;
 :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Sélection de Hex" src="./images/uploaded/tuto-arduino-102-quelques-bases-élémentaires/selection-de-hex.png"/&gt;
 &lt;figcaption&gt;
  Sélection de Hex
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Je vois que mon nombre
 &lt;strong&gt;
  42
 &lt;/strong&gt;
 a été converti en :
 &lt;strong&gt;
  2A
 &lt;/strong&gt;
 . Et maintenant, si je clique sur
 &lt;em&gt;
  Bin
 &lt;/em&gt;
 :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Sélection de Bin" src="./images/uploaded/tuto-arduino-102-quelques-bases-élémentaires/selection-de-bin.png"/&gt;
 &lt;figcaption&gt;
  Sélection de Bin
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Notre nombre a été converti en :
 &lt;strong&gt;
  00101010
 &lt;/strong&gt;
 !
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Le logiciel</title><link href="https://eskimon.fr/tuto-arduino-103-le-logiciel" rel="alternate"></link><published>2013-12-10T20:03:00+01:00</published><updated>2013-12-10T20:03:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-10:/tuto-arduino-103-le-logiciel</id><summary type="html">&lt;p&gt;
 Afin de vous laisser un peu de temps supplémentaire pour vous procurer votre carte Arduino, je vais vous montrer brièvement comment se présente le logiciel Arduino.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#installation"&gt;
    Installation
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#téléchargement"&gt;
      Téléchargement
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#sous-windows"&gt;
       Sous Windows
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#mac-os"&gt;
       Mac os
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#sous-linux"&gt;
       Sous Linux
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#interface-du-logiciel"&gt;
    Interface du logiciel
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#lancement-du-logiciel"&gt;
     Lancement du logiciel
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#présentation-du-logiciel"&gt;
      Présentation du logiciel
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#correspondance"&gt;
       Correspondance
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#approche-et-utilisation-du-logiciel"&gt;
    Approche et utilisation du logiciel …&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;
 Afin de vous laisser un peu de temps supplémentaire pour vous procurer votre carte Arduino, je vais vous montrer brièvement comment se présente le logiciel Arduino.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#installation"&gt;
    Installation
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#téléchargement"&gt;
      Téléchargement
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#sous-windows"&gt;
       Sous Windows
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#mac-os"&gt;
       Mac os
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#sous-linux"&gt;
       Sous Linux
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#interface-du-logiciel"&gt;
    Interface du logiciel
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#lancement-du-logiciel"&gt;
     Lancement du logiciel
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#présentation-du-logiciel"&gt;
      Présentation du logiciel
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#correspondance"&gt;
       Correspondance
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#approche-et-utilisation-du-logiciel"&gt;
    Approche et utilisation du logiciel
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#le-menu-file"&gt;
     Le menu File
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#les-boutons"&gt;
     Les boutons
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="installation"&gt;
 &lt;a aria-hidden="true" href="#installation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Installation
&lt;/h3&gt;
&lt;p&gt;
 Il n’y a pas besoin d’installer le logiciel Arduino sur votre ordinateur puisque ce dernier est une version portable. Regardons ensemble les étapes pour préparer votre ordinateur à l’utilisation de la carte Arduino.
&lt;/p&gt;
&lt;h4 id="téléchargement"&gt;
 &lt;a aria-hidden="true" href="#téléchargement"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Téléchargement
&lt;/h4&gt;
&lt;p&gt;
 Pour télécharger le logiciel, il faut se rendre sur
 &lt;a href="http://arduino.cc/en/Main/Software"&gt;
  la page de téléchargement du site arduino.cc
 &lt;/a&gt;
 . Vous avez deux catégories :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Download : Dans cette catégorie, vous pouvez télécharger la dernière version du logiciel. Les plateformes Windows, Linux et Mac sont supportées par le logiciel.
  &lt;strong&gt;
   C’est donc ici que vous allez télécharger le logiciel
  &lt;/strong&gt;
  .
 &lt;/li&gt;
 &lt;li&gt;
  Previous IDE Versions : Dans cette catégorie-là, vous avez toutes les versions du logiciel, sous les plateformes précédemment citées, depuis le début de sa création.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="sous-windows"&gt;
 &lt;a aria-hidden="true" href="#sous-windows"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sous Windows
&lt;/h5&gt;
&lt;p&gt;
 Pour moi ce sera sous Windows. Je clique sur le lien
 &lt;strong&gt;
  Windows
 &lt;/strong&gt;
 et le fichier apparaît et doit être enregistre ou bon vous semble.
&lt;/p&gt;
&lt;p&gt;
 Une fois que le téléchargement est terminé, vous n’avez plus qu’à décompresser le fichier avec un utilitaire de décompression (7-zip, WinRar, …). À l’intérieur du dossier se trouvent quelques fichiers et l’exécutable du logiciel :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Exécutable du logiciel Arduino" src="./images/uploaded/tuto-arduino-103-le-logiciel/executable-du-logiciel-arduino.png"/&gt;
 &lt;figcaption&gt;
  Exécutable du logiciel Arduino
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="mac-os"&gt;
 &lt;a aria-hidden="true" href="#mac-os"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Mac os
&lt;/h5&gt;
&lt;p&gt;
 Cliquez sur le lien Mac OS. Un fichier
 &lt;strong&gt;
  .dmg
 &lt;/strong&gt;
 apparait. Enregistrez-le.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Téléchargement sous Mac OS" src="./images/uploaded/tuto-arduino-103-le-logiciel/telechargement-sous-mac-os.jpg"/&gt;
 &lt;figcaption&gt;
  Téléchargement sous Mac OS
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Double-cliquez sur le fichier
 &lt;em&gt;
  .dmg
 &lt;/em&gt;
 :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Contenu du téléchargement" src="./images/uploaded/tuto-arduino-103-le-logiciel/contenu-du-telechargement.jpg"/&gt;
 &lt;figcaption&gt;
  Contenu du téléchargement
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 On y trouve l’application Arduino (
 &lt;strong&gt;
  .app
 &lt;/strong&gt;
 ), mais aussi le driver à installer (
 &lt;strong&gt;
  .mpkg
 &lt;/strong&gt;
 ). Procédez à l’installation du driver puis installez l’application en la glissant dans le raccourci du dossier "Applications" qui est normalement présent sur votre ordinateur.
&lt;/p&gt;
&lt;h5 id="sous-linux"&gt;
 &lt;a aria-hidden="true" href="#sous-linux"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sous Linux
&lt;/h5&gt;
&lt;p&gt;
 Rien de plus simple, en allant dans la logithèque, recherchez le logiciel "Arduino". Sinon vous pouvez aussi passer par la ligne de commande:
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;$ sudo apt-get install arduino
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Plusieurs dépendances seront installées en même temps.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Je rajoute
   &lt;a href="http://www.arduino.cc/playground/Learning/Linux"&gt;
    un lien
   &lt;/a&gt;
   qui vous mènera vers la page officielle.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="interface-du-logiciel"&gt;
 &lt;a aria-hidden="true" href="#interface-du-logiciel"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Interface du logiciel
&lt;/h3&gt;
&lt;h4 id="lancement-du-logiciel"&gt;
 &lt;a aria-hidden="true" href="#lancement-du-logiciel"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Lancement du logiciel
&lt;/h4&gt;
&lt;p&gt;
 Lançons le logiciel en double-cliquant sur l’icône avec le symbole "infinie" en vert. C’est l’exécutable du logiciel. Après un léger temps de réflexion, une image s’affiche :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Le splash screen Arduino" src="./images/uploaded/tuto-arduino-103-le-logiciel/le-splash-screen-arduino.jpg"/&gt;
 &lt;figcaption&gt;
  Le splash screen Arduino
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Cette fois, après quelques secondes, le logiciel s’ouvre. Une fenêtre se présente à nous :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="L'interface de l'IDE Arduino" src="./images/uploaded/tuto-arduino-103-le-logiciel/linterface-de-lide-arduino.png"/&gt;
 &lt;figcaption&gt;
  L'interface de l'IDE Arduino
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ce qui saute aux yeux en premier, c’est la clarté de présentation du logiciel. On voit tout de suite son interface intuitive. Voyons comment se compose cette interface.
&lt;/p&gt;
&lt;h4 id="présentation-du-logiciel"&gt;
 &lt;a aria-hidden="true" href="#présentation-du-logiciel"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Présentation du logiciel
&lt;/h4&gt;
&lt;p&gt;
 J’ai découpé, grâce à mon ami paint.net, l’image précédente en plusieurs parties :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="L'interface de l'IDE Arduino en détail" src="./images/uploaded/tuto-arduino-103-le-logiciel/linterface-de-lide-arduino-en-detail.png"/&gt;
 &lt;figcaption&gt;
  L'interface de l'IDE Arduino en détail
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="correspondance"&gt;
 &lt;a aria-hidden="true" href="#correspondance"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Correspondance
&lt;/h5&gt;
&lt;ul&gt;
 &lt;li&gt;
  Le cadre numéro 1 : ce sont les options de configuration du logiciel
 &lt;/li&gt;
 &lt;li&gt;
  Le cadre numéro 2 : il contient les boutons qui vont nous servir lorsque l’on va programmer nos cartes
 &lt;/li&gt;
 &lt;li&gt;
  Le cadre numéro 3 : ce bloc va contenir le programme que nous allons créer
 &lt;/li&gt;
 &lt;li&gt;
  Le cadre numéro 4 : celui-ci est important, car il va nous aider à corriger les fautes dans notre programme. C’est le
  &lt;strong&gt;
   débogueur
  &lt;/strong&gt;
  .
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="approche-et-utilisation-du-logiciel"&gt;
 &lt;a aria-hidden="true" href="#approche-et-utilisation-du-logiciel"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Approche et utilisation du logiciel
&lt;/h3&gt;
&lt;p&gt;
 Attaquons-nous plus sérieusement à l’utilisation du logiciel. La barre des menus est entourée en rouge et numérotée par le chiffre 1.
&lt;/p&gt;
&lt;h4 id="le-menu-file"&gt;
 &lt;a aria-hidden="true" href="#le-menu-file"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le menu
 &lt;em&gt;
  File
 &lt;/em&gt;
&lt;/h4&gt;
&lt;p&gt;
 C’est principalement ce menu que l’on va utiliser le plus. Il dispose d’un certain nombre de choses qui vont nous être très utiles. Il a été traduit en français progressivement, nous allons donc voir les quelques options qui sortent de l’ordinaire :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Le menu Fichier" src="./images/uploaded/tuto-arduino-103-le-logiciel/le-menu-fichier.jpg"/&gt;
 &lt;figcaption&gt;
  Le menu Fichier
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;em&gt;
   Carnet de croquis
  &lt;/em&gt;
  : Ce menu regroupe les fichiers que vous avez pu faire jusqu’à maintenant (et s’ils sont enregistrés dans le dossier par défaut du logiciel).
 &lt;/li&gt;
 &lt;li&gt;
  &lt;em&gt;
   Exemples
  &lt;/em&gt;
  (exemples) : Ceci est important, toute une liste se déroule pour afficher les noms d’exemples de programmes existants ; avec ça, vous pourrez vous aider/inspirer pour créer vos propres programmes ou tester de nouveaux composants.
 &lt;/li&gt;
 &lt;li&gt;
  &lt;em&gt;
   Téléverser
  &lt;/em&gt;
  : Permet d’envoyer le programme sur la carte Arduino. Nous y reviendrons
  &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  .
 &lt;/li&gt;
 &lt;li&gt;
  &lt;em&gt;
   Téléverser avec un programmateur
  &lt;/em&gt;
  : Idem que ci-dessus, mais avec l’utilisation d’un programmateur (vous n’en n’aurez que très rarement besoin).
 &lt;/li&gt;
 &lt;li&gt;
  &lt;em&gt;
   Préférences
  &lt;/em&gt;
  : Vous pourrez régler ici quelques paramètres du logiciel.
Le reste des menus n’est pas intéressant pour l’instant, on y reviendra plus tard, avant de commencer à programmer.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="les-boutons"&gt;
 &lt;a aria-hidden="true" href="#les-boutons"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les boutons
&lt;/h4&gt;
&lt;p&gt;
 Voyons à présent à quoi servent les boutons, encadrés en rouge et numérotés par le chiffre 2.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="La barre d'outils" src="./images/uploaded/tuto-arduino-103-le-logiciel/la-barre-doutils.png"/&gt;
 &lt;figcaption&gt;
  La barre d'outils
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
 &lt;li&gt;
  Bouton 1 : Ce bouton permet de vérifier le programme, il actionne un module qui cherche les erreurs dans votre programme
 &lt;/li&gt;
 &lt;li&gt;
  Bouton 2 : Charge (téléverse) le programme dans la carte Arduino.
 &lt;/li&gt;
 &lt;li&gt;
  Bouton 3 : Crée un nouveau fichier.
 &lt;/li&gt;
 &lt;li&gt;
  Bouton 4 : Ouvre un fichier.
 &lt;/li&gt;
 &lt;li&gt;
  Bouton 5 : Enregistre le fichier.
 &lt;/li&gt;
 &lt;li&gt;
  Bouton 6 : Ouvre le moniteur série (on verra plus tard ce que c’est
  &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  ).
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Enfin, on va pouvoir s’occuper du matériel que vous devriez tous posséder en ce moment même : la carte Arduino !
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Le matériel</title><link href="https://eskimon.fr/tuto-arduino-104-le-mat%C3%A9riel" rel="alternate"></link><published>2013-12-10T20:03:00+01:00</published><updated>2013-12-10T20:03:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-10:/tuto-arduino-104-le-matériel</id><summary type="html">&lt;p&gt;
 Dans ce chapitre, je vais vous montrer brièvement comment se présente la carte Arduino, comment l’installer et son fonctionnement global.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#présentation-de-la-carte"&gt;
    Présentation de la carte
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#constitution-de-la-carte"&gt;
      Constitution de la carte
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-micro-contrôleur"&gt;
       Le micro-contrôleur
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#alimentation"&gt;
       Alimentation
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#visualisation"&gt;
       Visualisation
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-connectique"&gt;
       La connectique
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#installation"&gt;
    Installation
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#sous-windows"&gt;
     Sous Windows
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#tester-son-matériel"&gt;
      Tester son matériel
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#1ère-étape-ouvrir-un-programme"&gt;
       1ère étape : ouvrir un programme
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#2e-étape"&gt;
       2e étape
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#dernière-étape"&gt;
       Dernière …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;
 Dans ce chapitre, je vais vous montrer brièvement comment se présente la carte Arduino, comment l’installer et son fonctionnement global.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#présentation-de-la-carte"&gt;
    Présentation de la carte
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#constitution-de-la-carte"&gt;
      Constitution de la carte
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-micro-contrôleur"&gt;
       Le micro-contrôleur
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#alimentation"&gt;
       Alimentation
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#visualisation"&gt;
       Visualisation
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-connectique"&gt;
       La connectique
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#installation"&gt;
    Installation
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#sous-windows"&gt;
     Sous Windows
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#tester-son-matériel"&gt;
      Tester son matériel
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#1ère-étape-ouvrir-un-programme"&gt;
       1ère étape : ouvrir un programme
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#2e-étape"&gt;
       2e étape
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#dernière-étape"&gt;
       Dernière étape
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#fonctionnement-global"&gt;
    Fonctionnement global
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#partons-du-programme"&gt;
      Partons du programme
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-contenu"&gt;
       Le contenu
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#et-lenvoi"&gt;
       Et l’envoi
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#réception-du-programme"&gt;
     Réception du programme
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#À-lintérieur-du-microcontrôleur"&gt;
      À l’intérieur du microcontrôleur
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#lemplacement-du-programme"&gt;
       L’emplacement du programme
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#démarrage-du-microcontrôleur"&gt;
       Démarrage du microcontrôleur
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="présentation-de-la-carte"&gt;
 &lt;a aria-hidden="true" href="#présentation-de-la-carte"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Présentation de la carte
&lt;/h3&gt;
&lt;p&gt;
 Pour commencer notre découverte de la carte Arduino, je vais vous présenter la carte en elle-même. Nous allons voir comment s’en servir et avec quoi. J’ai représenté en rouge sur cette photo les points importants de la carte :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Présentation de la carte Arduino" src="./images/uploaded/tuto-arduino-104-le-matériel/presentation-de-la-carte-arduino.png"/&gt;
 &lt;figcaption&gt;
  Présentation de la carte Arduino - (CC-BY-SA,
  &lt;a href="http://arduino.cc/en/Main/ArduinoBoardUno"&gt;
   arduino.cc
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="constitution-de-la-carte"&gt;
 &lt;a aria-hidden="true" href="#constitution-de-la-carte"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Constitution de la carte
&lt;/h4&gt;
&lt;p&gt;
 Voyons quels sont ces points importants et à quoi ils servent.
&lt;/p&gt;
&lt;h5 id="le-micro-contrôleur"&gt;
 &lt;a aria-hidden="true" href="#le-micro-contrôleur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le micro-contrôleur
&lt;/h5&gt;
&lt;p&gt;
 Voilà le cerveau de notre carte (en
 &lt;strong&gt;
  1
 &lt;/strong&gt;
 ). C’est lui qui va recevoir le programme que vous aurez créé et qui va le stocker dans sa mémoire puis l’exécuter. Grâce à ce programme, il va savoir faire des choses, qui peuvent être : faire clignoter une LED, afficher des caractères sur un écran, envoyer des données à un ordinateur, …
&lt;/p&gt;
&lt;h5 id="alimentation"&gt;
 &lt;a aria-hidden="true" href="#alimentation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Alimentation
&lt;/h5&gt;
&lt;p&gt;
 Pour fonctionner, la carte a besoin d’une alimentation. Le microcontrôleur fonctionnant sous 5V, la carte peut être alimentée en 5V par le port USB (en
 &lt;strong&gt;
  2
 &lt;/strong&gt;
 ) ou bien par une alimentation externe (en
 &lt;strong&gt;
  3
 &lt;/strong&gt;
 ) qui est comprise entre 7V et 12V. Cette tension doit être continue et peut par exemple être fournie par une pile 9V. Un régulateur se charge ensuite de réduire la tension à 5V pour le bon fonctionnement de la carte. Pas de danger de tout griller donc! Veuillez seulement à respecter l’intervalle de 7V à 15V (même si le régulateur peut supporter plus, pas la peine de le retrancher dans ses limites)
&lt;/p&gt;
&lt;h5 id="visualisation"&gt;
 &lt;a aria-hidden="true" href="#visualisation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Visualisation
&lt;/h5&gt;
&lt;p&gt;
 Les trois "points blancs" entourés en rouge (
 &lt;strong&gt;
  4
 &lt;/strong&gt;
 ) sont en fait des LED dont la taille est de l’ordre du millimètre. Ces LED servent à deux choses :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Celle tout en haut du cadre : elle est connectée à une broche du microcontrôleur et va servir pour tester le matériel.
  &lt;em&gt;
   Nota
  &lt;/em&gt;
  : Quand on branche la carte au PC, elle clignote quelques secondes.
 &lt;/li&gt;
 &lt;li&gt;
  Les deux LED du bas du cadre : servent à visualiser l’activité sur la voie série (une pour l’émission et l’autre pour la réception). Le téléchargement du programme dans le microcontrôleur se faisant par cette voie, on peut les voir clignoter lors du chargement.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="la-connectique"&gt;
 &lt;a aria-hidden="true" href="#la-connectique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La connectique
&lt;/h5&gt;
&lt;p&gt;
 La carte Arduino ne possédant pas de composants qui peuvent être utilisés pour un programme, mis à part la LED connectée à la broche 13 du microcontrôleur, il est nécessaire de les rajouter. Mais pour ce faire, il faut les connecter à la carte. C’est là qu’intervient la connectique de la carte (en
 &lt;strong&gt;
  5a
 &lt;/strong&gt;
 et
 &lt;strong&gt;
  5b
 &lt;/strong&gt;
 ). Par exemple, on veut connecter une LED sur une sortie du microcontrôleur. Il suffit juste de la connecter, avec une résistance en série, à la carte, sur les fiches de connexion de la carte.
&lt;/p&gt;
&lt;p&gt;
 Cette connectique est importante et a un brochage qu’il faudra respecter. Nous le verrons quand nous apprendrons à faire notre premier programme. C’est avec cette connectique que la carte est "extensible" car l’on peut y brancher tous types de montages et modules ! Par exemple, la carte Arduino Uno peut être étendue avec des shields, comme le «
 &lt;strong&gt;
  Shield Ethernet
 &lt;/strong&gt;
 » qui permet de connecter cette dernière à internet.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Le shield Ethernet Arduino" src="./images/uploaded/tuto-arduino-104-le-matériel/le-shield-ethernet-arduino.jpg"/&gt;
 &lt;figcaption&gt;
  Le shield Ethernet Arduino - (CC-BY-SA -
  &lt;a href="http://arduino.cc/en/Main/ArduinoEthernetShield"&gt;
   arduino.cc
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="installation"&gt;
 &lt;a aria-hidden="true" href="#installation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Installation
&lt;/h3&gt;
&lt;p&gt;
 Afin d’utiliser la carte, il faut l’installer. Normalement, les
 &lt;em&gt;
  drivers
 &lt;/em&gt;
 (pilote, en français) sont déjà installés sous GNU/Linux. Sous mac, il suffit de double cliquer sur le fichier
 &lt;em&gt;
  .mkpg
 &lt;/em&gt;
 inclus dans le téléchargement de l’application Arduino et l’installation des drivers s’exécute de façon automatique.
&lt;/p&gt;
&lt;h4 id="sous-windows"&gt;
 &lt;a aria-hidden="true" href="#sous-windows"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sous Windows
&lt;/h4&gt;
&lt;p&gt;
 Lorsque vous connectez la carte à votre ordinateur sur le port USB, un petit message en bas de l’écran apparaît. Théoriquement, la carte que vous utilisez doit s’installer toute seule. Cependant, si vous êtes sous Windows 7 comme moi, il se peut que cela ne marche pas du premier coup. Dans ce cas, laissez la carte branchée puis allez dans le panneau de configuration. Cliquez ensuite sur "Système" puis, dans le panneau de gauche sélectionnez "gestionnaire de périphériques". Une fois ce menu ouvert, vous devriez voir un composant avec un panneau "attention" jaune. Faites un clic droit sur le composant et cliquez sur "Mettre à jour les pilotes". Dans le nouveau menu, sélectionnez l’option "Rechercher le pilote moi-même". Enfin, il ne vous reste plus qu’à aller sélectionner le bon dossier contenant le driver. Il se trouve dans le dossier d’Arduino que vous avez du décompresser un peu plus tôt et se nomme "drivers" (attention, ne descendez pas jusqu’au dossier "FTDI"). Par exemple, pour moi le chemin sera :
 &lt;code&gt;
  le-chemin-du-dossier\arduino-0022\arduino-0022\drivers
 &lt;/code&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Il semblerait qu’il y est des problèmes en utilisant la version francaise d’Arduino (les drivers sont absents du dossier). Si c’est le cas, il vous faudra télécharger la version originale (anglaise) pour pouvoir installer les drivers.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Après l’installation et une suite de clignotement sur les micro-LED de la carte, celle-ci devrait être fonctionnelle. Une petite LED verte témoigne de la bonne alimentation de la carte :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Carte connectée et alimentée" src="./images/uploaded/tuto-arduino-104-le-matériel/carte-connectee-et-alimentee.jpg"/&gt;
 &lt;figcaption&gt;
  Carte connectée et alimentée
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="tester-son-matériel"&gt;
 &lt;a aria-hidden="true" href="#tester-son-matériel"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Tester son matériel
&lt;/h4&gt;
&lt;p&gt;
 Avant de commencer à programmer la tête baissée, il faut, avant toutes choses, tester le bon fonctionnement de la carte. Ce serait idiot de programmer la carte et chercher les erreurs dans le programme alors que le problème vient de la carte !
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 Nous allons tester notre matériel en chargeant un programme qui fonctionne dans la carte.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Mais, on n’en a pas encore fait de programmes ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Tout juste ! Mais le logiciel Arduino contient des exemples de programmes. Et bien ce sont ces exemples que nous allons utiliser pour tester la carte.
&lt;/p&gt;
&lt;h5 id="1ère-étape-ouvrir-un-programme"&gt;
 &lt;a aria-hidden="true" href="#1ère-étape-ouvrir-un-programme"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 1ère étape : ouvrir un programme
&lt;/h5&gt;
&lt;p&gt;
 Nous allons choisir un exemple tout simple qui consiste à faire clignoter une LED. Son nom est
 &lt;em&gt;
  Blink
 &lt;/em&gt;
 et vous le trouverez dans la catégorie
 &lt;em&gt;
  Basics
 &lt;/em&gt;
 :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Menu de choix d'un exemple" src="./images/uploaded/tuto-arduino-104-le-matériel/menu-de-choix-dun-exemple.jpg"/&gt;
 &lt;figcaption&gt;
  Menu de choix d'un exemple
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Une fois que vous avez cliqué sur
 &lt;em&gt;
  Blink
 &lt;/em&gt;
 , une nouvelle fenêtre va apparaître. Elle va contenir le programme
 &lt;em&gt;
  Blink
 &lt;/em&gt;
 . Vous pouvez fermer l’ancienne fenêtre qui va ne nous servir plus à rien.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Fenêtre du programme blink" src="./images/uploaded/tuto-arduino-104-le-matériel/fenetre-du-programme-blink.png"/&gt;
 &lt;figcaption&gt;
  Fenêtre du programme blink
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="2e-étape"&gt;
 &lt;a aria-hidden="true" href="#2e-étape"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 2e étape
&lt;/h5&gt;
&lt;p&gt;
 Avant d’envoyer le programme
 &lt;em&gt;
  Blink
 &lt;/em&gt;
 vers la carte, il faut dire au logiciel quel est le nom de la carte et sur quel port elle est branchée.
 &lt;strong&gt;
  Choisir la carte que l’on va programmer
 &lt;/strong&gt;
 . Ce n’est pas très compliqué, le nom de votre carte est indiqué sur elle. Pour nous, il s’agit de la carte "Uno". Allez dans le menu
 &lt;em&gt;
  Tools
 &lt;/em&gt;
 ("outils" en français) puis dans
 &lt;em&gt;
  Board
 &lt;/em&gt;
 ("carte" en français). Vérifiez que c’est bien le nom "Arduin Uno" qui est coché. Si ce n’est pas le cas, cochez-le.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Menu de sélection de la carte cible" src="./images/uploaded/tuto-arduino-104-le-matériel/menu-de-selection-de-la-carte-cible.jpg"/&gt;
 &lt;figcaption&gt;
  Menu de sélection de la carte cible
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 &lt;strong&gt;
  Choisissez le port de connexion de la carte.
 &lt;/strong&gt;
 Allez dans le menu
 &lt;em&gt;
  Tools
 &lt;/em&gt;
 , puis
 &lt;em&gt;
  Serial port
 &lt;/em&gt;
 . Là, vous choisissez le port COMX, X étant le numéro du port qui est affiché. Ne choisissez pas COM1 car il n’est quasiment jamais connecté à la carte. Dans mon cas, il s’agit de COM18 :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Menu de sélection du port com" src="./images/uploaded/tuto-arduino-104-le-matériel/menu-de-selection-du-port-com.jpg"/&gt;
 &lt;figcaption&gt;
  Menu de sélection du port com
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Pour trouver le port de connexion de la carte, vous pouvez aller dans le
 &lt;strong&gt;
  gestionnaire de périphériques
 &lt;/strong&gt;
 qui se trouve dans le
 &lt;strong&gt;
  panneau de configuration
 &lt;/strong&gt;
 . Regardez à la ligne
 &lt;strong&gt;
  Ports (COM et LPT)
 &lt;/strong&gt;
 et là, vous devriez avoir
 &lt;strong&gt;
  Arduino Uno (COMX)
 &lt;/strong&gt;
 . Aller, une image pour le plaisir :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Le panneau de configuration Windows et la carte Arduino" src="./images/uploaded/tuto-arduino-104-le-matériel/le-panneau-de-configuration-windows-et-la-carte-arduino.jpg"/&gt;
 &lt;figcaption&gt;
  Le panneau de configuration Windows et la carte Arduino
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="dernière-étape"&gt;
 &lt;a aria-hidden="true" href="#dernière-étape"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Dernière étape
&lt;/h5&gt;
&lt;p&gt;
 Très bien. Maintenant, il va falloir envoyer le programme dans la carte. Pour ce faire, il suffit de cliquer sur le bouton
 &lt;em&gt;
  Téléverser
 &lt;/em&gt;
 , en jaune-orangé sur la photo :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Compilation en cours..." src="./images/uploaded/tuto-arduino-104-le-matériel/compilation-en-cours.png"/&gt;
 &lt;figcaption&gt;
  Compilation en cours...
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Vous verrez tout d’abord le message "Compilation du croquis en cours…" pour vous informer que le programme est en train d’être compilé en langage machine avant d’être envoyé. Ensuite vous aurez ceci :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Chargement du programme en cours..." src="./images/uploaded/tuto-arduino-104-le-matériel/chargement-du-programme-en-cours.png"/&gt;
 &lt;figcaption&gt;
  Chargement du programme en cours...
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 En bas de l’image, vous voyez le texte : "
 &lt;em&gt;
  Téléversement…
 &lt;/em&gt;
 ", cela signifie que le logiciel est en train d’envoyer le programme dans la carte. Une fois terminé, il affiche un autre message :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Le chargement est terminé !" src="./images/uploaded/tuto-arduino-104-le-matériel/le-chargement-est-termine.png"/&gt;
 &lt;figcaption&gt;
  Le chargement est terminé !
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Le message affiché : "
 &lt;em&gt;
  Téléversement terminé
 &lt;/em&gt;
 " signale que le programme a bien été chargé dans la carte. Si votre matériel fonctionne, vous devriez avoir une LED sur la carte qui clignote :
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si vous n’obtenez pas ce message mais plutôt un truc en rouge, pas d’inquiétude, le matériel n’est pas forcément défectueux!
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 En effet, plusieurs erreurs sont possibles:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  l’IDE recompile avant d’envoyer le code, vérifiez la présence d’erreurs.
 &lt;/li&gt;
 &lt;li&gt;
  La voie série est peut-être mal choisie, vérifiez les branchements et le choix de la voie série.
 &lt;/li&gt;
 &lt;li&gt;
  l’IDE est codé en JAVA, il peut-être capricieux et bugger de temps en temps (surtout avec la voie série…) : réessayez l’envoi !
 &lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
 &lt;img alt="LED sur la carte qui clignote" src="./images/uploaded/tuto-arduino-104-le-matériel/led-sur-la-carte-qui-clignote.jpg"/&gt;
 &lt;figcaption&gt;
  LED sur la carte qui clignote
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="fonctionnement-global"&gt;
 &lt;a aria-hidden="true" href="#fonctionnement-global"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Fonctionnement global
&lt;/h3&gt;
&lt;p&gt;
 Nous avons vu précédemment ce qu’était une carte électronique programmable. Nous avons également vu de quels éléments se basait une carte électronique pour fonctionner (schéma électronique, schéma de câblage). Je viens de vous présenter la carte, de quoi elle est principalement constituée. Enfin, je vous ai montré comment l’utiliser de manière à faire clignoter une petite lumière. Dorénavant, nous allons voir comment elle fonctionne de façon globale et répondre à quelques questions qui pourraient vous trotter dans la tête : "Comment la carte sait qu’il y a une LED de connectée ?", "Et comment sait-elle que c’est sur telle broche ?", "Et le programme, où-est-ce qu’il se trouve et sous quelle forme ?", "Comment la carte fait pour comprendre ce qu’elle doit faire ?", … De nombreuses questions, effectivement !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
&lt;/p&gt;
&lt;h4 id="partons-du-programme"&gt;
 &lt;a aria-hidden="true" href="#partons-du-programme"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Partons du programme
&lt;/h4&gt;
&lt;h5 id="le-contenu"&gt;
 &lt;a aria-hidden="true" href="#le-contenu"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le contenu
&lt;/h5&gt;
&lt;p&gt;
 Le contenu du programme, donc le programme en lui-même, est ce qui va définir chaque action que va exécuter la carte Arduino. Mais ce n’est pas tout ! Dans le programme il y a plusieurs zones, que nous verrons plus en détail tout au long de la lecture de ce cours, qui ont chacune un rôle particulier. Voici leur présentation accompagnée d’un exemple.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  La première zone sert principalement (je ne vais pas m’étendre) à dire à la carte de
  &lt;strong&gt;
   garder en mémoire quelques informations
  &lt;/strong&gt;
  qui peuvent être : l’emplacement d’un élément connecté à la carte, par exemple une LED en broche 13, ou bien une valeur quelconque qui sera utile dans le programme :
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// déclaration de variables globales (broches...)&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; ledPin = &lt;span class="hljs-number"&gt;13&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
 &lt;li&gt;
  La zone secondaire est l’endroit où l’on va
  &lt;strong&gt;
   initialiser certains paramètres
  &lt;/strong&gt;
  du programme. Par exemple, on pourra dire à la carte qu’elle devra communiquer avec l’ordinateur ou simplement lui dire ce qu’elle devra faire de la LED qui est connectée sur sa broche 13. On peut encore faire d’autres choses, mais nous le verrons plus tard.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// Declaration de la broche en sortie&lt;/span&gt;
    pinMode(ledPin, OUTPUT);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
 &lt;li&gt;
  La dernière zone est la
  &lt;strong&gt;
   zone principale où se déroulera le programme
  &lt;/strong&gt;
  . Tout ce qui va être écrit dans cette zone sera exécuté par la carte, ce sont les actions que la carte fera. Par exemple, c’est ici qu’on pourra lui dire de faire clignoter la LED sur sa broche 13. On pourra également lui demander de faire une opération telle que
  &lt;code&gt;
   2+2
  &lt;/code&gt;
  ou bien d’autres choses encore !
 &lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
    digitalWrite(&lt;span class="hljs-number"&gt;13&lt;/span&gt;, HIGH); &lt;span class="hljs-comment"&gt;// led a l'etat haut&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);            &lt;span class="hljs-comment"&gt;// attendre 1 seconde&lt;/span&gt;
    digitalWrite(&lt;span class="hljs-number"&gt;13&lt;/span&gt;, LOW);  &lt;span class="hljs-comment"&gt;// led a l'etat bas&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);            &lt;span class="hljs-comment"&gt;// attendre 1 seconde&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Exemple de boucle
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 En conclusion, tout (vraiment tout !) ce que va faire la carte est inscrit dans le programme. Sans programme, la carte ne sert à
 &lt;strong&gt;
  rien
 &lt;/strong&gt;
 ! C’est grâce au programme que la carte Arduino va savoir qu’une LED est connectée sur sa broche 13 et ce qu’elle va devoir faire avec, allumer et éteindre la LED alternativement pour la faire clignoter.
&lt;/p&gt;
&lt;h5 id="et-lenvoi"&gt;
 &lt;a aria-hidden="true" href="#et-lenvoi"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Et l’envoi
&lt;/h5&gt;
&lt;p&gt;
 Le programme est envoyé dans la carte lorsque vous cliquez sur le bouton
 &lt;img alt="Bouton d'envoi du programme à la carte" src="./images/uploaded/tuto-arduino-104-le-matériel/bouton-denvoi-du-programme-a-la-carte.jpg"/&gt;
 . Le logiciel Arduino va alors vérifier si le programme ne contient pas d’erreur et ensuite le compiler (le traduire) pour l’envoyer dans la carte :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Au départ, le programme est sous forme de texte, puis il est transformé" src="./images/uploaded/tuto-arduino-104-le-matériel/au-depart-le-programme-est-sous-forme-de-texte-puis-il-est-transforme.jpg"/&gt;
 &lt;figcaption&gt;
  Au départ, le programme est sous forme de texte, puis il est transformé
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 L’envoi du programme est géré par votre ordinateur : le programme passe, sous forme de 0 et de 1, dans le câble USB qui relie votre ordinateur à votre carte et arrive dans la carte. Le reste se passe dans la carte elle-même…
&lt;/p&gt;
&lt;h4 id="réception-du-programme"&gt;
 &lt;a aria-hidden="true" href="#réception-du-programme"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Réception du programme
&lt;/h4&gt;
&lt;p&gt;
 Le programme rentre donc dans la carte en passant en premier par le connecteur USB de celle-ci. Il va alors subir une petite transformation qui permet d’adapter le signal électrique correspondant au programme (oui car le programme transite dans le câble USB sous forme de signal électrique) vers un signal plus approprié pour le microcontrôleur. On passe ainsi d’un signal codé pour la norme USB à un signal codé pour une simple voie série (que l’on étudiera plus tard d’ailleurs). Puis, ce "nouveau" signal est alors intercepté par le microcontrôleur.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Réception du programme" src="./images/uploaded/tuto-arduino-104-le-matériel/reception-du-programme.jpg"/&gt;
 &lt;figcaption&gt;
  Réception du programme
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Tout le reste se passe alors…
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="À l'intérieur du microcontrôleur" src="./images/uploaded/tuto-arduino-104-le-matériel/a-linterieur-du-microcontroleur.jpg"/&gt;
 &lt;figcaption&gt;
  À l'intérieur du microcontrôleur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="À-lintérieur-du-microcontrôleur"&gt;
 &lt;a aria-hidden="true" href="#À-lintérieur-du-microcontrôleur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 À l’intérieur du microcontrôleur
&lt;/h4&gt;
&lt;h5 id="lemplacement-du-programme"&gt;
 &lt;a aria-hidden="true" href="#lemplacement-du-programme"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’emplacement du programme
&lt;/h5&gt;
&lt;p&gt;
 Le microcontrôleur reçoit le programme sous forme de signal électrique sur ses broches Tx et Rx, d’ailleurs disponible sur les broches de la carte (cf. image). Une fois qu’il est reçu, il est intégralement stocké dans une mémoire de type Flash que l’on appellera "la mémoire de programme". Ensuite, lorsque la carte démarre "normalement" (qu’aucun programme n’est en train d’être chargé), le cerveau va alors gérer les données et les répartir dans les différentes mémoires :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  La
  &lt;strong&gt;
   mémoire programme
  &lt;/strong&gt;
  est celle qui va servir à savoir où l’on en est dans le programme, à quelle instruction on est rendu. C’est à dire, en quelque sorte, pointer sur des morceaux des zones 2 et 3 que l’on a vu dans le précédent exemple de programme.
 &lt;/li&gt;
 &lt;li&gt;
  La
  &lt;strong&gt;
   mémoire de données
  &lt;/strong&gt;
  , aussi appelé "RAM" (comme dans votre ordinateur) va stocker les variables telles que le numéro de la broche sur laquelle est connectée une LED, ou bien une simple valeur comme un chiffre, un nombre, des caractères, etc.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Voici un petit synoptique qui vous montre un peu l’intérieur du microcontrôleur (c’est très simplifié !) :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Intérieur du microcontrôleur" src="./images/uploaded/tuto-arduino-104-le-matériel/interieur-du-microcontroleur.jpg"/&gt;
 &lt;figcaption&gt;
  Intérieur du microcontrôleur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="démarrage-du-microcontrôleur"&gt;
 &lt;a aria-hidden="true" href="#démarrage-du-microcontrôleur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Démarrage du microcontrôleur
&lt;/h5&gt;
&lt;p&gt;
 Lorsque le microcontrôleur démarre, il va commencer par lancer un bout de code particulier : le
 &lt;em&gt;
  bootloader
 &lt;/em&gt;
 . C’est ce dernier qui va surveiller si un nouveau programme arrive sur la voie USB et s’il faut donc changer l’ancien en mémoire par le nouveau. Si rien n’arrive, il donne la main à votre programme, celui que vous avez créé. Ce dernier va alors défiler, instruction par instruction. Chaque fois qu’une nouvelle variable sera nécessaire, elle sera mise en RAM pour que l’on ait une mémoire de cette dernière (et supprimée lorsqu’elle n’est plus nécessaire). Sinon, les instructions vont se suivre une par une, dans l’ordre que vous les avez écrites.
&lt;/p&gt;
&lt;p&gt;
 Maintenant que vous connaissez et comprenez le fonctionnement global de la carte Arduino, nous allons pouvoir apprendre les bases du langage Arduino et à terme nous amuser à réaliser des programmes. Allez, hop, chapitre suivant !
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Le langage Arduino (1/2)</title><link href="https://eskimon.fr/tuto-arduino-105-le-langage-arduino-12" rel="alternate"></link><published>2013-12-10T20:03:00+01:00</published><updated>2013-12-10T20:03:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-10:/tuto-arduino-105-le-langage-arduino-12</id><summary type="html">&lt;p&gt;
 A présent que vous avez une vision globale sur le fonctionnement de la carte Arduino, nous allons pouvoir apprendre à programmer avant de nous lancer dans la réalisation de programmes très simples pour débuter ! Pour pouvoir programmer notre carte, il nous faut trois choses :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Un ordinateur
 &lt;/li&gt;
 &lt;li&gt;
  Une carte Arduino
 &lt;/li&gt;
 &lt;li&gt;
  Et …&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;
 A présent que vous avez une vision globale sur le fonctionnement de la carte Arduino, nous allons pouvoir apprendre à programmer avant de nous lancer dans la réalisation de programmes très simples pour débuter ! Pour pouvoir programmer notre carte, il nous faut trois choses :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Un ordinateur
 &lt;/li&gt;
 &lt;li&gt;
  Une carte Arduino
 &lt;/li&gt;
 &lt;li&gt;
  Et connaitre le langage Arduino
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 C’est ce dernier point qu’il nous faut acquérir. Le but même de ce chapitre est de vous apprendre à programmer avec le langage Arduino. Cependant, ce n’est qu’un support de cours que vous pourrez parcourir lorsque vous devrez programmer tout seul votre carte. En effet, c’est en manipulant que l’on apprend, ce qui implique que votre apprentissage en programmation sera plus conséquent dans les prochains chapitres que dans ce cours même.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Le langage Arduino est très proche du C et du C++.
Pour ceux dont la connaissance de ces langages est fondée, ne vous sentez pas obligé de lire les deux chapitres sur le langage Arduino. Bien qu’il y ait des points quelques peu importants.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#la-syntaxe-du-langage"&gt;
    La syntaxe du langage
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#le-code-minimal"&gt;
      Le code minimal
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#la-fonction-setup"&gt;
       La fonction setup
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-instructions"&gt;
       Les instructions
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-points-virgules"&gt;
       Les points virgules
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-accolades"&gt;
       Les accolades
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-commentaires"&gt;
       Les commentaires
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-accents"&gt;
       Les accents
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#les-variables"&gt;
    Les variables
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#une-variable-quest-ce-que-cest"&gt;
      Une variable, qu’est ce que c’est ?
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-nom-dune-variable"&gt;
       Le nom d’une variable
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#définir-une-variable"&gt;
     Définir une variable
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#les-variables-booléennes"&gt;
     Les variables booléennes
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#les-opérations-simples"&gt;
      Les opérations "simples"
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#laddition"&gt;
       L’addition
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-soustraction"&gt;
       La soustraction
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-multiplication"&gt;
       La multiplication
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-division"&gt;
       La division
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-modulo"&gt;
       Le modulo
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#quelques-opérations-bien-pratiques"&gt;
      Quelques opérations bien pratiques
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#lincrémentation"&gt;
       L’incrémentation
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-décrémentation"&gt;
       La décrémentation
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-opérations-composées"&gt;
       Les opérations composées
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#lopération-de-bascule-ou-inversion-détat"&gt;
     L’opération de bascule (ou "inversion d’état")
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#les-conditions"&gt;
    Les conditions
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#quest-ce-quune-condition"&gt;
     Qu’est-ce qu’une condition ?
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#quelques-symboles"&gt;
     Quelques symboles
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#ifelse"&gt;
      If…else
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#if"&gt;
       if
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#else"&gt;
       else
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#else-if"&gt;
       else if
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#les-opérateurs-logiques"&gt;
      Les opérateurs logiques
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#et"&gt;
       ET
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#ou"&gt;
       OU
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#non"&gt;
       NON
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#switch"&gt;
     Switch
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#la-condition-ternaire-ou-condensée"&gt;
     La condition ternaire ou condensée
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="la-syntaxe-du-langage"&gt;
 &lt;a aria-hidden="true" href="#la-syntaxe-du-langage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La syntaxe du langage
&lt;/h3&gt;
&lt;p&gt;
 La syntaxe d’un langage de programmation est l’ensemble des
 &lt;em&gt;
  règles d’écriture
 &lt;/em&gt;
 liées à ce langage. On va donc voir dans ce sous-chapitre les règles qui régissent l’écriture du langage Arduino.
&lt;/p&gt;
&lt;h4 id="le-code-minimal"&gt;
 &lt;a aria-hidden="true" href="#le-code-minimal"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le code minimal
&lt;/h4&gt;
&lt;p&gt;
 Avec Arduino, nous devons utiliser un
 &lt;em&gt;
  code minimal
 &lt;/em&gt;
 lorsque l’on crée un programme. Ce code permet de diviser le programme que nous allons créer en deux grosses parties.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// fonction d'initialisation de la carte&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// contenu de l'initialisation&lt;/span&gt;
}

&lt;span class="hljs-comment"&gt;// fonction principale, elle se répète (s’exécute) à l'infini&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// contenu de votre programme&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Le code minimal d’un programme Arduino
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Vous avez donc devant vous le code minimal qu’il faut insérer dans votre programme.
Mais que peut-il bien signifier pour quelqu’un qui n’a jamais programmé ?
&lt;/p&gt;
&lt;h5 id="la-fonction-setup"&gt;
 &lt;a aria-hidden="true" href="#la-fonction-setup"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La fonction
 &lt;code&gt;
  setup
 &lt;/code&gt;
&lt;/h5&gt;
&lt;p&gt;
 Dans ce code se trouvent deux fonctions. Les fonctions sont en fait
 &lt;em&gt;
  des portions de code
 &lt;/em&gt;
 .
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// fonction d'initialisation de la carte&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// contenu de l'initialisation&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// on écrit le code à l'intérieur&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Zoom sur la fonction setup
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Cette fonction
 &lt;strong&gt;
  setup()
 &lt;/strong&gt;
 est appelée
 &lt;em&gt;
  une seule fois
 &lt;/em&gt;
 lorsque le programme commence.
C’est pourquoi c’est dans cette fonction que l’on va écrire le code qui n’a besoin d’être exécuté une seule fois.
On appelle cette fonction :
 &lt;strong&gt;
  fonction d’initialisation
 &lt;/strong&gt;
 . On y retrouvera la mise en place des différentes sorties et quelques autres réglages. C’est un peu le check-up de démarrage. Imaginez un pilote d’avion dans sa cabine qui fait l’inventaire
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 :
 &lt;em&gt;
  - patte 2 en sortie, état haut ? - OK - timer 3 à 15 millisecondes ? - OK …
 &lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
 Une fois que l’on a initialisé le programme il faut ensuite créer son "cœur", autrement dit le programme en lui même.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// fonction principale, elle se répète (s’exécute) à l'infini&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// contenu de votre programme&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Zoom sur la fonction principale
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 C’est donc dans cette fonction
 &lt;strong&gt;
  loop()
 &lt;/strong&gt;
 où l’on va écrire le contenu du programme. Il faut savoir que cette fonction est appelée en permanence, c’est-à-dire qu’elle est exécutée une fois, puis lorsque son exécution est terminée, on la ré-exécute et encore et encore. On parle de
 &lt;strong&gt;
  boucle infinie
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   A titre informatif, on n’est pas obligé d’écrire quelque chose dans ces deux fonctions. En revanche, il est
   &lt;strong&gt;
    obligatoire
   &lt;/strong&gt;
   de les écrire, même si elles ne contiennent aucun code !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/MNQfmoLk1Gs" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="les-instructions"&gt;
 &lt;a aria-hidden="true" href="#les-instructions"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les instructions
&lt;/h5&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Dans ces fonctions, on écrit quoi ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 C’est justement l’objet de ce paragraphe. Dans votre liste pour le diner de ce soir, vous écrivez les tâches importantes qui vous attendent. Ce sont des
 &lt;strong&gt;
  instructions
 &lt;/strong&gt;
 . Les instructions sont des lignes de code qui disent au programme : "fait ceci, fait cela, …" C’est tout bête mais très puissant car c’est ce qui va orchestrer notre programme.
&lt;/p&gt;
&lt;h5 id="les-points-virgules"&gt;
 &lt;a aria-hidden="true" href="#les-points-virgules"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les points virgules
&lt;/h5&gt;
&lt;p&gt;
 Les points virgules terminent les instructions. Si par exemple je dis dans mon programme : "appelle la fonction
 &lt;em&gt;
  couperDuSaucisson"
 &lt;/em&gt;
 &lt;em&gt;
  je dois mettre un point virgule après l’appel de cette fonction
 &lt;/em&gt;
 .
&lt;/p&gt;
&lt;div class="custom-block alert alert-danger"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Les points virgules (
   &lt;strong&gt;
    ;
   &lt;/strong&gt;
   ) sont synonymes d’erreurs car il arrive très souvent de les oublier à la fin des instructions.
Par conséquent le code ne marche pas et la recherche de l’erreur peut nous prendre un temps conséquent ! Donc faites bien attention.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="les-accolades"&gt;
 &lt;a aria-hidden="true" href="#les-accolades"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les accolades
&lt;/h5&gt;
&lt;p&gt;
 Les accolades sont les "conteneurs" du code du programme. Elles sont propres aux fonctions, aux conditions et aux boucles. Les instructions du programme sont écrites à l’intérieur de ces accolades.
&lt;/p&gt;
&lt;p&gt;
 Parfois elles ne sont pas obligatoires dans les
 &lt;em&gt;
  conditions
 &lt;/em&gt;
 (nous allons voir plus bas ce que c’est), mais je recommande de les
 &lt;strong&gt;
  mettre tout le temps
 &lt;/strong&gt;
 ! Cela rendra plus lisible votre programme.
&lt;/p&gt;
&lt;h5 id="les-commentaires"&gt;
 &lt;a aria-hidden="true" href="#les-commentaires"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les commentaires
&lt;/h5&gt;
&lt;p&gt;
 Pour finir, on va voir ce qu’est un commentaire. J’en ai déjà mis dans les exemples de codes. Ce sont des lignes de codes qui seront ignorées par le programme. Elles ne servent en rien lors de l’exécution du programme.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Mais alors c’est inutile ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Non car cela va nous permettre à nous et aux programmeurs qui lirons votre code (s’il y en a) de savoir ce que signifie la ligne de code que vous avez écrite. C’est très important de mettre des commentaires et cela permet aussi de reprendre un programme laissé dans l’oubli plus facilement ! Si par exemple vous connaissez mal une instruction que vous avez écrite dans votre programme, vous mettez une ligne de commentaire pour vous rappeler la prochaine fois que vous lirez votre programme ce que la ligne signifie.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// cette ligne est un commentaire sur UNE SEULE ligne&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Ligne unique de commentaire
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;/*cette ligne est un commentaire, sur PLUSIEURS lignes
qui sera ignoré par le programme, mais pas par celui qui lit le code */&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Commentaire sur plusieurs lignes
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="les-accents"&gt;
 &lt;a aria-hidden="true" href="#les-accents"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les accents
&lt;/h5&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Il est formellement interdit de mettre des accents en programmation. Sauf dans les commentaires.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="les-variables"&gt;
 &lt;a aria-hidden="true" href="#les-variables"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les variables
&lt;/h3&gt;
&lt;p&gt;
 Nous l’avons vu, dans un microcontrôleur, il y a plusieurs types de mémoire.
Nous nous occuperons seulement de la mémoire "vive" (RAM) et de la mémoire "morte" (EEPROM).
Je vais vous poser une énigme. Imaginons que vous avez connecté un bouton poussoir sur une broche de votre carte Arduino.
Comment allez-vous stocker l’état du bouton (appuyé ou éteint) ?
&lt;/p&gt;
&lt;h4 id="une-variable-quest-ce-que-cest"&gt;
 &lt;a aria-hidden="true" href="#une-variable-quest-ce-que-cest"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Une variable, qu’est ce que c’est ?
&lt;/h4&gt;
&lt;p&gt;
 Une
 &lt;strong&gt;
  variable est un nombre
 &lt;/strong&gt;
 . Ce nombre est stocké dans un espace de la mémoire vive (RAM) du microcontrôleur.
La manière qui permet de les stocker est semblable à celle utilisée pour ranger des chaussures : dans un casier numéroté.
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="table-wrapper"&gt;
  &lt;table class=" table table-bordered table-striped"&gt;
   &lt;thead&gt;
    &lt;tr&gt;
     &lt;th colspan="10" rowspan="1"&gt;
      &lt;p&gt;
       Chaussures rangées dans des cases numérotées
      &lt;/p&gt;
     &lt;/th&gt;
    &lt;/tr&gt;
   &lt;/thead&gt;
   &lt;tbody&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       1
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       2
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       3
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       4
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       5
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       6
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       7
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       8
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       9
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       10
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       11
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       12
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       13
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       14
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       15
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       16
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       17
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       18
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       19
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       20
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       21
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       22
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       23
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       24
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       25
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       26
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       27
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       28
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       29
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       30
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       31
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       32
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       33
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       34
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       35
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       36
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       37
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       38
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       39
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       40
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       41
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       42
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       43
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       44
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       45
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       46
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       47
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       48
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       49
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       50
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       51
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       52
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       53
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       54
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       55
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       56
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       57
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       58
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       59
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       60
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
   &lt;/tbody&gt;
  &lt;/table&gt;
 &lt;/div&gt;
 &lt;p&gt;
  Table: Un tableau est un ensemble de case
 &lt;/p&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Une variable est un nombre, c’est tout ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Ce nombre a la particularité de changer de valeur. Étrange n’est-ce pas ? Et bien pas tant que ça, car une variable est en fait le
 &lt;strong&gt;
  conteneur
 &lt;/strong&gt;
 du nombre en question. Et ce conteneur va être stocké dans une case de la mémoire. Si on matérialise cette explication par un schéma, cela donnerait :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;p&gt;
  &lt;strong&gt;
   nombre =&amp;gt; variable =&amp;gt; mémoire
  &lt;/strong&gt;
 &lt;/p&gt;
&lt;/div&gt;
&lt;ul&gt;
 &lt;li&gt;
  le symbole "=&amp;gt;" signifiant : "est contenu dans…"
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="le-nom-dune-variable"&gt;
 &lt;a aria-hidden="true" href="#le-nom-dune-variable"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le nom d’une variable
&lt;/h5&gt;
&lt;p&gt;
 Le nom de variable accepte quasiment tous les caractères sauf :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   .
  &lt;/code&gt;
  (le point)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   ,
  &lt;/code&gt;
  (la virgule)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   é
  &lt;/code&gt;
  ,
  &lt;code&gt;
   à
  &lt;/code&gt;
  ,
  &lt;code&gt;
   ç
  &lt;/code&gt;
  ,
  &lt;code&gt;
   è
  &lt;/code&gt;
  (les accents)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Bon je vais pas tous les donner, il n’accepte que l’alphabet alphanumérique ([a-z], [A-Z], [0–9]) et _ (underscore). Il ne doit
 &lt;strong&gt;
  pas
 &lt;/strong&gt;
 commencer par un chiffre.
&lt;/p&gt;
&lt;h4 id="définir-une-variable"&gt;
 &lt;a aria-hidden="true" href="#définir-une-variable"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Définir une variable
&lt;/h4&gt;
&lt;p&gt;
 Si on donne un nombre à notre programme, il ne sait pas si c’est une variable ou pas. Il faut le lui indiquer. Pour cela, on donne un
 &lt;strong&gt;
  type
 &lt;/strong&gt;
 aux variables. Oui, car il existe plusieurs types de variables ! Par exemple la variable "x" vaut 4 :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;x = &lt;span class="hljs-number"&gt;4&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Assignation à une variable
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Et bien ce code ne fonctionnerait pas car il ne suffit pas !
En effet, il existe une multitude de nombres : les nombres entiers, les nombres décimaux, …
C’est pour cela qu’il faut assigner une variable à un type. Voilà les types de variables les plus répandus :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Type
      &lt;/th&gt;
      &lt;th&gt;
       Quel nombre il stocke ?
      &lt;/th&gt;
      &lt;th&gt;
       Valeurs maximales du nombre stocké
      &lt;/th&gt;
      &lt;th&gt;
       Nombre sur X bits
      &lt;/th&gt;
      &lt;th&gt;
       Nombre d’octets
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        int
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       entier
      &lt;/td&gt;
      &lt;td&gt;
       -32 768
       &lt;strong&gt;
        à
       &lt;/strong&gt;
       +32 767
      &lt;/td&gt;
      &lt;td&gt;
       16 bits
      &lt;/td&gt;
      &lt;td&gt;
       2 octets
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        long
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       entier
      &lt;/td&gt;
      &lt;td&gt;
       -2 147 483 648
       &lt;strong&gt;
        à
       &lt;/strong&gt;
       +2 147 483 647
      &lt;/td&gt;
      &lt;td&gt;
       32 bits
      &lt;/td&gt;
      &lt;td&gt;
       4 octets
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        char
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       entier
      &lt;/td&gt;
      &lt;td&gt;
       -128
       &lt;strong&gt;
        à
       &lt;/strong&gt;
       +127
      &lt;/td&gt;
      &lt;td&gt;
       8 bits
      &lt;/td&gt;
      &lt;td&gt;
       1 octets
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        float
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       décimale
      &lt;/td&gt;
      &lt;td&gt;
       -3.4 x
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;msup&gt;
              &lt;mn&gt;
               0
              &lt;/mn&gt;
              &lt;mrow&gt;
               &lt;mn&gt;
                3
               &lt;/mn&gt;
               &lt;mn&gt;
                8
               &lt;/mn&gt;
              &lt;/mrow&gt;
             &lt;/msup&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             10^{38}
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.8141079999999999em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mord"&gt;
             0
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
                &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    3
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    8
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       &lt;strong&gt;
        à
       &lt;/strong&gt;
       +3.4 x
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;msup&gt;
              &lt;mn&gt;
               0
              &lt;/mn&gt;
              &lt;mrow&gt;
               &lt;mn&gt;
                3
               &lt;/mn&gt;
               &lt;mn&gt;
                8
               &lt;/mn&gt;
              &lt;/mrow&gt;
             &lt;/msup&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             10^{38}
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.8141079999999999em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mord"&gt;
             0
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
                &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    3
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    8
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/td&gt;
      &lt;td&gt;
       32 bits
      &lt;/td&gt;
      &lt;td&gt;
       4 octets
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        double
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       décimale
      &lt;/td&gt;
      &lt;td&gt;
       -3.4 x
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;msup&gt;
              &lt;mn&gt;
               0
              &lt;/mn&gt;
              &lt;mrow&gt;
               &lt;mn&gt;
                3
               &lt;/mn&gt;
               &lt;mn&gt;
                8
               &lt;/mn&gt;
              &lt;/mrow&gt;
             &lt;/msup&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             10^{38}
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.8141079999999999em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mord"&gt;
             0
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
                &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    3
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    8
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
       &lt;strong&gt;
        à
       &lt;/strong&gt;
       +3.4 x
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;msup&gt;
              &lt;mn&gt;
               0
              &lt;/mn&gt;
              &lt;mrow&gt;
               &lt;mn&gt;
                3
               &lt;/mn&gt;
               &lt;mn&gt;
                8
               &lt;/mn&gt;
              &lt;/mrow&gt;
             &lt;/msup&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             10^{38}
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.8141079999999999em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:0.8141079999999999em;vertical-align:0em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            &lt;span class="mord"&gt;
             0
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.8141079999999999em;"&gt;
                &lt;span style="top:-3.063em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   &lt;span class="mord mtight"&gt;
                    3
                   &lt;/span&gt;
                   &lt;span class="mord mtight"&gt;
                    8
                   &lt;/span&gt;
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/td&gt;
      &lt;td&gt;
       32 bits
      &lt;/td&gt;
      &lt;td&gt;
       4 octets
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Les types de variables
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 Par exemple, si notre variable "x" ne prend que des valeurs entières, on utilisera les types
 &lt;strong&gt;
  int
 &lt;/strong&gt;
 ,
 &lt;strong&gt;
  long
 &lt;/strong&gt;
 , ou
 &lt;strong&gt;
  char
 &lt;/strong&gt;
 .
Si maintenant la variable "x" ne dépasse pas la valeur 64 ou 87, alors on utilisera le type
 &lt;strong&gt;
  char
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; x = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Assignation avec un type
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si en revanche x = 260, alors on utilisera le type supérieur (qui accepte une plus grande quantité de nombre) à
   &lt;strong&gt;
    char
   &lt;/strong&gt;
   , autrement dit
   &lt;strong&gt;
    int
   &lt;/strong&gt;
   ou
   &lt;strong&gt;
    long
   &lt;/strong&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Mais t’es pas malin, pour éviter les dépassements de valeur ont met tout dans des double ou long !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Oui, mais NON. Un microcontrôleur, ce n’est pas un ordinateur 2GHz multicore, 4Go de RAM !
Ici on parle d’un système qui fonctionne avec un CPU à 16MHz (soit 0,016 GHz) et 2 Ko de SRAM pour la mémoire vive.
Donc deux raisons font qu’il faut choisir ses variables de manière judicieuse :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  La RAM n’est pas extensible, quand y en a plus, il y en a plus !
 &lt;/li&gt;
 &lt;li&gt;
  Le processeur est de type 8 bits (sur Arduino UNO), donc il est optimisé pour faire des traitements sur des variables de taille 8 bits, un traitement sur une variable 32 bits prendra donc (beaucoup) plus de temps !
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Si à présent notre variable "x" ne prend jamais une valeur négative (-20, -78, …), alors on utilisera un type
 &lt;strong&gt;
  non-signé
 &lt;/strong&gt;
 .
C’est à dire, dans notre cas, un
 &lt;strong&gt;
  char
 &lt;/strong&gt;
 dont la valeur n’est plus de -128 à +127, mais de 0 à 255. Voici le tableau des types non signés, on repère ces types par le mot
 &lt;strong&gt;
  unsigned
 &lt;/strong&gt;
 (de l’anglais : non-signé) qui les précède :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Type
      &lt;/th&gt;
      &lt;th&gt;
       Quel nombre il stocke ?
      &lt;/th&gt;
      &lt;th&gt;
       Valeurs maximales du nombre stocké
      &lt;/th&gt;
      &lt;th&gt;
       Nombre sur X bits
      &lt;/th&gt;
      &lt;th&gt;
       Nombre d’octets
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        unsigned
       &lt;/strong&gt;
       char
      &lt;/td&gt;
      &lt;td&gt;
       entier non négatif
      &lt;/td&gt;
      &lt;td&gt;
       0 à 255
      &lt;/td&gt;
      &lt;td&gt;
       8 bits
      &lt;/td&gt;
      &lt;td&gt;
       1 octet
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        unsigned
       &lt;/strong&gt;
       int
      &lt;/td&gt;
      &lt;td&gt;
       entier non négatif
      &lt;/td&gt;
      &lt;td&gt;
       0 à 65 535
      &lt;/td&gt;
      &lt;td&gt;
       16 bits
      &lt;/td&gt;
      &lt;td&gt;
       2 octets
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        unsigned
       &lt;/strong&gt;
       long
      &lt;/td&gt;
      &lt;td&gt;
       entier non négatif
      &lt;/td&gt;
      &lt;td&gt;
       0 à 4 294 967 295
      &lt;/td&gt;
      &lt;td&gt;
       32 bits
      &lt;/td&gt;
      &lt;td&gt;
       4 octets
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Les types non signés
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 Une des particularités du langage Arduino est qu’il accepte un nombre plus important de types de variables. Je vous les liste dans ce tableau :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Type
      &lt;/th&gt;
      &lt;th&gt;
       Quel nombre il stocke ?
      &lt;/th&gt;
      &lt;th&gt;
       Valeurs maximales du nombre stocké
      &lt;/th&gt;
      &lt;th&gt;
       Nombre sur X bits
      &lt;/th&gt;
      &lt;th&gt;
       Nombre d’octets
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        byte
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       entier non négatif
      &lt;/td&gt;
      &lt;td&gt;
       0 à 255
      &lt;/td&gt;
      &lt;td&gt;
       8 bits
      &lt;/td&gt;
      &lt;td&gt;
       1 octet
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        word
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       entier non négatif
      &lt;/td&gt;
      &lt;td&gt;
       0 à 65535
      &lt;/td&gt;
      &lt;td&gt;
       16 bits
      &lt;/td&gt;
      &lt;td&gt;
       2 octets
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &lt;strong&gt;
        boolean
       &lt;/strong&gt;
      &lt;/td&gt;
      &lt;td&gt;
       entier non négatif
      &lt;/td&gt;
      &lt;td&gt;
       0 à 1
      &lt;/td&gt;
      &lt;td&gt;
       1 bit
      &lt;/td&gt;
      &lt;td&gt;
       1 octet
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Les types propres à Arduino
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Pour votre information, vous pouvez retrouver ces tableaux sur
   &lt;a href="http://arduino.cc/fr/Main/SyntheseTypesDonnees"&gt;
    cette page
   &lt;/a&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/FQARbcFj9h4" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/2vqjHOfksPE" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="les-variables-booléennes"&gt;
 &lt;a aria-hidden="true" href="#les-variables-booléennes"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les variables booléennes
&lt;/h4&gt;
&lt;p&gt;
 Les variables
 &lt;strong&gt;
  booléennes
 &lt;/strong&gt;
 sont des variables qui ne peuvent prendre
 &lt;em&gt;
  que deux valeurs
 &lt;/em&gt;
 : ou VRAI ou FAUX. Elles sont utilisées notamment dans les boucles et les conditions. Nous verrons pourquoi. Une variable booléenne peut être définie de plusieurs manières :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// variable est fausse car elle vaut FALSE, du terme anglais "faux"&lt;/span&gt;
boolean variable = FALSE;
&lt;span class="hljs-comment"&gt;// variable est vraie car elle vaut TRUE, du terme anglais "vrai"&lt;/span&gt;
boolean variable = TRUE;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Les variables booléennes
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Quand une variable vaut "0", on peut considérer cette variable comme une variable booléenne, elle est donc fausse. En revanche, lorsqu’elle vaut "1" ou n’importe quelle valeurs différente de zéro, on peut aussi la considérer comme une variable booléenne, elle est donc vraie. Voilà un exemple :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// variable est fausse car elle vaut 0&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; variable = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// variable est vraie car elle vaut 1&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; variable = &lt;span class="hljs-number"&gt;1&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// variable est vraie car sa valeur est différente de 0&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; variable = &lt;span class="hljs-number"&gt;42&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Un booléen codé avec des entiers
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Le langage Arduino accepte aussi une troisième forme d’écriture (qui lui sert pour utiliser les broches de sorties du microcontrôleur) :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// variable est à l'état logique bas (= traduction de "low"), donc 0&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; variable = LOW;
&lt;span class="hljs-comment"&gt;// variable est à l'état logique haut (= traduction de "high"), donc 1&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; variable = HIGH;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  l’utilisation des constantes LOW et HIGH
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Nous nous servirons de cette troisième écriture pour allumer et éteindre des lumières…
&lt;/p&gt;
&lt;h4 id="les-opérations-simples"&gt;
 &lt;a aria-hidden="true" href="#les-opérations-simples"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les opérations "simples"
&lt;/h4&gt;
&lt;p&gt;
 On va voir à présent les opérations qui sont possibles avec le langage Arduino (addition, multiplication, …).
&lt;/p&gt;
&lt;p&gt;
 Je vous vois tout de suite dire : "Mais pourquoi on fait ça, on l’a fait en primaire !
 &lt;img alt=":colere2:" class="smiley" src="./static/smileys/mechant.png"/&gt;
 " Et bien parce que c’est quelque chose d’essentiel, car on pourra ensuite faire des opérations avec des variables.
Vous verrez, vous changerez d’avis après avoir lu la suite !
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;h5 id="laddition"&gt;
 &lt;a aria-hidden="true" href="#laddition"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’addition
&lt;/h5&gt;
&lt;p&gt;
 Vous savez ce que c’est, pas besoin d’explications. Voyons comment on fait cette opération avec le langage Arduino. Prenons la même variable que tout à l’heure :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// définition de la variable x&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; x = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// on change la valeur de x par une opération simple&lt;/span&gt;
x = &lt;span class="hljs-number"&gt;12&lt;/span&gt; + &lt;span class="hljs-number"&gt;3&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// x vaut maintenant 12 + 3 = 15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  L’addition
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Faisons maintenant une addition de variables :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// définition de la variable x et assignation à la valeur 38&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; x = &lt;span class="hljs-number"&gt;38&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; y = &lt;span class="hljs-number"&gt;10&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; z = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// faisons une addition&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// on a donc z = 38 + 10 = 48&lt;/span&gt;
z = x + y;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Addition de deux variables
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="la-soustraction"&gt;
 &lt;a aria-hidden="true" href="#la-soustraction"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La soustraction
&lt;/h5&gt;
&lt;p&gt;
 On peut reprendre les exemples précédents, en faisant une soustraction :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt; /définition de la variable x
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; x = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// on change la valeur de x par une opération simple&lt;/span&gt;
x = &lt;span class="hljs-number"&gt;12&lt;/span&gt; - &lt;span class="hljs-number"&gt;3&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// x vaut maintenant 12 - 3 = 9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  La soustraction
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; x = &lt;span class="hljs-number"&gt;38&lt;/span&gt;;   &lt;span class="hljs-comment"&gt;// définition de la variable x et assignation à la valeur 38&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; y = &lt;span class="hljs-number"&gt;10&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; z = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

z = x - y;    &lt;span class="hljs-comment"&gt;// on a donc z = 38 - 10 = 28&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Soustraction de deux variables
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="la-multiplication"&gt;
 &lt;a aria-hidden="true" href="#la-multiplication"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La multiplication
&lt;/h5&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; x = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; y = &lt;span class="hljs-number"&gt;10&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; z = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

x = &lt;span class="hljs-number"&gt;12&lt;/span&gt; * &lt;span class="hljs-number"&gt;3&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// x vaut maintenant 12 * 3 = 36&lt;/span&gt;

z = x * y; &lt;span class="hljs-comment"&gt;// on a donc z = 36 * 10 = 360&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// on peut aussi multiplier (ou une autre opération) un nombre et une variable :&lt;/span&gt;

z = z * ( &lt;span class="hljs-number"&gt;1&lt;/span&gt; / &lt;span class="hljs-number"&gt;10&lt;/span&gt; ); &lt;span class="hljs-comment"&gt;// soit z = 360 * 0.1 = 36&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  la multiplication
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="la-division"&gt;
 &lt;a aria-hidden="true" href="#la-division"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La division
&lt;/h5&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; x = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; y = &lt;span class="hljs-number"&gt;15&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; z = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

x = &lt;span class="hljs-number"&gt;12&lt;/span&gt; / &lt;span class="hljs-number"&gt;2&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// x vaut maintenant 12 / 2 = 6&lt;/span&gt;

z = y / x; &lt;span class="hljs-comment"&gt;// on a donc z = 15 / 6 = 2.5&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  La division
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Attention cependant, si vous essayer de stocker le résultat d’une division dans une variable de type char, int ou long, le résultat sera stocké sous la forme d’un entier arrondi au nombre inférieur. Par exemple dans le code précédent si on met z dans un int on aura :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; x = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; y = &lt;span class="hljs-number"&gt;15&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; z = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

x = &lt;span class="hljs-number"&gt;12&lt;/span&gt; / &lt;span class="hljs-number"&gt;2&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// x vaut maintenant 12 / 2 = 6&lt;/span&gt;

z = y / x; &lt;span class="hljs-comment"&gt;// on a donc z = 15 / 6 = 2 !&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Arrondi au nombre inférieur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="le-modulo"&gt;
 &lt;a aria-hidden="true" href="#le-modulo"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le modulo
&lt;/h5&gt;
&lt;p&gt;
 Après cette brève explication sur les opérations de base, passons à quelque chose de plus sérieux. Le modulo est une opération de base, certes moins connue que les autres. Cette opération permet d’obtenir le reste d’une division.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-number"&gt;18&lt;/span&gt; % &lt;span class="hljs-number"&gt;6&lt;/span&gt; &lt;span class="hljs-comment"&gt;// le reste de l'opération est 0, car il y a 3*6 dans 18 donc 18 - 18 = 0&lt;/span&gt;
&lt;span class="hljs-number"&gt;18&lt;/span&gt; % &lt;span class="hljs-number"&gt;5&lt;/span&gt; &lt;span class="hljs-comment"&gt;// le reste de l'opération est 3, car il y a 3*5 dans 18 donc 18 - 15 = 3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Le modulo
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Le modulo est utilisé grâce au symbole %. C’est tout ce qu’il faut retenir. Autre exemple :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; x = &lt;span class="hljs-number"&gt;24&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; y = &lt;span class="hljs-number"&gt;6&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; z = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

z = x % y; &lt;span class="hljs-comment"&gt;// on a donc z = 24 % 6 = 0 (car 6 * 4 = 24)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  le modulo entre deux variables
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Le modulo ne peut-être fait que sur des nombres entiers
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="quelques-opérations-bien-pratiques"&gt;
 &lt;a aria-hidden="true" href="#quelques-opérations-bien-pratiques"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Quelques opérations bien pratiques
&lt;/h4&gt;
&lt;p&gt;
 Voyons un peu d’autres opérations qui facilitent parfois l’écriture du code.
&lt;/p&gt;
&lt;h5 id="lincrémentation"&gt;
 &lt;a aria-hidden="true" href="#lincrémentation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’incrémentation
&lt;/h5&gt;
&lt;p&gt;
 Derrière ce nom barbare se cache une simple opération d’addition.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;var = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
var++; &lt;span class="hljs-comment"&gt;// c'est cette ligne de code qui nous intéresse&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Incrémenter
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 "var++;" revient à écrire : "var = var + 1;" En fait, on ajoute le chiffre 1 à la valeur de
 &lt;em&gt;
  var
 &lt;/em&gt;
 .
Et si on répète le code un certain nombre de fois, par exemple 30, et bien on aura
 &lt;em&gt;
  var
 &lt;/em&gt;
 = 30.
&lt;/p&gt;
&lt;h5 id="la-décrémentation"&gt;
 &lt;a aria-hidden="true" href="#la-décrémentation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La décrémentation
&lt;/h5&gt;
&lt;p&gt;
 C’est l’inverse de l’incrémentation. Autrement dit, on enlève le chiffre 1 à la valeur de var.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;var = &lt;span class="hljs-number"&gt;30&lt;/span&gt;;
var--; &lt;span class="hljs-comment"&gt;// décrémentation de var&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  La décrémentation
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="les-opérations-composées"&gt;
 &lt;a aria-hidden="true" href="#les-opérations-composées"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les opérations composées
&lt;/h5&gt;
&lt;p&gt;
 Parfois il devient assez lassant de réécrire les mêmes chose et l’on sait que les programmeurs sont des gros fainéants !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Il existe des raccourcis lorsque l’on veut effectuer une opération sur une même variable :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; x, y;

x += y; &lt;span class="hljs-comment"&gt;// correspond à x = x + y;&lt;/span&gt;
x -= y; &lt;span class="hljs-comment"&gt;// correspond à x = x - y;&lt;/span&gt;
x *= y; &lt;span class="hljs-comment"&gt;// correspond à x = x * y;&lt;/span&gt;
x /= y; &lt;span class="hljs-comment"&gt;// correspond à x = x / y;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  des opérations composées
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Avec un exemple, cela donnerait :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; var = &lt;span class="hljs-number"&gt;10&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// opération 1&lt;/span&gt;
var = var + &lt;span class="hljs-number"&gt;6&lt;/span&gt;;
var += &lt;span class="hljs-number"&gt;6&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// var = 16&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// opération 2&lt;/span&gt;
var = var - &lt;span class="hljs-number"&gt;6&lt;/span&gt;;
var -= &lt;span class="hljs-number"&gt;6&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// var = 4&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// opération 3&lt;/span&gt;
var = var * &lt;span class="hljs-number"&gt;6&lt;/span&gt;;
var *= &lt;span class="hljs-number"&gt;6&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// var = 60&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// opération 4&lt;/span&gt;
var = var / &lt;span class="hljs-number"&gt;5&lt;/span&gt;;
var /= &lt;span class="hljs-number"&gt;5&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// var = 2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Opérations composées : détails
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="lopération-de-bascule-ou-inversion-détat"&gt;
 &lt;a aria-hidden="true" href="#lopération-de-bascule-ou-inversion-détat"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’opération de bascule (ou "inversion d’état")
&lt;/h4&gt;
&lt;p&gt;
 Un jour, pour le projet du BAC, je devais (ou plutôt "je voulais") améliorer un code qui servait à programmer un module d’une centrale de gestion domestique. Mon but était d’afficher un choix à l’utilisateur sur un écran.
Pour ce faire, il fallait que je réalise une
 &lt;strong&gt;
  bascule programmée
 &lt;/strong&gt;
 (c’est comme ça que je la nomme maintenant).
Et après maintes recherches et tests, j’ai réussi à trouver ! Et il s’avère que cette "opération", si l’on peut l’appeler ainsi, est très utile dans certains cas. Nous l’utiliserons notamment lorsque l’on voudra faire clignoter une lumière. Sans plus attendre, voilà cette astuce :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// on définit une variable x qui ne peut prendre que la valeur 0 ou 1&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// (soit vraie ou fausse)&lt;/span&gt;
boolean x = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

x = &lt;span class="hljs-number"&gt;1&lt;/span&gt; - x;  &lt;span class="hljs-comment"&gt;// c'est la toute l'astuce du programme !&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  La bascule
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Analysons cette instruction. A chaque exécution du programme (oui, j’ai omis de vous le dire, il se répète jusqu’à l’infini), la variable x va changer de valeur :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  1
  &lt;sup&gt;
   er
  &lt;/sup&gt;
  temps : x = 1 - x soit x = 1 - 0 donc x = 1
 &lt;/li&gt;
 &lt;li&gt;
  2
  &lt;sup&gt;
   e
  &lt;/sup&gt;
  temps : x = 1 - x or x vaut maintenant 1 donc x = 1 - 1 soit x = 0
 &lt;/li&gt;
 &lt;li&gt;
  3
  &lt;sup&gt;
   e
  &lt;/sup&gt;
  temps : x vaut 0 donc x = 1 - 0 soit x = 1
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Ce code se répète donc et à chaque répétition, la variable x change de valeur et passe de 0 à 1, de 1 à 0, de 0 à 1, etc. Il agit bien comme une bascule qui change la valeur d’une variable booléenne. En mode console cela donnerait quelque chose du genre (n’essayez pas cela ne marchera pas, c’est un exemple) :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-bash"&gt;x = 0
x = 1
x = 0
x = 1
x = 0
...
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Le résultat de la bascule
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Mais il existe d’autres moyens d’arriver au même résultat. Par exemple, en utilisant l’opérateur '!' qui signifie "not" ("non"). Ainsi, avec le code suivant on aura le même fonctionnement :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;x = !x;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  La bascule avec l’opérateur
  &lt;code&gt;
   !
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Puisqu’à chaque passage x devient "pas x" donc si x vaut 1 son contraire sera 0 et s’il vaut 0, il deviendra 1.
&lt;/p&gt;
&lt;h3 id="les-conditions"&gt;
 &lt;a aria-hidden="true" href="#les-conditions"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les conditions
&lt;/h3&gt;
&lt;h4 id="quest-ce-quune-condition"&gt;
 &lt;a aria-hidden="true" href="#quest-ce-quune-condition"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Qu’est-ce qu’une condition ?
&lt;/h4&gt;
&lt;p&gt;
 C’est un choix que l’on fait entre plusieurs propositions. En informatique, les conditions servent à tester des variables.
Par exemple : *Vous faites une recherche sur un site spécialisé pour acheter une nouvelle voiture.
Vous imposez le prix de la voiture qui doit être inférieur à 5000€ (c’est un petit budget
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 ).
Le programme qui va gérer ça va faire appel à un
 &lt;strong&gt;
  test conditionnel
 &lt;/strong&gt;
 .
Il va éliminer tous les résultats de la recherche dont le prix est supérieur à 5000€.*
&lt;/p&gt;
&lt;h4 id="quelques-symboles"&gt;
 &lt;a aria-hidden="true" href="#quelques-symboles"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Quelques symboles
&lt;/h4&gt;
&lt;p&gt;
 Pour tester des variables, il faut connaître quelques symboles.
Je vous ai fait un joli tableau pour que vous vous repériez bien :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Symbole
      &lt;/th&gt;
      &lt;th&gt;
       A quoi il sert
      &lt;/th&gt;
      &lt;th&gt;
       Signification
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       ==
      &lt;/td&gt;
      &lt;td&gt;
       Ce symbole, composé de deux égales, permet de tester l’égalité entre deux variables
      &lt;/td&gt;
      &lt;td&gt;
       … est égale à …
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &amp;lt;
      &lt;/td&gt;
      &lt;td&gt;
       Celui-ci teste l’infériorité d’une variable par rapport à une autre
      &lt;/td&gt;
      &lt;td&gt;
       …est inférieur à…
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &amp;gt;
      &lt;/td&gt;
      &lt;td&gt;
       Là c’est la supériorité d’une variable par rapport à une autre
      &lt;/td&gt;
      &lt;td&gt;
       …est supérieur à…
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &amp;lt;=
      &lt;/td&gt;
      &lt;td&gt;
       teste l’infériorité ou l’égalité d’une variable par rapport à une autre
      &lt;/td&gt;
      &lt;td&gt;
       …est inférieur ou égale à…
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       &amp;gt;=
      &lt;/td&gt;
      &lt;td&gt;
       teste la supériorité ou l’égalité d’une variable par rapport à une autre
      &lt;/td&gt;
      &lt;td&gt;
       …est supérieur ou égal à…
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       !=
      &lt;/td&gt;
      &lt;td&gt;
       teste la différence entre deux variables
      &lt;/td&gt;
      &lt;td&gt;
       …est différent de…
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Les symboles conditionnels
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 "Et si on s’occupait des conditions ? Ou bien sinon on va tranquillement aller boire un bon café ?"
&lt;/p&gt;
&lt;p&gt;
 Cette phrase implique un choix : le premier choix est de s’occuper des conditions. Si l’interlocuteur dit oui, alors il s’occupe des conditions. Mais s’il dit non, alors il va boire un bon café. Il a donc l’obligation d’effectuer une action sur les deux proposées. En informatique, on parle de
 &lt;strong&gt;
  condition
 &lt;/strong&gt;
 . "si la condition est vraie", on fait une action. En revanche "si la condition est fausse", on exécute une autre action.
&lt;/p&gt;
&lt;h4 id="ifelse"&gt;
 &lt;a aria-hidden="true" href="#ifelse"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 If…else
&lt;/h4&gt;
&lt;p&gt;
 La première condition que nous verrons est la condition if…else. Voyons un peu le fonctionnement.
&lt;/p&gt;
&lt;h5 id="if"&gt;
 &lt;a aria-hidden="true" href="#if"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 if
&lt;/h5&gt;
&lt;p&gt;
 On veut tester la valeur d’une variable. Prenons le même exemple que tout à l’heure. Je veux tester si la voiture est inférieure à 5000€.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; prix_voiture = &lt;span class="hljs-number"&gt;4800&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// variable : prix de la voiture définit à 4800€&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 D’abord on définit la variable "prix
 &lt;em&gt;
  voiture". Sa valeur est de 4800€. Ensuite, on doit tester cette valeur. Pour tester une condition, on emploie le terme
  &lt;em&gt;
   if
  &lt;/em&gt;
  (de l’anglais "si"). Ce terme doit être suivi de parenthèses dans lesquelles se trouveront les variables à tester. Donc entre ces parenthèses, nous devons tester la variable prix
 &lt;/em&gt;
 voiture afin de savoir si elle est inférieure à 5000€.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(prix_voiture &amp;lt; &lt;span class="hljs-number"&gt;5000&lt;/span&gt;)
{
    &lt;span class="hljs-comment"&gt;// la condition est vraie, donc j'achète la voiture&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Le test d’une condition
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 On peut lire cette ligne de code comme ceci : "
 &lt;strong&gt;
  si
 &lt;/strong&gt;
 la variable
 &lt;em&gt;
  prix_voiture
 &lt;/em&gt;
 est inférieure à 5000, on exécute le code qui se trouve entre les accolades.
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Les instructions qui sont
   &lt;em&gt;
    entre
   &lt;/em&gt;
   les accolades ne seront exécutées que si la condition testée est
   &lt;em&gt;
    vraie
   &lt;/em&gt;
   !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Le "schéma" à suivre pour tester une condition est donc le suivant :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(&lt;span class="hljs-comment"&gt;/* contenu de la condition à tester */&lt;/span&gt;)
{
    &lt;span class="hljs-comment"&gt;// instructions à exécuter si la condition est vraie&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Syntaxe d’une condition
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="else"&gt;
 &lt;a aria-hidden="true" href="#else"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 else
&lt;/h5&gt;
&lt;p&gt;
 On a pour l’instant testé que si la condition est vraie. Maintenant, nous allons voir comment faire pour que d’autres instructions soient exécutées si la condition est fausse. Le terme
 &lt;em&gt;
  else
 &lt;/em&gt;
 de l’anglais "sinon" implique notre deuxième choix si la condition est fausse.
 &lt;em&gt;
  Par exemple, si le prix de la voiture est inférieur à 5000€, alors je l’achète. Sinon, je ne l’achète pas.
 &lt;/em&gt;
 Pour traduire cette phrase en ligne de code, c’est plus simple qu’avec un if, il n’y a pas de parenthèses à remplir :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; prix_voiture = &lt;span class="hljs-number"&gt;5500&lt;/span&gt;;

&lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(prix_voiture &amp;lt; &lt;span class="hljs-number"&gt;5000&lt;/span&gt;)
{
    &lt;span class="hljs-comment"&gt;// la condition est vraie, donc j'achète la voiture&lt;/span&gt;
}
&lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
{
    &lt;span class="hljs-comment"&gt;// la condition est fausse, donc je n'achète pas la voiture&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Si "", alors "", sinon ""
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Le
   &lt;em&gt;
    else
   &lt;/em&gt;
   est généralement utilisé pour les conditions dites
   &lt;strong&gt;
    de défaut
   &lt;/strong&gt;
   . C’est lui qui à le pouvoir sur toutes les conditions, c’est-à-dire que si aucune condition n’est vraie, on exécute les instructions qu’il contient.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Le
   &lt;em&gt;
    else
   &lt;/em&gt;
   n’est pas obligatoire, on peut très bien mettre plusieurs
   &lt;em&gt;
    if
   &lt;/em&gt;
   à la suite.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Le "schéma" de principe à retenir est le suivant :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;else&lt;/span&gt;  &lt;span class="hljs-comment"&gt;// si toutes les conditions précédentes sont fausses...&lt;/span&gt;
{
    &lt;span class="hljs-comment"&gt;// ...on exécute les instructions entre ces accolades&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Syntaxe du else
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="else-if"&gt;
 &lt;a aria-hidden="true" href="#else-if"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 else if
&lt;/h5&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   A ce que je vois, on a pas trop le choix : soit la condition est vraie, soit elle est fausse. Il n’y a pas d’autres possibilités ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Bien sur que l’on peut tester d’autres conditions ! Pour cela, on emploie le terme
 &lt;em&gt;
  else if
 &lt;/em&gt;
 qui signifie "sinon si…"
 &lt;em&gt;
  Par exemple, SI le prix de la voiture est inférieur à 5000€ je l’achète; SINON SI elle est égale à 5500€ mais qu’elle a l’option GPS en plus, alors je l’achète ; SINON je ne l’achète pas.
 &lt;/em&gt;
 Le sinon si s’emploie comme le
 &lt;em&gt;
  if
 &lt;/em&gt;
 :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; prix_voiture = &lt;span class="hljs-number"&gt;5500&lt;/span&gt;;

&lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(prix_voiture &amp;lt; &lt;span class="hljs-number"&gt;5000&lt;/span&gt;)
{
    &lt;span class="hljs-comment"&gt;// la condition est vraie, donc j'achète la voiture&lt;/span&gt;
}
&lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(prix_voiture == &lt;span class="hljs-number"&gt;5500&lt;/span&gt;)
{
    &lt;span class="hljs-comment"&gt;// la condition est vraie, donc j'achète la voiture&lt;/span&gt;
}
&lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
{
    &lt;span class="hljs-comment"&gt;// la condition est fausse, donc je n'achète pas la voiture&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Utilisation de
  &lt;code&gt;
   else if
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 A retenir donc, si la première condition est fausse, on teste la deuxième, si la deuxième est fausse, on teste la troisième, etc. "Schéma" de principe du
 &lt;em&gt;
  else
 &lt;/em&gt;
 , idem au
 &lt;em&gt;
  if
 &lt;/em&gt;
 :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(&lt;span class="hljs-comment"&gt;/* test de la condition */&lt;/span&gt;)  &lt;span class="hljs-comment"&gt;// si elle est vraie...&lt;/span&gt;
{
    &lt;span class="hljs-comment"&gt;// ...on exécute les instructions entre ces accolades&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Syntaxe du
  &lt;code&gt;
   else if
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Le "else if" ne peut pas être utilisée toute seule, il faut obligatoirement qu’il y ait un "if" avant !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/wNMWNUVNWCY" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="les-opérateurs-logiques"&gt;
 &lt;a aria-hidden="true" href="#les-opérateurs-logiques"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les opérateurs logiques
&lt;/h4&gt;
&lt;p&gt;
 Et si je vous posais un autre problème ? Comment faire pour savoir si la voiture est inférieure à 5000€ ET si elle est grise ? :twisted:
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   C’est vrai ça, si je veux que la voiture soit grise en plus d’être inférieure à 5000€, comment je fais ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Il existe des opérateurs qui vont nous permettre de tester cette condition ! Voyons quels sont ses opérateurs puis testons-les !
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="table-wrapper"&gt;
  &lt;table class=" table table-bordered table-striped"&gt;
   &lt;thead&gt;
    &lt;tr&gt;
     &lt;th colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       Opérateur
      &lt;/p&gt;
     &lt;/th&gt;
     &lt;th colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       Signification
      &lt;/p&gt;
     &lt;/th&gt;
    &lt;/tr&gt;
   &lt;/thead&gt;
   &lt;tbody&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       &amp;amp;&amp;amp;
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       … ET …
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       ||
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       … OU …
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       !
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       NON
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
   &lt;/tbody&gt;
  &lt;/table&gt;
 &lt;/div&gt;
 &lt;p&gt;
  Table: les opérateurs logiques
 &lt;/p&gt;
&lt;/div&gt;
&lt;h5 id="et"&gt;
 &lt;a aria-hidden="true" href="#et"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 ET
&lt;/h5&gt;
&lt;p&gt;
 Reprenons ce que nous avons testé dans le
 &lt;em&gt;
  else if
 &lt;/em&gt;
 :
 &lt;em&gt;
  SI la voiture vaut 5500€ ET qu’elle a l’option GPS en plus, ALORS je l’achète.
 &lt;/em&gt;
 On va utiliser un
 &lt;em&gt;
  if
 &lt;/em&gt;
 et un opérateur logique qui sera le
 &lt;em&gt;
  ET
 &lt;/em&gt;
 :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; prix_voiture = &lt;span class="hljs-number"&gt;5500&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; option_GPS = TRUE;

&lt;span class="hljs-comment"&gt;/* l'opérateur &amp;amp;&amp;amp; lie les deux conditions qui doivent être
vraies ensemble pour que la condition soit remplie */&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(prix_voiture == &lt;span class="hljs-number"&gt;5500&lt;/span&gt; &amp;amp;&amp;amp; option_GPS)
{
    &lt;span class="hljs-comment"&gt;// j'achète la voiture si la condition précédente est vraie&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Conjonction de deux conditions
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="ou"&gt;
 &lt;a aria-hidden="true" href="#ou"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 OU
&lt;/h5&gt;
&lt;p&gt;
 On peut reprendre la condition précédente et la première en les assemblant pour rendre le code beaucoup moins long.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Et oui, les programmeurs sont des flemmards !
   &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Rappelons quelles sont ces conditions :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; prix_voiture = &lt;span class="hljs-number"&gt;5500&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; option_GPS = TRUE;

&lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(prix_voiture &amp;lt; &lt;span class="hljs-number"&gt;5000&lt;/span&gt;)
{
    &lt;span class="hljs-comment"&gt;// la condition est vraie, donc j'achète la voiture&lt;/span&gt;
}
&lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(prix_voiture == &lt;span class="hljs-number"&gt;5500&lt;/span&gt; &amp;amp;&amp;amp; option_GPS)
{
    &lt;span class="hljs-comment"&gt;// la condition est vraie, donc j'achète la voiture&lt;/span&gt;
}
&lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
{
    &lt;span class="hljs-comment"&gt;// la condition est fausse, donc je n'achète pas la voiture&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous voyez bien que l’instruction dans le
 &lt;em&gt;
  if
 &lt;/em&gt;
 et le
 &lt;em&gt;
  else if
 &lt;/em&gt;
 est la même. Avec un opérateur logique, qui est le OU, on peut rassembler ces conditions :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; prix_voiture = &lt;span class="hljs-number"&gt;5500&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; option_GPS = TRUE;

&lt;span class="hljs-keyword"&gt;if&lt;/span&gt;((prix_voiture &amp;lt; &lt;span class="hljs-number"&gt;5000&lt;/span&gt;) || (prix_voiture == &lt;span class="hljs-number"&gt;5500&lt;/span&gt; &amp;amp;&amp;amp; option_GPS))
{
    &lt;span class="hljs-comment"&gt;// la condition est vraie, donc j'achète la voiture&lt;/span&gt;
}
&lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
{
    &lt;span class="hljs-comment"&gt;// la condition est fausse, donc je n'achète pas la voiture&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Utilisation du OU logique
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Lisons la condition testée dans le if : "SI le prix de la voiture est inférieur à 5000€ OU SI le prix de la voiture est égal à 5500€ ET la voiture à l’option GPS en plus, ALORS j’achète la voiture".
&lt;/p&gt;
&lt;div class="custom-block alert alert-danger"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Attention aux parenthèses qui sont à bien placer dans les conditions, ici elles n’étaient pas nécessaires, mais elles aident à mieux lire le code.
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="non"&gt;
 &lt;a aria-hidden="true" href="#non"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 NON
&lt;/h5&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Moi j’aimerais tester "si la condition est fausse j’achète la voiture". Comment faire ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 &lt;del&gt;
  Toi t’as un souci
 &lt;/del&gt;
 Il existe un dernier opérateur logique qui se prénomme NON. Il permet en effet de tester si la condition est fausse :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; prix_voiture = &lt;span class="hljs-number"&gt;5500&lt;/span&gt;;

&lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(!(prix_voiture &amp;lt; &lt;span class="hljs-number"&gt;5000&lt;/span&gt;))
{
    &lt;span class="hljs-comment"&gt;// la condition est vraie, donc j'achète la voiture&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  L’opérateur
  &lt;em&gt;
   négation
  &lt;/em&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Se lit : "SI le prix de la voiture N’EST PAS inférieur à 5000€, alors j’achète la voiture". On s’en sert avec le caractère ! (point d’exclamation), généralement pour tester des variables booléennes. On verra dans les boucles que ça peut grandement simplifier le code.
&lt;/p&gt;
&lt;h4 id="switch"&gt;
 &lt;a aria-hidden="true" href="#switch"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Switch
&lt;/h4&gt;
&lt;p&gt;
 Il existe un dernier test conditionnel que nous n’avons pas encore abordé, c’est le
 &lt;em&gt;
  switch
 &lt;/em&gt;
 . Voilà un exemple :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; options_voiture = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

&lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(options_voiture == &lt;span class="hljs-number"&gt;0&lt;/span&gt;)
{
    &lt;span class="hljs-comment"&gt;// il n'y a pas d'options dans la voiture&lt;/span&gt;
}
&lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(options_voiture == &lt;span class="hljs-number"&gt;1&lt;/span&gt;)
{
    &lt;span class="hljs-comment"&gt;// la voiture a l'option GPS&lt;/span&gt;
}
&lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(options_voiture == &lt;span class="hljs-number"&gt;2&lt;/span&gt;)
{
    &lt;span class="hljs-comment"&gt;// la voiture a l'option climatisation&lt;/span&gt;
}
&lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(options_voiture == &lt;span class="hljs-number"&gt;3&lt;/span&gt;)
{
    &lt;span class="hljs-comment"&gt;// la voiture a l'option vitre automatique&lt;/span&gt;
}
&lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(options_voiture == &lt;span class="hljs-number"&gt;4&lt;/span&gt;)
{
    &lt;span class="hljs-comment"&gt;// la voiture a l'option barres de toit&lt;/span&gt;
}
&lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(options_voiture == &lt;span class="hljs-number"&gt;5&lt;/span&gt;)
{
    &lt;span class="hljs-comment"&gt;// la voiture a l'option  siège éjectable&lt;/span&gt;
}
&lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
{
&lt;span class="hljs-comment"&gt;// retente ta chance ;-)&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Un grand nombre de
  &lt;code&gt;
   else if
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ce code est indigeste ! C’est infâme ! Grotesque ! Pas beau ! En clair, il faut trouver une solution pour changer cela. Cette solution existe, c’est le
 &lt;em&gt;
  switch
 &lt;/em&gt;
 . Le
 &lt;em&gt;
  switch
 &lt;/em&gt;
 , comme son nom l’indique, va tester la variable jusqu’à la fin des valeurs qu’on lui aura données. Voici comment cela se présente :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; options_voiture = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

&lt;span class="hljs-keyword"&gt;switch&lt;/span&gt; (options_voiture)
{
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;0&lt;/span&gt;:
        &lt;span class="hljs-comment"&gt;// il n'y a pas d'options dans la voiture&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;1&lt;/span&gt;:
        &lt;span class="hljs-comment"&gt;// la voiture a l'option GPS&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;2&lt;/span&gt;:
        &lt;span class="hljs-comment"&gt;// la voiture a l'option climatisation&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;3&lt;/span&gt;:
        &lt;span class="hljs-comment"&gt;// la voiture a l'option vitre automatique&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;4&lt;/span&gt;:
        &lt;span class="hljs-comment"&gt;// la voiture a l'option barres de toit&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;5&lt;/span&gt;:
        &lt;span class="hljs-comment"&gt;// la voiture a l'option siège éjectable&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;default&lt;/span&gt;:
        &lt;span class="hljs-comment"&gt;// retente ta chance ;-)&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Utilisation de
  &lt;code&gt;
   switch
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Si on testait ce code, en réalité cela ne fonctionnerait pas car il n’y a pas d’instruction pour afficher à l’écran, mais nous aurions quelque chose du genre :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;il n&lt;span class="hljs-string"&gt;'y a pas d'&lt;/span&gt;options dans la voiture
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Si option_voiture vaut maintenant 5 :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;la voiture a l&lt;span class="hljs-string"&gt;'option siège éjectable
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-danger"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   L’instruction
   &lt;strong&gt;
    break
   &lt;/strong&gt;
   est
   &lt;strong&gt;
    nécessaire
   &lt;/strong&gt;
   , car si vous ne la mettez pas, l’ordinateur, ou plutôt la carte Arduino, va exécuter toutes les instructions.
Pour éviter cela, on met cette instruction break, qui vient de l’anglais "casser/arrêter" pour dire à la carte Arduino qu’il faut arrêter de tester les conditions car on a trouvé la valeur correspondante.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="la-condition-ternaire-ou-condensée"&gt;
 &lt;a aria-hidden="true" href="#la-condition-ternaire-ou-condensée"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La condition ternaire ou condensée
&lt;/h4&gt;
&lt;p&gt;
 Cette condition est en fait une simplification d’un test if…else. Il n’y a pas grand-chose à dire dessus, par conséquent un exemple suffira : Ce code :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; prix_voiture = &lt;span class="hljs-number"&gt;5000&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; achat_voiture = FALSE;

&lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(prix_voiture == &lt;span class="hljs-number"&gt;5000&lt;/span&gt;) &lt;span class="hljs-comment"&gt;// si c'est vrai&lt;/span&gt;
{
    achat_voiture = TRUE; &lt;span class="hljs-comment"&gt;// on achète la voiture&lt;/span&gt;
}
&lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;span class="hljs-comment"&gt;// sinon&lt;/span&gt;
{
    achat_voiture = FALSE; &lt;span class="hljs-comment"&gt;// on n'achète pas la voiture&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Est équivalent à celui-ci :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; prix_voiture = &lt;span class="hljs-number"&gt;5000&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; achat_voiture = FALSE;

achat_voiture= (prix_voiture == &lt;span class="hljs-number"&gt;5000&lt;/span&gt;) ? TRUE : FALSE;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Utilisation de la condition ternaire
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Cette ligne :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;achat_voiture= (prix_voiture == &lt;span class="hljs-number"&gt;5000&lt;/span&gt;) ? TRUE : FALSE;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Se lit comme ceci : "Est-ce que le prix de la voiture est égal à 5000€ ? SI oui, alors j’achète la voiture SINON je n’achète pas la voiture"
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Bon, vous n’êtes pas obligé d’utiliser cette condition ternaire, c’est
   &lt;del&gt;
    vraiment pour les gros flemmards
   &lt;/del&gt;
   juste pour simplifier le code, mais pas forcément la lecture de ce dernier.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Nous n’avons pas encore fini avec le langage Arduino. Je vous invite donc à passer à la partie suivante pour poursuivre l’apprentissage de ce langage.
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Le langage Arduino (2/2)</title><link href="https://eskimon.fr/tuto-arduino-106-le-langage-arduino-22" rel="alternate"></link><published>2013-12-10T20:03:00+01:00</published><updated>2013-12-10T20:03:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-10:/tuto-arduino-106-le-langage-arduino-22</id><summary type="html">&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   J’ai une question. Si je veux faire que le code que j’ai écrit se répète, je suis obligé de le recopier autant de fois que je veux ? Ou bien il existe une solution ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voilà une excellente question qui introduit le chapitre que vous allez commencer à lire car …&lt;/p&gt;</summary><content type="html">&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   J’ai une question. Si je veux faire que le code que j’ai écrit se répète, je suis obligé de le recopier autant de fois que je veux ? Ou bien il existe une solution ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voilà une excellente question qui introduit le chapitre que vous allez commencer à lire car c’est justement l’objet de ce chapitre. Nous allons voir comment faire pour qu’un bout de code se répète. Puis nous verrons, ensuite, comment organiser notre code pour que celui-ci devienne plus lisible et facile à débugger. Enfin, nous apprendrons à utiliser les tableaux qui nous seront très utiles. Voilà le programme qui vous attend !
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#les-boucles"&gt;
    Les boucles
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#la-boucle-while"&gt;
      La boucle while
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#comment-lire-ce-code"&gt;
       Comment lire ce code ?
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#construction-dune-boucle-while"&gt;
       Construction d’une boucle while
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#un-exemple"&gt;
       Un exemple
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#la-boucle-dowhile"&gt;
      La boucle do…while
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#concaténation"&gt;
       Concaténation
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#la-boucle-for"&gt;
      La boucle for
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#fonctionnement"&gt;
       Fonctionnement
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#a-retenir"&gt;
       A retenir
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#la-boucle-infinie"&gt;
     La boucle infinie
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#les-fonctions"&gt;
    Les fonctions
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#quest-ce-quune-fonction"&gt;
     Qu’est-ce qu’une fonction ?
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#fabriquer-une-fonction"&gt;
      Fabriquer une fonction
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#nom-de-la-fonction"&gt;
       Nom de la fonction
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-types-et-les-paramètres"&gt;
       Les types et les paramètres
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-paramètres"&gt;
       Les paramètres
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#le-type-void"&gt;
     Le type void
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#les-fonctions-typées"&gt;
      Les fonctions "typées"
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#comment-créer-une-fonction-typée"&gt;
       Comment créer une fonction typée ?
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#les-fonctions-avec-paramètres"&gt;
     Les fonctions avec paramètres
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#les-tableaux"&gt;
    Les tableaux
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#un-tableau-en-programmation"&gt;
      Un tableau en programmation
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#a-quoi-ça-sert"&gt;
       A quoi ça sert ?
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#déclarer-un-tableau"&gt;
     Déclarer un tableau
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#accéder-et-modifier-une-case-du-tableau"&gt;
     Accéder et modifier une case du tableau
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#initialiser-un-tableau"&gt;
     Initialiser un tableau
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#exemple-de-traitement"&gt;
      Exemple de traitement
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#la-note-maximale"&gt;
       La note maximale
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#calcul-de-moyenne"&gt;
       Calcul de moyenne
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="les-boucles"&gt;
 &lt;a aria-hidden="true" href="#les-boucles"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les boucles
&lt;/h3&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Qu’est-ce qu’une boucle ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 En programmation, une
 &lt;strong&gt;
  boucle
 &lt;/strong&gt;
 est une instruction qui permet de répéter un bout de code. Cela va nous permettre de faire se répéter un bout de programme ou un programme entier. Il existe deux types principaux de boucles :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  La
  &lt;strong&gt;
   boucle conditionnelle
  &lt;/strong&gt;
  , qui teste une condition et qui exécute les instructions qu’elle contient tant que la condition testée est vraie.
 &lt;/li&gt;
 &lt;li&gt;
  La
  &lt;strong&gt;
   boucle de répétition
  &lt;/strong&gt;
  , qui exécute les instructions qu’elle contient, un nombre de fois prédéterminé.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="la-boucle-while"&gt;
 &lt;a aria-hidden="true" href="#la-boucle-while"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La boucle
 &lt;strong&gt;
  while
 &lt;/strong&gt;
&lt;/h4&gt;
&lt;p&gt;
 Problème :
&lt;/p&gt;
&lt;blockquote&gt;
 &lt;p&gt;
  Je veux que le volet électrique de ma fenêtre se ferme automatiquement quand la nuit tombe (Nous ne nous occuperons pas de faire le système qui ferme le volet à l’arrivée de la nuit).
La carte Arduino dispose d’un capteur qui indique la position du volet (ouvert ou fermé). Ce que nous cherchons à faire : c’est créer un bout de code qui fait descendre le volet
  &lt;strong&gt;
   tant qu’il n’est pas fermé
  &lt;/strong&gt;
  .
 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;
 Pour résoudre le problème posé, il va falloir que l’on utilise une boucle.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;/* ICI, un bout de programme permet de faire les choses suivantes :
1. un capteur détecte la tombée de la nuit et la levée du jour
     - Si c'est la nuit, alors on doit fermer le volet
     - Sinon, si c'est le jour, on doit ouvrir le volet
2. le programme lit l'état du capteur qui indique si le volet est ouvert ou fermé
3. enregistrement de cet état dans la variable de type String : position_volet
     - Si le volet est ouvert, alors : position_volet = "ouvert";
     - Sinon, si le volet est fermé : position_volet = "ferme";
*/&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(position_volet == &lt;span class="hljs-string"&gt;"ouvert"&lt;/span&gt;)
{
    &lt;span class="hljs-comment"&gt;// instructions qui font descendre le volet&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  La boucle while
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="comment-lire-ce-code"&gt;
 &lt;a aria-hidden="true" href="#comment-lire-ce-code"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Comment lire ce code ?
&lt;/h5&gt;
&lt;p&gt;
 En anglais, le mot
 &lt;strong&gt;
  while
 &lt;/strong&gt;
 signifie "tant que". Donc si on lit la ligne :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(position_volet == &lt;span class="hljs-string"&gt;"ouvert"&lt;/span&gt;) {&lt;span class="hljs-comment"&gt;/* instructions */&lt;/span&gt;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Il faut la lire : "TANT QUE la position du volet est
 &lt;strong&gt;
  ouvert
 &lt;/strong&gt;
 ", on boucle/répète les instructions de la boucle (entre les accolades).
&lt;/p&gt;
&lt;h5 id="construction-dune-boucle-while"&gt;
 &lt;a aria-hidden="true" href="#construction-dune-boucle-while"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Construction d’une boucle
 &lt;strong&gt;
  while
 &lt;/strong&gt;
&lt;/h5&gt;
&lt;p&gt;
 Voilà donc la syntaxe de cette boucle qu’il faut retenir :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(&lt;span class="hljs-comment"&gt;/* condition à tester */&lt;/span&gt;)
{
    &lt;span class="hljs-comment"&gt;// les instructions entre ces accolades sont répétées&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// tant que la condition est vraie&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Syntaxe de la boucle while
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="un-exemple"&gt;
 &lt;a aria-hidden="true" href="#un-exemple"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un exemple
&lt;/h5&gt;
&lt;p&gt;
 Prenons un exemple simple, réalisons un compteur !
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// variable compteur qui va stocker le nombre de fois que la boucle&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; compteur = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// aura été exécutée&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// tant que compteur est différent de 5, on boucle&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(compteur != &lt;span class="hljs-number"&gt;5&lt;/span&gt;)
{
    compteur++; &lt;span class="hljs-comment"&gt;// on incrémente la variable compteur à chaque tour de boucle&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Un petit compteur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Si on teste ce code (dans la réalité rien ne s’affiche, c’est juste un exemple pour vous montrer), cela donne :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-text"&gt;compteur = 0
compteur = 1
compteur = 2
compteur = 3
compteur = 4
compteur = 5
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Résultat de notre compteur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Donc au départ, la variable
 &lt;strong&gt;
  compteur
 &lt;/strong&gt;
 vaut 0, on exécute la boucle et on incrémente
 &lt;strong&gt;
  compteur
 &lt;/strong&gt;
 .
Mais
 &lt;strong&gt;
  compteur
 &lt;/strong&gt;
 ne vaut pour l’instant que 1, donc on ré-exécute la boucle. Maintenant
 &lt;strong&gt;
  compteur
 &lt;/strong&gt;
 vaut 2. On répète la boucle, … jusqu’à 5. Si
 &lt;strong&gt;
  compteur
 &lt;/strong&gt;
 vaut 5, la boucle n’est pas ré-exécutée et on continu le programme. Dans notre cas, le programme se termine.
&lt;/p&gt;
&lt;h4 id="la-boucle-dowhile"&gt;
 &lt;a aria-hidden="true" href="#la-boucle-dowhile"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La boucle
 &lt;strong&gt;
  do…while
 &lt;/strong&gt;
&lt;/h4&gt;
&lt;p&gt;
 Cette boucle est similaire à la précédente. Mais il y a une différence qui a son importance ! En effet, si on prête attention à la place la condition dans la boucle
 &lt;strong&gt;
  while
 &lt;/strong&gt;
 , on s’aperçoit qu’elle est testée avant de rentrer dans la boucle. Tandis que dans une boucle do…while, la condition est testée seulement lorsque le programme est rentré dans la boucle :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;do&lt;/span&gt;
{
    &lt;span class="hljs-comment"&gt;// les instructions entre ces accolades sont répétées&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// TANT QUE la condition est vrai&lt;/span&gt;
}&lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(&lt;span class="hljs-comment"&gt;/* condition à tester */&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Syntaxe de la boucle do…while
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Le mot
   &lt;strong&gt;
    do
   &lt;/strong&gt;
   vient de l’anglais et se traduis par
   &lt;strong&gt;
    faire
   &lt;/strong&gt;
   .
Donc la boucle do…while signifie "faire les instructions, tant que la condition testée est fausse".
Tandis que dans une boucle while on pourrait dire : "tant que la condition est fausse, fais ce qui suit".
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Qu’est-ce que ça change ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Et bien, dans une
 &lt;strong&gt;
  while
 &lt;/strong&gt;
 , si la condition est fausse dès le départ, on entrera jamais dans cette boucle.
A l’inverse, avec une boucle
 &lt;strong&gt;
  do…while
 &lt;/strong&gt;
 , on entre dans la boucle
 &lt;em&gt;
  puis
 &lt;/em&gt;
 on test la condition.
Reprenons notre compteur :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// variable compteur = 5&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; compteur = &lt;span class="hljs-number"&gt;5&lt;/span&gt;;

&lt;span class="hljs-keyword"&gt;do&lt;/span&gt;
{
    compteur++;  &lt;span class="hljs-comment"&gt;// on incrémente la variable compteur à chaque tour de boucle&lt;/span&gt;
}&lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(compteur &amp;lt; &lt;span class="hljs-number"&gt;5&lt;/span&gt;);  &lt;span class="hljs-comment"&gt;// tant que compteur est inférieur à 5, on boucle&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  un compteur avec do…while
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Dans ce code, on définit dès le départ la valeur de
 &lt;strong&gt;
  compteur
 &lt;/strong&gt;
 à 5.
Or, le programme va rentrer dans la boucle alors que la condition est fausse. Donc
 &lt;strong&gt;
  la boucle est au moins exécutée une fois
 &lt;/strong&gt;
 ! Et ce quelle que soit la véracité de la condition. En test cela donne :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-text"&gt;compteur = 6
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Résultat de la boucle do…while
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/Yti4fo3wZ_0" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="concaténation"&gt;
 &lt;a aria-hidden="true" href="#concaténation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Concaténation
&lt;/h5&gt;
&lt;p&gt;
 Une boucle est une instruction qui a été répartie sur plusieurs lignes.
Mais on peut l’écrire sur une seule ligne :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// variable compteur = 5&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; compteur = &lt;span class="hljs-number"&gt;5&lt;/span&gt;;

&lt;span class="hljs-keyword"&gt;do&lt;/span&gt;{compteur++;}&lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(compteur &amp;lt; &lt;span class="hljs-number"&gt;5&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  La boucle sur une seule ligne
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-danger"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   C’est pourquoi il ne faut pas oublier le point virgule à la fin (après le while).
Alors que dans une simple boucle
   &lt;strong&gt;
    while
   &lt;/strong&gt;
   le point virgule
   &lt;strong&gt;
    ne doit pas
   &lt;/strong&gt;
   être mis !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="la-boucle-for"&gt;
 &lt;a aria-hidden="true" href="#la-boucle-for"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La boucle
 &lt;strong&gt;
  for
 &lt;/strong&gt;
&lt;/h4&gt;
&lt;p&gt;
 Voilà une boucle bien particulière. Ce qu’elle va nous permettre de faire est assez simple.
Cette boucle est exécutée X fois. Contrairement aux deux boucles précédentes, on doit lui donner trois paramètres.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; compteur = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; compteur &amp;lt; &lt;span class="hljs-number"&gt;5&lt;/span&gt;; compteur++)
{
    &lt;span class="hljs-comment"&gt;// code à exécuter&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  la boucle for
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="fonctionnement"&gt;
 &lt;a aria-hidden="true" href="#fonctionnement"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Fonctionnement
&lt;/h5&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; compteur = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; compteur &amp;lt; &lt;span class="hljs-number"&gt;5&lt;/span&gt;; compteur++)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 D’abord, on crée la boucle avec le terme
 &lt;strong&gt;
  for
 &lt;/strong&gt;
 (signifie "pour que"). Ensuite, entre les parenthèses, on doit donner trois
 &lt;strong&gt;
  paramètres
 &lt;/strong&gt;
 qui sont :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  la création et l’assignation de la variable à une valeur de départ
 &lt;/li&gt;
 &lt;li&gt;
  suivit de la définition de la condition à tester
 &lt;/li&gt;
 &lt;li&gt;
  suivit de l’instruction à exécuter
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Donc, si on lit cette ligne : "POUR compteur allant de 0 jusque 5, on incrémente compteur".
De façon plus concise, la boucle est exécutée autant de fois qu’il sera nécessaire à
 &lt;strong&gt;
  compteur
 &lt;/strong&gt;
 pour arriver à 5.
Donc ici, le code qui se trouve à l’intérieur de la boucle sera exécuté 5 fois.
&lt;/p&gt;
&lt;h5 id="a-retenir"&gt;
 &lt;a aria-hidden="true" href="#a-retenir"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 A retenir
&lt;/h5&gt;
&lt;p&gt;
 La structure de la boucle :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(&lt;span class="hljs-comment"&gt;/*initialisation de la variable*/&lt;/span&gt; ; &lt;span class="hljs-comment"&gt;/*condition à laquelle la boucle s'arrête*/&lt;/span&gt; ; &lt;span class="hljs-comment"&gt;/*instruction à exécuter*/&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  syntaxe de la boucle for
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/uODm-1JNMlM" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="la-boucle-infinie"&gt;
 &lt;a aria-hidden="true" href="#la-boucle-infinie"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La boucle infinie
&lt;/h4&gt;
&lt;p&gt;
 La boucle infinie est très simple à réaliser, d’autant plus qu’elle est parfois très utile.
Il suffit simplement d’utiliser une
 &lt;strong&gt;
  while
 &lt;/strong&gt;
 et de lui assigner comme condition une valeur qui ne change jamais.
En l’occurrence, on met souvent le chiffre 1.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(&lt;span class="hljs-number"&gt;1&lt;/span&gt;)
{
    &lt;span class="hljs-comment"&gt;// instructions à répéter jusqu'à l'infinie&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  La boucle infinie
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 On peut lire : "TANT QUE la condition est égale à 1, on exécute la boucle".
Et cette condition sera toujours remplie puisque "1" n’est pas une variable mais bien un chiffre. Également, il est possible de mettre tout autre chiffre entier, ou bien le booléen "TRUE" :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(TRUE)
{
    &lt;span class="hljs-comment"&gt;// instructions à répéter jusqu'à l'infinie&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  La boucle infinie avec un booléen
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Cela ne fonctionnera pas avec la valeur
   &lt;strong&gt;
    0
   &lt;/strong&gt;
   .
En effet, 0 signifie "condition fausse" donc la boucle s’arrêtera aussitôt…
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   La fonction loop() se comporte comme une boucle infinie, puisqu’elle se répète après avoir fini d’exécuter ses tâches.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="les-fonctions"&gt;
 &lt;a aria-hidden="true" href="#les-fonctions"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les fonctions
&lt;/h3&gt;
&lt;p&gt;
 Dans un programme, les lignes sont souvent très nombreuses.
Il devient alors impératif de séparer le programme en petits bouts afin d’améliorer la lisibilité de celui-ci, en plus d’améliorer le fonctionnement et de faciliter le débogage.
Nous allons voir ensemble ce qu’est une fonction, puis nous apprendrons à les créer et les appeler.
&lt;/p&gt;
&lt;h4 id="quest-ce-quune-fonction"&gt;
 &lt;a aria-hidden="true" href="#quest-ce-quune-fonction"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Qu’est-ce qu’une fonction ?
&lt;/h4&gt;
&lt;p&gt;
 Une
 &lt;strong&gt;
  fonction
 &lt;/strong&gt;
 est un "conteneur" mais différent des variables.
En effet, une variable ne peut contenir qu’un nombre, tandis qu’une fonction peut contenir un
 &lt;em&gt;
  programme entier
 &lt;/em&gt;
 ! Par exemple ce code est une fonction :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// instructions&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  un exemple de fonction
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 En fait, lorsque l’on va programmer notre carte Arduino, on va écrire notre programme dans des fonctions.
Pour l’instant nous n’en connaissons que 2 :
 &lt;strong&gt;
  &lt;code&gt;
   setup()
  &lt;/code&gt;
 &lt;/strong&gt;
 et
 &lt;strong&gt;
  &lt;code&gt;
   loop()
  &lt;/code&gt;
 &lt;/strong&gt;
 .
Dans l’exemple précédent, à la place du commentaire, on peut mettre des instructions (conditions, boucles, variables, …).
Ce sont ces instructions qui vont constituer le programme en lui même. Pour être plus concret, une fonction est un bout de programme qui permet de réaliser une tâche bien précise.
Par exemple, pour mettre en forme un texte, on peut colorier un
 &lt;em&gt;
  mot
 &lt;/em&gt;
 en bleu, mettre le
 &lt;em&gt;
  mot
 &lt;/em&gt;
 en gras ou encore grossir ce
 &lt;em&gt;
  mot
 &lt;/em&gt;
 . A chaque fois, on a utilisé une fonction :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;strong&gt;
   gras
  &lt;/strong&gt;
  , pour mettre le mot en gras
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   colorier
  &lt;/strong&gt;
  , pour mettre le mot en bleu
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   grossir
  &lt;/strong&gt;
  , pour augmenter la taille du mot
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 En programmation, on va utiliser des fonctions. Alors ces fonctions sont "réparties dans deux grandes familles".
Ce que j’entends par là, c’est qu’il existe des fonctions toutes prêtes dans le langage Arduino et d’autres que l’on va devoir
 &lt;em&gt;
  créer nous même
 &lt;/em&gt;
 . C’est ce dernier point qui va nous intéresser.
&lt;/p&gt;
&lt;div class="custom-block alert alert-danger"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   On ne peut pas écrire un programme sans mettre de fonctions à l’intérieur !
On est obligé d’utiliser la fonction
   &lt;strong&gt;
    setup
   &lt;/strong&gt;
   () et
   &lt;strong&gt;
    loop
   &lt;/strong&gt;
   () (même si on ne met rien dedans).
Si vous écrivez des instructions en dehors d’une fonction, le logiciel Arduino refusera systématiquement de compiler votre programme.
Il n’y a que les variables globales que vous pourrez déclarer en dehors des fonctions.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   J’ai pas trop compris à quoi ça sert ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 L’utilité d’une fonction réside dans sa capacité à simplifier le code et à le séparer en "petits bouts" que l’on assemblera ensemble pour créer le programme final
Si vous voulez, c’est un peu comme les jeux de construction en plastique : chaque pièce à son propre mécanisme et réalise une fonction.
Par exemple une roue permet de rouler ; un bloc permet de réunir plusieurs autres blocs entre eux ; un moteur va faire avancer l’objet créé…
Et bien tous ces éléments seront assemblés entre eux pour former un objet (voiture, maison, …).
Tout comme, les fonctions seront assemblées entre elles pour former un programme. On aura par exemple la fonction : "mettre au carré un nombre" ; la fonction : "additionner a + b" ; etc. Qui au final donnera le résultat souhaité.
&lt;/p&gt;
&lt;h4 id="fabriquer-une-fonction"&gt;
 &lt;a aria-hidden="true" href="#fabriquer-une-fonction"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Fabriquer une fonction
&lt;/h4&gt;
&lt;p&gt;
 Pour fabriquer une fonction, nous avons besoin de savoir trois choses :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Quel est le
  &lt;strong&gt;
   type
  &lt;/strong&gt;
  de la fonction que je souhaite créer ?
 &lt;/li&gt;
 &lt;li&gt;
  Quel sera son
  &lt;strong&gt;
   nom
  &lt;/strong&gt;
  ?
 &lt;/li&gt;
 &lt;li&gt;
  Quel(s)
  &lt;strong&gt;
   paramètre(s)
  &lt;/strong&gt;
  prendra-t-elle ?
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="nom-de-la-fonction"&gt;
 &lt;a aria-hidden="true" href="#nom-de-la-fonction"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Nom de la fonction
&lt;/h5&gt;
&lt;p&gt;
 Pour commencer, nous allons, en premier lieu, choisir le nom de la fonction.
Par exemple, si votre fonction doit récupérer la température d’une pièce fournie par un capteur de température : vous appellerez la fonction
 &lt;strong&gt;
  lireTemperaturePiece
 &lt;/strong&gt;
 , ou bien
 &lt;strong&gt;
  lire
  &lt;em&gt;
   temperature
  &lt;/em&gt;
  piece
 &lt;/strong&gt;
 , ou encore
 &lt;strong&gt;
  lecture
  &lt;em&gt;
   temp
  &lt;/em&gt;
  piece
 &lt;/strong&gt;
 .
Bon, des noms on peut lui en donner plein, mais soyez logique quant au choix de ce dernier.
Ce sera plus facile pour comprendre le code que si vous l’appelez
 &lt;strong&gt;
  tmp
 &lt;/strong&gt;
 (pour température
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 ).
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Un nom de fonction explicite garantit une lecture rapide et une compréhension aisée du code.
Un lecteur doit savoir ce que fait la fonction juste grâce à son nom, sans lire le contenu !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="les-types-et-les-paramètres"&gt;
 &lt;a aria-hidden="true" href="#les-types-et-les-paramètres"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les types et les paramètres
&lt;/h5&gt;
&lt;p&gt;
 Les fonctions ont pour but de découper votre programme en différentes unités logiques.
Idéalement, le programme principal ne devrait utiliser que des appels de fonctions, en faisant un minimum de traitement.
Afin de pouvoir fonctionner, elles utilisent, la plupart du temps, des "choses" en
 &lt;strong&gt;
  entrées
 &lt;/strong&gt;
 et renvoient "quelque chose" en
 &lt;strong&gt;
  sortie
 &lt;/strong&gt;
 . Les entrées seront appelées des
 &lt;strong&gt;
  paramètres de la fonction
 &lt;/strong&gt;
 et
 &lt;em&gt;
  la
 &lt;/em&gt;
 sortie sera appelée
 &lt;strong&gt;
  valeur de retour
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Notez qu’une fonction ne peut renvoyer qu’un seul résultat à la fois. Notez également qu’une fonction ne renvoie pas obligatoirement un résultat. Elle n’est pas non plus obligée d’utiliser des paramètres.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="les-paramètres"&gt;
 &lt;a aria-hidden="true" href="#les-paramètres"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les paramètres
&lt;/h5&gt;
&lt;p&gt;
 Les paramètres servent à nourrir votre fonction. Ils servent à donner des informations au traitement qu’elle doit effectuer. Prenons un exemple concret. Pour changer l’état d’une sortie du microcontrôleur, Arduino nous propose la fonction suivante:
 &lt;a href="http://arduino.cc/en/Reference/DigitalWrite"&gt;
  digitalWrite(pin, value)
 &lt;/a&gt;
 . Ainsi, la référence nous explique que la fonction a les caractéristiques suivantes:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  paramètre
  &lt;strong&gt;
   pin
  &lt;/strong&gt;
  : le numéro de la broche à changer
 &lt;/li&gt;
 &lt;li&gt;
  paramètre
  &lt;strong&gt;
   value
  &lt;/strong&gt;
  : l’état dans lequel mettre la broche (HIGH, (haut, +5V) ou LOW (bas, masse))
 &lt;/li&gt;
 &lt;li&gt;
  retour: pas de retour de résultat
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Comme vous pouvez le constater, l’exemple est explicite sans lire le code de la fonction.
Son nom, digitalWrite ("écriture numérique" pour les anglophobes), signifie qu’on va changer l’état d’une broche
 &lt;strong&gt;
  numérique
 &lt;/strong&gt;
 (donc pas analogique).
Ses paramètres ont eux aussi des noms explicites,
 &lt;strong&gt;
  pin
 &lt;/strong&gt;
 pour la broche à changer et
 &lt;strong&gt;
  value
 &lt;/strong&gt;
 pour l’état à lui donner.
Lorsque vous aller créer des fonctions, c’est à vous de voir si elles ont besoin de paramètres ou non.
Par exemple, vous voulez faire une fonction qui met en pause votre programme, vous pouvez faire une fonction
 &lt;code&gt;
  Pause()
 &lt;/code&gt;
 et déterminera la durée pendant laquelle le programme sera en pause.
On obtiendra donc, par exemple, la syntaxe suivante :
 &lt;code&gt;
  void Pause(char duree)
 &lt;/code&gt;
 .
Pour résumer un peu, on a le choix de créer des
 &lt;strong&gt;
  fonctions vides
 &lt;/strong&gt;
 , donc sans paramètres, ou bien des
 &lt;strong&gt;
  fonctions "typées"
 &lt;/strong&gt;
 qui acceptent
 &lt;em&gt;
  un ou plusieurs
 &lt;/em&gt;
 paramètres.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Mais c’est quoi ça "void" ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 J’y arrive ! Souvenez vous, un peu plus haut je vous expliquais qu’une fonction pouvait retourner une valeur, la fameuse valeur de sortie, je vais maintenant vous expliquer son fonctionnement.
&lt;/p&gt;
&lt;h4 id="le-type-void"&gt;
 &lt;a aria-hidden="true" href="#le-type-void"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le type void
&lt;/h4&gt;
&lt;p&gt;
 On vient de voir qu’une fonction pouvait accepter des paramètres et éventuellement renvoyer quelque chose.
Mais ce n’est pas obligatoire. En effet, si l’on reprend notre fonction "Pause", elle ne renvoie rien car ce n’est pas nécessaire de signaler quoi que ce soit.
Dans ce cas, on préfixera le nom de notre fonction avec le mot-clé "void".
La syntaxe utilisée est la suivante :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;nom_de_la_fonction&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// instructions&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  une fonction sans valeur de retour
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 On utilise donc le type
 &lt;code&gt;
  void
 &lt;/code&gt;
 pour dire que la fonction n’aura pas de retour. Une fonction de type void ne peut donc pas retourner de valeur. Par exemple :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;fonction&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; var = &lt;span class="hljs-number"&gt;24&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; var; &lt;span class="hljs-comment"&gt;// ne fonctionnera pas car la fonction est de type void&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Impossible pour une fonction void de retourner un entier
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ce code ne fonctionnera pas, parce que la fonction
 &lt;code&gt;
  int
 &lt;/code&gt;
 .
Ce qui est impossible ! Le compilateur le refusera et votre code final ne sera pas généré.
Vous connaissez d’ailleurs déjà au moins deux fonctions qui n’ont pas de retour…
Et oui, la fonction "setup" et la fonction "loop"
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 . Il n’y en a pas plus à savoir.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;h4 id="les-fonctions-typées"&gt;
 &lt;a aria-hidden="true" href="#les-fonctions-typées"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les fonctions "typées"
&lt;/h4&gt;
&lt;p&gt;
 Là, cela devient légèrement plus intéressant. En effet, si on veut créer une fonction qui calcule le résultat d’une addition de deux nombres (ou un calcul plus complexe), il serait bien de pouvoir renvoyer directement le résultat plutôt que de le stocker dans une variable qui a une portée globale et d’accéder à cette variable dans une autre fonction. En clair, l’appel de la fonction nous donne directement le résultat.
On peut alors faire "ce que l’on veut" avec ce résultat (le stocker dans une variable, l’utiliser dans une fonction, lui faire subir une opération, …)
&lt;/p&gt;
&lt;h5 id="comment-créer-une-fonction-typée"&gt;
 &lt;a aria-hidden="true" href="#comment-créer-une-fonction-typée"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Comment créer une fonction typée ?
&lt;/h5&gt;
&lt;p&gt;
 En soit, cela n’a rien de compliqué, il faut simplement remplacer
 &lt;code&gt;
  long
 &lt;/code&gt;
 , …) Voilà un exemple :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; &lt;span class="hljs-title"&gt;maFonction&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; resultat = &lt;span class="hljs-number"&gt;44&lt;/span&gt;;  &lt;span class="hljs-comment"&gt;// déclaration de ma variable résultat&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; resultat;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Une fonction typée "entier"
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 &lt;strong&gt;
  Notez que je n’ai pas mis les deux fonctions principales, à savoir
  &lt;code&gt;
   loop()
  &lt;/code&gt;
  , mais elles sont obligatoires !
 &lt;/strong&gt;
 Lorsqu’elle sera appelée, la fonction
 &lt;code&gt;
  resultat
 &lt;/code&gt;
 . Voyez cet exemple :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; calcul = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    calcul = &lt;span class="hljs-number"&gt;10&lt;/span&gt; * maFonction();
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; &lt;span class="hljs-title"&gt;maFonction&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; resultat = &lt;span class="hljs-number"&gt;44&lt;/span&gt;;  &lt;span class="hljs-comment"&gt;// déclaration de ma variable résultat&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; resultat;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Appel d’une fonction typée
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Dans la fonction
 &lt;code&gt;
  calcul = 10 * 44;
 &lt;/code&gt;
 Ce qui nous donne : calcul = 440.
Bon ce n’est qu’un exemple très simple pour vous montrer le fonctionnement.
Plus tard, lorsque vous serez au point, vous utiliserez certainement cette combinaison de façon plus complexe.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Comme cet exemple est très simple, je n’ai pas inscrit la valeur retournée par la fonction
   &lt;code&gt;
    maFonction()
   &lt;/code&gt;
   dans une variable, mais il est préférable de le faire. Du moins, lorsque c’est utile, ce qui n’est pas le cas ici.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="les-fonctions-avec-paramètres"&gt;
 &lt;a aria-hidden="true" href="#les-fonctions-avec-paramètres"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les fonctions avec paramètres
&lt;/h4&gt;
&lt;p&gt;
 C’est bien gentil tout ça, mais maintenant vous allez voir quelque chose de bien plus intéressant. Voilà un code, nous verrons ce qu’il fait après :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; x = &lt;span class="hljs-number"&gt;64&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; y = &lt;span class="hljs-number"&gt;192&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    maFonction(x, y);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; &lt;span class="hljs-title"&gt;maFonction&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; param1, &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; param2)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; somme = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    somme = param1 + param2;
    &lt;span class="hljs-comment"&gt;// somme = 64 + 192 = 255&lt;/span&gt;

    &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; somme;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Une fonction avec deux paramètres
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Que se passe-t-il ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 J’ai défini trois variables :
 &lt;code&gt;
  maFonction()
 &lt;/code&gt;
 est "typée" et accepte des
 &lt;strong&gt;
  paramètres
 &lt;/strong&gt;
 . Lisons le code du début :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  On déclare nos variables
 &lt;/li&gt;
 &lt;li&gt;
  La fonction
  &lt;code&gt;
   maFonction()
  &lt;/code&gt;
  que l’on a créée
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 C’est sur ce dernier point que l’on va se pencher. En effet, on a donné à la fonction des paramètres. Ces paramètres servent à "nourrir" la fonction. Pour faire simple, on dit à la fonction : "
 &lt;strong&gt;
  Voilà deux paramètres, je veux que tu t’en serves pour faire le calcul que je veux
 &lt;/strong&gt;
 " Ensuite arrive le prototype de la fonction.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Le prototype… de quoi tu parles ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Le prototype c’est le "titre complet" de la fonction. Grâce à elle on connait le
 &lt;strong&gt;
  nom
 &lt;/strong&gt;
 de la fonction, le
 &lt;strong&gt;
  type
 &lt;/strong&gt;
 de la valeur retourné, et le type des différents
 &lt;strong&gt;
  paramètres
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; &lt;span class="hljs-title"&gt;maFonction&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; param1, &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; param2)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  le prototype de la fonction.
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 La fonction récupère dans des variables les paramètres que l’on lui a envoyés. Autrement dit, dans la variable
 &lt;code&gt;
  y
 &lt;/code&gt;
 . Soit :
 &lt;code&gt;
  param2 = y = 192
 &lt;/code&gt;
 . Pour finir, on utilise ces deux variables créées "à la volée" dans le prototype de la fonction pour réaliser le calcul souhaité (une somme dans notre cas).
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   On parle aussi parfois de signature, pour désigner le nom et les paramètres de la fonction.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   A quoi ça sert de faire tout ça ? Pourquoi on utilise pas simplement les variables x et y dans la fonction ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Cela va nous servir à simplifier notre code. Mais pas seulement ! Par exemple, vous voulez faire plusieurs opérations différentes (addition, soustraction, etc.) et bien au lieu de créer plusieurs fonctions, on ne va en créer qu’une qui les fait toutes !
Mais, afin de lui dire quelle opération faire, vous lui donnerez un paramètre lui disant : "
 &lt;strong&gt;
  Multiplie ces deux nombres
 &lt;/strong&gt;
 " ou bien "
 &lt;strong&gt;
  additionne ces deux nombres
 &lt;/strong&gt;
 ". Ce que cela donnerait :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;unsigned&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; operation = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; x = &lt;span class="hljs-number"&gt;5&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; y = &lt;span class="hljs-number"&gt;10&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// le paramètre "opération" donne le type d'opération à faire&lt;/span&gt;
    maFonction(x, y, operation);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; &lt;span class="hljs-title"&gt;maFonction&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; param1, &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; param2, &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; param3)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; resultat = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;switch&lt;/span&gt;(param3)
    {
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;0&lt;/span&gt; : &lt;span class="hljs-comment"&gt;// addition, resultat = 15&lt;/span&gt;
        resultat = param1 + param2;
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;1&lt;/span&gt; : &lt;span class="hljs-comment"&gt;// soustraction, resultat = -5&lt;/span&gt;
        resultat = param1 - param2;
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;2&lt;/span&gt; : &lt;span class="hljs-comment"&gt;// multiplication, resultat = 50&lt;/span&gt;
        resultat = param1 * param2;
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;3&lt;/span&gt; : &lt;span class="hljs-comment"&gt;// division, resultat = 0 (car nombre entier)&lt;/span&gt;
        resultat = param1 / param2;
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;default&lt;/span&gt; :
        resultat = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    }

    &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; resultat;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Une fonction générique
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="les-tableaux"&gt;
 &lt;a aria-hidden="true" href="#les-tableaux"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les tableaux
&lt;/h3&gt;
&lt;p&gt;
 Comme son nom l’indique, cette partie va parler des tableaux.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Quel est l’intérêt de parler de cette surface ennuyeuse qu’utilisent nos chers enseignants ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Eh bien détrompez-vous, en informatique un tableau ça n’a rien à voir !
Si on devait (beaucoup) résumer, un tableau est une grosse variable.
Son but est de
 &lt;strong&gt;
  stocker des éléments de mêmes types en les mettant dans des cases
 &lt;/strong&gt;
 .
Par exemple, un prof qui stocke les notes de ses élèves.
Il utilisera un tableau de
 &lt;code&gt;
  float
 &lt;/code&gt;
 (nombre à virgule), avec une case par élèves.
Nous allons utiliser cet exemple tout au long de cette partie. Voici quelques précisions pour bien tout comprendre :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  chaque élève sera identifié par un numéro allant de 0 (le premier élève) à 19 (le vingtième élève de la classe)
 &lt;/li&gt;
 &lt;li&gt;
  on part de 0 car en informatique la première valeur dans un tableau est 0 !
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="un-tableau-en-programmation"&gt;
 &lt;a aria-hidden="true" href="#un-tableau-en-programmation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un tableau en programmation
&lt;/h4&gt;
&lt;p&gt;
 Un tableau, tout comme sous Excel, c’est un ensemble constitué de cases, lesquels vont contenir des informations.
En programmation, ces informations seront des
 &lt;strong&gt;
  nombres
 &lt;/strong&gt;
 . Chaque case d’un tableau contiendra une valeur.
En reprenant l’exemple des notes des élèves, le tableau répertoriant les notes de chaque élève ressemblerait à ceci :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       élève 0
      &lt;/th&gt;
      &lt;th&gt;
       élève 1
      &lt;/th&gt;
      &lt;th&gt;
       élève 2
      &lt;/th&gt;
      &lt;th&gt;
       […]
      &lt;/th&gt;
      &lt;th&gt;
       élève n-1
      &lt;/th&gt;
      &lt;th&gt;
       élève n
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       10
      &lt;/td&gt;
      &lt;td&gt;
       15,5
      &lt;/td&gt;
      &lt;td&gt;
       8
      &lt;/td&gt;
      &lt;td&gt;
       […]
      &lt;/td&gt;
      &lt;td&gt;
       18
      &lt;/td&gt;
      &lt;td&gt;
       7
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Un tableau en informatique
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;h5 id="a-quoi-ça-sert"&gt;
 &lt;a aria-hidden="true" href="#a-quoi-ça-sert"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 A quoi ça sert ?
&lt;/h5&gt;
&lt;p&gt;
 On va principalement utiliser des tableaux lorsque l’on aura besoin de stocker des informations sans pour autant créer une variable pour chaque information.
Toujours avec le même exemple, au lieu de créer une variable
 &lt;code&gt;
  eleve2
 &lt;/code&gt;
 et ainsi de suite pour chaque élève, on inscrit les notes des élèves dans un tableau.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Mais, concrètement c’est quoi un tableau : une variable ? une fonction ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Ni l’un, ni l’autre. En fait, on pourrait comparer cela avec un index qui pointe vers les valeurs de variables qui sont contenus dans chaque case du tableau.
Un petit schéma pour simplifier :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="table-wrapper"&gt;
  &lt;table class=" table table-bordered table-striped"&gt;
   &lt;thead&gt;
    &lt;tr&gt;
     &lt;th&gt;
      élève 0
     &lt;/th&gt;
     &lt;th&gt;
      élève 1
     &lt;/th&gt;
    &lt;/tr&gt;
   &lt;/thead&gt;
   &lt;tbody&gt;
    &lt;tr&gt;
     &lt;td&gt;
      variable dont on ne connaît pas le nom mais qui stocke une valeur
     &lt;/td&gt;
     &lt;td&gt;
      idem, mais variable différente de la case précédente
     &lt;/td&gt;
    &lt;/tr&gt;
   &lt;/tbody&gt;
  &lt;/table&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Par exemple, cela donnerait :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="table-wrapper"&gt;
  &lt;table class=" table table-bordered table-striped"&gt;
   &lt;thead&gt;
    &lt;tr&gt;
     &lt;th&gt;
      élève 0
     &lt;/th&gt;
     &lt;th&gt;
      élève 1
     &lt;/th&gt;
    &lt;/tr&gt;
   &lt;/thead&gt;
   &lt;tbody&gt;
    &lt;tr&gt;
     &lt;td&gt;
      variable
      &lt;code&gt;
       note_eleve0
      &lt;/code&gt;
     &lt;/td&gt;
     &lt;td&gt;
      variable
      &lt;code&gt;
       note_eleve1
      &lt;/code&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
   &lt;/tbody&gt;
  &lt;/table&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Avec notre exemple :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="table-wrapper"&gt;
  &lt;table class=" table table-bordered table-striped"&gt;
   &lt;thead&gt;
    &lt;tr&gt;
     &lt;th&gt;
      élève 0
     &lt;/th&gt;
     &lt;th&gt;
      élève 1
     &lt;/th&gt;
    &lt;/tr&gt;
   &lt;/thead&gt;
   &lt;tbody&gt;
    &lt;tr&gt;
     &lt;td&gt;
      10
     &lt;/td&gt;
     &lt;td&gt;
      15,5
     &lt;/td&gt;
    &lt;/tr&gt;
   &lt;/tbody&gt;
  &lt;/table&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Soit, lorsque l’on demandera la valeur de la case 1 (correspondant à la note de l’élève 1), le tableau nous renverra le nombre : 15,5. Alors, dans un premier temps, on va voir comment déclarer un tableau et l’initialiser. Vous verrez qu’il y a différentes manières de procéder. Après, on finira par apprendre comment utiliser un tableau et aller chercher des valeurs dans celui-ci. Et pour finir, on terminera ce chapitre par un exemple. Il y a encore du boulot !
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;h4 id="déclarer-un-tableau"&gt;
 &lt;a aria-hidden="true" href="#déclarer-un-tableau"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Déclarer un tableau
&lt;/h4&gt;
&lt;p&gt;
 Comme expliqué plus tôt, un tableau contient des éléments
 &lt;em&gt;
  de même type
 &lt;/em&gt;
 . On le déclare donc avec un type semblable, et une taille représentant le nombre d’éléments qu’il contiendra. Par exemple, pour notre classe de 20 étudiants :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; notes[&lt;span class="hljs-number"&gt;20&lt;/span&gt;];
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  déclarer un tableau de 20 cases
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 On veut stocker des notes, donc des valeurs décimales entre 0 et 20.
On va donc créer un tableau de float (car c’est le type de variable qui accepte les nombres à virgule, souvenez-vous !
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 ). Dans cette classe, il y a 20 élèves (de 0 à 19) donc le tableau contiendra 20 éléments. Si on voulait faire un tableau de 100 étudiants dans lesquels on recense leurs nombres d’absence, on ferait le tableau suivant:
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; absenteisme[&lt;span class="hljs-number"&gt;100&lt;/span&gt;];
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  un tableau de
  &lt;code&gt;
   char
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="accéder-et-modifier-une-case-du-tableau"&gt;
 &lt;a aria-hidden="true" href="#accéder-et-modifier-une-case-du-tableau"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Accéder et modifier une case du tableau
&lt;/h4&gt;
&lt;p&gt;
 Pour accéder à une case d’un tableau, il suffit de connaître
 &lt;strong&gt;
  l’indice
 &lt;/strong&gt;
 de la case à laquelle on veut accéder.
L’indice c’est le numéro de la case qu’on veut lire/écrire. Par exemple, pour lire la valeur de la case 10 (donc indice 9 car on commence à 0):
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; notes[&lt;span class="hljs-number"&gt;20&lt;/span&gt;]; &lt;span class="hljs-comment"&gt;// notre tableau&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; valeur; &lt;span class="hljs-comment"&gt;// une variable qui contiendra une note&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// valeur contient désormais la note du dixième élève&lt;/span&gt;
valeur = notes[&lt;span class="hljs-number"&gt;9&lt;/span&gt;];
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Accéder à une valeur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ce code se traduit par l’enregistrement de la valeur contenue dans la dixième case du tableau, dans une variable nommée
 &lt;code&gt;
  valeur
 &lt;/code&gt;
 .
A présent, si on veut aller modifier cette même valeur, on fait comme avec une variable normale, il suffit d’utiliser l’opérateur ' = ' :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;notes[&lt;span class="hljs-number"&gt;9&lt;/span&gt;] = &lt;span class="hljs-number"&gt;10&lt;/span&gt;,&lt;span class="hljs-number"&gt;5&lt;/span&gt;;   &lt;span class="hljs-comment"&gt;// on change la note du dixième élève&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Modifier une valeur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 En fait, on procède de la même manière que pour changer la valeur d’une variable, car, je vous l’ai dit, chaque case d’un tableau est une variable qui contient une valeur ou non.
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Faites attention aux indices utilisés. Si vous essayez de lire/écrire dans une case de tableau trop loin (indice trop grand, par exemple 987362598412
   &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
   ), le comportement pourrait devenir imprévisible.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Car en pratique vous modifierez des valeurs qui seront peut-être utilisées par le système pour autre chose. Ce qui pourrait avoir de graves conséquences !
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Vous avez sûrement rencontré des crashs de programme sur votre ordinateur, ils sont souvent dû à la modification de variable qui n’appartiennent pas au programme, donc l’
   &lt;abbr title="Operating System"&gt;
    OS
   &lt;/abbr&gt;
   "tue" ce programme qui essai de manipuler des trucs qui ne lui appartiennent pas.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="initialiser-un-tableau"&gt;
 &lt;a aria-hidden="true" href="#initialiser-un-tableau"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Initialiser un tableau
&lt;/h4&gt;
&lt;p&gt;
 Au départ, notre tableau était vide :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; notes[&lt;span class="hljs-number"&gt;20&lt;/span&gt;];
&lt;span class="hljs-comment"&gt;// on créer un tableau dont le contenu est vide, on sait simplement qu'il contiendra 20 nombres&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ce que l’on va faire, c’est
 &lt;strong&gt;
  initialiser
 &lt;/strong&gt;
 notre tableau. On a la possibilité de remplir chaque case
 &lt;em&gt;
  une par une
 &lt;/em&gt;
 ou bien utiliser une boucle qui remplira le tableau à notre place.
Dans le premier cas, on peut mettre la valeur que l’on veut dans chaque case du tableau, tandis qu’avec la deuxième solution, on remplira les cases du tableau avec la même valeur, bien que l’on puisse le remplir avec des valeur différentes mais c’est un peu plus compliqué.
Dans notre exemple des notes, on part du principe que 6l’examen n’est pas passé, donc tout le monde à 0.
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Pour cela, on parcourt toutes les cases en leur mettant la valeur 0 :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; i=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// une variable que l'on va incrémenter&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; notes[&lt;span class="hljs-number"&gt;20&lt;/span&gt;];  &lt;span class="hljs-comment"&gt;// notre tableau&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// boucle for qui remplira le tableau pour nous&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(i = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class="hljs-number"&gt;20&lt;/span&gt;; i++)
    {
        notes[i] = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// chaque case du tableau vaudra 0&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Initialisation d’un tableau
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   L’initialisation d’un tableau peut se faire directement lors de sa création, comme ceci :
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; note[] = {&lt;span class="hljs-number"&gt;0&lt;/span&gt;,&lt;span class="hljs-number"&gt;0&lt;/span&gt;,&lt;span class="hljs-number"&gt;0&lt;/span&gt;,&lt;span class="hljs-number"&gt;0&lt;/span&gt; &lt;span class="hljs-comment"&gt;/*, etc.*/&lt;/span&gt; };
&lt;span class="hljs-comment"&gt;// Le tableau aura alors autant de case que de nombre passé en paramètres&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Initialisation à la déclaration
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="exemple-de-traitement"&gt;
 &lt;a aria-hidden="true" href="#exemple-de-traitement"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Exemple de traitement
&lt;/h4&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Bon c’est bien beau tout ça, on a des notes coincées dans un tableau, on en fait quoi ? :roll:
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Excellente question, et ça dépendra de l’usage que vous en aurez
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 ! Voyons des cas d’utilisations pour notre tableau de notes (en utilisant des fonctions
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 ).
&lt;/p&gt;
&lt;h5 id="la-note-maximale"&gt;
 &lt;a aria-hidden="true" href="#la-note-maximale"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La note maximale
&lt;/h5&gt;
&lt;p&gt;
 Comme le titre l’indique, on va rechercher la note maximale (le meilleur élève de la classe). La fonction recevra en paramètre le tableau de float, le nombre d’éléments dans ce tableau et renverra la meilleure note.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; &lt;span class="hljs-title"&gt;meilleurNote&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; tableau[], &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; nombreEleve)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; max = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// variable contenant la future meilleure note&lt;/span&gt;

    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(i=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; i&amp;lt;nombreEleve, i++)
    {
        &lt;span class="hljs-comment"&gt;// si la note lue est meilleure que la meilleure actuelle&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(tableau[i] &amp;gt; max)
        {
            &lt;span class="hljs-comment"&gt;// alors on l'enregistre&lt;/span&gt;
            max = tableau[i];
        }
    }
    &lt;span class="hljs-comment"&gt;// on retourne la meilleure note&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; max;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Recherche de la note maximale
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ce que l’on fait, pour lire un tableau, est exactement la même chose que lorsqu’on l’initialise avec une boucle
 &lt;code&gt;
  for
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Il est tout à fait possible de mettre la valeur de la case recherché dans une variable :
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; valeur = tableau[&lt;span class="hljs-number"&gt;5&lt;/span&gt;]; &lt;span class="hljs-comment"&gt;// on enregistre la valeur de la case 6 du tableau dans une variable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Voila, ce n’était pas si dur, vous pouvez faire pareil pour chercher la valeur minimale afin vous entrainer !
&lt;/p&gt;
&lt;h5 id="calcul-de-moyenne"&gt;
 &lt;a aria-hidden="true" href="#calcul-de-moyenne"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Calcul de moyenne
&lt;/h5&gt;
&lt;p&gt;
 Ici, on va chercher la moyenne des notes. La signature de la fonction sera exactement la même que celle de la fonction précédente, à la différence du nom ! Je vous laisse réfléchir, voici la signature de la fonction, le code est plus bas mais essayez de le trouver vous-même avant :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; &lt;span class="hljs-title"&gt;moyenneNote&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; tableau[], &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; nombreEleve)&lt;/span&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 &lt;strong&gt;
  Une solution :
 &lt;/strong&gt;
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; &lt;span class="hljs-title"&gt;moyenneNote&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;float&lt;/span&gt; tableau[], &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; nombreEleve)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;double&lt;/span&gt; total = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// addition de toutes les notes&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;float&lt;/span&gt; moyenne = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// moyenne des notes&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(i = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; i &amp;lt; nombreEleve; i++)
    {
        total = total + tableau[i];
    }
    moyenne = total / nombreEleve;
    &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; moyenne;
}
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    Calcul de la moyenne des notes
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 On en termine avec les tableaux, on verra peut être plus de choses en pratique.
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
&lt;/p&gt;
&lt;p&gt;
 Maintenant vous pouvez pleurer, de joie bien sûr, car vous venez de terminer la première partie ! A présent, faisons place à la pratique…
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Notre premier programme !</title><link href="https://eskimon.fr/tuto-arduino-201-notre-premier-programme" rel="alternate"></link><published>2013-12-10T20:03:00+01:00</published><updated>2013-12-10T20:03:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-10:/tuto-arduino-201-notre-premier-programme</id><summary type="html">&lt;p&gt;
 Vous voilà enfin arrivé au moment fatidique où vous allez devoir programmer ! Mais avant cela, je vais vous montrer ce qui va nous servir pour ce chapitre.
&lt;/p&gt;
&lt;p&gt;
 En l’occurrence, apprendre à utiliser une
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 et la référence, présente sur le site
 &lt;code&gt;
  arduino.cc
 &lt;/code&gt;
 qui vous sera très utile lorsque …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Vous voilà enfin arrivé au moment fatidique où vous allez devoir programmer ! Mais avant cela, je vais vous montrer ce qui va nous servir pour ce chapitre.
&lt;/p&gt;
&lt;p&gt;
 En l’occurrence, apprendre à utiliser une
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 et la référence, présente sur le site
 &lt;code&gt;
  arduino.cc
 &lt;/code&gt;
 qui vous sera très utile lorsque vous aurez besoin de faire un programme utilisant une notion qui n’est pas traitée dans ce cours.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#la-diode-électroluminescente"&gt;
    La diode électroluminescente
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#del--led"&gt;
      DEL / LED ?
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#symbole"&gt;
       Symbole
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#astuce-mnémotechnique"&gt;
       Astuce mnémotechnique
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#fonctionnement"&gt;
      Fonctionnement
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#polarisation-directe"&gt;
       Polarisation directe
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#polarisation-inverse"&gt;
       Polarisation inverse
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#utilisation"&gt;
       Utilisation
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-tension-maximum-directe"&gt;
       La tension maximum directe
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-tension-maximum-inverse"&gt;
       La tension maximum inverse
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-courant-de-passage"&gt;
       Le courant de passage
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#par-quoi-on-commence"&gt;
    Par quoi on commence ?
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-but"&gt;
       Le but
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#objectif"&gt;
       Objectif
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#matériel"&gt;
       Matériel
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#un-outil-formidable-la-breadboard"&gt;
      Un outil formidable : la breadboard !
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#principe-de-la-breadboard"&gt;
       Principe de la breadboard
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#réalisation"&gt;
     Réalisation
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#créer-un-nouveau-projet"&gt;
      Créer un nouveau projet
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-code-minimal"&gt;
       Le code minimal
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#créer-le-programme-les-bons-outils"&gt;
    Créer le programme : les bons outils !
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#la-référence-arduino"&gt;
      La référence Arduino
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#quest-ce-que-cest"&gt;
       Qu’est ce que c’est ?
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#comment-lutiliser"&gt;
       Comment l’utiliser ?
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#allumer-notre-led"&gt;
      Allumer notre LED
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#1ère-étape"&gt;
       1ère étape
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#2ème-étape"&gt;
       2ème étape
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#comment-tout-cela-fonctionne"&gt;
    Comment tout cela fonctionne ?
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#le-démarrage"&gt;
      Le démarrage
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#chargez"&gt;
       Chargez !
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-vraie-forme-du-programme"&gt;
       La vraie forme du programme
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#et-lexécution-du-programme"&gt;
     Et l’exécution du programme
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#la-vitesse-dexécution"&gt;
     La vitesse d’exécution
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="la-diode-électroluminescente"&gt;
 &lt;a aria-hidden="true" href="#la-diode-électroluminescente"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La diode électroluminescente
&lt;/h3&gt;
&lt;h4 id="del--led"&gt;
 &lt;a aria-hidden="true" href="#del--led"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 DEL /
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 ?
&lt;/h4&gt;
&lt;p&gt;
 La question n’est pas de savoir quelle abréviation choisir mais plutôt de savoir ce que c’est. Une
 &lt;strong&gt;
  DEL
 &lt;/strong&gt;
 /
 &lt;strong&gt;
  &lt;abbr title="Light Emitting Device/Diode"&gt;
   LED
  &lt;/abbr&gt;
 &lt;/strong&gt;
 :
 &lt;strong&gt;
  D
 &lt;/strong&gt;
 iode
 &lt;strong&gt;
  E
 &lt;/strong&gt;
 lectro-
 &lt;strong&gt;
  L
 &lt;/strong&gt;
 uminescente, ou bien "
 &lt;strong&gt;
  L
 &lt;/strong&gt;
 ight
 &lt;strong&gt;
  E
 &lt;/strong&gt;
 mitting
 &lt;strong&gt;
  D
 &lt;/strong&gt;
 iode" en anglais.
Il s’agit d’un composant électronique qui crée de la lumière quand il est parcouru par un courant électrique.
Je vous en ai faits acheter de différentes couleurs. Vous pouvez, pour ce chapitre, utiliser celle que vous voudrez, cela m’est égal.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 Vous voyez, ci-dessous sur votre droite, la photo d’une DEL de couleur rouge.
La taille n’est pas réelle, sa "tête" (en rouge) ne fait que 5mm de diamètre.
C’est ce composant que nous allons essayer d’allumer avec notre carte Arduino. Mais avant, voyons un peu comment il fonctionne.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   J’appellerai la diode électroluminescente, tout au long du cours, une
   &lt;abbr title="Light Emitting Device/Diode"&gt;
    LED
   &lt;/abbr&gt;
   .
Une
   &lt;abbr title="Light Emitting Device/Diode"&gt;
    LED
   &lt;/abbr&gt;
   est en fait une
   &lt;strong&gt;
    diode
   &lt;/strong&gt;
   qui émet de la lumière.
Je vais donc vous parler du fonctionnement des diodes en même temps que celui des
   &lt;abbr title="Light Emitting Device/Diode"&gt;
    LED
   &lt;/abbr&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;figure&gt;
 &lt;img alt="Des LED / DEL" src="./images/uploaded/tuto-arduino-201-notre-premier-programme/des-led-del.jpg"/&gt;
 &lt;figcaption&gt;
  Des
  &lt;abbr title="Light Emitting Device/Diode"&gt;
   LED
  &lt;/abbr&gt;
  / DEL - (CC-BY-SA,
  &lt;a href="http://commons.wikimedia.org/wiki/File:Diodos_LED_foto.png"&gt;
   Saperaud
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="symbole"&gt;
 &lt;a aria-hidden="true" href="#symbole"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Symbole
&lt;/h5&gt;
&lt;p&gt;
 Sur un schéma électronique, chaque composant est repéré par un symbole qui lui est propre.
Celui de la diode est le suivant :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;img alt="Symbole de la diode" src="./images/uploaded/tuto-arduino-201-notre-premier-programme/symbole-de-la-diode.jpg"/&gt;
  &lt;figcaption&gt;
   Symbole de la diode
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 Celui de la
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 est :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;img alt="Symbole de la LED" src="./images/uploaded/tuto-arduino-201-notre-premier-programme/symbole-de-la-led.jpg"/&gt;
  &lt;figcaption&gt;
   Symbole de la LED
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 Il y a donc très peu de différence entre les deux.
La
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 est simplement une diode qui émet de la lumière, d’où les flèches sur son symbole.
&lt;/p&gt;
&lt;h5 id="astuce-mnémotechnique"&gt;
 &lt;a aria-hidden="true" href="#astuce-mnémotechnique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Astuce mnémotechnique
&lt;/h5&gt;
&lt;p&gt;
 Pour ce souvenir de quel côté est l’anode ou la cathode, voici un moyen mnémotechnique simple et en image
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 …
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       &lt;img src="./images/uploaded/tuto-arduino-201-notre-premier-programme/74ddd784-c8c3-4f35-afc7-acb843f7c4e3png960x960_q85png.png"/&gt;
      &lt;/th&gt;
      &lt;th&gt;
       &lt;img src="./images/uploaded/tuto-arduino-201-notre-premier-programme/c0d8453c-4611-433a-bec5-5af84637eccfpng960x960_q85png.png"/&gt;
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       K comme K-thode
      &lt;/td&gt;
      &lt;td&gt;
       A comme A-node
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Moyen mnémotechnique pour se souvenir de l’anode et de la cathode
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;h4 id="fonctionnement"&gt;
 &lt;a aria-hidden="true" href="#fonctionnement"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Fonctionnement
&lt;/h4&gt;
&lt;h5 id="polarisation-directe"&gt;
 &lt;a aria-hidden="true" href="#polarisation-directe"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Polarisation directe
&lt;/h5&gt;
&lt;p&gt;
 On parle de
 &lt;strong&gt;
  polarisation
 &lt;/strong&gt;
 lorsqu’un composant électronique est utilisé dans un circuit électronique de la "bonne manière".
En fait lorsqu’il est polarisé, c’est qu’on l’utilise de la façon souhaitée.
Pour polariser la diode, on doit faire en sorte que le courant la parcours de l’anode vers la cathode. Autrement dit, la tension doit être plus élevée à l’anode qu’à la cathode.
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;img alt="Diode polarisée directement" src="./images/uploaded/tuto-arduino-201-notre-premier-programme/diode-polarisee-directement.jpg"/&gt;
  &lt;figcaption&gt;
   Diode polarisée directement
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;h5 id="polarisation-inverse"&gt;
 &lt;a aria-hidden="true" href="#polarisation-inverse"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Polarisation inverse
&lt;/h5&gt;
&lt;p&gt;
 La polarisation inverse d’une diode est l’opposé de la polarisation directe. Pour créer ce type de montage, il suffit simplement, dans notre cas, de "retourner" la diode enfin la brancher "à l’envers". Dans ce cas, le courant ne passe pas.
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;img alt="Diode polarisée en inverse" src="./images/uploaded/tuto-arduino-201-notre-premier-programme/diode-polarisee-en-inverse.jpg"/&gt;
  &lt;figcaption&gt;
   Diode polarisée en inverse
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Note : une diode polarisée en inverse ne grillera pas si elle est utilisée dans de bonnes conditions.
En fait, elle fonctionne de "la même façon" pour le courant positif et négatif.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="utilisation"&gt;
 &lt;a aria-hidden="true" href="#utilisation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utilisation
&lt;/h5&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si vous ne voulez pas faire partir votre première diode en fumée, je vous conseille de lire les prochaines lignes attentivement
   &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 En électronique, deux paramètres sont à prendre en compte : le courant et la tension.
Pour une diode, deux tensions sont importantes.
Il s’agit de la tension maximum en polarisation directe, et la tension maximum en polarisation inverse. Ensuite, pour un bon fonctionnement des
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 , le courant a lui aussi son importance.
&lt;/p&gt;
&lt;h5 id="la-tension-maximum-directe"&gt;
 &lt;a aria-hidden="true" href="#la-tension-maximum-directe"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La tension maximum directe
&lt;/h5&gt;
&lt;p&gt;
 Lorsque l’on utilise un composant, on doit prendre l’habitude d’utiliser la
 &lt;em&gt;
  "datasheet"
 &lt;/em&gt;
 ("documentation technique" en anglais) qui nous donne toutes les caractéristiques sur le composant.
Dans cette datasheet, on retrouvera quelque chose appelé "Forward Voltage", pour la diode.
Cette indication représente la chute de tension aux bornes de la diode lorsque du courant la traverse en sens direct.
Pour une diode classique (type
 &lt;a href="http://pdf1.alldatasheet.com/datasheet-pdf/view/196195/PHILIPS/1N4148.html"&gt;
  1N4148
 &lt;/a&gt;
 ), cette tension sera d’environ 1V.
Pour une
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 , on considérera plutôt une tension de 1,2 à 1,6V.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Bon, pour faire nos petits montages, on ne va pas chipoter, mais c’est la démarche à faire lorsque l’on conçoit un schéma électrique et que l’on dimensionne ses composants.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="la-tension-maximum-inverse"&gt;
 &lt;a aria-hidden="true" href="#la-tension-maximum-inverse"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La tension maximum inverse
&lt;/h5&gt;
&lt;p&gt;
 Cette tension représente la différence maximum admissible entre l’anode et la cathode lorsque celle-ci est branchée "à l’envers".
En effet, si vous mettez une tension trop importante à ces bornes, la jonction ne pourra pas le supporter et partira en fumée.
En anglais, on retrouve cette tension sous le nom de "Reverse Voltage" (ou même "Breakdown Voltage").
Si l’on reprend la diode 1N4148, elle sera comprise entre 75 et 100V.
Au-delà de cette tension, la jonction casse et la diode devient inutilisable.
Dans ce cas, la diode devient soit un court-circuit, soit un circuit ouvert.
Parfois cela peu causer des dommages importants dans nos appareils électroniques !
Quoi qu’il en soit, on ne manipulera jamais du 75V !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
&lt;/p&gt;
&lt;h5 id="le-courant-de-passage"&gt;
 &lt;a aria-hidden="true" href="#le-courant-de-passage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le courant de passage
&lt;/h5&gt;
&lt;p&gt;
 Le courant qui traverse une
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 a son importance.
Si l’on branche directement la
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 sur une pile, elle va s’allumer, puis tôt ou tard finira par s’éteindre… définitivement.
En effet, si on ne limite pas le courant traversant la
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 , elle prendra le courant maximum, et ça c’est pas bon car ce n’est pas le courant maximum qu’elle peut supporter.
Pour limiter le courant, on place une résistance avant (ou après) la
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 .
Cette résistance, savamment calculée, lui permettra d’assurer un fonctionnement optimal.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Mais comment on la calcule cette résistance ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Simplement avec la formule de base, la loi d’Ohm.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 Petit rappel:
 &lt;span class="inlineMath inlineMathDouble"&gt;
  &lt;span class="katex-display"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mi&gt;
         U
        &lt;/mi&gt;
        &lt;mo&gt;
         =
        &lt;/mo&gt;
        &lt;mi&gt;
         R
        &lt;/mi&gt;
        &lt;mo&gt;
         ∗
        &lt;/mo&gt;
        &lt;mi&gt;
         I
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        U = R * I
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
       U
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mrel"&gt;
       =
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.00773em;"&gt;
       R
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mbin"&gt;
       ∗
      &lt;/span&gt;
      &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.07847em;"&gt;
       I
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
&lt;/p&gt;
&lt;p&gt;
 Dans le cas d’une
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 , on considère, en général, que l’intensité la traversant doit être de 20 mA.
Si on veut être rigoureux, il faut aller chercher cette valeur dans le datasheet.
On a donc
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        I
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mi&gt;
        m
       &lt;/mi&gt;
       &lt;mi&gt;
        A
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       I = 20 mA
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.07847em;"&gt;
      I
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      m
     &lt;/span&gt;
     &lt;span class="mord mathit"&gt;
      A
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 . Ensuite, on prendra pour l’exemple une tension d’alimentation de 5V (en sortie de l’Arduino, par exemple) et une tension aux bornes de la
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 de 1,2V en fonctionnement normal.
On peut donc calculer la tension qui sera aux bornes de la résistance :
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mi&gt;
        U
       &lt;/mi&gt;
       &lt;mi&gt;
        r
       &lt;/mi&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        5
       &lt;/mn&gt;
       &lt;mo&gt;
        −
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mo separator="true"&gt;
        ,
       &lt;/mo&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        3
       &lt;/mn&gt;
       &lt;mo separator="true"&gt;
        ,
       &lt;/mo&gt;
       &lt;mn&gt;
        8
       &lt;/mn&gt;
       &lt;mi&gt;
        V
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       Ur = 5 - 1,2 = 3,8 V
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.8777699999999999em;vertical-align:-0.19444em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord mathit" style="margin-right:0.10903em;"&gt;
      U
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.02778em;"&gt;
      r
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      5
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      −
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mpunct"&gt;
      ,
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.16666666666666666em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      3
     &lt;/span&gt;
     &lt;span class="mpunct"&gt;
      ,
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.16666666666666666em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      8
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.22222em;"&gt;
      V
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 .
Enfin, on peut calculer la valeur de la résistance à utiliser :
&lt;/p&gt;
&lt;div class="math"&gt;
 &lt;code class="katex" style="color: #cc0000"&gt;
  R = \frac{U}{I} \\\\
R = \frac{3,8}{0,02}\\\
R = 190\Omega
 &lt;/code&gt;
&lt;/div&gt;
&lt;p&gt;
 Et voilà, vous connaissez la valeur de la résistance à utiliser pour être sûr de ne pas griller des
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 à tour de bras.
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 À votre avis, vaut-il mieux utiliser une résistance de plus forte valeur ou de plus faible valeur ?
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   &lt;strong&gt;
    Réponse :
   &lt;/strong&gt;
  &lt;/p&gt;
  &lt;p&gt;
   Si on veut être sûr de ne pas détériorer la
   &lt;abbr title="Light Emitting Device/Diode"&gt;
    LED
   &lt;/abbr&gt;
   à cause d’un courant trop fort, on doit placer une résistance dont la valeur est plus grande que celle calculée. Autrement, la diode recevra le courant maximal pouvant la traverser.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/jyp1vJhpOhc" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="par-quoi-on-commence"&gt;
 &lt;a aria-hidden="true" href="#par-quoi-on-commence"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Par quoi on commence ?
&lt;/h3&gt;
&lt;h5 id="le-but"&gt;
 &lt;a aria-hidden="true" href="#le-but"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le but
&lt;/h5&gt;
&lt;p&gt;
 Le but de ce premier programme est… de vous faire programmer !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Non, je ne rigole pas ! Car c’est en pratiquant la programmation que l’on retient le mieux les commandes utilisées.
De plus, en faisant des erreurs, vous vous forgerez de bonnes bases qui vous seront très utiles ensuite, lorsqu’il s’agira de gagner du temps.
Mais avant tout, c’est aussi parce que ce tuto est centré sur la programmation que l’on va programmer !
&lt;/p&gt;
&lt;h5 id="objectif"&gt;
 &lt;a aria-hidden="true" href="#objectif"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Objectif
&lt;/h5&gt;
&lt;p&gt;
 L’objectif de ce premier programme va consister à allumer une
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 . C’est nul me direz vous.
J’en conviens. Cependant, vous verrez que ce n’est pas très simple.
Bien entendu, je n’allais pas créer un chapitre entier dont le but ultime aurait été d’allumer une
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 !
Non. Alors j’ai prévu de vous montrer deux trois trucs qui pourront vous aider dès lors que vous voudrez sortir du nid et prendre votre envol vers de nouveaux cieux !
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;h5 id="matériel"&gt;
 &lt;a aria-hidden="true" href="#matériel"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Matériel
&lt;/h5&gt;
&lt;p&gt;
 Pour pouvoir programmer, il vous faut, bien évidemment, une carte Arduino et un câble USB pour relier la carte au PC.
Mais pour voir le résultat de votre programme, vous aurez besoin d’éléments supplémentaires.
Notamment, une
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 et une résistance.
&lt;/p&gt;
&lt;h4 id="un-outil-formidable-la-breadboard"&gt;
 &lt;a aria-hidden="true" href="#un-outil-formidable-la-breadboard"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un outil formidable : la breadboard !
&lt;/h4&gt;
&lt;p&gt;
 Je vais maintenant vous présenter un outil très pratique lorsque l’on fait ses débuts en électronique ou lorsque l’on veut tester rapidement/facilement un montage.
Cet accessoire s’appelle une
 &lt;strong&gt;
  breadboard
 &lt;/strong&gt;
 (littéralement : planche à pain, techniquement : plaque d’essai sans soudure).
Pour faire simple, c’est une plaque pleine de trous !
&lt;/p&gt;
&lt;h5 id="principe-de-la-breadboard"&gt;
 &lt;a aria-hidden="true" href="#principe-de-la-breadboard"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Principe de la breadboard
&lt;/h5&gt;
&lt;p&gt;
 Certes la plaque est pleine de trous, mais pas de manière innocente !
En effet, la plupart d’entre eux sont reliés. Voici un petit schéma rapide qui va aider à la compréhension.
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;img alt="Une breadboard" src="./images/uploaded/tuto-arduino-201-notre-premier-programme/une-breadboard.png"/&gt;
  &lt;figcaption&gt;
   Une breadboard
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 Comme vous pouvez le voir sur l’image, j’ai dessiné des zones.
Les zones rouges et noires correspondent à l’alimentation.
Souvent, on retrouve deux lignes comme celles-ci permettant de relier ses composants aux alimentations nécessaires.
Par convention, le noir représente la masse et le rouge est l’alimentation (+5V, +12V, -5V… ce que vous voulez y amener).
Habituellement tous les trous d’une même
 &lt;strong&gt;
  ligne
 &lt;/strong&gt;
 sont reliés sur cette zone.
Ainsi, vous avez une ligne d’alimentation parcourant tout le long de la carte.
Ensuite, on peut voir des zones en bleu. Ces zones sont reliées entre elles par
 &lt;strong&gt;
  colonne
 &lt;/strong&gt;
 .
Ainsi, tous les trous sur une même colonne sont reliés entre eux.
En revanche, chaque colonne est distincte. En faisant chevaucher des composants sur plusieurs colonnes vous pouvez les connecter entre eux.
Dernier point, vous pouvez remarquer un espace coupant la carte en deux de manière symétrique.
Cet espace coupe aussi la liaison des colonnes.
Ainsi, sur le dessin ci-dessus on peut voir que chaque colonne possède cinq trous reliés entre eux. Cet espace au milieu est normalisé et doit faire la largeur des circuits intégrés standards.
En posant un circuit intégré à cheval au milieu, chaque patte de ce dernier se retrouve donc sur une colonne, isolée de la précédente et de la suivante.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si vous voulez voir plus concrètement ce fonctionnement, je vous conseille d’essayer le logiciel
   &lt;a href="http://fritzing.org/"&gt;
    Fritzing
   &lt;/a&gt;
   , qui permet de faire des circuits de manière assez simple et intuitive.
Vous verrez ainsi comment les colonnes sont séparées les unes des autres.
De plus, ce logiciel sera utilisé pour le reste du tuto pour les captures d’écrans des schémas électroniques.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/aMyp01DlOp4" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="réalisation"&gt;
 &lt;a aria-hidden="true" href="#réalisation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Réalisation
&lt;/h4&gt;
&lt;p&gt;
 Avec le brochage de la carte Arduino, vous devrez connecter la plus grande patte au +5V (broche
 &lt;em&gt;
  5V
 &lt;/em&gt;
 ).
La plus petite patte étant reliée à la résistance, elle-même reliée à la broche numéro 2 de la carte.
Tout ceci a une importance.
En effet, on pourrait faire le contraire, brancher la
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 vers la masse et l’allumer en fournissant le 5V depuis la broche de signal.
Cependant, les composants comme les microcontrôleurs n’aiment pas trop délivrer du courant, ils préfèrent l’absorber.
Pour cela, on préférera donc alimenter la
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 en la placant au +5V et en mettant la broche de Arduino à la masse pour faire passer le courant.
Si on met la broche à 5V, dans ce cas le potentiel est le même de chaque côté de la
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 et elle ne s’allume pas !
Ce n’est pas plus compliqué que ça !
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 Schéma de la réalisation (un exemple de branchement sans breadboard et deux exemples avec) :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="réalisation montage, schéma de la carte" src="./images/uploaded/tuto-arduino-201-notre-premier-programme/realisation-montage-schema-de-la-carte.jpg"/&gt;
 &lt;figcaption&gt;
  réalisation montage, schéma de la carte
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Montage avec une LED et sans breadboard" src="./images/uploaded/tuto-arduino-201-notre-premier-programme/montage-avec-une-led-et-sans-breadboard.png"/&gt;
 &lt;figcaption&gt;
  Montage avec une LED et sans breadboard
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Montage une LED sur breadboard" src="./images/uploaded/tuto-arduino-201-notre-premier-programme/montage-une-led-sur-breadboard.png"/&gt;
 &lt;figcaption&gt;
  Montage une LED sur breadboard
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Montage une LED sur breadboard" src="./images/uploaded/tuto-arduino-201-notre-premier-programme/montage-une-led-sur-breadboard.png"/&gt;
 &lt;figcaption&gt;
  Montage une LED sur breadboard
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="créer-un-nouveau-projet"&gt;
 &lt;a aria-hidden="true" href="#créer-un-nouveau-projet"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Créer un nouveau projet
&lt;/h4&gt;
&lt;p&gt;
 Pour pouvoir programmer notre carte, il faut que l’on créer un nouveau programme.
Ouvrez votre logiciel Arduino. Allez dans le menu
 &lt;em&gt;
  File
 &lt;/em&gt;
 et choisissez l’option
 &lt;em&gt;
  Save as…
 &lt;/em&gt;
 :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Enregistrer sous..." src="./images/uploaded/tuto-arduino-201-notre-premier-programme/enregistrer-sous.jpg"/&gt;
 &lt;figcaption&gt;
  Enregistrer sous...
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Vous arrivez dans cette nouvelle fenêtre :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Enregistrer" src="./images/uploaded/tuto-arduino-201-notre-premier-programme/enregistrer.jpg"/&gt;
 &lt;figcaption&gt;
  Enregistrer
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Tapez le nom du programme, dans mon cas, je l’ai appelé
 &lt;em&gt;
  test_1
 &lt;/em&gt;
 . Enregistrez.
Vous arrivez dans votre nouveau programme, qui est vide pour l’instant, et dont le nom s’affiche en Haut de la fenêtre et dans un petit onglet :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Votre nouveau programme !" src="./images/uploaded/tuto-arduino-201-notre-premier-programme/votre-nouveau-programme.jpg"/&gt;
 &lt;figcaption&gt;
  Votre nouveau programme !
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="le-code-minimal"&gt;
 &lt;a aria-hidden="true" href="#le-code-minimal"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le code minimal
&lt;/h5&gt;
&lt;p&gt;
 Pour commencer le programme, il nous faut un code minimal.
Ce code va nous permettre d’initialiser la carte et va servir à écrire notre propre programme.
Ce code, le voici :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// fonction d'initialisation de la carte&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// contenu de l'initialisation&lt;/span&gt;
}

&lt;span class="hljs-comment"&gt;// fonction principale, elle se répète (s’exécute) à l'infini&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// contenu de votre programme&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Squelette minimal d’un programme Arduino
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="créer-le-programme-les-bons-outils"&gt;
 &lt;a aria-hidden="true" href="#créer-le-programme-les-bons-outils"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Créer le programme : les bons outils !
&lt;/h3&gt;
&lt;h4 id="la-référence-arduino"&gt;
 &lt;a aria-hidden="true" href="#la-référence-arduino"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La référence Arduino
&lt;/h4&gt;
&lt;h5 id="quest-ce-que-cest"&gt;
 &lt;a aria-hidden="true" href="#quest-ce-que-cest"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Qu’est ce que c’est ?
&lt;/h5&gt;
&lt;p&gt;
 L’Arduino étant un projet dont la communauté est très active, nous offre sur son site internet une
 &lt;strong&gt;
  référence
 &lt;/strong&gt;
 .
Mais qu’est ce que c’est ? Eh bien il s’agit simplement de "la notice d’utilisation" du langage Arduino.
Plus exactement, une page internet de leur site est dédiée au référencement de chaque code que l’on peut utiliser pour faire un programme.
&lt;/p&gt;
&lt;h5 id="comment-lutiliser"&gt;
 &lt;a aria-hidden="true" href="#comment-lutiliser"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Comment l’utiliser ?
&lt;/h5&gt;
&lt;p&gt;
 Pour l’utiliser, il suffit d’aller sur
 &lt;a href="http://arduino.cc/en/Reference/HomePage"&gt;
  la page de leur site
 &lt;/a&gt;
 , malheureusement en anglais, mais dont il existe une traduction pas tout à fait complète sur le site Français Arduino.
Ce que l’on voit en arrivant sur la page : trois colonnes avec chacune un type d’éléments qui forment les langages Arduino.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;em&gt;
   Structure
  &lt;/em&gt;
  : cette colonne référence les éléments de la structure du langage Arduino. On y retrouve les conditions, les opérations, etc.
 &lt;/li&gt;
 &lt;li&gt;
  &lt;em&gt;
   Variables
  &lt;/em&gt;
  : comme son nom l’indique, elle regroupe les différents types de variables utilisables, ainsi que certaines opérations particulières
 &lt;/li&gt;
 &lt;li&gt;
  &lt;em&gt;
   Functions
  &lt;/em&gt;
  : ici c’est tout le reste, mais surtout les fonctions de lecture/écriture des broches du microcontrôleur (ainsi que d’autres fonctions bien utiles)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Il est très important de savoir utiliser la documentation que nous offre Arduino !
Car en sachant cela, vous pourrez faire des programmes sans avoir appris préalablement à utiliser telle fonction ou telle autre. Vous pourrez devenir les maitres du monde !!!
Euh, non, je crois pas en fait…
   &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="allumer-notre-led"&gt;
 &lt;a aria-hidden="true" href="#allumer-notre-led"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Allumer notre
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
&lt;/h4&gt;
&lt;h5 id="1ère-étape"&gt;
 &lt;a aria-hidden="true" href="#1ère-étape"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 1ère étape
&lt;/h5&gt;
&lt;p&gt;
 Il faut avant tout définir les broches du micro-contrôleur. Cette étape constitue elle-même deux sous étapes.
La première étant de créer une variable définissant la broche utilisée, ensuite, définir si la broche utilisée doit être une entrée du micro-contrôleur ou une sortie.
Premièrement, donc, définissons la broche utilisée du microcontrôleur :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_rouge = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;   &lt;span class="hljs-comment"&gt;// définition de la broche 2 de la carte en tant que variable&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Le terme
 &lt;code&gt;
  const
 &lt;/code&gt;
 signifie que l’on définit la variable comme étant constante.
Par conséquent, on change la nature de la variable qui devient alors constante et sa valeur ne pourra jamais être changée.
Le terme
 &lt;code&gt;
  int
 &lt;/code&gt;
 correspond à un type de variable.
En définissant une variable de ce type, elle peut stocker un nombre allant de -2147483648 à +2147483647 !
Cela nous suffit amplement !
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 Nous sommes donc en présence d’une variable, nommée
 &lt;code&gt;
  led_rouge
 &lt;/code&gt;
 , qui est en fait une constante, qui peut prendre une valeur allant de -2147483648 à +2147483647.
Dans notre cas, cette variable, pardon constante, est assignée à 2. Le chiffre 2.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Lorsque votre code sera compilé, le micro-contrôleur saura ainsi que sur sa broche numéro 2, il y a un élément connecté.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Bon, cela ne suffit pas de définir la broche utilisée.
Il faut maintenant dire si cette broche est une
 &lt;strong&gt;
  entrée
 &lt;/strong&gt;
 ou une
 &lt;strong&gt;
  sortie
 &lt;/strong&gt;
 .
Oui, car le micro-contrôleur a la capacité d’utiliser certaines de ses broches en entrée ou en sortie.
C’est fabuleux ! En effet, il suffit simplement d’interchanger UNE ligne de code pour dire qu’il faut utiliser une broche en entrée (récupération de données) ou en sortie (envoi de données).
Cette ligne de code justement, parlons-en !
Elle doit se trouver dans la fonction
 &lt;code&gt;
  setup()
 &lt;/code&gt;
 .
Dans la référence, ce dont nous avons besoin se trouve dans la catégorie
 &lt;strong&gt;
  Functions
 &lt;/strong&gt;
 , puis dans
 &lt;strong&gt;
  Digital I/O
 &lt;/strong&gt;
 .
I/O pour Input/Output, ce qui signifie dans la langue de Molière : Entrée/Sortie.
La fonction se trouve être
 &lt;code&gt;
  pinMode()
 &lt;/code&gt;
 . Pour utiliser cette fonction, il faut lui envoyer deux paramètres :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Le nom de la variable que l’on a défini à la broche
 &lt;/li&gt;
 &lt;li&gt;
  Le type de broche que cela va être (entrée ou sortie)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// fonction d'initialisation de la carte&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// initialisation de la broche 2 comme étant une sortie&lt;/span&gt;
    pinMode(led_rouge, OUTPUT);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Initialisation de la sortie
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ce code va donc définir la led_rouge (qui est la broche numéro 2 du micro-contrôleur) en sortie, car
 &lt;code&gt;
  OUTPUT
 &lt;/code&gt;
 signifie en français :
 &lt;em&gt;
  sortie
 &lt;/em&gt;
 .
Maintenant, tout est prêt pour créer notre programme. Voici le code quasiment complet :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// définition de la broche 2 de la carte en tant que variable&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_rouge = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// fonction d'initialisation de la carte&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// initialisation de la broche 2 comme étant une sortie&lt;/span&gt;
    pinMode(led_rouge, OUTPUT);
}

&lt;span class="hljs-comment"&gt;// fonction principale, elle se répète (s’exécute) à l'infini&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// contenu de votre programme&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="2ème-étape"&gt;
 &lt;a aria-hidden="true" href="#2ème-étape"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 2ème étape
&lt;/h5&gt;
&lt;p&gt;
 Cette deuxième étape consiste à créer le contenu de notre programme.
Celui qui va aller remplacer le commentaire dans la fonction
 &lt;code&gt;
  loop()
 &lt;/code&gt;
 , pour réaliser notre objectif : allumer la
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 !
Là encore, on ne claque pas des doigts pour avoir le programme tout prêt !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Il faut retourner chercher dans la référence Arduino ce dont on a besoin.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Oui, mais là, on ne sait pas ce que l’on veut ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 On cherche une fonction qui va nous permettre d’allumer cette
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 .
Il faut donc que l’on se débrouille pour la trouver.
Et avec notre niveau d’anglais, on va facilement trouver. Soyons un peu logique, si vous le voulez bien.
Nous savons que c’est une fonction qu’il nous faut (je l’ai dit il y a un instant), on regarde donc dans la catégorie
 &lt;strong&gt;
  Functions
 &lt;/strong&gt;
 de la référence.
Si on garde notre esprit logique, on va s’occuper d’allumer une
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 , donc de dire quel est l’état de sortie de la broche numéro 2 où laquelle est connectée notre
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 .
Donc, il est fort à parier que cela se trouve dans
 &lt;strong&gt;
  Digital I/O
 &lt;/strong&gt;
 .
Tiens, il y a une fonction suspecte qui se prénomme
 &lt;code&gt;
  digitalWrite()
 &lt;/code&gt;
 .
En français, cela signifie "écriture numérique".
C’est donc l’écriture d’un état logique (0 ou 1).
Quelle se trouve être la première phrase dans la description de cette fonction ?
Celle-ci : "Write a HIGH or a LOW value to a digital pin".
D’après notre niveau bilingue, on peut traduire par :
 &lt;em&gt;
  Ecriture d’une valeur HAUTE ou une valeur BASSE sur une sortie numérique
 &lt;/em&gt;
 .
Bingo ! C’est ce que l’on recherchait ! Il faut dire que je vous ai un peu aidé.
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ça signifie quoi "valeur HAUTE ou valeur BASSE" ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 En électronique numérique, un niveau haut correspondra à une tension de +5V et un niveau dit bas sera une tension de 0V (généralement la masse).
Sauf qu’on a connecté la
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 au pôle positif de l’alimentation, donc pour qu’elle s’allume, il faut qu’elle soit reliée au 0V.
Par conséquent, on doit mettre un état bas sur la broche du microcontrôleur.
Ainsi, la différence de potentiel aux bornes de la
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 permettra à celle-ci de s’allumer.
Voyons un peu le fonctionnement de
 &lt;code&gt;
  digitalWrite()
 &lt;/code&gt;
 en regardant dans sa syntaxe.
Elle requiert deux paramètres. Le nom de la broche que l’on veut mettre à un état logique et la valeur de cet état logique. Nous allons donc écrire le code qui suit, d’après cette syntaxe :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;digitalWrite(led_rouge, LOW); &lt;span class="hljs-comment"&gt;// écriture en sortie (broche 2) d'un état BAS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Si on teste le code entier :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// définition de la broche 2 de la carte en tant que variable&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_rouge = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// fonction d'initialisation de la carte&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// initialisation de la broche 2 comme étant une sortie&lt;/span&gt;
    pinMode(led_rouge, OUTPUT);
}

&lt;span class="hljs-comment"&gt;// fonction principale, elle se répète (s’exécute) à l'infini&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// écriture en sortie (broche 2) d'un état BAS&lt;/span&gt;
    digitalWrite(led_rouge, LOW);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Allumage de la led
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 On voit s’éclairer la
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 !!! C’est fantastique !
 &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/R4iLDw7wj_U" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/q4WODNNo7Y8" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="comment-tout-cela-fonctionne"&gt;
 &lt;a aria-hidden="true" href="#comment-tout-cela-fonctionne"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Comment tout cela fonctionne ?
&lt;/h3&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Et comment ça se passe à l’intérieur ??
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
   Je comprends pas comment le microcontrôleur fait pour tout comprendre et tout faire.
Je sais qu’il utilise les 0 et les 1 du programme qu’on lui a envoyé, mais comment il sait qu’il doit aller chercher le programme, le lire, l’exécuter, etc. ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Eh bien, eh bien ! En voilà des questions !
Je vais essayer d’y répondre simplement, sans entrer dans le détail qui est quand même très compliqué.
Bon, si vous êtes prêt, c’est parti !
D’abord, tout se passe dans le cerveau du microcontrôleur…
&lt;/p&gt;
&lt;h4 id="le-démarrage"&gt;
 &lt;a aria-hidden="true" href="#le-démarrage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le démarrage
&lt;/h4&gt;
&lt;p&gt;
 Un peu comme vous démarreriez un ordinateur, la carte Arduino aussi démarre.
Alors c’est un peu transparent parce qu’elle démarre dans deux cas principaux : le premier c’est lorsque vous la branchez sur le port USB ou une sur autre source d’alimentation ; le deuxième c’est lorsque le compilateur a fini de charger le programme dans la carte, il la redémarre.
Et au démarrage de la carte, il se passe des trucs.
&lt;/p&gt;
&lt;h5 id="chargez"&gt;
 &lt;a aria-hidden="true" href="#chargez"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Chargez !
&lt;/h5&gt;
&lt;p&gt;
 Vous vous souvenez du chapitre où je vous présentais un peu le fonctionnement global de la carte ?
Oui,
 &lt;a href="https:// zestedesavoir.com/tutoriels/537/arduino-premiers-pas-en-informatique-embarquee/742/decouverte-de-larduino/3417/le-materiel/#3-fonctionnement-global"&gt;
  celui-là
 &lt;/a&gt;
 .
Je vous parlais alors de l’exécution du programme.
Au démarrage, la carte (après un petit temps de vérification pour voir si le compilateur ne lui charge pas un nouveau programme) commence par aller charger les variables en mémoire de données.
C’est un petit mécanisme électronique qui va simplement faire en sorte de copier les variables inscrites dans le programme vers la mémoire de données.
En l’occurrence, dans le programme que l’on vient de créer, il n’y a qu’une variable et elle est constante en plus.
Ce ne sera donc pas bien long à mettre ça en mémoire !
Ensuite, vient la lecture du programme. Et là, que peut-il bien se passer à l’intérieur du microcontrôleur ?
En fait, ce n’est pas très compliqué (sur le principe
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 ).
&lt;/p&gt;
&lt;h5 id="la-vraie-forme-du-programme"&gt;
 &lt;a aria-hidden="true" href="#la-vraie-forme-du-programme"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La vraie forme du programme
&lt;/h5&gt;
&lt;p&gt;
 À présent, le cerveau du microcontrôleur va aller lire la première instruction du programme, celle qui se trouve dans la fonction
 &lt;code&gt;
  setup()
 &lt;/code&gt;
 .
Sauf que, l’instruction n’est plus sous la même forme.
Non, cette fois-ci je ne parle pas des 0 et des 1, mais bien d’une transformation de l’instruction.
C’est le compilateur qui a découpé chaque instruction du programme en plusieurs petites instructions beaucoup plus simples.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Et pourquoi cela ? Le microcontrôleur ne sais pas faire une instruction aussi simple que de déclarer une broche en sortie ou allumer une
   &lt;abbr title="Light Emitting Device/Diode"&gt;
    LED
   &lt;/abbr&gt;
   ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Oui. C’est pourquoi il a besoin que le programme soit non plus sous forme de "grandes instructions" comme on l’a écrit, mais bien sous forme de plusieurs petites instructions.
Et cela est dû au fait qu’il ne sait exécuter que des instructions très simples !
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;img alt="Découpage en instructions" src="./images/uploaded/tuto-arduino-201-notre-premier-programme/decoupage-en-instructions.jpg"/&gt;
  &lt;figcaption&gt;
   Découpage en instructions
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 Bien entendu, il n’y a pas de limite à six instructions, il peut y en avoir beaucoup plus ou beaucoup moins !
Donc, en mémoire de programme, là où le programme de la carte est stocké, on va avoir plutôt quelque chose qui ressemble à ça :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;img alt="Le programme dans la mémoire" src="./images/uploaded/tuto-arduino-201-notre-premier-programme/le-programme-dans-la-memoire.jpg"/&gt;
  &lt;figcaption&gt;
   Le programme dans la mémoire
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 Chaque grande instruction est découpée en petites instructions par le compilateur et est ensuite stockée dans la mémoire de programme.
Pour être encore plus détaillé, chaque instruction agit sur un
 &lt;em&gt;
  registre
 &lt;/em&gt;
 .
Un registre, c’est la forme la plus simplifiée de la mémoire en terme de programmation.
On en trouve plusieurs, par exemple le registre des timers ou celui des entrées/sorties du port A (ou B, ou C) ou encore des registres généraux pour manipuler les variables.
Par exemple, pour additionner 3 à la variable 'a' le microcontrôleur fera les opérations suivantes :
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
  chargement de la variable 'a' dans le registre général 8 (par exemple) depuis la RAM
 &lt;/li&gt;
 &lt;li&gt;
  chargement de la valeur 3 dans le registre général 9
 &lt;/li&gt;
 &lt;li&gt;
  mise du résultat de "registre 8 + registre 9" dans le registre 8
 &lt;/li&gt;
 &lt;li&gt;
  changement de la valeur de 'a' en RAM depuis le registre 8
 &lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="et-lexécution-du-programme"&gt;
 &lt;a aria-hidden="true" href="#et-lexécution-du-programme"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Et l’exécution du programme
&lt;/h4&gt;
&lt;p&gt;
 À présent que l’on a plein de petites instructions, qu’avons nous de plus ? Pas grand chose me direz-vous.
Le Schmilblick n’a guère avancé…
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 Pour comprendre, il faut savoir que le microcontrôleur ne sais faire que quelques instructions.
Ces instructions sont encore plus simple que d’allumer une
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 !
Il peut par exemple faire des opérations logiques (ET, OU, NON, décalage de bits, …), des opérations numériques (addition et soustraction, les multiplications et divisions sont faites avec des opérations du types décalage de bits) ou encore copier et stocker des données.
Il sait en faire, donc, mais pas tant que ça. Tout ce qu’il sait faire est régi par son
 &lt;strong&gt;
  jeu d’instructions
 &lt;/strong&gt;
 .
C’est-à-dire qu’il a une liste des instructions possibles qu’il sait exécuter et il s’y tient.
Le compilateur doit donc absolument découper chaque instruction du programme en instructions que le microcontrôleur sait exécuter.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Interaction entre les éléments du microcontrôleur" src="./images/uploaded/tuto-arduino-201-notre-premier-programme/interaction-entre-les-elements-du-microcontroleur.jpg"/&gt;
 &lt;figcaption&gt;
  Interaction entre les éléments du microcontrôleur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Le cerveau du microcontrôleur va aller lire le programme, il compare ensuite chaque instruction à son registre d’instructions et les exécute.
Pour allumer une
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 , il fera peut-être un ET logique, chargera une donnée, fera une soustraction, … on ne sait pas mais il va y arriver.
Et pour terminer, il communiquera à son gestionnaire d’entrées/sortie pour lui informer qu’il faut activer tel transistor interne pour mettre une tension sur telle broche de la carte pour ainsi allumer la
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 qui y est connectée.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Waoou ! Et ça va vite tout ça ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Extrêmement vite ! Cela dit, tout dépend de sa vitesse d’exécution…
&lt;/p&gt;
&lt;h4 id="la-vitesse-dexécution"&gt;
 &lt;a aria-hidden="true" href="#la-vitesse-dexécution"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La vitesse d’exécution
&lt;/h4&gt;
&lt;p&gt;
 Le microcontrôleur est capable de faire un très grand nombre d’opérations par seconde.
Ce nombre est défini par sa vitesse, entre autre.
Sur la carte Arduino Duemilanove ou Uno, il y a un composant, que l’on appel un
 &lt;strong&gt;
  quartz
 &lt;/strong&gt;
 , qui va définir à quelle vitesse va aller le microcontrôleur.
Ce quartz permet de
 &lt;strong&gt;
  cadencer
 &lt;/strong&gt;
 le microcontrôleur. C’est en fait une
 &lt;strong&gt;
  horloge
 &lt;/strong&gt;
 qui permet au microcontrôleur de se repérer.
À chaque top de l’horloge, le microcontrôleur va faire quelque chose.
Ce quelque chose peut, par exemple, être l’exécution d’une instruction, ou une lecture en mémoire.
Cependant, chaque action ne dure pas qu’un seul top d’horloge.
Suivant l’action réalisée, cela peut prendre plus ou moins de temps (de nombre de "coups d’horloge").
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="L'horloge dans le système" src="./images/uploaded/tuto-arduino-201-notre-premier-programme/lhorloge-dans-le-systeme.jpg"/&gt;
 &lt;figcaption&gt;
  L'horloge dans le système
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 La carte Arduino atteint au moins le million d’instructions par seconde !
Cela peut paraître énorme, mais comme je le disais, si il y a des instructions qui prennent beaucoup de temps, eh bien il se peut qu’elle n’exécute qu’une centaine d’instructions en une seconde.
Tout dépend du temps pris par une instruction à être exécutée. Certaines opérations sont aussi parallélisées. Par exemple, le microcontrôleur peut faire une addition d’un côté pour une variable et en même temps il va mesurer le nombre de coups d’horloge pour faire s’incrémenter un compteur pour gérer un timer.
Ces opérations sont
 &lt;strong&gt;
  réellement
 &lt;/strong&gt;
 faites en parallèle, ce n’est pas un faux multi-tâche comme sur un ordinateur.
Ici les deux registres travaillent en même temps. Le nombre de la fin ? 62.5 nanosecondes.
C’est le temps qu’il faut au microcontrôleur d’Arduino pour faire une instruction la plus simple possible (en prenant en compte l’Arduino Uno et son quartz à 16MHz).
&lt;/p&gt;
&lt;p&gt;
 À présent, vous savez utiliser les sorties du micro-contrôleur, nous allons donc pouvoir passer aux choses sérieuses et faire clignoter notre
 &lt;abbr title="Light Emitting Device/Diode"&gt;
  LED
 &lt;/abbr&gt;
 !
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Introduire le temps</title><link href="https://eskimon.fr/tuto-arduino-202-introduire-le-temps" rel="alternate"></link><published>2013-12-10T20:03:00+01:00</published><updated>2013-12-10T20:03:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-10:/tuto-arduino-202-introduire-le-temps</id><summary type="html">&lt;p&gt;
 C’est bien beau d’allumer une LED, mais si elle ne fait rien d’autre, ce n’est pas très utile. Autant la brancher directement sur une pile (avec une résistance tout de même !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 ).
Alors voyons comment rendre intéressante cette LED en la faisant clignoter !
Ce que ne sait …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 C’est bien beau d’allumer une LED, mais si elle ne fait rien d’autre, ce n’est pas très utile. Autant la brancher directement sur une pile (avec une résistance tout de même !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 ).
Alors voyons comment rendre intéressante cette LED en la faisant clignoter !
Ce que ne sait pas faire une pile… Pour cela il va nous falloir introduire la notion de temps. Eh bien devinez quoi ?
Il existe une fonction toute prête là encore ! Je ne vous en dis pas plus, passons à la pratique !
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#comment-faire"&gt;
    Comment faire ?
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#trouver-la-commande"&gt;
       Trouver la commande…
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#utiliser-la-commande"&gt;
       Utiliser la commande
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#mettre-en-pratique-faire-clignoter-une-led"&gt;
       Mettre en pratique : faire clignoter une LED
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#faire-clignoter-un-groupe-de-led"&gt;
    Faire clignoter un groupe de LED
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-matériel-et-les-schémas"&gt;
       Le matériel et les schémas
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-programme"&gt;
       Le programme
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-programme-final"&gt;
       Le programme final
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#réaliser-un-chenillard"&gt;
    Réaliser un chenillard
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-but-du-programme"&gt;
       Le but du programme
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#organigramme"&gt;
       Organigramme
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-programme-1"&gt;
       Le programme
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#fonction-millis"&gt;
    Fonction millis()
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#les-limites-de-la-fonction-delay"&gt;
     Les limites de la fonction delay()
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#découvrons-et-utilisons-millis"&gt;
     Découvrons et utilisons millis()
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="comment-faire"&gt;
 &lt;a aria-hidden="true" href="#comment-faire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Comment faire ?
&lt;/h3&gt;
&lt;h5 id="trouver-la-commande"&gt;
 &lt;a aria-hidden="true" href="#trouver-la-commande"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Trouver la commande…
&lt;/h5&gt;
&lt;p&gt;
 Je vous laisse cherche un peu par vous-même, cela vous entrainera !
 &lt;img alt=":pirate:" class="smiley" src="./static/smileys/pirate.png"/&gt;
 …
Pour ceux qui ont fait l’effort de chercher et n’ont pas trouvé (à cause de l’anglais ?), je vous donne la fonction qui va bien :
on va utiliser :
 &lt;code&gt;
  delay()
 &lt;/code&gt;
 .
Petite description de la fonction : elle va servir à mettre en pause le programme pendant un temps prédéterminé.
&lt;/p&gt;
&lt;h5 id="utiliser-la-commande"&gt;
 &lt;a aria-hidden="true" href="#utiliser-la-commande"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utiliser la commande
&lt;/h5&gt;
&lt;p&gt;
 La fonction admet un paramètre qui est le temps pendant lequel on veut mettre en pause le programme. Ce temps doit être donné en millisecondes.
C’est-à-dire que si vous voulez arrêter le programme pendant une seconde, il va falloir donner à la fonction ce même temps, écrit en millisecondes, soit 1000ms. La fonction est simple à utiliser :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// on fait une pause du programme pendant 1000ms, soit 1 seconde&lt;/span&gt;
delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Rien de plus simple donc. Pour 20 secondes de pause, il aurait fallu écrire :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// on fait une pause du programme pendant 20000ms, soit 20 secondes&lt;/span&gt;
delay(&lt;span class="hljs-number"&gt;20000&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="mettre-en-pratique-faire-clignoter-une-led"&gt;
 &lt;a aria-hidden="true" href="#mettre-en-pratique-faire-clignoter-une-led"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Mettre en pratique : faire clignoter une LED
&lt;/h5&gt;
&lt;p&gt;
 Du coup, si on veut faire clignoter notre LED, on peut utiliser cette fonction.
Voyons un peu le schéma de principe du clignotement d’une LED :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Schéma de principe du clignotement" src="./images/uploaded/tuto-arduino-202-introduire-le-temps/schema-de-principe-du-clignotement.jpg"/&gt;
 &lt;figcaption&gt;
  Schéma de principe du clignotement
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Vous le voyez, la LED s’allume. Puis, on fait intervenir la fonction
 &lt;code&gt;
  delay()
 &lt;/code&gt;
 , qui va mettre le programme en pause pendant un certain temps.
Ensuite, on éteint la LED. On met en pause le programme. Puis on revient au début du programme.
On recommence et ainsi de suite.
C’est cette suite de commandes qui forme le processus faisant clignoter la LED.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Dorénavant, prenez l’habitude de faire ce genre de schéma lorsque vous faites un programme.
Cela aide grandement la réflexion, croyez moi !
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
   C’est le principe de perdre du temps pour en gagner. Autrement dit : l'
   &lt;strong&gt;
    organisation
   &lt;/strong&gt;
   !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Maintenant, il faut que l’on traduise ce schéma, portant le nom d'
 &lt;strong&gt;
  organigramme
 &lt;/strong&gt;
 , en code.
&lt;/p&gt;
&lt;p&gt;
 Il suffit pour cela de remplacer les phrases dans chaque cadre par une ligne de code.
Par exemple, "on allume la LED", va être traduit par l’instruction que l’on a vue dans le chapitre précédent :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;digitalWrite(led_rouge, LOW);   &lt;span class="hljs-comment"&gt;// allume la LED&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ensuite, on traduit le cadre suivant, ce qui donne :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// fait une pause de 1 seconde (= 1000ms)&lt;/span&gt;
delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Puis, on traduit la ligne suivante :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// éteint la LED&lt;/span&gt;
digitalWrite(led_rouge, HIGH);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Enfin, la dernière ligne est identique à la deuxième, soit :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// fait une pause de 1 seconde&lt;/span&gt;
delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 On se retrouve avec le code suivant :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// allume la LED&lt;/span&gt;
digitalWrite(led_rouge, LOW);
&lt;span class="hljs-comment"&gt;// fait une pause de 1 seconde&lt;/span&gt;
delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
&lt;span class="hljs-comment"&gt;// éteint la LED&lt;/span&gt;
digitalWrite(led_rouge, HIGH);
&lt;span class="hljs-comment"&gt;// fait une pause de 1 seconde&lt;/span&gt;
delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 La fonction qui va boucler à l’infini le code précédent est la fonction
 &lt;code&gt;
  loop()
 &lt;/code&gt;
 .
On inscrit donc le code précédent dans cette fonction :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// allume la LED&lt;/span&gt;
    digitalWrite(led_rouge, LOW);
    &lt;span class="hljs-comment"&gt;// fait une pause de 1 seconde&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// éteint la LED&lt;/span&gt;
    digitalWrite(led_rouge, HIGH);
    &lt;span class="hljs-comment"&gt;// fait une pause de 1 seconde&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Et on n’oublie pas de définir la broche utilisée par la LED, ainsi que d’initialiser cette broche en tant que sortie. Cette fois, le code est terminé !
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// définition de la broche 2 de la carte en tant que variable&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_rouge = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// fonction d'initialisation de la carte&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// initialisation de la broche 2 comme étant une sortie&lt;/span&gt;
    pinMode(led_rouge, OUTPUT);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// allume la LED&lt;/span&gt;
    digitalWrite(led_rouge, LOW);
    &lt;span class="hljs-comment"&gt;// fait une pause de 1 seconde&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// éteint la LED&lt;/span&gt;
    digitalWrite(led_rouge, HIGH);
    &lt;span class="hljs-comment"&gt;// fait une pause de 1 seconde&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous n’avez plus qu’à charger le code dans la carte et admirer
 &lt;del&gt;
  mon
 &lt;/del&gt;
 votre travail ! La LED clignote !
Libre à vous de changer le temps de clignotement : vous pouvez par exemple éteindre la LED pendant 40ms et l’allumer pendant 600ms :
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// définition de la broche 2 de la carte en tant que variable&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_rouge = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// fonction d'initialisation de la carte&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// initialisation de la broche 2 comme étant une sortie&lt;/span&gt;
    pinMode(led_rouge, OUTPUT);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// allume la LED&lt;/span&gt;
    digitalWrite(led_rouge, LOW);
    &lt;span class="hljs-comment"&gt;// fait une pause de 600 ms&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;600&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// éteint la LED&lt;/span&gt;
    digitalWrite(led_rouge, HIGH);
    &lt;span class="hljs-comment"&gt;// fait une pause de 40 ms&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;40&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Et hop, une petite vidéo d’illustration !
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/YAOakcEoIfk" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voici aussi un exemple intégré dans le simulateur interactif pour que vous puissiez tester sans matériel :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/eATxXUrRJGE" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/fyJPb3F3_ag" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="faire-clignoter-un-groupe-de-led"&gt;
 &lt;a aria-hidden="true" href="#faire-clignoter-un-groupe-de-led"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Faire clignoter un groupe de LED
&lt;/h3&gt;
&lt;p&gt;
 Vous avouerez facilement que ce n’était pas bien difficile d’arriver jusque-là. Alors, à présent, accentuons la difficulté.
Notre but : faire clignoter
 &lt;em&gt;
  un groupe
 &lt;/em&gt;
 de LED.
&lt;/p&gt;
&lt;h5 id="le-matériel-et-les-schémas"&gt;
 &lt;a aria-hidden="true" href="#le-matériel-et-les-schémas"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le matériel et les schémas
&lt;/h5&gt;
&lt;p&gt;
 Ce groupe de LED sera composé de six LED, nommées L1, L2, L3, L4, L5 et L6. Vous aurez par conséquent besoin d’un nombre identique de résistances. Le schéma de la réalisation :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Schéma avec 6 leds" src="./images/uploaded/tuto-arduino-202-introduire-le-temps/schema-avec-6-leds.png"/&gt;
 &lt;figcaption&gt;
  Schéma avec 6 leds
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Montage avec 6 leds" src="./images/uploaded/tuto-arduino-202-introduire-le-temps/montage-avec-6-leds.png"/&gt;
 &lt;figcaption&gt;
  Montage avec 6 leds
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="le-programme"&gt;
 &lt;a aria-hidden="true" href="#le-programme"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le programme
&lt;/h5&gt;
&lt;p&gt;
 Le programme est un peu plus long que le précédent, car il ne s’agit plus d’allumer une seule LED, mais six !
Voilà l’organigramme que va suivre notre programme :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Description du programme" src="./images/uploaded/tuto-arduino-202-introduire-le-temps/description-du-programme.jpg"/&gt;
 &lt;figcaption&gt;
  Description du programme
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Cet organigramme n’est pas très beau, mais il a le mérite d’être assez lisible.
Nous allons essayer de le suivre pour créer notre programme.
Traduction des six premières instructions :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;digitalWrite(L1, LOW); &lt;span class="hljs-comment"&gt;// notez que le nom de la broche a changé&lt;/span&gt;
digitalWrite(L2, LOW); &lt;span class="hljs-comment"&gt;// et ce pour toutes les LED connectées&lt;/span&gt;
digitalWrite(L3, LOW); &lt;span class="hljs-comment"&gt;// au micro-controleur&lt;/span&gt;
digitalWrite(L4, LOW);
digitalWrite(L5, LOW);
digitalWrite(L6, LOW);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ensuite, on attend 1,5 seconde :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;delay(&lt;span class="hljs-number"&gt;1500&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Puis on traduit les six autres instructions :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;digitalWrite(L1, HIGH); &lt;span class="hljs-comment"&gt;// on éteint les LED&lt;/span&gt;
digitalWrite(L2, HIGH);
digitalWrite(L3, HIGH);
digitalWrite(L4, HIGH);
digitalWrite(L5, HIGH);
digitalWrite(L6, HIGH);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Enfin, la dernière ligne de code, disons que nous attendrons 4,32 secondes :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;delay(&lt;span class="hljs-number"&gt;4320&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Tous ces bouts de code sont à mettre à la suite et dans la fonction
 &lt;code&gt;
  loop()
 &lt;/code&gt;
 pour qu’ils se répètent.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    digitalWrite(L1, LOW);  &lt;span class="hljs-comment"&gt;// allumer les LED&lt;/span&gt;
    digitalWrite(L2, LOW);
    digitalWrite(L3, LOW);
    digitalWrite(L4, LOW);
    digitalWrite(L5, LOW);
    digitalWrite(L6, LOW);

    delay(&lt;span class="hljs-number"&gt;1500&lt;/span&gt;);             &lt;span class="hljs-comment"&gt;// attente du programme de 1,5 secondes&lt;/span&gt;

    digitalWrite(L1, HIGH);   &lt;span class="hljs-comment"&gt;// on éteint les LED&lt;/span&gt;
    digitalWrite(L2, HIGH);
    digitalWrite(L3, HIGH);
    digitalWrite(L4, HIGH);
    digitalWrite(L5, HIGH);
    digitalWrite(L6, HIGH);

    delay(&lt;span class="hljs-number"&gt;4320&lt;/span&gt;);             &lt;span class="hljs-comment"&gt;// attente du programme de 4,32 secondes&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  la boucle complète
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Je l’ai mentionné dans un de mes commentaires entre les lignes du programme, les noms attribués aux broches sont à changer.
En effet, car si on définit des noms de variables identiques, le compilateur n’aimera pas ça et vous affichera une erreur.
En plus, le micro-contrôleur ne pourrait pas exécuter le programme car il ne saurait pas quelle broche mettre à l’état HAUT ou BAS.
Pour définir les broches, on fait la même chose qu’à notre premier programme :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; L1 = &lt;span class="hljs-number"&gt;2&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// broche 2 du micro-contrôleur se nomme maintenant : L1&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; L2 = &lt;span class="hljs-number"&gt;3&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// broche 3 du micro-contrôleur se nomme maintenant : L2&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; L3 = &lt;span class="hljs-number"&gt;4&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// ...&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; L4 = &lt;span class="hljs-number"&gt;5&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; L5 = &lt;span class="hljs-number"&gt;6&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; L6 = &lt;span class="hljs-number"&gt;7&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Définition des broches
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Maintenant que les broches utilisées sont définies, il faut dire si ce sont des entrées ou des sorties :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;pinMode(L1, OUTPUT); &lt;span class="hljs-comment"&gt;// L1 est une broche de sortie&lt;/span&gt;
pinMode(L2, OUTPUT); &lt;span class="hljs-comment"&gt;// L2 est une broche de sortie&lt;/span&gt;
pinMode(L3, OUTPUT); &lt;span class="hljs-comment"&gt;// ...&lt;/span&gt;
pinMode(L4, OUTPUT);
pinMode(L5, OUTPUT);
pinMode(L6, OUTPUT);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="le-programme-final"&gt;
 &lt;a aria-hidden="true" href="#le-programme-final"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le programme final
&lt;/h5&gt;
&lt;p&gt;
 Il n’est certes pas très beau, mais il fonctionne :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; L1 = &lt;span class="hljs-number"&gt;2&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// broche 2 du micro-contrôleur se nomme maintenant : L1&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; L2 = &lt;span class="hljs-number"&gt;3&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// broche 3 du micro-contrôleur se nomme maintenant : L2&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; L3 = &lt;span class="hljs-number"&gt;4&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// ...&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; L4 = &lt;span class="hljs-number"&gt;5&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; L5 = &lt;span class="hljs-number"&gt;6&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; L6 = &lt;span class="hljs-number"&gt;7&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    pinMode(L1, OUTPUT); &lt;span class="hljs-comment"&gt;// L1 est une broche de sortie&lt;/span&gt;
    pinMode(L2, OUTPUT); &lt;span class="hljs-comment"&gt;// L2 est une broche de sortie&lt;/span&gt;
    pinMode(L3, OUTPUT); &lt;span class="hljs-comment"&gt;// ...&lt;/span&gt;
    pinMode(L4, OUTPUT);
    pinMode(L5, OUTPUT);
    pinMode(L6, OUTPUT);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// allumer les LED&lt;/span&gt;
    digitalWrite(L1, LOW);
    digitalWrite(L2, LOW);
    digitalWrite(L3, LOW);
    digitalWrite(L4, LOW);
    digitalWrite(L5, LOW);
    digitalWrite(L6, LOW);

    &lt;span class="hljs-comment"&gt;// attente du programme de 1,5 secondes&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;1500&lt;/span&gt;);

    &lt;span class="hljs-comment"&gt;// on éteint les LED&lt;/span&gt;
    digitalWrite(L1, HIGH);
    digitalWrite(L2, HIGH);
    digitalWrite(L3, HIGH);
    digitalWrite(L4, HIGH);
    digitalWrite(L5, HIGH);
    digitalWrite(L6, HIGH);

    &lt;span class="hljs-comment"&gt;// attente du programme de 4,32 secondes&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;4320&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Allumage puis extinction en boucle d’un groupe de leds
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Voilà, vous avez en votre possession un magnifique clignotant, que vous pouvez attacher à votre vélo !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Une question me chiffonne. Doit-on toujours écrire l’état d’une sortie, ou peut-on faire plus simple ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 C’est là un un point intéressant.
Si je comprends bien, vous vous demandez comment faire pour remplacer l’intérieur de la fonction
 &lt;code&gt;
  loop()
 &lt;/code&gt;
 ?
C’est vrai que c’est très lourd à écrire et à lire ! Il faut en effet s’occuper de définir l’état de chaque LED.
C’est rébarbatif, surtout si vous en aviez mis autant qu’il y a de broches disponibles sur la carte !
Il y a une solution pour faire ce que vous dites. Nous allons la voir dans quelques chapitres, ne soyez pas impatient !
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 En attendant, voici une vidéo d’illustration du clignotement :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/2SgxKU67mn8" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Et son illustration sur simulateur interactif :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/9RkGGvT63dd" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="réaliser-un-chenillard"&gt;
 &lt;a aria-hidden="true" href="#réaliser-un-chenillard"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Réaliser un chenillard
&lt;/h3&gt;
&lt;h5 id="le-but-du-programme"&gt;
 &lt;a aria-hidden="true" href="#le-but-du-programme"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le but du programme
&lt;/h5&gt;
&lt;p&gt;
 Le but du programme que nous allons créer va consister à réaliser un chenillard. Pour ceux qui ne savent pas ce qu’est un chenillard, je vous ai préparé une petite image .gif animée :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;img alt="Chenillard" src="./images/uploaded/tuto-arduino-202-introduire-le-temps/chenillard.gif"/&gt;
  &lt;figcaption&gt;
   Chenillard
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 Comme on dit souvent, une image vaut mieux qu’un long discours !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Voilà donc ce qu’est un chenillard.
Chaque LED s’allume alternativement et dans l’ordre. De la gauche vers la droite ou l’inverse, c’est au choix.
&lt;/p&gt;
&lt;h5 id="organigramme"&gt;
 &lt;a aria-hidden="true" href="#organigramme"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Organigramme
&lt;/h5&gt;
&lt;p&gt;
 Comme j’en ai marre de faire des dessins avec paint.net, je vous laisse réfléchir tout seuls comme des grands à l’organigramme du programme. …
Bon, aller, le voilà cet organigramme ! Attention, il n’est pas complet, mais si vous avez compris le principe, le compléter ne vous posera pas de problèmes :
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="text-center"&gt;
   &lt;figure&gt;
    &lt;img alt="Organigramme" src="./images/uploaded/tuto-arduino-202-introduire-le-temps/organigramme.jpg"/&gt;
    &lt;figcaption&gt;
     Organigramme
    &lt;/figcaption&gt;
   &lt;/figure&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 À vous de jouer !
&lt;/p&gt;
&lt;h5 id="le-programme-1"&gt;
 &lt;a aria-hidden="true" href="#le-programme-1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le programme
&lt;/h5&gt;
&lt;p&gt;
 Normalement, sa conception ne devrait pas vous poser de problèmes.
Il suffit en effet de récupérer le code du programme précédent ("allumer un groupe de LED") et de le modifier en fonction de notre besoin.
Ce code, je vous le donne, avec les commentaires qui vont bien :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; L1 = &lt;span class="hljs-number"&gt;2&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// broche 2 du micro-contrôleur se nomme maintenant : L1&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; L2 = &lt;span class="hljs-number"&gt;3&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// broche 3 du micro-contrôleur se nomme maintenant : L2&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; L3 = &lt;span class="hljs-number"&gt;4&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// ...&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; L4 = &lt;span class="hljs-number"&gt;5&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; L5 = &lt;span class="hljs-number"&gt;6&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; L6 = &lt;span class="hljs-number"&gt;7&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    pinMode(L1, OUTPUT); &lt;span class="hljs-comment"&gt;// L1 est une broche de sortie&lt;/span&gt;
    pinMode(L2, OUTPUT); &lt;span class="hljs-comment"&gt;// L2 est une broche de sortie&lt;/span&gt;
    pinMode(L3, OUTPUT); &lt;span class="hljs-comment"&gt;// ...&lt;/span&gt;
    pinMode(L4, OUTPUT);
    pinMode(L5, OUTPUT);
    pinMode(L6, OUTPUT);
}

&lt;span class="hljs-comment"&gt;// on change simplement l’intérieur de la boucle pour atteindre notre objectif&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;span class="hljs-comment"&gt;// la fonction loop() exécute le code qui suit en le répétant en boucle&lt;/span&gt;
&lt;/span&gt;{
    digitalWrite(L1, LOW);   &lt;span class="hljs-comment"&gt;// allumer L1&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);             &lt;span class="hljs-comment"&gt;// attendre 1 seconde&lt;/span&gt;
    digitalWrite(L1, HIGH);  &lt;span class="hljs-comment"&gt;// on éteint L1&lt;/span&gt;
    digitalWrite(L2, LOW);   &lt;span class="hljs-comment"&gt;// on allume L2 en même temps que l'on éteint L1&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);             &lt;span class="hljs-comment"&gt;// on attend 1 seconde&lt;/span&gt;
    digitalWrite(L2, HIGH);  &lt;span class="hljs-comment"&gt;// on éteint L2 et&lt;/span&gt;
    digitalWrite(L3, LOW);   &lt;span class="hljs-comment"&gt;// on allume immédiatement L3&lt;/span&gt;
    delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);             &lt;span class="hljs-comment"&gt;// ...&lt;/span&gt;
    digitalWrite(L3, HIGH);
    digitalWrite(L4, LOW);
    delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
    digitalWrite(L4, HIGH);
    digitalWrite(L5, LOW);
    delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
    digitalWrite(L5, HIGH);
    digitalWrite(L6, LOW);
    delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
    digitalWrite(L6, HIGH);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Votre premier chenillard
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Vous le voyez, ce code est très lourd et n’est pas pratique.
Nous verrons plus loin comment faire en sorte de l’alléger.
Mais avant cela, un TP arrive… Au fait, voici un exemple de ce que vous pouvez obtenir !
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/hKNqRAi-kKI" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 En simulation ça donne ça :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/ffr2VQgC9yp" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/pDouLvyUxBg" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="fonction-millis"&gt;
 &lt;a aria-hidden="true" href="#fonction-millis"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Fonction millis()
&lt;/h3&gt;
&lt;p&gt;
 Nous allons terminer ce chapitre par un point qui peut être utile, notamment dans certaines situations où l’on ne veut pas arrêter le programme.
En effet, si on veut faire clignoter une LED sans arrêter l’exécution du programme, on ne peut pas utiliser la fonction
 &lt;code&gt;
  delay()
 &lt;/code&gt;
 qui met en pause le programme durant le temps défini.
&lt;/p&gt;
&lt;h4 id="les-limites-de-la-fonction-delay"&gt;
 &lt;a aria-hidden="true" href="#les-limites-de-la-fonction-delay"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les limites de la fonction delay()
&lt;/h4&gt;
&lt;p&gt;
 Vous avez probablement remarqué, lorsque vous utilisez la fonction
 &lt;code&gt;
  delay()
 &lt;/code&gt;
 tout notre programme s’arrête le temps d’attendre.
Dans certains cas ce n’est pas un problème mais dans certains cas ça peut être plus gênant.
Imaginons, vous êtes en train de faire avancer un robot. Vous mettez vos moteurs à une vitesse moyenne, tranquille, jusqu’à ce qu’un petit bouton sur l’avant soit appuyé (il clic lorsqu’on touche un mur par exemple).
Pendant ce temps-là, vous décidez de faire des signaux en faisant clignoter vos LED.
Pour faire un joli clignotement, vous allumez une LED rouge pendant une seconde puis l’éteignez pendant une autre seconde.
Voilà par exemple ce qu’on pourrait faire comme code
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    pinMode(moteur, OUTPUT);
    pinMode(led, OUTPUT);
    pinMode(bouton, INPUT);
    &lt;span class="hljs-comment"&gt;// on met le moteur en marche (en admettant qu'il soit en marche à HIGH)&lt;/span&gt;
    digitalWrite(moteur, HIGH);
    &lt;span class="hljs-comment"&gt;// on allume la LED&lt;/span&gt;
    digitalWrite(led, LOW);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// si le bouton est cliqué (on rentre dans un mur)&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(digitalRead(bouton)==HIGH)
    {
        &lt;span class="hljs-comment"&gt;// on arrête le moteur&lt;/span&gt;
        digitalWrite(moteur, LOW);
    }
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;span class="hljs-comment"&gt;// sinon on clignote&lt;/span&gt;
    {
        digitalWrite(led, HIGH);
        delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
        digitalWrite(led, LOW);
        delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Attention ce code n’est pas du tout rigoureux voire faux dans son écriture, il sert juste à comprendre le principe !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Maintenant imaginez. Vous roulez, tester que le bouton n’est pas appuyé, donc faites clignoter les LED (cas du
 &lt;code&gt;
  else
 &lt;/code&gt;
 ).
Le temps que vous fassiez l’affichage en entier s’écoule 2 longues secondes !
Le robot a pu pendant cette éternité se prendre le mur en pleine poire et les moteurs continuent à avancer tête baissée jusqu’à fumer !
Ce n’est pas bon du tout ! Voici pourquoi la fonction millis() peut nous sauver.
&lt;/p&gt;
&lt;h4 id="découvrons-et-utilisons-millis"&gt;
 &lt;a aria-hidden="true" href="#découvrons-et-utilisons-millis"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Découvrons et utilisons millis()
&lt;/h4&gt;
&lt;p&gt;
 Tout d’abord, quelques précisions à son sujet, avant d’aller s’en servir.
À l’intérieur du cœur de la carte Arduino se trouve un chronomètre. Ce chrono mesure l’écoulement du temps depuis le lancement de l’application.
Sa granularité (la précision de son temps) est la milliseconde.
La fonction millis() nous sert à savoir quelle est la valeur courante de ce compteur. Attention, comme ce compteur est capable de mesurer une durée allant jusqu’à 50 jours, la valeur retournée doit être stockée dans une variable de type "long".
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   C’est bien gentil mais concrètement on l’utilise comment ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Eh bien c’est très simple. On sait maintenant "lire l’heure".
Maintenant, au lieu de dire "allume-toi pendant une seconde et ne fais surtout rien pendant ce temps", on va faire un truc du genre "Allume-toi, fais tes petites affaires, vérifie l’heure de temps en temps et si une seconde est écoulée, alors réagis !".
Voici le code précédent transformé selon la nouvelle philosophie :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;long&lt;/span&gt; temps; &lt;span class="hljs-comment"&gt;// variable qui stocke la mesure du temps&lt;/span&gt;
boolean etat_led;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    pinMode(moteur, OUTPUT);
    pinMode(led, OUTPUT);
    pinMode(bouton, INPUT);
    &lt;span class="hljs-comment"&gt;// on met le moteur en marche&lt;/span&gt;
    digitalWrite(moteur, HIGH);
    &lt;span class="hljs-comment"&gt;// par défaut la LED sera éteinte&lt;/span&gt;
    etat_led = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    &lt;span class="hljs-comment"&gt;// on éteint la LED&lt;/span&gt;
    digitalWrite(led, etat_led);

    &lt;span class="hljs-comment"&gt;// on initialise le temps&lt;/span&gt;
    temps = millis();
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// si le bouton est cliqué (on rentre dans un mur)&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(digitalRead(bouton)==HIGH)
    {
        &lt;span class="hljs-comment"&gt;// on arrête le moteur&lt;/span&gt;
        digitalWrite(moteur, LOW);
    }
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;span class="hljs-comment"&gt;// sinon on clignote&lt;/span&gt;
    {
        &lt;span class="hljs-comment"&gt;// on compare l'ancienne valeur du temps et la valeur sauvée&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// si la comparaison (l'un moins l'autre) dépasse 1000...&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// ...cela signifie qu'au moins une seconde s'est écoulée&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;((millis() - temps) &amp;gt; &lt;span class="hljs-number"&gt;1000&lt;/span&gt;)
        {
            etat_led = !etat_led; &lt;span class="hljs-comment"&gt;// on inverse l'état de la LED&lt;/span&gt;
            digitalWrite(led, etat_led); &lt;span class="hljs-comment"&gt;// on allume ou éteint&lt;/span&gt;
            temps = millis(); &lt;span class="hljs-comment"&gt;// on stocke la nouvelle heure&lt;/span&gt;
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Clignotement avec
  &lt;code&gt;
   millis
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Et voilà, grâce à cette astuce plus de fonction bloquante.
L’état du bouton est vérifié très fréquemment ce qui permet de s’assurer que si jamais on rentre dans un mur, on coupe les moteurs très vite. Dans ce code, tout s’effectue de manière fréquente.
En effet, on ne reste jamais bloqué à attendre que le temps passe. À la place, on avance dans le programme et teste souvent la valeur du chronomètre.
Si cette valeur est de 1000 itérations supérieures à la dernière valeur mesurée, alors cela signifie qu’une seconde est passée.
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Attention, au
   &lt;code&gt;
    if
   &lt;/code&gt;
   de la ligne 25 ne faites surtout pas
   &lt;code&gt;
    millis() - temps == 1000
   &lt;/code&gt;
   .
Cela signifierait que vous voulez vérifier que 1000 millisecondes EXACTEMENT se sont écoulées, ce qui est très peu probable (vous pourrez plus probablement mesurer plus ou moins mais rarement exactement)
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Maintenant que vous savez maîtriser le temps, vos programmes/animations vont pouvoir posséder un peu plus de "vie" en faisant des pauses, des motifs, etc. Impressionnez-moi !
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>[TP] Feux de signalisation routière</title><link href="https://eskimon.fr/tuto-arduino-203-tp-feux-de-signalisation-routi%C3%A8re" rel="alternate"></link><published>2013-12-10T20:03:00+01:00</published><updated>2013-12-10T20:03:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-10:/tuto-arduino-203-tp-feux-de-signalisation-routière</id><summary type="html">&lt;p&gt;
 Vous voilà arrivé pour votre premier TP, que vous ferez seul ! :twisted: Je vous aiderai quand même un peu. Le but de ce TP va être de réaliser un feu de signalisation routière. Je vous donne en détail tout ce qu’il vous faut pour mener à bien cet objectif …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Vous voilà arrivé pour votre premier TP, que vous ferez seul ! :twisted: Je vous aiderai quand même un peu. Le but de ce TP va être de réaliser un feu de signalisation routière. Je vous donne en détail tout ce qu’il vous faut pour mener à bien cet objectif.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#préparation"&gt;
    Préparation
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-matériel"&gt;
       Le matériel
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-schéma"&gt;
       Le schéma
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#Énoncé-de-lexercice"&gt;
    Énoncé de l’exercice
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-but"&gt;
       Le but
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-temps-de-la-séquence"&gt;
       Le temps de la séquence
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#par-où-commencer"&gt;
       Par où commencer ?
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#cest-parti"&gt;
       C’est parti !
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#correction"&gt;
    Correction !
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#fini"&gt;
       Fini !
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#lorganigramme"&gt;
       L’organigramme
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#la-correction-enfin"&gt;
      La correction, enfin !
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#la-fonction-setup"&gt;
       La fonction setup
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-code-principal"&gt;
       Le code principal
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="préparation"&gt;
 &lt;a aria-hidden="true" href="#préparation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Préparation
&lt;/h3&gt;
&lt;p&gt;
 Ce dont nous avons besoin pour réaliser ces feux.
&lt;/p&gt;
&lt;h5 id="le-matériel"&gt;
 &lt;a aria-hidden="true" href="#le-matériel"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le matériel
&lt;/h5&gt;
&lt;p&gt;
 Le matériel est la base de notre besoin. On a déjà utilisé 6 LED et résistances, mais elles étaient pour moi en l’occurrence toutes rouges. Pour faire un feu routier, il va nous falloir 6 LED, mais dont les couleurs ne sont plus les mêmes.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  LED : un nombre de 6, dont 2
  &lt;strong&gt;
   rouges
  &lt;/strong&gt;
  , 2
  &lt;strong&gt;
   jaune
  &lt;/strong&gt;
  (ou
  &lt;strong&gt;
   orange
  &lt;/strong&gt;
  ) et 2
  &lt;strong&gt;
   vertes
  &lt;/strong&gt;
  ;
 &lt;/li&gt;
 &lt;li&gt;
  Résistors : 6 également, de la même valeur que ceux que vous avez utilisés.
 &lt;/li&gt;
 &lt;li&gt;
  Arduino : une carte Arduino évidemment !
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="le-schéma"&gt;
 &lt;a aria-hidden="true" href="#le-schéma"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le schéma
&lt;/h5&gt;
&lt;p&gt;
 C’est le même que pour le montage précédent, seul la couleur des LED change, comme ceci :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;img alt="Shéma TP feux de signalisation" src="./images/uploaded/tuto-arduino-203-tp-feux-de-signalisation-routière/shema-tp-feux-de-signalisation.png"/&gt;
  &lt;figcaption&gt;
   Shéma TP feux de signalisation
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous n’avez donc plus qu’à reprendre le dernier montage et changer la couleur de 4 LED, pour obtenir ceci :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;img alt="Montage TP feux de signalisation" src="./images/uploaded/tuto-arduino-203-tp-feux-de-signalisation-routière/montage-tp-feux-de-signalisation.png"/&gt;
  &lt;figcaption&gt;
   Montage TP feux de signalisation
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-danger"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   N’oubliez pas de tester votre matériel en chargeant un programme qui fonctionne !
Cela évite de s’acharner à faire un nouveau programme qui ne fonctionne pas à cause d’un matériel défectueux. On est jamais sûr de rien, croyez-moi !
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="Énoncé-de-lexercice"&gt;
 &lt;a aria-hidden="true" href="#Énoncé-de-lexercice"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Énoncé de l’exercice
&lt;/h3&gt;
&lt;h5 id="le-but"&gt;
 &lt;a aria-hidden="true" href="#le-but"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le but
&lt;/h5&gt;
&lt;p&gt;
 Je l’ai dit, c’est de réaliser des feux de signalisation.
Alors, vu le nombre de LED, vous vous doutez bien qu’il faut réaliser 2 feux. Ces feux devront être synchronisés.
Là encore, je vous ai préparé une belle image animée :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;img alt="Les feux" src="./images/uploaded/tuto-arduino-203-tp-feux-de-signalisation-routière/les-feux.gif"/&gt;
  &lt;figcaption&gt;
   Les feux
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;h5 id="le-temps-de-la-séquence"&gt;
 &lt;a aria-hidden="true" href="#le-temps-de-la-séquence"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le temps de la séquence
&lt;/h5&gt;
&lt;p&gt;
 Vous allez mettre un délai de 3 secondes entre le feu vert et le feu orange.
Un délai de 1 seconde entre le feu orange et le feu rouge. Et un délai de 3 secondes entre le feu rouge et le feu vert.
&lt;/p&gt;
&lt;h5 id="par-où-commencer"&gt;
 &lt;a aria-hidden="true" href="#par-où-commencer"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Par où commencer ?
&lt;/h5&gt;
&lt;p&gt;
 D’abord, vous devez faire l’organigramme. Oui je ne vous le donne pas !
Ensuite, vous commencez un nouveau programme. Dans ce programme, vous devez définir quelles sont les broches du micro-contrôleur que vous utilisez.
Puis définir si ce sont des entrées, des sorties, ou s’il y a des deux.
Pour terminer, vous allez faire le programme complet dans la fonction qui réalise une boucle.
&lt;/p&gt;
&lt;h5 id="cest-parti"&gt;
 &lt;a aria-hidden="true" href="#cest-parti"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 C’est parti !
&lt;/h5&gt;
&lt;p&gt;
 Allez, c’est parti ! A vous de m’épater.
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Vous avez théoriquement toutes les bases nécessaires pour réaliser ce TP.
En plus on a presque déjà tout fait. Mince, j’en ai trop dit…
Pendant ce temps, moi je vais me faire une raclette.
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 Et voici un résultat possible :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/ByPDsyHhf-g" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voici un simulateur interactif sans le code, si vous ne souhaitez/ne pouvez pas le faire en réel :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/1Q78ctLy4p6" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="correction"&gt;
 &lt;a aria-hidden="true" href="#correction"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Correction !
&lt;/h3&gt;
&lt;h5 id="fini"&gt;
 &lt;a aria-hidden="true" href="#fini"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Fini !
&lt;/h5&gt;
&lt;p&gt;
 Vous avez fini ? Votre code ne fonctionne pas, mais vous avez eu beau chercher pourquoi, vous n’avez pas trouvé ?
&lt;/p&gt;
&lt;p&gt;
 Très bien. Dans ce cas, vous pouvez lire la correction.
&lt;/p&gt;
&lt;p&gt;
 Ceux qui n’ont pas cherché ne sont pas les bienvenus ici !
 &lt;img alt=":diable:" class="smiley" src="./static/smileys/diable.png"/&gt;
&lt;/p&gt;
&lt;h5 id="lorganigramme"&gt;
 &lt;a aria-hidden="true" href="#lorganigramme"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’organigramme
&lt;/h5&gt;
&lt;p&gt;
 Cette fois, l’organigramme a changé de forme, c’est une liste.
Comment le lire ? De haut en bas ! Le premier élément du programme commence après le début, le deuxième élément, après le premier, etc.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;strong&gt;
   DEBUT
  &lt;/strong&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   /* première partie du programme, on s'occupe principalement du deuxième feu */
  &lt;/code&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Allumer led
  &lt;em&gt;
   rouge
  &lt;/em&gt;
  feux_1
 &lt;/li&gt;
 &lt;li&gt;
  Allumer led
  &lt;em&gt;
   verte
  &lt;/em&gt;
  feux_2
 &lt;/li&gt;
 &lt;li&gt;
  Attendre 3 secondes
 &lt;/li&gt;
 &lt;li&gt;
  Éteindre led
  &lt;em&gt;
   verte
  &lt;/em&gt;
  feux_2
 &lt;/li&gt;
 &lt;li&gt;
  Allumer led
  &lt;em&gt;
   jaune
  &lt;/em&gt;
  feux_2
 &lt;/li&gt;
 &lt;li&gt;
  Attendre 1 seconde
 &lt;/li&gt;
 &lt;li&gt;
  Éteindre led
  &lt;em&gt;
   jaune
  &lt;/em&gt;
  feux_2
 &lt;/li&gt;
 &lt;li&gt;
  Allumer led
  &lt;em&gt;
   rouge
  &lt;/em&gt;
  feux_2
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   /* deuxième partie du programme, pour l'instant : led_rouge_feux_1 et led_rouge_feux_2 sont allumées; on éteint donc la led_rouge_feux_1 pour allumer la led_verte_feux_1 */
  &lt;/code&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Attendre 3 secondes
 &lt;/li&gt;
 &lt;li&gt;
  Éteindre led
  &lt;em&gt;
   rouge
  &lt;/em&gt;
  feux_1
 &lt;/li&gt;
 &lt;li&gt;
  Allumer led
  &lt;em&gt;
   verte
  &lt;/em&gt;
  feux_1
 &lt;/li&gt;
 &lt;li&gt;
  Attendre 3 secondes
 &lt;/li&gt;
 &lt;li&gt;
  Éteindre led
  &lt;em&gt;
   verte
  &lt;/em&gt;
  feux_1
 &lt;/li&gt;
 &lt;li&gt;
  Allumer led
  &lt;em&gt;
   jaune
  &lt;/em&gt;
  feux_1
 &lt;/li&gt;
 &lt;li&gt;
  Attendre 1 seconde
 &lt;/li&gt;
 &lt;li&gt;
  Éteindre led
  &lt;em&gt;
   jaune
  &lt;/em&gt;
  feux_1
 &lt;/li&gt;
 &lt;li&gt;
  Allumer led
  &lt;em&gt;
   rouge
  &lt;/em&gt;
  feux_1
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   FIN
  &lt;/strong&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Voilà donc ce qu’il faut suivre pour faire le programme.
Si vous avez trouvé comme ceci, c’est très bien, sinon il faut s’entraîner car c’est très important d’organiser son code et en plus cela permet d’éviter certaines erreurs !
&lt;/p&gt;
&lt;h4 id="la-correction-enfin"&gt;
 &lt;a aria-hidden="true" href="#la-correction-enfin"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La correction, enfin !
&lt;/h4&gt;
&lt;p&gt;
 Voilà le moment que vous attendez tous : la correction !
Alors, je préviens tout de suite, le code que je vais vous montrer n’est pas absolu, on peut le faire de différentes manières
&lt;/p&gt;
&lt;h5 id="la-fonction-setup"&gt;
 &lt;a aria-hidden="true" href="#la-fonction-setup"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La fonction setup
&lt;/h5&gt;
&lt;p&gt;
 Normalement ici aucune difficulté, on va nommer les broches, puis les placer en sortie et les mettre dans leur état de départ.
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// définition des broches&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_rouge_feux_1 = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_jaune_feux_1 = &lt;span class="hljs-number"&gt;3&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_verte_feux_1 = &lt;span class="hljs-number"&gt;4&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_rouge_feux_2 = &lt;span class="hljs-number"&gt;5&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_jaune_feux_2 = &lt;span class="hljs-number"&gt;6&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_verte_feux_2 = &lt;span class="hljs-number"&gt;7&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// initialisation en sortie de toutes les broches&lt;/span&gt;
    pinMode(led_rouge_feux_1, OUTPUT);
    pinMode(led_jaune_feux_1, OUTPUT);
    pinMode(led_verte_feux_1, OUTPUT);
    pinMode(led_rouge_feux_2, OUTPUT);
    pinMode(led_jaune_feux_2, OUTPUT);
    pinMode(led_verte_feux_2, OUTPUT);

    &lt;span class="hljs-comment"&gt;// on initialise toutes les LED éteintes au début du programme&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// (sauf les deux feux rouges)&lt;/span&gt;
    digitalWrite(led_rouge_feux_1, LOW);
    digitalWrite(led_jaune_feux_1, HIGH);
    digitalWrite(led_verte_feux_1, HIGH);
    digitalWrite(led_rouge_feux_2, LOW);
    digitalWrite(led_jaune_feux_2, HIGH);
    digitalWrite(led_verte_feux_2, HIGH);
}
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    La fonction setup
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous remarquerez l’utilité d’avoir des variables bien nommées.
&lt;/p&gt;
&lt;h5 id="le-code-principal"&gt;
 &lt;a aria-hidden="true" href="#le-code-principal"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le code principal
&lt;/h5&gt;
&lt;p&gt;
 Si vous êtes bien organisé, vous ne devriez pas avoir de problème ici non plus! Point trop de paroles, la solution arrive
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// première séquence&lt;/span&gt;
    digitalWrite(led_rouge_feux_1, HIGH);
    digitalWrite(led_verte_feux_1, LOW);

    delay(&lt;span class="hljs-number"&gt;3000&lt;/span&gt;);

    &lt;span class="hljs-comment"&gt;// deuxième séquence&lt;/span&gt;
    digitalWrite(led_verte_feux_1, HIGH);
    digitalWrite(led_jaune_feux_1, LOW);

    delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);

    &lt;span class="hljs-comment"&gt;// troisième séquence&lt;/span&gt;
    digitalWrite(led_jaune_feux_1, HIGH);
    digitalWrite(led_rouge_feux_1, LOW);

    delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);

    &lt;span class="hljs-comment"&gt;/* deuxième partie du programme, on s'occupe du feux numéro 2 */&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;// première séquence&lt;/span&gt;
    digitalWrite(led_rouge_feux_2, HIGH);
    digitalWrite(led_verte_feux_2, LOW);

    delay(&lt;span class="hljs-number"&gt;3000&lt;/span&gt;);

    &lt;span class="hljs-comment"&gt;// deuxième séquence&lt;/span&gt;
    digitalWrite(led_verte_feux_2, HIGH);
    digitalWrite(led_jaune_feux_2, LOW);

    delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);

    &lt;span class="hljs-comment"&gt;// deuxième séquence&lt;/span&gt;
    digitalWrite(led_jaune_feux_2, HIGH);
    digitalWrite(led_rouge_feux_2, LOW);

    delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;);

    &lt;span class="hljs-comment"&gt;/* le programme va reboucler et revenir au début */&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    La fonction principale
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Et voici le résultat interactif :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/74JlwBUVAmk" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Si ça marche, tant mieux, sinon référez vous à la résolution des problèmes en annexe du cours.
Ce TP est donc terminé, vous pouvez modifier le code pour par exemple changer les temps entre chaque séquence, ou bien même modifier les séquences elles-mêmes, …
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/BNAd57-1UQw" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Bon, c’était un TP gentillet. L’intérêt est seulement de vous faire pratiquer pour vous "enfoncer dans le crâne" ce que l’on a vu jusqu’à présent.
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Un simple bouton</title><link href="https://eskimon.fr/tuto-arduino-204-un-simple-bouton" rel="alternate"></link><published>2013-12-10T20:03:00+01:00</published><updated>2013-12-10T20:03:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-10:/tuto-arduino-204-un-simple-bouton</id><summary type="html">&lt;p&gt;
 À la fin de ce chapitre, vous serez capable d’utiliser des boutons ou des interrupteurs pour interagir de manière simple avec votre programme.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#quest-ce-quun-bouton"&gt;
    Qu’est-ce qu’un bouton ?
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#mécanique-du-bouton"&gt;
      Mécanique du bouton
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-bouton-poussoir-normalement-ouvert-no"&gt;
       Le bouton poussoir normalement ouvert (NO)
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-bouton-poussoir-normalement-fermé-nf"&gt;
       Le bouton poussoir normalement fermé (NF)
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-interrupteurs"&gt;
       Les interrupteurs
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#lélectronique-du-bouton"&gt;
      L’électronique du …&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;
 À la fin de ce chapitre, vous serez capable d’utiliser des boutons ou des interrupteurs pour interagir de manière simple avec votre programme.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#quest-ce-quun-bouton"&gt;
    Qu’est-ce qu’un bouton ?
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#mécanique-du-bouton"&gt;
      Mécanique du bouton
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-bouton-poussoir-normalement-ouvert-no"&gt;
       Le bouton poussoir normalement ouvert (NO)
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-bouton-poussoir-normalement-fermé-nf"&gt;
       Le bouton poussoir normalement fermé (NF)
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-interrupteurs"&gt;
       Les interrupteurs
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#lélectronique-du-bouton"&gt;
      L’électronique du bouton
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#symbole"&gt;
       Symbole
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#tension-et-courant"&gt;
       Tension et courant
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#contrainte-pour-les-montages"&gt;
      Contrainte pour les montages
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#filtrer-les-rebonds"&gt;
       Filtrer les rebonds
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#schéma-résumé"&gt;
       Schéma résumé
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#les-pull-ups-internes"&gt;
      Les pull-ups internes
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#schéma-résumé-1"&gt;
       Schéma résumé
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#récupérer-lappui-du-bouton"&gt;
    Récupérer l’appui du bouton
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#montage-de-base"&gt;
     Montage de base
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#paramétrer-la-carte"&gt;
     Paramétrer la carte
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#récupérer-létat-du-bouton"&gt;
     Récupérer l’état du bouton
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#test-simple"&gt;
      Test simple
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#but"&gt;
       But
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#correction"&gt;
       Correction
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#interagir-avec-les-led"&gt;
    Interagir avec les LED
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#montage-à-faire"&gt;
     Montage à faire
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#objectif-barregraphe-à-led"&gt;
      Objectif : Barregraphe à LED
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#cahier-des-charges"&gt;
       Cahier des charges
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#correction-1"&gt;
      Correction
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#initialisation"&gt;
       Initialisation
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#détection-des-différences-appuyérelâché"&gt;
       Détection des différences appuyé/relâché
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#détection-du-changement-détat"&gt;
       Détection du changement d’état
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#laffichage"&gt;
       L’affichage
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#les-interruptions-matérielles"&gt;
    Les interruptions matérielles
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#principe"&gt;
     Principe
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#mise-en-place"&gt;
      Mise en place
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#créer-une-nouvelle-interruption"&gt;
       Créer une nouvelle interruption
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#mise-en-garde"&gt;
     Mise en garde
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="quest-ce-quun-bouton"&gt;
 &lt;a aria-hidden="true" href="#quest-ce-quun-bouton"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Qu’est-ce qu’un bouton ?
&lt;/h3&gt;
&lt;p&gt;
 Derrière ce titre trivial se cache un composant de base très utile, possédant de nombreux détails que vous ignorez peut-être.
Commençons donc dès maintenant l’autopsie de ce dernier.
&lt;/p&gt;
&lt;h4 id="mécanique-du-bouton"&gt;
 &lt;a aria-hidden="true" href="#mécanique-du-bouton"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Mécanique du bouton
&lt;/h4&gt;
&lt;p&gt;
 Vous le savez sûrement déjà, un bouton n’est jamais qu’un fil qui est connecté ou non selon sa position.
En pratique, on en repère plusieurs, qui diffèrent selon leur taille, leurs caractéristiques électriques, les positions mécaniques possibles, etc.
&lt;/p&gt;
&lt;h5 id="le-bouton-poussoir-normalement-ouvert-no"&gt;
 &lt;a aria-hidden="true" href="#le-bouton-poussoir-normalement-ouvert-no"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le bouton poussoir normalement ouvert (NO)
&lt;/h5&gt;
&lt;p&gt;
 Dans cette partie du tutoriel, nous allons utiliser ce type de boutons poussoirs (ou BP).
Ces derniers ont deux positions :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;strong&gt;
   Relâché
  &lt;/strong&gt;
  : le courant ne passe pas, le circuit est déconnecté ; on dit que le circuit est "
  &lt;strong&gt;
   ouvert
  &lt;/strong&gt;
  ".
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   Appuyé
  &lt;/strong&gt;
  : le courant passe, on dit que le circuit est
  &lt;strong&gt;
   fermé
  &lt;/strong&gt;
  .
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Retenez bien ces mots de vocabulaire !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="le-bouton-poussoir-normalement-fermé-nf"&gt;
 &lt;a aria-hidden="true" href="#le-bouton-poussoir-normalement-fermé-nf"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le bouton poussoir normalement fermé (NF)
&lt;/h5&gt;
&lt;p&gt;
 Ce type de bouton est l’opposé du type précédent, c’est-à-dire que lorsque le bouton est relâché, il laisse passer le courant.
Et inversement :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;strong&gt;
   Relâché
  &lt;/strong&gt;
  : le courant passe, le circuit est connecté ; on dit que le circuit est "
  &lt;strong&gt;
   fermé
  &lt;/strong&gt;
  ".
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   Appuyé
  &lt;/strong&gt;
  : le courant ne passe pas, on dit que le circuit est
  &lt;strong&gt;
   ouvert
  &lt;/strong&gt;
  .
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="les-interrupteurs"&gt;
 &lt;a aria-hidden="true" href="#les-interrupteurs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les interrupteurs
&lt;/h5&gt;
&lt;p&gt;
 À la différence d’un bouton poussoir, l’interrupteur agit comme une bascule.
Un appui ferme le circuit et il faut un second appui pour l’ouvrir de nouveau.
Il possède donc des états stables (ouvert ou fermé).
On dit qu’un interrupteur est
 &lt;strong&gt;
  bistable
 &lt;/strong&gt;
 .
Vous en rencontrez tous les jours lorsque vous allumez la lumière
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 .
&lt;/p&gt;
&lt;h4 id="lélectronique-du-bouton"&gt;
 &lt;a aria-hidden="true" href="#lélectronique-du-bouton"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’électronique du bouton
&lt;/h4&gt;
&lt;h5 id="symbole"&gt;
 &lt;a aria-hidden="true" href="#symbole"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Symbole
&lt;/h5&gt;
&lt;p&gt;
 Le BP et l’interrupteur ne possèdent pas le même symbole pour les schémas électroniques.
Le premier est représenté par une barre qui doit venir faire contact pour fermer le circuit ou défaire le contact pour ouvrir le circuit.
Le second est représenté par un fil qui ouvre un circuit et qui peut bouger pour le fermer.
Voici leurs symboles, il est important de s’en rappeler :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       &lt;img alt="symbole BP NO" src="./images/uploaded/tuto-arduino-204-un-simple-bouton/symbole-bp-no.jpg"/&gt;
      &lt;/th&gt;
      &lt;th&gt;
       &lt;img alt="symbole BP NF" src="./images/uploaded/tuto-arduino-204-un-simple-bouton/symbole-bp-nf.jpg"/&gt;
      &lt;/th&gt;
      &lt;th&gt;
       &lt;img alt="symbole d'un interrupteur" src="./images/uploaded/tuto-arduino-204-un-simple-bouton/symbole-dun-interrupteur.jpg"/&gt;
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Bouton Poussoir NO
      &lt;/td&gt;
      &lt;td&gt;
       Bouton Poussoir NF
      &lt;/td&gt;
      &lt;td&gt;
       Interrupteur
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Symboles conventionnels des boutons
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;h5 id="tension-et-courant"&gt;
 &lt;a aria-hidden="true" href="#tension-et-courant"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Tension et courant
&lt;/h5&gt;
&lt;p&gt;
 Voici maintenant quelques petites précisions sur les boutons :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Lorsqu’il est ouvert, la tension à ses bornes ne peut être nulle (ou alors c’est que le circuit n’est pas alimenté). En revanche, lorsqu’il est fermé cette même tension doit être nulle. En effet, aux bornes d’un fil la tension est de 0V.
 &lt;/li&gt;
 &lt;li&gt;
  Ensuite, lorsque le bouton est ouvert, aucun courant ne peut passer, le circuit est donc déconnecté. Par contre, lorsqu’il est fermé, le courant nécessaire au bon fonctionnement des différents composants le traverse. Il est donc important de prendre en compte cet aspect. Un bouton devant supporter deux ampères ne sera pas aussi gros qu’un bouton tolérant 100 ampères (et pas aussi cher
  &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
  ).
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Il est très fréquent de trouver des boutons dans les starters kit.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;figure&gt;
 &lt;img alt="Quelques boutons poussoirs" src="./images/uploaded/tuto-arduino-204-un-simple-bouton/quelques-boutons-poussoirs.jpg"/&gt;
 &lt;figcaption&gt;
  Quelques boutons poussoirs - (CC-BY-SA
  &lt;a href="http://commons.wikimedia.org/wiki/File:Tactile_switches.jpg"&gt;
   Scwerllguy
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Souvent ils ont quatre pattes (comme sur l’image ci-dessus). Si c’est le cas, sachez que les broches sont reliées deux à deux. Cela signifie quelles fonctionnent par paire. Il faut donc se méfier lorsque vous le brancher sinon vous obtiendrez le même comportement qu’un fil (si vous connectez deux broches reliées).
Utilisez un multimètre pour déterminer quelles broches sont distinctes.
 &lt;strong&gt;
  Pour ne pas se tromper, on utilise en général deux broches qui sont opposées sur la diagonale du bouton.
 &lt;/strong&gt;
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/K0qiwP8TgFQ" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="contrainte-pour-les-montages"&gt;
 &lt;a aria-hidden="true" href="#contrainte-pour-les-montages"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Contrainte pour les montages
&lt;/h4&gt;
&lt;p&gt;
 Voici maintenant un point très important, soyez donc attentif car je vais vous expliquer le rôle d’une résistance de pull-up !
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   C’est quoi c’t'animal, le poule-eup ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Lorsque l’on fait de l’électronique, on a toujours peur des perturbations (générées par plein de choses : des lampes à proximité, un téléphone portable, un doigt sur le circuit, l’électricité statique, …).
On appelle ça des contraintes de
 &lt;strong&gt;
  &lt;abbr title="Compatibilité ÉlectroMagnétique"&gt;
   CEM
  &lt;/abbr&gt;
 &lt;/strong&gt;
 .
Ces perturbations sont souvent inoffensives, mais perturbent beaucoup les montages électroniques.
Il est alors nécessaire de les prendre en compte lorsque l’on fait de l’électronique de signal.
Par exemple, dans certains cas on peut se retrouver avec un bit de signal qui vaut 1 à la place de 0, les données reçues sont donc fausses.
&lt;/p&gt;
&lt;p&gt;
 Pour contrer ces effets nuisibles, on place en série avec le bouton une résistance de pull-up.
Cette résistance sert à "tirer" ("to pull" in english) le potentiel vers le haut (up) afin d’avoir un signal clair sur la broche étudiée.
Sur le schéma suivant, on voit ainsi qu’en temps normal le "signal" a un potentiel de 5V.
Ensuite, lorsque l’utilisateur appuiera sur le bouton une connexion sera faite avec la masse.
On lira alors une valeur de 0V pour le signal.
Voici donc un deuxième intérêt de la résistance de pull-up, éviter le court-circuit qui serait généré à l’appui !
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Résistance Pull up" src="./images/uploaded/tuto-arduino-204-un-simple-bouton/resistance-pull-up.jpg"/&gt;
 &lt;figcaption&gt;
  Résistance Pull up
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="filtrer-les-rebonds"&gt;
 &lt;a aria-hidden="true" href="#filtrer-les-rebonds"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Filtrer les rebonds
&lt;/h5&gt;
&lt;p&gt;
 Les boutons ne sont pas des systèmes mécaniques parfaits.
Du coup, lorsqu’un appui est fait dessus, le signal ne passe pas immédiatement et proprement de 5V à 0V.
En l’espace de quelques millisecondes, le signal va "sauter" entre 5V et 0V plusieurs fois avant de se stabiliser.
Il se passe le même phénomène lorsque l’utilisateur relâche le bouton.
&lt;/p&gt;
&lt;p&gt;
 Ce genre d’effet n’est pas désirable, car il peut engendrer des parasites au sein de votre programme (si vous voulez détecter un appui, les rebonds vont vous en générer une dizaine en quelques millisecondes, ce qui peut-être très gênant dans le cas d’un compteur par exemple).
Voilà un exemple de chronogramme relevé lors du relâchement d’un bouton poussoir :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Chronogramme avec rebond" src="./images/uploaded/tuto-arduino-204-un-simple-bouton/chronogramme-avec-rebond.jpg"/&gt;
 &lt;figcaption&gt;
  Chronogramme avec rebond
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Pour atténuer ce phénomène, nous allons utiliser un condensateur en parallèle avec le bouton.
Ce composant servira ici "d’amortisseur" qui absorbera les rebonds (comme sur une voiture avec les cahots de la route).
Le condensateur, initialement chargé, va se décharger lors de l’appui sur le bouton.
S’il y a des rebonds, ils seront encaissés par le condensateur durant cette décharge.
Il se passera le phénomène inverse (charge du condensateur) lors du relâchement du bouton.
Ce principe est illustré à la figure suivante :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Filtre anti-rebond" src="./images/uploaded/tuto-arduino-204-un-simple-bouton/filtre-anti-rebond.jpg"/&gt;
 &lt;figcaption&gt;
  Filtre anti-rebond
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="schéma-résumé"&gt;
 &lt;a aria-hidden="true" href="#schéma-résumé"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Schéma résumé
&lt;/h5&gt;
&lt;p&gt;
 En résumé, voilà un montage que vous pourriez obtenir avec un bouton, sa résistance de pull-up et son filtre anti-rebond sur votre carte Arduino :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Un bouton + résistance pullup - Schéma" src="./images/uploaded/tuto-arduino-204-un-simple-bouton/un-bouton-resistance-pullup-schema.png"/&gt;
 &lt;figcaption&gt;
  Un bouton + résistance pullup - Schéma
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Un bouton + résistance pullup - Montage" src="./images/uploaded/tuto-arduino-204-un-simple-bouton/un-bouton-resistance-pullup-montage.png"/&gt;
 &lt;figcaption&gt;
  Un bouton + résistance pullup - Montage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="les-pull-ups-internes"&gt;
 &lt;a aria-hidden="true" href="#les-pull-ups-internes"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les pull-ups internes
&lt;/h4&gt;
&lt;p&gt;
 Comme expliqué précédemment, pour obtenir des signaux clairs et éviter les courts-circuits, on utilise des résistances de pull-up.
Cependant, ces dernières existent aussi en interne du microcontrôleur de l’Arduino, ce qui évite d’avoir à les rajouter par nous-mêmes par la suite.
Ces dernières ont une valeur de 20 kilo-Ohms.
Elles peuvent être utilisées sans aucune contrainte technique.
&lt;/p&gt;
&lt;p&gt;
 Cependant, si vous les mettez en marche, il faut se souvenir que cela équivaut à mettre la broche à l’état haut (et en entrée évidemment).
Donc si vous repassez à un état de sortie ensuite, rappelez-vous bien que tant que vous ne l’avez pas changée elle sera à l’état haut.
Ce que je viens de dire permet de mettre en place ces dernières dans le logiciel :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; unBouton = &lt;span class="hljs-number"&gt;2&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// un bouton sur la broche 2&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on met le bouton en entrée&lt;/span&gt;
    pinMode(unBouton, INPUT);
    &lt;span class="hljs-comment"&gt;// on active la résistance de pull-up en mettant la broche à l'état haut&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// (mais cela reste toujours une entrée)&lt;/span&gt;
    digitalWrite(unBouton, HIGH);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// votre programme&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Initialisation d’un bouton
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Depuis la version 1.0.1 d’Arduino, une pull-up peut être simplement mise en oeuvre en utilisant le deuxième argument de
   &lt;code&gt;
    pinMode
   &lt;/code&gt;
   . La syntaxe devient
   &lt;code&gt;
    pinMode(unBouton, INPUT_PULLUP)
   &lt;/code&gt;
   et il n’y a plus besoin de faire un
   &lt;code&gt;
    digitalWrite()
   &lt;/code&gt;
   ensuite.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="schéma-résumé-1"&gt;
 &lt;a aria-hidden="true" href="#schéma-résumé-1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Schéma résumé
&lt;/h5&gt;
&lt;figure&gt;
 &lt;img alt="Un bouton + résistance pullup interne - Schéma" src="./images/uploaded/tuto-arduino-204-un-simple-bouton/un-bouton-resistance-pullup-interne-schema.png"/&gt;
 &lt;figcaption&gt;
  Un bouton + résistance pullup interne - Schéma
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Un bouton + résistance pullup interne - Montage" src="./images/uploaded/tuto-arduino-204-un-simple-bouton/un-bouton-resistance-pullup-interne-montage.png"/&gt;
 &lt;figcaption&gt;
  Un bouton + résistance pullup interne - Montage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/NTWKLSPOK8g" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="récupérer-lappui-du-bouton"&gt;
 &lt;a aria-hidden="true" href="#récupérer-lappui-du-bouton"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Récupérer l’appui du bouton
&lt;/h3&gt;
&lt;h4 id="montage-de-base"&gt;
 &lt;a aria-hidden="true" href="#montage-de-base"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Montage de base
&lt;/h4&gt;
&lt;p&gt;
 Pour cette partie, nous allons apprendre à lire l’état d’une entrée numérique.
Tout d’abord, il faut savoir qu’une entrée numérique ne peut prendre que deux états, HAUT (
 &lt;code&gt;
  HIGH
 &lt;/code&gt;
 ) ou BAS (
 &lt;code&gt;
  LOW
 &lt;/code&gt;
 ).
L’état haut correspond à une tension de +5V sur la broche, tandis que l’état bas est une tension de 0V.
Dans notre exemple, nous allons utiliser un simple bouton.
Dans la réalité, vous pourriez utiliser n’importe quel capteur qui possède une sortie numérique. Nous allons donc utiliser :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Un bouton poussoir (et une résistance de 10k de pull-up et un condensateur anti-rebond de 10nF)
 &lt;/li&gt;
 &lt;li&gt;
  Une LED (et sa résistance de limitation de courant)
 &lt;/li&gt;
 &lt;li&gt;
  La carte Arduino
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Voici maintenant le schéma à réaliser :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Un bouton et une LED - Schéma" src="./images/uploaded/tuto-arduino-204-un-simple-bouton/un-bouton-et-une-led-schema.jpg"/&gt;
 &lt;figcaption&gt;
  Un bouton et une LED - Schéma
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Un bouton et une LED - Montage" src="./images/uploaded/tuto-arduino-204-un-simple-bouton/un-bouton-et-une-led-montage.png"/&gt;
 &lt;figcaption&gt;
  Un bouton et une LED - Montage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="paramétrer-la-carte"&gt;
 &lt;a aria-hidden="true" href="#paramétrer-la-carte"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Paramétrer la carte
&lt;/h4&gt;
&lt;p&gt;
 Afin de pouvoir utiliser le bouton, il faut spécifier à Arduino qu’il y a un bouton de connecté sur une de ses broches.
Cette broche sera donc une
 &lt;strong&gt;
  entrée
 &lt;/strong&gt;
 .
Bien entendu, comme vous êtes de bons élèves, vous vous souvenez que tous les paramétrages initiaux se font dans la fonction
 &lt;code&gt;
  setup()
 &lt;/code&gt;
 .
Vous vous souvenez également que pour définir le type (entrée ou sortie) d’une broche, on utilise la fonction :
 &lt;a href="http://arduino.cc/en/Reference/PinMode"&gt;
  pinMode()
 &lt;/a&gt;
 .
Notre bouton étant branché sur la pin 2, on écrira :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;pinMode(&lt;span class="hljs-number"&gt;2&lt;/span&gt;, INPUT);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 &lt;em&gt;
  Pour plus de clarté dans les futurs codes, on considérera que l’on a déclaré une variable globale nommée "bouton" et ayant la valeur 2
 &lt;/em&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Comme ceci :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bouton = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    pinMode(bouton, INPUT);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Voilà, maintenant notre carte Arduino sait qu’il y a quelque chose de connecté sur sa broche 2 et que cette broche est configurée en entrée.
&lt;/p&gt;
&lt;h4 id="récupérer-létat-du-bouton"&gt;
 &lt;a aria-hidden="true" href="#récupérer-létat-du-bouton"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Récupérer l’état du bouton
&lt;/h4&gt;
&lt;p&gt;
 Maintenant que le bouton est paramétré, nous allons chercher à savoir quel est son état (appuyé ou relâché).
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  S’il est relâché, la tension à ses bornes sera de +5V, donc un état logique HIGH.
 &lt;/li&gt;
 &lt;li&gt;
  S’il est appuyé, elle sera de 0V, donc LOW.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Un petit tour sur la référence et nous apprenons qu’il faut utiliser la fonction
 &lt;a href="http://arduino.cc/en/Reference/DigitalRead"&gt;
  digitalRead()
 &lt;/a&gt;
 pour lire l’état logique d’une entrée logique.
Cette fonction prend un paramètre qui est la broche à tester et elle retourne une variable de type
 &lt;code&gt;
  int
 &lt;/code&gt;
 .
Pour lire l’état de la broche 2 nous ferons donc :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; etat;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    etat = digitalRead(bouton); &lt;span class="hljs-comment"&gt;// Rappel : bouton = 2&lt;/span&gt;

    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(etat == HIGH)
        actionRelache(); &lt;span class="hljs-comment"&gt;// le bouton est relaché&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
        actionAppui(); &lt;span class="hljs-comment"&gt;// le bouton est appuyé&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Observez dans ce code, on appelle deux fonctions qui dépendent de l’état du bouton.
Ces fonctions ne sont pas présentes dans ce code, si vous le testez ainsi, il ne fonctionnera pas. Pour ce faire, vous devrez créer les fonctions
   &lt;code&gt;
    actionAppui()
   &lt;/code&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/oywM0VFaMpA" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/ZU5PdKyXiUY" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="test-simple"&gt;
 &lt;a aria-hidden="true" href="#test-simple"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Test simple
&lt;/h4&gt;
&lt;p&gt;
 Nous allons passer à un petit test, que
 &lt;em&gt;
  vous
 &lt;/em&gt;
 allez faire. Moi je regarde !
 &lt;img alt=":diable:" class="smiley" src="./static/smileys/diable.png"/&gt;
&lt;/p&gt;
&lt;h5 id="but"&gt;
 &lt;a aria-hidden="true" href="#but"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 But
&lt;/h5&gt;
&lt;p&gt;
 L’objectif de ce test est assez simple : lorsque l’on appuie sur le bouton, la LED doit s’éteindre.
Lorsque l’on relâche le bouton, la LED doit s’allumer.
Autrement dit, tant que le bouton est
 &lt;strong&gt;
  éteint
 &lt;/strong&gt;
 , la LED est
 &lt;strong&gt;
  allumée
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;h5 id="correction"&gt;
 &lt;a aria-hidden="true" href="#correction"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Correction
&lt;/h5&gt;
&lt;p&gt;
 Allez, c’est vraiment pas dur, en plus je vous donne le montage dans la première partie… Voici la correction :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// le bouton est connecté à la broche 2 de la carte Adruino&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bouton = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// la LED à la broche 13&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led = &lt;span class="hljs-number"&gt;13&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// variable qui enregistre l'état du bouton&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; etatBouton;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Les variables globales
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    pinMode(led, OUTPUT); &lt;span class="hljs-comment"&gt;// la led est une sortie&lt;/span&gt;
    pinMode(bouton, INPUT); &lt;span class="hljs-comment"&gt;// le bouton est une entrée&lt;/span&gt;
    etatBouton = HIGH; &lt;span class="hljs-comment"&gt;// on initialise l'état du bouton comme "relaché"&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  La fonction setup()
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    etatBouton = digitalRead(bouton); &lt;span class="hljs-comment"&gt;// Rappel : bouton = 2&lt;/span&gt;

    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(etatBouton == HIGH) &lt;span class="hljs-comment"&gt;// test si le bouton a un niveau logique HAUT&lt;/span&gt;
    {
        digitalWrite(led, LOW); &lt;span class="hljs-comment"&gt;//le bouton est relâché, la LED est allumée&lt;/span&gt;
    }
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;  &lt;span class="hljs-comment"&gt;// test si le bouton a un niveau logique différent de HAUT (donc BAS)&lt;/span&gt;
    {
        digitalWrite(led, HIGH); &lt;span class="hljs-comment"&gt;//la LED reste éteinte&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  La fonction loop()
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/Eb3Q36zu-S8" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voici une illustration sur simulateur. Le montage est légèrement différent en utilisant une pullup interne à l’Arduino.
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/eXnl0enTU3M" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 J’espère que vous y êtes parvenu sans trop de difficultés ! Si oui, passons à l’exercice suivant…
&lt;/p&gt;
&lt;h3 id="interagir-avec-les-led"&gt;
 &lt;a aria-hidden="true" href="#interagir-avec-les-led"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Interagir avec les LED
&lt;/h3&gt;
&lt;p&gt;
 Nous allons maintenant faire un exemple d’application ensemble.
&lt;/p&gt;
&lt;h4 id="montage-à-faire"&gt;
 &lt;a aria-hidden="true" href="#montage-à-faire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Montage à faire
&lt;/h4&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Pour cet exercice, nous allons utiliser deux boutons et quatre LED de n’importe quelles couleurs.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;ul&gt;
 &lt;li&gt;
  Les deux boutons seront considérés actifs (appuyés) à l’état bas (0V) comme dans la partie précédente. Ils seront connectés sur les broches 2 et 3 de l’Arduino.
 &lt;/li&gt;
 &lt;li&gt;
  Ensuite, les quatre LED seront connectées sur les broches 10 à 13 de l’Arduino.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Voilà donc le montage à effectuer :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Deux boutons et quatre LED - Schéma" src="./images/uploaded/tuto-arduino-204-un-simple-bouton/deux-boutons-et-quatre-led-schema.jpg"/&gt;
 &lt;figcaption&gt;
  Deux boutons et quatre LED - Schéma
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Deux boutons et quatre LED - Montage" src="./images/uploaded/tuto-arduino-204-un-simple-bouton/deux-boutons-et-quatre-led-montage.png"/&gt;
 &lt;figcaption&gt;
  Deux boutons et quatre LED - Montage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="objectif-barregraphe-à-led"&gt;
 &lt;a aria-hidden="true" href="#objectif-barregraphe-à-led"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Objectif : Barregraphe à LED
&lt;/h4&gt;
&lt;p&gt;
 Dans cet exercice, nous allons faire un mini-barregraphe.
Un barregraphe est un afficheur qui indique une quantité, provenant d’une information quelconque (niveau d’eau, puissance sonore, etc.), sous une forme lumineuse.
Le plus souvent, on utilise des LED alignées en guise d’affichage.
Chaque LED se verra allumée selon un niveau qui sera une fraction du niveau total.
Par exemple, si je prends une information qui varie entre 0 et 100, chacune des 4 LED correspondra au quart du maximum de cette variation.
Soit
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mfrac&gt;
        &lt;mrow&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
         &lt;mn&gt;
          0
         &lt;/mn&gt;
         &lt;mn&gt;
          0
         &lt;/mn&gt;
        &lt;/mrow&gt;
        &lt;mrow&gt;
         &lt;mn&gt;
          4
         &lt;/mn&gt;
        &lt;/mrow&gt;
       &lt;/mfrac&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mn&gt;
        5
       &lt;/mn&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       \frac{100}{4} = 25
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.845108em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1.190108em;vertical-align:-0.345em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mopen nulldelimiter"&gt;
      &lt;/span&gt;
      &lt;span class="mfrac"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.845108em;"&gt;
          &lt;span style="top:-2.6550000000000002em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              4
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.15em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="stretchy" style="height:0.2em;"&gt;
            &lt;svg height="0.2em" preserveaspectratio="xMinYMin slice" viewbox="0 0 400000 200" width="400em"&gt;
             &lt;path d="M0 80H400000 v40H0z M0 80H400000 v40H0z"&gt;
             &lt;/path&gt;
            &lt;/svg&gt;
           &lt;/span&gt;
          &lt;/span&gt;
          &lt;span style="top:-3.394em;"&gt;
           &lt;span class="pstrut" style="height:3em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              1
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              0
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              0
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.345em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
      &lt;span class="mclose nulldelimiter"&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      5
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 . En l’occurrence, l’information entrante c’est l’appui des boutons.
Par conséquent un appui sur un bouton allume une LED, un appui sur un autre bouton éteint une LED.
En fait ce n’est pas aussi direct, il faut incrémenter ou décrémenter la valeur d’une variable et en fonction de cette valeur, on allume telle quantité de LED.
&lt;/p&gt;
&lt;h5 id="cahier-des-charges"&gt;
 &lt;a aria-hidden="true" href="#cahier-des-charges"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Cahier des charges
&lt;/h5&gt;
&lt;p&gt;
 La réalisation prévue devra :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  posséder quatre LED (ou plus pour les plus téméraires)
 &lt;/li&gt;
 &lt;li&gt;
  posséder deux boutons : un qui incrémentera le nombre de LED allumées, l’autre qui le décrémentera
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Vous devrez utiliser une variable qui voit sa valeur augmenter ou diminuer entre 0 et 4 selon l’appui du bouton d’incrémentation ou de décrémentation.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Vous pouvez maintenant vous lancer dans l’aventure.
Ceux qui se sentent encore un peu mal à l’aise avec la programmation peuvent poursuivre la lecture, qui leur expliquera pas à pas comment procéder pour arriver au résultat final.
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="correction-1"&gt;
 &lt;a aria-hidden="true" href="#correction-1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Correction
&lt;/h4&gt;
&lt;h5 id="initialisation"&gt;
 &lt;a aria-hidden="true" href="#initialisation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Initialisation
&lt;/h5&gt;
&lt;p&gt;
 Pour commencer, on crée et on initialise toutes les variables dont on a besoin dans notre programme :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;/* déclaration des constantes pour les noms des broches ; ceci selon le schéma */&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; btn_minus = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; btn_plus = &lt;span class="hljs-number"&gt;3&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_0 = &lt;span class="hljs-number"&gt;10&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_1 = &lt;span class="hljs-number"&gt;11&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_2 = &lt;span class="hljs-number"&gt;12&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_3 = &lt;span class="hljs-number"&gt;13&lt;/span&gt;;


&lt;span class="hljs-comment"&gt;/* déclaration des variables utilisées pour le comptage et le décomptage */&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// le nombre qui sera incrémenté et décrémenté&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; nombre_led = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// lecture de l'état des boutons (un seul à la fois donc une variable suffit)&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; etat_bouton;

&lt;span class="hljs-comment"&gt;/* initilisation des broches en entrée/sortie */&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    pinMode(btn_plus, INPUT);
    pinMode(btn_minus, INPUT);
    pinMode(led_0, OUTPUT);
    pinMode(led_1, OUTPUT);
    pinMode(led_2, OUTPUT);
    pinMode(led_3, OUTPUT);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// les instructions de votre programme&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="détection-des-différences-appuyérelâché"&gt;
 &lt;a aria-hidden="true" href="#détection-des-différences-appuyérelâché"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Détection des différences appuyé/relâché
&lt;/h5&gt;
&lt;p&gt;
 Afin de détecter un appui sur un bouton, nous devons comparer son état
 &lt;strong&gt;
  courant
 &lt;/strong&gt;
 avec son état
 &lt;strong&gt;
  précédent
 &lt;/strong&gt;
 .
C’est-à-dire qu’avant qu’il soit appuyé ou relâché, on lit son état et on l’inscrit dans une variable. Ensuite, on relit si son état a changé.
Si c’est le cas alors on incrémente la variable
 &lt;code&gt;
  nombre_led
 &lt;/code&gt;
 .
Pour faire cela, on va utiliser une variable de plus par bouton :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; memoire_plus = HIGH; &lt;span class="hljs-comment"&gt;// état relâché par défaut&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; memoire_minus = HIGH;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="détection-du-changement-détat"&gt;
 &lt;a aria-hidden="true" href="#détection-du-changement-détat"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Détection du changement d’état
&lt;/h5&gt;
&lt;p&gt;
 Comme dit précédemment, nous devons détecter le changement de position du bouton, sinon on ne verra rien car tout se passera trop vite. Voilà le programme de la boucle principale :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// lecture de l'état du bouton d'incrémentation&lt;/span&gt;
    etat_bouton = digitalRead(btn_plus);

    &lt;span class="hljs-comment"&gt;// Si le bouton a un état différent de celui enregistré ET&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// que cet état est "appuyé"&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;((etat_bouton != memoire_plus) &amp;amp;&amp;amp; (etat_bouton == LOW))
    {
        &lt;span class="hljs-comment"&gt;// on incrémente la variable qui indique&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// combien de LED devrons s'allumer&lt;/span&gt;
        nombre_led++;
    }

    &lt;span class="hljs-comment"&gt;// on enregistre l'état du bouton pour le tour suivant&lt;/span&gt;
    memoire_plus = etat_bouton;


    &lt;span class="hljs-comment"&gt;// et maintenant pareil pour le bouton qui décrémente&lt;/span&gt;
    etat_bouton = digitalRead(btn_minus); &lt;span class="hljs-comment"&gt;// lecture de son état&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;// Si le bouton a un état différent que celui enregistré ET&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// que cet état est "appuyé"&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;((etat_bouton != memoire_minus) &amp;amp;&amp;amp; (etat_bouton == LOW))
    {
        nombre_led--; &lt;span class="hljs-comment"&gt;// on décrémente la valeur de nombre_led&lt;/span&gt;
    }
    &lt;span class="hljs-comment"&gt;// on enregistre l'état du bouton pour le tour suivant&lt;/span&gt;
    memoire_minus = etat_bouton;

    &lt;span class="hljs-comment"&gt;// on applique des limites au nombre pour ne pas dépasser 4 ou 0&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(nombre_led &amp;gt; &lt;span class="hljs-number"&gt;4&lt;/span&gt;)
    {
        nombre_led = &lt;span class="hljs-number"&gt;4&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(nombre_led &amp;lt; &lt;span class="hljs-number"&gt;0&lt;/span&gt;)
    {
        nombre_led = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    }

    &lt;span class="hljs-comment"&gt;// appel de la fonction affiche() que l'on aura créée&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// on lui passe en paramètre la valeur du nombre de LED à éclairer&lt;/span&gt;
    affiche(nombre_led);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Programme de detection d’évènements sur un bouton
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Nous avons terminé de créer le squelette du programme et la détection d’évènements, il ne reste plus qu’à afficher le résultat du nombre !
&lt;/p&gt;
&lt;h5 id="laffichage"&gt;
 &lt;a aria-hidden="true" href="#laffichage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’affichage
&lt;/h5&gt;
&lt;p&gt;
 Pour éviter de se compliquer la vie et d’alourdir le code, on va créer une fonction d’affichage.
Celle dont je viens de vous parler :
 &lt;code&gt;
  affiche(int le_parametre)
 &lt;/code&gt;
 .
Cette fonction reçoit un paramètre représentant le nombre à afficher.
À présent, nous devons allumer les LED selon la valeur reçue.
On sait que l’on doit afficher une LED lorsque l’on reçoit le nombre 1, deux LED lorsqu’on reçoit le nombre 2, …
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;affiche&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; valeur_recue)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on éteint toutes les LED&lt;/span&gt;
    digitalWrite(led_0, HIGH);
    digitalWrite(led_1, HIGH);
    digitalWrite(led_2, HIGH);
    digitalWrite(led_3, HIGH);

    &lt;span class="hljs-comment"&gt;// Puis on les allume une à une&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(valeur_recue &amp;gt;= &lt;span class="hljs-number"&gt;1&lt;/span&gt;)
    {
        digitalWrite(led_0, LOW);
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(valeur_recue &amp;gt;= &lt;span class="hljs-number"&gt;2&lt;/span&gt;)
    {
        digitalWrite(led_1, LOW);
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(valeur_recue &amp;gt;= &lt;span class="hljs-number"&gt;3&lt;/span&gt;)
    {
        digitalWrite(led_2, LOW);
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(valeur_recue &amp;gt;= &lt;span class="hljs-number"&gt;4&lt;/span&gt;)
    {
        digitalWrite(led_3, LOW);
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Fonction d’affichage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Donc, si la fonction reçoit le nombre 1, on allume la LED 1. Si elle reçoit le nombre 2, elle allume la LED 1 et 2. Si elle reçoit 3, elle allume la LED 1, 2 et 3. Enfin, si elle reçoit 4, alors elle allume toutes les LED. Le code au grand complet :
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// déclaration des constantes pour les nom des broches ; selon le schéma&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; btn_minus = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; btn_plus = &lt;span class="hljs-number"&gt;3&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_0 = &lt;span class="hljs-number"&gt;10&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_1 = &lt;span class="hljs-number"&gt;11&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_2 = &lt;span class="hljs-number"&gt;12&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_3 = &lt;span class="hljs-number"&gt;13&lt;/span&gt;;


&lt;span class="hljs-comment"&gt;// déclaration des variables utilisées pour le comptage et le décomptage&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// le nombre qui sera incrémenté et décrémenté&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; nombre_led = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// lecture de l'état des boutons (un seul à la fois mais une variable suffit)&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; etat_bouton;

&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; memoire_plus = HIGH; &lt;span class="hljs-comment"&gt;// état relâché par défaut&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; memoire_minus = HIGH;


&lt;span class="hljs-comment"&gt;/* initilisation des broches en entrée/sortie */&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    pinMode(btn_plus, INPUT);
    pinMode(btn_minus, INPUT);
    pinMode(led_0, OUTPUT);
    pinMode(led_1, OUTPUT);
    pinMode(led_2, OUTPUT);
    pinMode(led_3, OUTPUT);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// lecture de l'état du bouton d'incrémentation&lt;/span&gt;
    etat_bouton = digitalRead(btn_plus);

    &lt;span class="hljs-comment"&gt;// Si le bouton a un état différent que celui enregistré ET&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// que cet état est "appuyé"&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;((etat_bouton != memoire_plus) &amp;amp;&amp;amp; (etat_bouton == LOW))
    {
        &lt;span class="hljs-comment"&gt;// on incrémente la variable qui indique&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// combien de LED devrons s'allumer&lt;/span&gt;
        nombre_led++;
    }

    &lt;span class="hljs-comment"&gt;// on enregistre l'état du bouton pour le tour suivant&lt;/span&gt;
    memoire_plus = etat_bouton;


    &lt;span class="hljs-comment"&gt;// et maintenant pareil pour le bouton qui décrémente&lt;/span&gt;
    etat_bouton = digitalRead(btn_minus); &lt;span class="hljs-comment"&gt;// lecture de son état&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;// Si le bouton a un état différent que celui enregistré ET&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// que cet état est "appuyé"&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;((etat_bouton != memoire_minus) &amp;amp;&amp;amp; (etat_bouton == LOW))
    {
        nombre_led--; &lt;span class="hljs-comment"&gt;// on décrémente la valeur de nombre_led&lt;/span&gt;
    }
    &lt;span class="hljs-comment"&gt;// on enregistre l'état du bouton pour le tour suivant&lt;/span&gt;
    memoire_minus = etat_bouton;

    &lt;span class="hljs-comment"&gt;// on applique des limites au nombre pour ne pas dépasser 4 ou 0&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(nombre_led &amp;gt; &lt;span class="hljs-number"&gt;4&lt;/span&gt;)
    {
        nombre_led = &lt;span class="hljs-number"&gt;4&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(nombre_led &amp;lt; &lt;span class="hljs-number"&gt;0&lt;/span&gt;)
    {
        nombre_led = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    }

    &lt;span class="hljs-comment"&gt;// appel de la fonction affiche() que l'on aura créée&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// on lui passe en paramètre la valeur du nombre de LED à éclairer&lt;/span&gt;
    affiche(nombre_led);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;affiche&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; valeur_recue)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on éteint toutes les led&lt;/span&gt;
    digitalWrite(led_0, HIGH);
    digitalWrite(led_1, HIGH);
    digitalWrite(led_2, HIGH);
    digitalWrite(led_3, HIGH);

    &lt;span class="hljs-comment"&gt;// Puis on les allume une à une&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(valeur_recue &amp;gt;= &lt;span class="hljs-number"&gt;1&lt;/span&gt;)
    {
        digitalWrite(led_0, LOW);
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(valeur_recue &amp;gt;= &lt;span class="hljs-number"&gt;2&lt;/span&gt;)
    {
        digitalWrite(led_1, LOW);
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(valeur_recue &amp;gt;= &lt;span class="hljs-number"&gt;3&lt;/span&gt;)
    {
        digitalWrite(led_2, LOW);
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(valeur_recue &amp;gt;= &lt;span class="hljs-number"&gt;4&lt;/span&gt;)
    {
        digitalWrite(led_3, LOW);
    }
}
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    Le code final
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Une petite vidéo du résultat que vous devriez obtenir, même si votre code est différent du mien :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/2fK6nk5NDAU" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Et la démonstration interactive :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/7sdOAt5uzLC" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="les-interruptions-matérielles"&gt;
 &lt;a aria-hidden="true" href="#les-interruptions-matérielles"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les interruptions matérielles
&lt;/h3&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Voici maintenant un sujet plus délicat (mais pas tant que ça !
   &lt;img alt=":ninja:" class="smiley" src="./static/smileys/ninja.png"/&gt;
   ) qui demande votre attention.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Comme vous l’avez remarqué dans la partie précédente, pour récupérer l’état du bouton il faut surveiller régulièrement l’état de ce dernier.
Cependant, si le programme a quelque chose de long à traiter, par exemple s’occuper de l’allumage d’une LED et faire une pause avec
 &lt;code&gt;
  delay()
 &lt;/code&gt;
 (bien que l’on puisse utiliser
 &lt;code&gt;
  millis()
 &lt;/code&gt;
 ), l’appui sur le bouton ne sera pas très réactif et lent à la détente.
Pour certaines applications, cela peut gêner.
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  Problème :
 &lt;/strong&gt;
 si l’utilisateur appuie et relâche rapidement le bouton, vous pourriez ne pas détecter l’appui (si vous êtes dans un traitement long).
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  Solution :
 &lt;/strong&gt;
 utiliser le mécanisme d'
 &lt;strong&gt;
  interruption
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;h4 id="principe"&gt;
 &lt;a aria-hidden="true" href="#principe"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Principe
&lt;/h4&gt;
&lt;p&gt;
 Dans les parties précédentes de ce chapitre, la lecture d’un changement d’état se faisait en comparant régulièrement l’état du bouton à un moment avec son état précédent.
Cette méthode fonctionne bien, mais pose un problème : l’appui ne peut pas être détecté s’il est trop court.
Autre situation, si l’utilisateur fait un appui très long, mais que vous êtes déjà dans un traitement très long (calcul de la millième décimale de PI, soyons fous), le temps de réponse à l’appui ne sera pas du tout optimal, l’utilisateur aura une impression de lag (= pas réactif).
Pour pallier ce genre de problème, les constructeurs de microcontrôleurs ont mis en place des systèmes qui permettent de détecter des évènements et d’exécuter des fonctions dès la détection de ces derniers.
Par exemple, lorsqu’un pilote d’avion de chasse demande au siège de s’éjecter, le siège doit réagir au moment de l’appui, pas une minute plus tard (trop tard).
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Qu’est-ce qu’une interruption ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Une interruption est en fait un déclenchement qui arrête l’exécution du programme pour faire une tâche demandée.
Par exemple, imaginons que le programme compte jusqu’à l’infini.
Moi, programmeur, je veux que le programme arrête de compter lorsque j’appuie sur un bouton.
Or, il s’avère que la fonction qui compte est une boucle for(), dont on ne peut sortir sans avoir atteint l’infini (autrement dit jamais, en théorie).
Nous allons donc nous tourner vers les interruptions qui, dès que le bouton sera appuyé, interromprons le programme pour lui dire : "
 &lt;em&gt;
  Arrête de compter, c’est l’utilisateur qui le demande !
 &lt;/em&gt;
 ".
&lt;/p&gt;
&lt;p&gt;
 Pour résumer :
 &lt;strong&gt;
  une interruption du programme est générée lors d’un événement attendu. Ceci dans le but d’effectuer une tâche, puis de reprendre l’exécution du programme
 &lt;/strong&gt;
 .
Arduino propose aussi ce genre de gestion d’évènements.
On les retrouvera sur certaines broches, sur des timers, des liaisons de communication, etc.
&lt;/p&gt;
&lt;h4 id="mise-en-place"&gt;
 &lt;a aria-hidden="true" href="#mise-en-place"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Mise en place
&lt;/h4&gt;
&lt;p&gt;
 Nous allons illustrer ce mécanisme avec ce qui nous concerne ici, les boutons.
Dans le cas d’une carte Arduino UNO, on trouve deux broches pour gérer des interruptions externes (qui ne sont pas dues au programme lui-même), la 2 et la 3.
Pour déclencher une interruption, plusieurs cas de figure sont possibles :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;strong&gt;
   LOW
  &lt;/strong&gt;
  : Passage à l’état bas de la broche
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   FALLING
  &lt;/strong&gt;
  : Détection d’un front descendant (passage de l’état haut à l’état bas)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   RISING
  &lt;/strong&gt;
  : Détection d’un front montant (pareil qu’avant, mais dans l’autre sens)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   CHANGE
  &lt;/strong&gt;
  : Changement d’état de la broche
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Autrement dit, s’il y a un changement d’un type énuméré au-dessus, alors le programme sera interrompu pour effectuer une action.
&lt;/p&gt;
&lt;h5 id="créer-une-nouvelle-interruption"&gt;
 &lt;a aria-hidden="true" href="#créer-une-nouvelle-interruption"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Créer une nouvelle interruption
&lt;/h5&gt;
&lt;p&gt;
 Comme d’habitude, nous allons commencer par faire des réglages dans la fonction setup(). La fonction importante à utiliser est
 &lt;a href="http://arduino.cc/en/Reference/AttachInterrupt"&gt;
  &lt;code&gt;
   attachInterrupt(interrupt, function, mode)
  &lt;/code&gt;
 &lt;/a&gt;
 . Elle accepte trois paramètres :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   interrupt
  &lt;/code&gt;
  : qui est le numéro de la broche utilisée pour l’interruption (0 pour la broche 2 et 1 pour la broche 3)
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   function
  &lt;/code&gt;
  : qui est le nom de la fonction à appeler lorsque l’interruption est déclenchée
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   mode
  &lt;/code&gt;
  : qui est le type de déclenchement (cf. ci-dessus)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Si l’on veut appeler une fonction nommée
 &lt;code&gt;
  Reagir()
 &lt;/code&gt;
 lorsque l’utilisateur appuie sur un bouton branché sur la broche 2 on fera :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;attachInterrupt(&lt;span class="hljs-number"&gt;0&lt;/span&gt;, Reagir, FALLING);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Vous remarquerez l’absence des parenthèses après le nom de la fonction "Reagir".
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Ensuite, il vous suffit de coder votre fonction
 &lt;code&gt;
  Reagir()
 &lt;/code&gt;
 un peu plus loin.
&lt;/p&gt;
&lt;div class="custom-block alert alert-danger"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Attention, cette fonction ne peut pas prendre d’argument et ne retournera aucun résultat.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Lorsque quelque chose déclenchera l’interruption, le programme principal sera mis en pause.
Ensuite, lorsque l’interruption aura été exécutée et traitée, il reprendra comme si rien ne s’était produit (avec peut-être des variables mises à jour).
&lt;/p&gt;
&lt;p&gt;
 Voici l’exercice précédent dans un simulateur, mais cette fois-ci en utilisant les interruptions :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/lWmDk3vsAG0" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="mise-en-garde"&gt;
 &lt;a aria-hidden="true" href="#mise-en-garde"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Mise en garde
&lt;/h4&gt;
&lt;p&gt;
 Si je fais une partie entière sur les interruptions, ce n’est pas que c’est difficile mais c’est surtout pour vous mettre en garde sur certains points.
Tout d’abord,
 &lt;strong&gt;
  les interruptions ne sont pas une solution miracle
 &lt;/strong&gt;
 .
En effet, gardez bien en tête que leur utilisation répond à un besoin
 &lt;strong&gt;
  justifié
 &lt;/strong&gt;
 .
Elles mettent tout votre programme en pause, et une mauvaise programmation (ce qui n’arrivera pas, je vous fais confiance
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 ) peut entraîner une altération de l’état de vos variables.
De plus, les fonctions
 &lt;code&gt;
  delay()
 &lt;/code&gt;
 et
 &lt;code&gt;
  millis()
 &lt;/code&gt;
 n’auront pas un comportement correct.
En effet, pendant ce temps le programme principal est complètement stoppé, donc les fonctions gérant le temps ne fonctionneront plus, elles seront aussi en pause et laisseront la priorité à la fonction d’interruption.
&lt;/p&gt;
&lt;p&gt;
 La fonction
 &lt;code&gt;
  delay()
 &lt;/code&gt;
 est donc désactivée et la valeur retournée par
 &lt;code&gt;
  millis()
 &lt;/code&gt;
 ne changera pas.
Justifiez donc votre choix avant d’utiliser les interruptions.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/7xhDCajjxO8" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Et voilà, vous savez maintenant comment donner de l’interactivité à l’expérience utilisateur.
Vous avez pu voir quelques applications, mais nul doute que votre imagination fertile va en apporter de nouvelles !
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Afficheurs 7 segments</title><link href="https://eskimon.fr/tuto-arduino-205-afficheurs-7-segments" rel="alternate"></link><published>2013-12-10T20:03:00+01:00</published><updated>2013-12-10T20:03:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-10:/tuto-arduino-205-afficheurs-7-segments</id><summary type="html">&lt;p&gt;
 Vous connaissez les afficheurs 7 segments ? Ou alors vous ne savez pas que ça s’appelle comme ça ? Il s’agit des petites lumières qui forment le chiffre 8 et qui sont de couleur rouge ou verte, la plupart du temps, mais peuvent aussi être bleus, blancs, etc. On en …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Vous connaissez les afficheurs 7 segments ? Ou alors vous ne savez pas que ça s’appelle comme ça ? Il s’agit des petites lumières qui forment le chiffre 8 et qui sont de couleur rouge ou verte, la plupart du temps, mais peuvent aussi être bleus, blancs, etc. On en trouve beaucoup dans les radio-réveils, car ils servent principalement à afficher l’heure. Autre particularité, non seulement de pouvoir afficher des chiffres (0 à 9), ils peuvent également afficher certaines lettres de l’alphabet.
&lt;/p&gt;
&lt;h4 id="matériel"&gt;
 &lt;a aria-hidden="true" href="#matériel"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Matériel
&lt;/h4&gt;
&lt;p&gt;
 Pour ce chapitre, vous aurez besoin de :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Un (et plus) afficheur 7 segments (évidemment)
 &lt;/li&gt;
 &lt;li&gt;
  8 résistances de
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mn&gt;
         3
        &lt;/mn&gt;
        &lt;mn&gt;
         3
        &lt;/mn&gt;
        &lt;mn&gt;
         0
        &lt;/mn&gt;
        &lt;mi mathvariant="normal"&gt;
         Ω
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        330\Omega
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.68333em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       3
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       3
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       0
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       Ω
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Un (ou deux) décodeurs
  &lt;abbr title="Binary Coded Decimal ou Binaire Codé Décimal"&gt;
   BCD
  &lt;/abbr&gt;
  7 segments
 &lt;/li&gt;
 &lt;li&gt;
  Une carte Arduino ! Mais dans un premier temps on va d’abord bien saisir le truc avant de faire du code
  &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Nous allons commencer par une découverte de l’afficheur, comment il fonctionne et comment le branche-t-on. Ensuite nous verrons comment l’utiliser avec la carte Arduino. Enfin, le chapitre suivant amènera un TP résumant les différentes parties vues.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#première-approche-côté-électronique"&gt;
    Première approche : côté électronique
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#un-peu-beaucoup-délectronique"&gt;
      Un peu (beaucoup) d’électronique
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#des-led-encore-des-led"&gt;
       Des LED, encore des LED
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#cathode-commune-ou-anode-commune"&gt;
       Cathode commune ou Anode commune
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#choix-de-lafficheur"&gt;
       Choix de l’afficheur
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#branchement-complet-de-lafficheur"&gt;
      Branchement "complet" de l’afficheur
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#présentation-du-boîtier"&gt;
       Présentation du boîtier
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#exemple"&gt;
       Exemple
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#seulement-7-segments-mais-plein-de-caractères"&gt;
       Seulement 7 segments mais plein de caractère(s) !
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#afficher-son-premier-chiffre"&gt;
    Afficher son premier chiffre !
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#schéma-de-connexion"&gt;
     Schéma de connexion
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#le-programme"&gt;
     Le programme
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#techniques-daffichage"&gt;
    Techniques d’affichage
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#les-décodeurs-4-bits---7-segments"&gt;
      Les décodeurs "4 bits -&amp;gt; 7 segments"
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#décodeur-bcd---7-segments"&gt;
       Décodeur BCD -&amp;gt; 7 segments
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#principe-du-décodeur"&gt;
       Principe du décodeur
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#choix-du-décodeur"&gt;
       Choix du décodeur
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#fonctionnement"&gt;
       Fonctionnement
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#laffichage-par-alternance"&gt;
     L’affichage par alternance
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#utilisation-du-décodeur-bcd"&gt;
    Utilisation du décodeur BCD
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#initialisation"&gt;
     Initialisation
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#programme-principal"&gt;
     Programme principal
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#fonction-daffichage"&gt;
     Fonction d’affichage
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#utiliser-plusieurs-afficheurs"&gt;
    Utiliser plusieurs afficheurs
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#problématique"&gt;
     Problématique
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#un-peu-délectronique"&gt;
      Un peu d’électronique…
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-transistor-bipolaire-présentation"&gt;
       Le transistor bipolaire : présentation
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#fonctionnement-en-commutation-du-transistor-bipolaire"&gt;
       Fonctionnement en commutation du transistor bipolaire
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#utilisation-générale"&gt;
       Utilisation générale
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#utilisation-avec-nos-afficheurs"&gt;
       Utilisation avec nos afficheurs
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#schéma-final"&gt;
       Schéma final
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#quelques-détails-techniques"&gt;
     Quelques détails techniques
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#et-de-programmation"&gt;
     …et de programmation
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;a href="#contraintes-des-évènements"&gt;
   Contraintes des évènements
  &lt;/a&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="première-approche-côté-électronique"&gt;
 &lt;a aria-hidden="true" href="#première-approche-côté-électronique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Première approche : côté électronique
&lt;/h3&gt;
&lt;h4 id="un-peu-beaucoup-délectronique"&gt;
 &lt;a aria-hidden="true" href="#un-peu-beaucoup-délectronique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un peu (beaucoup) d’électronique
&lt;/h4&gt;
&lt;p&gt;
 Comme son nom l’indique, l’afficheur 7 segments possède… 7 segments.
Mais un segment c’est quoi au juste ? Et bien c’est une portion de l’afficheur, qui est allumée ou éteinte pour réaliser l’affichage.
Cette portion n’est en fait rien d’autre qu’une LED qui au lieu d’être ronde comme d’habitude est plate et encastré dans un boiter.
On dénombre donc 8 portions en comptant le point de l’afficheur (mais il ne compte pas en tant que segment à part entière car il n’est pas toujours présent).
Regardez à quoi ça ressemble :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Un afficheur 7 segments" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/un-afficheur-7-segments.jpg"/&gt;
 &lt;figcaption&gt;
  Un afficheur 7 segments - (CC-BY-SA,
  &lt;a href="http://commons.wikimedia.org/wiki/File:Seven_segment_02_Pengo.jpg"&gt;
   Pengo
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="des-led-encore-des-led"&gt;
 &lt;a aria-hidden="true" href="#des-led-encore-des-led"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Des LED, encore des LED
&lt;/h5&gt;
&lt;p&gt;
 Et des LED, il y en a ! Entre 7 et 8 selon les modèles (c’est ce que je viens d’expliquer), voir beaucoup plus, mais on ne s’y attardera pas dessus.
Voici un schéma vous présentant un modèle d’afficheur sans le point (qui au final est juste une LED supplémentaire rappelez-vous) :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Schéma de l'afficheur 7segments" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/schema-de-lafficheur-7segments.png"/&gt;
 &lt;figcaption&gt;
  Schéma de l'afficheur 7segments
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 &lt;em&gt;
  Les interrupteurs a,b,c,d,e,f,g représentent les signaux pilotant chaque segments
 &lt;/em&gt;
&lt;/p&gt;
&lt;p&gt;
 Comme vous le voyez sur ce schéma, toutes les LED possèdent une broche commune, reliée entre elle.
Selon que cette broche est la cathode ou l’anode on parlera d’afficheur à cathode commune ou… anode commune (vous suivez ?).
Dans l’absolu, ils fonctionnent de la même façon, seule la manière de les brancher diffère (actif sur état bas ou sur état haut).
&lt;/p&gt;
&lt;h5 id="cathode-commune-ou-anode-commune"&gt;
 &lt;a aria-hidden="true" href="#cathode-commune-ou-anode-commune"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Cathode commune ou Anode commune
&lt;/h5&gt;
&lt;p&gt;
 Dans le cas d’un afficheur à cathode commune, toutes les cathodes sont reliées entre elles en un seul point lui-même connecté à la masse.
Ensuite, chaque anode de chaque segment sera reliée à une broche de signal.
Pour allumer chaque segment, le signal devra être une tension positive.
En effet, si le signal est à 0, il n’y a pas de différence de potentiel entre les deux broches de la LED et donc elle ne s’allumera pas !
Si nous sommes dans le cas d’une anode commune, les anodes de toutes les LED sont reliées entre elles en un seul point qui sera connecté à l’alimentation.
Les cathodes elles seront reliées une par une aux broches de signal. En mettant une broche de signal à 0, le courant passera et le segment en question s’allumera.
Si la broche de signal est à l’état haut, le potentiel est le même de chaque côté de la LED, donc elle est bloquée et ne s’allume pas !
Que l’afficheur soit à anode ou à cathode commune, on doit toujours prendre en compte qu’il faut ajouter une résistance de limitation de courant entre la broche isolée et la broche de signal.
Traditionnellement, on prendra une résistance de
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        3
       &lt;/mn&gt;
       &lt;mn&gt;
        3
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mi mathvariant="normal"&gt;
        Ω
       &lt;/mi&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       330\Omega
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.68333em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      3
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      3
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      Ω
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 pour une tension de +5V, mais cela se calcul (cf. chapitre 1, partie 2).
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Si vous voulez augmenter la luminosité, il suffit de diminuer cette valeur.
 &lt;/li&gt;
 &lt;li&gt;
  Si au contraire vous voulez diminuer la luminosité, augmenter la résistance.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="choix-de-lafficheur"&gt;
 &lt;a aria-hidden="true" href="#choix-de-lafficheur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Choix de l’afficheur
&lt;/h5&gt;
&lt;p&gt;
 Pour la rédaction j’ai fait le choix d’utiliser des afficheurs à anode commune et ce n’est pas anodin.
En effet et on l’a vu jusqu’à maintenant, on branche les LED du +5V vers la broche de la carte Arduino.
Ainsi, dans le cas d’un afficheur à anode commune, les LED seront branchés d’un côté au +5V, et de l’autre côté aux broches de signaux.
Ainsi, pour allumer un segment on mettra la broche de signal à 0 et on l’éteindra en mettant le signal à 1. On a toujours fait comme ça depuis le début, ça ne vous posera donc aucun problème.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;h4 id="branchement-complet-de-lafficheur"&gt;
 &lt;a aria-hidden="true" href="#branchement-complet-de-lafficheur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Branchement "complet" de l’afficheur
&lt;/h4&gt;
&lt;p&gt;
 Nous allons maintenant voir comment brancher l’afficheur à anode commune.
&lt;/p&gt;
&lt;h5 id="présentation-du-boîtier"&gt;
 &lt;a aria-hidden="true" href="#présentation-du-boîtier"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Présentation du boîtier
&lt;/h5&gt;
&lt;p&gt;
 Les afficheurs 7 segments se présentent sur un
 &lt;em&gt;
  boîtier
 &lt;/em&gt;
 de type
 &lt;abbr title="Dual Inline Package"&gt;
  DIP
 &lt;/abbr&gt;
 10.*
Le format
 &lt;abbr title="Dual Inline Package"&gt;
  DIP
 &lt;/abbr&gt;
 régie l’espacement entre les différentes broches du circuit intégré ainsi que d’autres contraintes (présence d’échangeur thermique etc…).
Le chiffre 10 signifie qu’il possède 10 broches (5 de part et d’autre du boitier).
Voici une représentation de ce dernier (à gauche) :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Boîtier du 7 segments" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/boitier-du-7-segments.jpg"/&gt;
 &lt;figcaption&gt;
  Boîtier du 7 segments - (source: datasheet)
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="7 segments" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/7-segments.png"/&gt;
 &lt;figcaption&gt;
  Dénomination des segments - (CC-BY-SA,
  &lt;a href="http://commons.wikimedia.org/wiki/File:7_segment_display_labeled.svg"&gt;
   h2g2bob
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Voici la signification des différentes broches :
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
  LED de la cathode E
 &lt;/li&gt;
 &lt;li&gt;
  LED de la cathode D
 &lt;/li&gt;
 &lt;li&gt;
  Anode commune des LED
 &lt;/li&gt;
 &lt;li&gt;
  LED de la cathode C
 &lt;/li&gt;
 &lt;li&gt;
  (facultatif) le point décimal.
 &lt;/li&gt;
 &lt;li&gt;
  LED de la cathode B
 &lt;/li&gt;
 &lt;li&gt;
  LED de la cathode A
 &lt;/li&gt;
 &lt;li&gt;
  Anode commune des LED
 &lt;/li&gt;
 &lt;li&gt;
  LED de la cathode F
 &lt;/li&gt;
 &lt;li&gt;
  LED de la cathode G
 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
 Pour allumer un segment c’est très simple, il suffit de le relier à la masse !
&lt;/p&gt;
&lt;div class="custom-block alert alert-danger"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Nous cherchons à allumer les LED de l’afficheur, il est donc impératif de ne pas oubliez les résistances de limitations de courant !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="exemple"&gt;
 &lt;a aria-hidden="true" href="#exemple"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Exemple
&lt;/h5&gt;
&lt;p&gt;
 Pour commencer, vous allez tout d’abord mettre l’afficheur à cheval sur la plaque d’essai (breadboard).
Ensuite, trouvez la broche représentant l’anode commune et reliez la à la future colonne du +5V. Prochaine étape, mettre une résistance sur chaque broche de signal.
Enfin, reliez quelques une de ces résistances à la masse. Si tous se passe bien, les segments reliés à la masse via leur résistance doivent s’allumer lorsque vous alimentez le circuit.
Voici un exemple de branchement :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="7 segments schéma" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/7-segments-schema.jpg"/&gt;
 &lt;figcaption&gt;
  7 segments schéma
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="7 segments breadboard" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/7-segments-breadboard.png"/&gt;
 &lt;figcaption&gt;
  7 segments breadboard
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Dans cet exemple de montage, vous verrez que tous les segment de l’afficheur s’allument ! Vous pouvez modifier le montage en déconnectant quelques unes des résistance de la masse et afficher de nombreux caractères.
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Pensez à couper l’alimentation lorsque vous changer des fils de place.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Les composants n’aiment pas forcément être (dé)branchés lorsqu’ils sont alimentés. Vous pourriez éventuellement leur causer des dommages.
&lt;/p&gt;
&lt;h5 id="seulement-7-segments-mais-plein-de-caractères"&gt;
 &lt;a aria-hidden="true" href="#seulement-7-segments-mais-plein-de-caractères"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Seulement 7 segments mais plein de caractère(s) !
&lt;/h5&gt;
&lt;p&gt;
 Vous l’avez peut-être remarqué avec "l’exercice" précédent, un afficheurs 7 segments ne se limite pas à afficher juste des chiffres.
Voici un tableau illustrant les caractères possibles et quels segments allumés.
Attention, il est possible qu’il manque certains caractères !
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="table-wrapper"&gt;
  &lt;table class=" table table-bordered table-striped"&gt;
   &lt;thead&gt;
    &lt;tr&gt;
     &lt;th colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       Caractère
      &lt;/p&gt;
     &lt;/th&gt;
     &lt;th colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       seg. A
      &lt;/p&gt;
     &lt;/th&gt;
     &lt;th colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       seg. B
      &lt;/p&gt;
     &lt;/th&gt;
     &lt;th colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       seg. C
      &lt;/p&gt;
     &lt;/th&gt;
     &lt;th colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       seg. D
      &lt;/p&gt;
     &lt;/th&gt;
     &lt;th colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       seg. E
      &lt;/p&gt;
     &lt;/th&gt;
     &lt;th colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       seg. F
      &lt;/p&gt;
     &lt;/th&gt;
     &lt;th colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       seg. G
      &lt;/p&gt;
     &lt;/th&gt;
    &lt;/tr&gt;
   &lt;/thead&gt;
   &lt;tbody&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       0
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       1
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       2
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       3
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       4
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       5
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       6
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       7
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       8
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       9
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       A
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       b
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       C
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       d
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       E
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       F
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       H
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       I
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       J
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       L
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       o
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       P
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       S
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       t
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       U
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       u
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       °
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;div class="text-center"&gt;
       &lt;p&gt;
        x
       &lt;/p&gt;
      &lt;/div&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
   &lt;/tbody&gt;
  &lt;/table&gt;
 &lt;/div&gt;
 &lt;p&gt;
  Table: Caractères affichage avec un afficheur 7 segments
 &lt;/p&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Aidez-vous de ce tableau lorsque vous aurez à coder l’affichage de caractères !
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="afficher-son-premier-chiffre"&gt;
 &lt;a aria-hidden="true" href="#afficher-son-premier-chiffre"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Afficher son premier chiffre !
&lt;/h3&gt;
&lt;p&gt;
 Pour commencer, nous allons prendre en main un afficheur et lui faire s’afficher notre premier chiffre ! C’est assez simple et ne requiert qu’un programme très simple, mais un peu rébarbatif.
&lt;/p&gt;
&lt;h4 id="schéma-de-connexion"&gt;
 &lt;a aria-hidden="true" href="#schéma-de-connexion"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Schéma de connexion
&lt;/h4&gt;
&lt;p&gt;
 Je vais reprendre le schéma précédent, mais je vais connecter chaque broche de l’afficheur à une sortie de la carte Arduino. Comme ceci :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="7 segments schéma" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/7-segments-schema.jpg"/&gt;
 &lt;figcaption&gt;
  7 segments schéma
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Afficheur 7 segments montage" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/afficheur-7-segments-montage.png"/&gt;
 &lt;figcaption&gt;
  Afficheur 7 segments montage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Vous voyez donc que chaque LED de l’afficheur va être commandée séparément les unes des autres.
Il n’y a rien de plus à faire, si ce n’est qu’à programmer…
&lt;/p&gt;
&lt;h4 id="le-programme"&gt;
 &lt;a aria-hidden="true" href="#le-programme"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le programme
&lt;/h4&gt;
&lt;p&gt;
 L’objectif du programme va être d’afficher un chiffre. Eh bien… c’est partit ! Quoi ?!
Vous voulez de l’aide ?
 &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
 Ben je vous ai déjà tout dit y’a plus qu’à faire.
En plus vous avez un tableau avec lequel vous pouvez vous aider pour afficher votre chiffre.
Cherchez, je vous donnerais la solution ensuite.
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;/* On assigne chaque LED à une broche de l'arduino */&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; A = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; B = &lt;span class="hljs-number"&gt;3&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; C = &lt;span class="hljs-number"&gt;4&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; D = &lt;span class="hljs-number"&gt;5&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; E = &lt;span class="hljs-number"&gt;6&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; F = &lt;span class="hljs-number"&gt;7&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; G = &lt;span class="hljs-number"&gt;8&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// notez que l'on ne gère pas l'affichage du point,&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// mais vous pouvez le rajouter si cela vous chante&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// définition des broches en sortie&lt;/span&gt;
    pinMode(A, OUTPUT);
    pinMode(B, OUTPUT);
    pinMode(C, OUTPUT);
    pinMode(D, OUTPUT);
    pinMode(E, OUTPUT);
    pinMode(F, OUTPUT);
    pinMode(G, OUTPUT);

    &lt;span class="hljs-comment"&gt;// mise à l'état HAUT de ces sorties pour éteindre les LED de l'afficheur&lt;/span&gt;
    digitalWrite(A, HIGH);
    digitalWrite(B, HIGH);
    digitalWrite(C, HIGH);
    digitalWrite(D, HIGH);
    digitalWrite(E, HIGH);
    digitalWrite(F, HIGH);
    digitalWrite(G, HIGH);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// affichage du chiffre 5, d'après le tableau précédent&lt;/span&gt;
    digitalWrite(A, LOW);
    digitalWrite(B, HIGH);
    digitalWrite(C, LOW);
    digitalWrite(D, LOW);
    digitalWrite(E, HIGH);
    digitalWrite(F, LOW);
    digitalWrite(G, LOW);
}
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    Solution
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous le voyez par vous-même, c’est un code hyper simple.
Essayez de le bidouiller pour afficher des messages, par exemple, en utilisant les fonctions introduisant le temps.
Ou bien compléter ce code pour afficher tous les chiffres, en fonction d’une variable définie au départ (ex: var = 1, affiche le chiffre 1 ; etc.).
&lt;/p&gt;
&lt;p&gt;
 Voici le résultat dans le simulateur interactif. N’hésitez pas à essayer de changer le chiffre affiché pour vérifier vos connaissances.
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/7ug9Mh0NNuS" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="techniques-daffichage"&gt;
 &lt;a aria-hidden="true" href="#techniques-daffichage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Techniques d’affichage
&lt;/h3&gt;
&lt;p&gt;
 Vous vous en doutez peut-être, lorsque l’on veut utiliser plusieurs afficheur il va nous falloir beaucoup de broches.
Imaginons, nous voulons afficher un nombre entre 0 et 99, il nous faudra utiliser deux afficheurs avec
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mn&gt;
        2
       &lt;/mn&gt;
       &lt;mo&gt;
        ∗
       &lt;/mo&gt;
       &lt;mn&gt;
        7
       &lt;/mn&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mn&gt;
        4
       &lt;/mn&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       2*7 = 14
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.64444em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.64444em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      2
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mbin"&gt;
      ∗
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2222222222222222em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      7
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      4
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 broches connectées sur la carte Arduino.
Rappel : une carte Arduino UNO possède… 14 broches entrées/sorties classiques.
Si on ne fais rien d’autre que d’utiliser les afficheurs, cela ne nous gène pas, cependant, il est fort probable que vous serez amener à utiliser d’autres entrées avec votre carte Arduino.
Mais si on ne libère pas de place vous serez embêté.
&lt;/p&gt;
&lt;p&gt;
 Nous allons donc voir deux techniques qui, une fois cumulées, vont nous permettre d’utiliser seulement 4 broches pour obtenir le même résultat qu’avec 14 broches !
&lt;/p&gt;
&lt;h4 id="les-décodeurs-4-bits---7-segments"&gt;
 &lt;a aria-hidden="true" href="#les-décodeurs-4-bits---7-segments"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les décodeurs "4 bits -&amp;gt; 7 segments"
&lt;/h4&gt;
&lt;p&gt;
 La première technique que nous allons utiliser met en œuvre un circuit intégré.
Vous vous souvenez quand je vous ai parlé de ces bêtes là ?
Oui, c’est le même type que le microcontrôleur de la carte Arduino.
Cependant, le circuit que nous allons utiliser ne fait pas autant de choses que celui sur votre carte Arduino.
&lt;/p&gt;
&lt;h5 id="décodeur-bcd---7-segments"&gt;
 &lt;a aria-hidden="true" href="#décodeur-bcd---7-segments"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Décodeur
 &lt;abbr title="Binary Coded Decimal ou Binaire Codé Décimal"&gt;
  BCD
 &lt;/abbr&gt;
 -&amp;gt; 7 segments
&lt;/h5&gt;
&lt;p&gt;
 C’est le nom du circuit que nous allons utiliser. Son rôle est simple. Vous vous souvenez des conversions ?
Pour passer du binaire au décimal ?
Et bien c’est le moment de vous en servir, donc si vous ne vous rappelez plus de ça, allez revoir un peu
 &lt;a href="https://zestedesavoir.com/contenus/686/arduino-premiers-pas-en-informatique-embarquee/742_decouverte-de-larduino/3415_quelques-bases-elementaires/#4-10781_les-bases-de-comptage-210-et-16"&gt;
  le cours
 &lt;/a&gt;
 .
Je disais donc que son rôle est simple.
Et vous le constaterez par vous même, il va s’agir de convertir du binaire codé sur 4 bits vers un "code" utilisé pour afficher les chiffres.
Ce code correspond en quelque sorte au tableau précédemment évoqué.
&lt;/p&gt;
&lt;h5 id="principe-du-décodeur"&gt;
 &lt;a aria-hidden="true" href="#principe-du-décodeur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Principe du décodeur
&lt;/h5&gt;
&lt;p&gt;
 Sur un afficheur 7 segments, on peut représenter aisément les chiffres de 0 à 9.
En informatique, pour représenter ces chiffres, il nous faut au maximum 4 bits.
Comme vous êtes des experts et que vous avez bien lu la partie sur le binaire, vous n’avez pas de mal à le comprendre.
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mo&gt;
        (
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;msub&gt;
        &lt;mo&gt;
         )
        &lt;/mo&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
       &lt;/msub&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       (0000)_2
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.75em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mopen"&gt;
      (
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mclose"&gt;
      &lt;span class="mclose"&gt;
       )
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             2
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 fera
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mo&gt;
        (
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;msub&gt;
        &lt;mo&gt;
         )
        &lt;/mo&gt;
        &lt;mrow&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
         &lt;mn&gt;
          0
         &lt;/mn&gt;
        &lt;/mrow&gt;
       &lt;/msub&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       (0)_{10}
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.75em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mopen"&gt;
      (
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mclose"&gt;
      &lt;span class="mclose"&gt;
       )
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              1
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              0
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 et
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mo&gt;
        (
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;msub&gt;
        &lt;mo&gt;
         )
        &lt;/mo&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
       &lt;/msub&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       (1111)_2
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.75em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mopen"&gt;
      (
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mclose"&gt;
      &lt;span class="mclose"&gt;
       )
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             2
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 fera
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mo&gt;
        (
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mn&gt;
        5
       &lt;/mn&gt;
       &lt;msub&gt;
        &lt;mo&gt;
         )
        &lt;/mo&gt;
        &lt;mrow&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
         &lt;mn&gt;
          0
         &lt;/mn&gt;
        &lt;/mrow&gt;
       &lt;/msub&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       (15)_{10}
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.75em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mopen"&gt;
      (
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      5
     &lt;/span&gt;
     &lt;span class="mclose"&gt;
      &lt;span class="mclose"&gt;
       )
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              1
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              0
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 ou
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mo&gt;
        (
       &lt;/mo&gt;
       &lt;mi&gt;
        F
       &lt;/mi&gt;
       &lt;msub&gt;
        &lt;mo&gt;
         )
        &lt;/mo&gt;
        &lt;mrow&gt;
         &lt;mn&gt;
          1
         &lt;/mn&gt;
         &lt;mn&gt;
          6
         &lt;/mn&gt;
        &lt;/mrow&gt;
       &lt;/msub&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       (F)_{16}
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.75em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mopen"&gt;
      (
     &lt;/span&gt;
     &lt;span class="mord mathit" style="margin-right:0.13889em;"&gt;
      F
     &lt;/span&gt;
     &lt;span class="mclose"&gt;
      &lt;span class="mclose"&gt;
       )
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             &lt;span class="mord mtight"&gt;
              1
             &lt;/span&gt;
             &lt;span class="mord mtight"&gt;
              6
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 .
Pour faire 9 par exemple on utilisera les bits 1001.
En partant de se constat, des ingénieurs ont inventé un composant au doux nom de "décodeur" ou "driver" 7 segments.
Il reçoit sur 4 broches les 4 bits de la valeur à afficher, et sur 7 autres broches ils pilotent les segments pour afficher ladite valeur.
Ajouter à cela une broche d’alimentation et une broche de masse on obtient 13 broches !
Et ce n’est pas fini. La plupart des circuits intégrés de type décodeur possède aussi une broche d’activation et une broche pour tester si tous les segments fonctionnent.
&lt;/p&gt;
&lt;h5 id="choix-du-décodeur"&gt;
 &lt;a aria-hidden="true" href="#choix-du-décodeur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Choix du décodeur
&lt;/h5&gt;
&lt;p&gt;
 Nous allons utiliser le composant nommé MC14543B comme exemple (un equivalent utilisable et trouvable facilement est le CD4543BE).
Tout d’abord, ouvrez ce lien dans un nouvel onglet, il vous menera directement vers le pdf du décodeur :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;p&gt;
  &lt;a href="http://www.datasheetcatalog.org/datasheet2/4/09lwz6g28frlr15ayl6w0srxwz7y.pdf"&gt;
   Datasheet du MC14543B
  &lt;/a&gt;
 &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
 Les datasheets se composent souvent de la même manière. On trouve tout d’abord un résumé des fonctions du produit puis un schéma de son boîtier.
Dans notre cas, on voit qu’il est monté sur un
 &lt;abbr title="Dual Inline Package"&gt;
  DIP
 &lt;/abbr&gt;
 16 (
 &lt;abbr title="Dual Inline Package"&gt;
  DIP
 &lt;/abbr&gt;
 : Dual Inline Package, en gros "boîtier avec deux lignes de broches").
Si l’on continue, on voit la
 &lt;strong&gt;
  table de vérité
 &lt;/strong&gt;
 faisant le lien entre les signaux d’entrées (INPUT) et les sorties (OUTPUT).
On voit ainsi plusieurs choses :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Si l’on met la broche Bl (Blank, n°7) à un, toutes les sorties passent à zéro. En effet, comme son nom l’indique cette broche sert à effacer l’afficheur. Si vous ne voulez pas l’utiliser il faut donc la connecter à la masse pour la désactiver ;
 &lt;/li&gt;
 &lt;li&gt;
  Les entrées A, B, C et D (broches 5,3,2 et 4 respectivement) sont actives à l’état HAUT. Les sorties elles sont actives à l’état BAS (pour piloter un afficheur à anode commune)
  &lt;strong&gt;
   OU
  &lt;/strong&gt;
  HAUT selon l’état de la broche PH (6). C’est là un gros avantage de ce composant, il peut inverser la logique de la sortie, le rendant alors compatible avec des afficheurs à anode commune (broche PH à l’état 1) ou cathode commune (Ph = 0) ;
 &lt;/li&gt;
 &lt;li&gt;
  La broche BI (Blank Input, n°7) sers à inhiber les entrées. On ne s’en servira pas et donc on la mettra à l’état HAUT (+5V) ;
 &lt;/li&gt;
 &lt;li&gt;
  LD (n°1) sert à faire une mémoire de l’état des sorties, on ne s’en servira pas ici. Elle signifie "Latch Disable". En la mettant à 1 on désactive donc le "latch" (verrou) et nos entrées sont alors bien prises en considération ;
 &lt;/li&gt;
 &lt;li&gt;
  Enfin, les deux broches d’alimentation sont la 8 (GND/VSS, masse) et la 16 (VCC, +5V).
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   N’oubliez pas de mettre des résistances de limitations de courant entre chaque segment et la broche de signal du circuit!
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="fonctionnement"&gt;
 &lt;a aria-hidden="true" href="#fonctionnement"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Fonctionnement
&lt;/h5&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   C’est bien beau tout ça mais comment je lui dis au décodeur d’afficher le chiffre 5 par exemple ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Il suffit de regarder le datasheet et sa table de vérité (c’est le tableau avec les entrées et les sorties).
Ce que reçoit le décodeur sur ses entrées (A, B, C et D) défini les états de ses broches de sortie (a,b,c,d,e,f et g).
C’est tout ! Donc, on va donner un code binaire sur 4 bits à notre décodeur et en fonction de ce code, le décodeur affichera le caractère voulu.
En plus le fabricant est sympa, il met à disposition des notes d’applications à la page 6 pour bien brancher le composant :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Branchement du MC14543B" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/branchement-du-mc14543b.jpg"/&gt;
 &lt;figcaption&gt;
  Branchement du MC14543B - (source: datasheet)
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 On voit alors qu’il suffit simplement de brancher la résistance entre le CI et les segments et s’assurer que PH à la bonne valeur et c’est tout !
En titre d’exercice afin de vous permettre de mieux comprendre, je vous propose de changer les états des entrées A, B, C et D du décodeur pour observer ce qu’il affiche. Après avoir réaliser votre schéma, regarder s’il correspond avec celui présent dans cette balise secrète. Cela vous évitera peut-être un mauvais branchement, qui sait ?
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;img alt="Montage 7 segments - Schéma" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/montage-7-segments-schema.png"/&gt;
   &lt;figcaption&gt;
    Montage 7 segments - Schéma
   &lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;figure&gt;
   &lt;img alt="Montage 7 segments - Montage" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/montage-7-segments-montage.png"/&gt;
   &lt;figcaption&gt;
    Montage 7 segments - Montage
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voici le montage sur simulateur. Attention, ici le décodeur utilisé est un
 &lt;strong&gt;
  CD4511
 &lt;/strong&gt;
 . Le fonctionnement reste similaire mais n’est compatible qu’avec un afficheur à anode commune.
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/0tFVUjyMNHB" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="laffichage-par-alternance"&gt;
 &lt;a aria-hidden="true" href="#laffichage-par-alternance"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’affichage par alternance
&lt;/h4&gt;
&lt;p&gt;
 La seconde technique est utilisée dans le cas où l’on veut faire un affichage avec plusieurs afficheurs.
Elle utilise le phénomène de
 &lt;a href="http://fr.wikipedia.org/wiki/Persistance_rétinienne"&gt;
  persistance rétinienne
 &lt;/a&gt;
 .
Pour faire simple, c’est grâce à cela que le cinéma vous parait fluide.
On change une image toutes les 40 ms et votre œil n’a pas le temps de le voir, donc les images semble s’enchainer sans transition.
Bref… Ici, la même stratégie sera utilisée. On va allumer un afficheur un certain temps, puis nous allumerons l’autre en éteignant le premier.
Cette action est assez simple à réaliser, mais nécessite l’emploi de deux broche supplémentaires, de quatre autres composants et d’un peu de code.
Nous l’étudierons un petit peu plus tard, lorsque nous saurons géré un afficheur seul.
&lt;/p&gt;
&lt;h3 id="utilisation-du-décodeur-bcd"&gt;
 &lt;a aria-hidden="true" href="#utilisation-du-décodeur-bcd"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utilisation du décodeur
 &lt;abbr title="Binary Coded Decimal ou Binaire Codé Décimal"&gt;
  BCD
 &lt;/abbr&gt;
&lt;/h3&gt;
&lt;p&gt;
 Nous y sommes, nous allons (enfin) utiliser la carte Arduino pour faire un affichage plus poussé qu’un unique afficheur.
Pour cela, nous allons très simplement utiliser le montage précédent composé du décodeur
 &lt;abbr title="Binary Coded Decimal ou Binaire Codé Décimal"&gt;
  BCD
 &lt;/abbr&gt;
 , de l’afficheur 7 segments et bien entendu des résistances de limitations de courant pour les LED de l’afficheur.
Je vais vous montrer deux techniques qui peuvent être employées pour faire le programme.
&lt;/p&gt;
&lt;h4 id="initialisation"&gt;
 &lt;a aria-hidden="true" href="#initialisation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Initialisation
&lt;/h4&gt;
&lt;p&gt;
 Vous avez l’habitude maintenant, nous allons commencer par définir les différentes broches d’entrées/sorties.
Pour débuter (et conformément au schéma), nous utiliserons seulement 4 broches, en sorties, correspondantes aux entrées du décodeur 7 segments.
Voici le code pouvant traduire cette explication :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_A = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_B = &lt;span class="hljs-number"&gt;3&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_C = &lt;span class="hljs-number"&gt;4&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_D = &lt;span class="hljs-number"&gt;5&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on met les broches en sorties&lt;/span&gt;
    pinMode(bit_A, OUTPUT);
    pinMode(bit_B, OUTPUT);
    pinMode(bit_C, OUTPUT);
    pinMode(bit_D, OUTPUT);

    &lt;span class="hljs-comment"&gt;// on commence par écrire le chiffre 0, donc toutes les sorites à l'état bas&lt;/span&gt;
    digitalWrite(bit_A, LOW);
    digitalWrite(bit_B, LOW);
    digitalWrite(bit_C, LOW);
    digitalWrite(bit_D, LOW);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Initialisation des broches
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ce code permet juste de déclarer les quatre broches à utiliser, puis les affectes en sorties.
On les met ensuite toutes les quatre à zéro. Maintenant que l’afficheur est prêt, nous allons pouvoir commencer à afficher un chiffre !
&lt;/p&gt;
&lt;h4 id="programme-principal"&gt;
 &lt;a aria-hidden="true" href="#programme-principal"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Programme principal
&lt;/h4&gt;
&lt;p&gt;
 Si tout se passe bien, en ayant la boucle vide pour l’instant vous devriez voir un superbe 0 sur votre afficheur.
Nous allons maintenant mettre en place un petit programme pour afficher les nombres de 0 à 9 en les incrémentant (à partir de 0) toutes les secondes. C’est donc un compteur.
Pour cela, on va utiliser une boucle, qui comptera de 0 à 9. Dans cette boucle, on exécutera appellera la fonction
 &lt;code&gt;
  afficher()
 &lt;/code&gt;
 qui s’occupera donc de l’affichage (belle démonstration de ce qui est une évidence
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 ).
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; i=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// variable "compteur"&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(i=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class="hljs-number"&gt;10&lt;/span&gt;; i++)
    {
        afficher(i); &lt;span class="hljs-comment"&gt;// on appel la fonction d'affichage&lt;/span&gt;
        delay(&lt;span class="hljs-number"&gt;1000&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// on attend 1 seconde&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Le compteur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="fonction-daffichage"&gt;
 &lt;a aria-hidden="true" href="#fonction-daffichage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Fonction d’affichage
&lt;/h4&gt;
&lt;p&gt;
 Nous touchons maintenant au but ! Il ne nous reste plus qu’à réaliser la fonction d’affichage pour pouvoir convertir notre variable en chiffre sur l’afficheur. Pour cela, il existe différentes solutions.
Nous allons en voir ici une qui est assez simple à mettre en œuvre mais qui nécessite de bien être comprise.
Dans cette méthode, on va faire des opérations mathématiques (tout de suite c’est moins drôle
 &lt;img alt=":lol:" class="smiley" src="./static/smileys/rire.gif"/&gt;
 ) successives pour déterminer quels bits mettre à l’état haut. Rappelez-vous, nous avons quatre broches à notre disposition, avec chacune un poids différent (8, 4, 2 et 1). En combinant ces différentes broches ont peu obtenir n’importe quel nombre de 0 à 15. Voici une démarche mathématique envisageable :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;img alt="Organigramme décodeur 7 segments" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/organigramme-decodeur-7-segments.jpg"/&gt;
  &lt;figcaption&gt;
   Organigramme décodeur 7 segments
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 On peut coder cette méthode de manière assez simple et direct, en suivant cet organigramme :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// fonction écrivant sur un seul afficheur&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;afficher&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; chiffre)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on met à zéro tout les bits du décodeur&lt;/span&gt;
    digitalWrite(bit_A, LOW);
    digitalWrite(bit_B, LOW);
    digitalWrite(bit_C, LOW);
    digitalWrite(bit_D, LOW);

    &lt;span class="hljs-comment"&gt;// On allume les bits nécessaires&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;8&lt;/span&gt;)
    {
        digitalWrite(bit_D, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;8&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;4&lt;/span&gt;)
    {
        digitalWrite(bit_C, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;4&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;2&lt;/span&gt;)
    {
        digitalWrite(bit_B, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;1&lt;/span&gt;)
    {
        digitalWrite(bit_A, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;1&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Implémentation de l’affichage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Quelques explications s’imposent…
Le code gérant l’affichage réside sur les valeurs binaires des chiffres. Rappelons les valeurs binaires des chiffres :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="table-wrapper"&gt;
  &lt;table class=" table table-bordered table-striped"&gt;
   &lt;thead&gt;
    &lt;tr&gt;
     &lt;th colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       Chiffre
      &lt;/p&gt;
     &lt;/th&gt;
     &lt;th colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       DCBA
      &lt;/p&gt;
     &lt;/th&gt;
    &lt;/tr&gt;
   &lt;/thead&gt;
   &lt;tbody&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       0
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mo&gt;
              (
             &lt;/mo&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;msub&gt;
              &lt;mo&gt;
               )
              &lt;/mo&gt;
              &lt;mn&gt;
               2
              &lt;/mn&gt;
             &lt;/msub&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             (0000)_2
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.75em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mopen"&gt;
            (
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mclose"&gt;
            &lt;span class="mclose"&gt;
             )
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t vlist-t2"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
                &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   2
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
               &lt;span class="vlist-s"&gt;
                ​
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.15em;"&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       1
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mo&gt;
              (
             &lt;/mo&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;msub&gt;
              &lt;mo&gt;
               )
              &lt;/mo&gt;
              &lt;mn&gt;
               2
              &lt;/mn&gt;
             &lt;/msub&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             (0001)_2
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.75em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mopen"&gt;
            (
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mclose"&gt;
            &lt;span class="mclose"&gt;
             )
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t vlist-t2"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
                &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   2
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
               &lt;span class="vlist-s"&gt;
                ​
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.15em;"&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       2
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mo&gt;
              (
             &lt;/mo&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;msub&gt;
              &lt;mo&gt;
               )
              &lt;/mo&gt;
              &lt;mn&gt;
               2
              &lt;/mn&gt;
             &lt;/msub&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             (0010)_2
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.75em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mopen"&gt;
            (
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mclose"&gt;
            &lt;span class="mclose"&gt;
             )
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t vlist-t2"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
                &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   2
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
               &lt;span class="vlist-s"&gt;
                ​
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.15em;"&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       3
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mo&gt;
              (
             &lt;/mo&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;msub&gt;
              &lt;mo&gt;
               )
              &lt;/mo&gt;
              &lt;mn&gt;
               2
              &lt;/mn&gt;
             &lt;/msub&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             (0011)_2
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.75em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mopen"&gt;
            (
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mclose"&gt;
            &lt;span class="mclose"&gt;
             )
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t vlist-t2"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
                &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   2
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
               &lt;span class="vlist-s"&gt;
                ​
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.15em;"&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       4
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mo&gt;
              (
             &lt;/mo&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;msub&gt;
              &lt;mo&gt;
               )
              &lt;/mo&gt;
              &lt;mn&gt;
               2
              &lt;/mn&gt;
             &lt;/msub&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             (0100)_2
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.75em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mopen"&gt;
            (
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mclose"&gt;
            &lt;span class="mclose"&gt;
             )
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t vlist-t2"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
                &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   2
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
               &lt;span class="vlist-s"&gt;
                ​
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.15em;"&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       5
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mo&gt;
              (
             &lt;/mo&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;msub&gt;
              &lt;mo&gt;
               )
              &lt;/mo&gt;
              &lt;mn&gt;
               2
              &lt;/mn&gt;
             &lt;/msub&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             (0101)_2
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.75em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mopen"&gt;
            (
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mclose"&gt;
            &lt;span class="mclose"&gt;
             )
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t vlist-t2"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
                &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   2
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
               &lt;span class="vlist-s"&gt;
                ​
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.15em;"&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       6
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mo&gt;
              (
             &lt;/mo&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;msub&gt;
              &lt;mo&gt;
               )
              &lt;/mo&gt;
              &lt;mn&gt;
               2
              &lt;/mn&gt;
             &lt;/msub&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             (0110)_2
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.75em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mopen"&gt;
            (
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mclose"&gt;
            &lt;span class="mclose"&gt;
             )
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t vlist-t2"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
                &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   2
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
               &lt;span class="vlist-s"&gt;
                ​
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.15em;"&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       7
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mo&gt;
              (
             &lt;/mo&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;msub&gt;
              &lt;mo&gt;
               )
              &lt;/mo&gt;
              &lt;mn&gt;
               2
              &lt;/mn&gt;
             &lt;/msub&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             (0111)_2
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.75em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mopen"&gt;
            (
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mclose"&gt;
            &lt;span class="mclose"&gt;
             )
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t vlist-t2"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
                &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   2
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
               &lt;span class="vlist-s"&gt;
                ​
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.15em;"&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       8
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mo&gt;
              (
             &lt;/mo&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;msub&gt;
              &lt;mo&gt;
               )
              &lt;/mo&gt;
              &lt;mn&gt;
               2
              &lt;/mn&gt;
             &lt;/msub&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             (1000)_2
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.75em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mopen"&gt;
            (
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mclose"&gt;
            &lt;span class="mclose"&gt;
             )
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t vlist-t2"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
                &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   2
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
               &lt;span class="vlist-s"&gt;
                ​
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.15em;"&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       9
      &lt;/p&gt;
     &lt;/td&gt;
     &lt;td colspan="1" rowspan="1"&gt;
      &lt;p&gt;
       &lt;span class="inlineMath"&gt;
        &lt;span class="katex"&gt;
         &lt;span class="katex-mathml"&gt;
          &lt;math&gt;
           &lt;semantics&gt;
            &lt;mrow&gt;
             &lt;mo&gt;
              (
             &lt;/mo&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;mn&gt;
              0
             &lt;/mn&gt;
             &lt;mn&gt;
              1
             &lt;/mn&gt;
             &lt;msub&gt;
              &lt;mo&gt;
               )
              &lt;/mo&gt;
              &lt;mn&gt;
               2
              &lt;/mn&gt;
             &lt;/msub&gt;
            &lt;/mrow&gt;
            &lt;annotation encoding="application/x-tex"&gt;
             (1001)_2
            &lt;/annotation&gt;
           &lt;/semantics&gt;
          &lt;/math&gt;
         &lt;/span&gt;
         &lt;span aria-hidden="true" class="katex-html"&gt;
          &lt;span class="strut" style="height:0.75em;"&gt;
          &lt;/span&gt;
          &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
          &lt;/span&gt;
          &lt;span class="base"&gt;
           &lt;span class="mopen"&gt;
            (
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            0
           &lt;/span&gt;
           &lt;span class="mord"&gt;
            1
           &lt;/span&gt;
           &lt;span class="mclose"&gt;
            &lt;span class="mclose"&gt;
             )
            &lt;/span&gt;
            &lt;span class="msupsub"&gt;
             &lt;span class="vlist-t vlist-t2"&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
                &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
                 &lt;span class="pstrut" style="height:2.7em;"&gt;
                 &lt;/span&gt;
                 &lt;span class="sizing reset-size6 size3 mtight"&gt;
                  &lt;span class="mord mtight"&gt;
                   2
                  &lt;/span&gt;
                 &lt;/span&gt;
                &lt;/span&gt;
               &lt;/span&gt;
               &lt;span class="vlist-s"&gt;
                ​
               &lt;/span&gt;
              &lt;/span&gt;
              &lt;span class="vlist-r"&gt;
               &lt;span class="vlist" style="height:0.15em;"&gt;
               &lt;/span&gt;
              &lt;/span&gt;
             &lt;/span&gt;
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/p&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
   &lt;/tbody&gt;
  &lt;/table&gt;
 &lt;/div&gt;
 &lt;p&gt;
  Table: La représentation binaires des chiffres
 &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
 D’après ce tableau, si on veut le chiffre 8, on doit allumer le segment D, car 8 s’écrit
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mo&gt;
        (
       &lt;/mo&gt;
       &lt;mn&gt;
        1
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
       &lt;msub&gt;
        &lt;mo&gt;
         )
        &lt;/mo&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
       &lt;/msub&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       (1000)_2
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.75em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:1em;vertical-align:-0.25em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mopen"&gt;
      (
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      1
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
     &lt;span class="mclose"&gt;
      &lt;span class="mclose"&gt;
       )
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.30110799999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mtight"&gt;
             2
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 ayant pour segment respectif DCBA.
Soit D=1, C=0, B=0 et A=0.
En suivant cette logique, on arrive à déterminer les entrées du décodeur qui sont à mettre à l’état HAUT ou BAS.
D’une manière plus lourde, on aurait pu écrire un code ressemblant à ça :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// fonction écrivant sur un seul afficheur&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;afficher&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; chiffre)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;switch&lt;/span&gt;(chiffre)
    {
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;0&lt;/span&gt; :
        digitalWrite(bit_A, LOW);
        digitalWrite(bit_B, LOW);
        digitalWrite(bit_C, LOW);
        digitalWrite(bit_D, LOW);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;1&lt;/span&gt; :
        digitalWrite(bit_A, HIGH);
        digitalWrite(bit_B, LOW);
        digitalWrite(bit_C, LOW);
        digitalWrite(bit_D, LOW);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;2&lt;/span&gt; :
        digitalWrite(bit_A, LOW);
        digitalWrite(bit_B, HIGH);
        digitalWrite(bit_C, LOW);
        digitalWrite(bit_D, LOW);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;3&lt;/span&gt; :
        digitalWrite(bit_A, HIGH);
        digitalWrite(bit_B, HIGH);
        digitalWrite(bit_C, LOW);
        digitalWrite(bit_D, LOW);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;4&lt;/span&gt; :
        digitalWrite(bit_A, LOW);
        digitalWrite(bit_B, LOW);
        digitalWrite(bit_C, HIGH);
        digitalWrite(bit_D, LOW);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;5&lt;/span&gt; :
        digitalWrite(bit_A, HIGH);
        digitalWrite(bit_B, LOW);
        digitalWrite(bit_C, HIGH);
        digitalWrite(bit_D, LOW);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;6&lt;/span&gt; :
        digitalWrite(bit_A, LOW);
        digitalWrite(bit_B, HIGH);
        digitalWrite(bit_C, HIGH);
        digitalWrite(bit_D, LOW);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;7&lt;/span&gt; :
        digitalWrite(bit_A, HIGH);
        digitalWrite(bit_B, HIGH);
        digitalWrite(bit_C, HIGH);
        digitalWrite(bit_D, LOW);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;8&lt;/span&gt; :
        digitalWrite(bit_A, LOW);
        digitalWrite(bit_B, LOW);
        digitalWrite(bit_C, LOW);
        digitalWrite(bit_D, HIGH);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;case&lt;/span&gt; &lt;span class="hljs-number"&gt;9&lt;/span&gt; :
        digitalWrite(bit_A, HIGH);
        digitalWrite(bit_B, LOW);
        digitalWrite(bit_C, LOW);
        digitalWrite(bit_D, HIGH);
        &lt;span class="hljs-keyword"&gt;break&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  L’affichage DCBA version longue
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Mais, c’est bien trop lourd à écrire. Enfin c’est vous qui voyez.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;h3 id="utiliser-plusieurs-afficheurs"&gt;
 &lt;a aria-hidden="true" href="#utiliser-plusieurs-afficheurs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utiliser plusieurs afficheurs
&lt;/h3&gt;
&lt;p&gt;
 Maintenant que nous avons affiché un chiffre sur un seul afficheur, nous allons pouvoir apprendre à en utiliser plusieurs (avec un minimum de composants en plus !). Comme expliqué précédemment, la méthode employée ici va reposer sur le principe de la persistance rétinienne, qui donnera
 &lt;em&gt;
  l’impression
 &lt;/em&gt;
 que les deux afficheurs fonctionnent en
 &lt;em&gt;
  même temps
 &lt;/em&gt;
 .
&lt;/p&gt;
&lt;h4 id="problématique"&gt;
 &lt;a aria-hidden="true" href="#problématique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Problématique
&lt;/h4&gt;
&lt;p&gt;
 Nous souhaiterions utiliser deux afficheurs, mais nous ne disposons que de seulement 6 broches sur notre Arduino, le reste des broches étant utilisé pour une autre application.
Pour réduire le nombre de broches, on peut d’ores et déjà utilisé un décodeur
 &lt;abbr title="Binary Coded Decimal ou Binaire Codé Décimal"&gt;
  BCD
 &lt;/abbr&gt;
 , ce qui nous ferait 4 broches par afficheurs, soit 8 broches au total. Bon, ce n’est toujours pas ce que l’on veut.
Et si on connectait les deux afficheurs ensemble, en parallèle, sur les sorties du décodeur ?
Oui mais dans ce cas, on ne pourrait pas afficher des chiffres différents sur chaque afficheur.
Tout à l’heure, je vous ai parlé de
 &lt;em&gt;
  commutation
 &lt;/em&gt;
 . Oui, la seule solution qui soit envisageable est d’allumer un afficheur et d’éteindre l’autre tout en les connectant ensemble sur le même décodeur.
Ainsi un afficheur s’allume, il affiche le chiffre voulu, puis il s’éteint pour que l’autre puisse s’allumer à son tour.
Cette opération est en fait un clignotement de chaque afficheur par alternance.
&lt;/p&gt;
&lt;h4 id="un-peu-délectronique"&gt;
 &lt;a aria-hidden="true" href="#un-peu-délectronique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un peu d’électronique…
&lt;/h4&gt;
&lt;p&gt;
 Pour faire commuter nos deux afficheurs, vous allez avoir besoin d’un nouveau composant, j’ai nommé : le
 &lt;strong&gt;
  transistor
 &lt;/strong&gt;
 !
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Transistor ? J’ai entendu dire qu’il y en avait plusieurs milliards dans nos ordinateurs ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Et c’est tout à fait vrai.
Des transistors, il en existe de différents types et pour différentes applications :
amplification de courant/tension, commutation, etc. répartis dans plusieurs familles.
Bon je ne vais pas faire trop de détails, si vous voulez en savoir plus, allez lire la première partie de
 &lt;strong&gt;
  ce chapitre
 &lt;/strong&gt;
 &lt;sub&gt;
  (
  &lt;em&gt;
   lien à rajouter, en attente de la validation du chapitre en question
  &lt;/em&gt;
  )
 &lt;/sub&gt;
 .
&lt;/p&gt;
&lt;h5 id="le-transistor-bipolaire-présentation"&gt;
 &lt;a aria-hidden="true" href="#le-transistor-bipolaire-présentation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le transistor bipolaire : présentation
&lt;/h5&gt;
&lt;p&gt;
 Je le disais, je ne vais pas faire de détails. On va voir comment fonctionne un transistor bipolaire selon les besoins de notre application, à savoir, faire commuter les afficheurs.
Un transistor, cela ressemble à ça :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Photo d'un transistor" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/photo-dun-transistor.jpg"/&gt;
 &lt;figcaption&gt;
  Photo d’un transistor - (CC-BY-SA,
  &lt;a href="http://commons.wikimedia.org/wiki/File:BC548.jpg"&gt;
   Marvelshine
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Pour notre application, nous allons utiliser des
 &lt;strong&gt;
  transistors bipolaires
 &lt;/strong&gt;
 .
Je vais vous expliquer comment cela fonctionne.
Déjà, vous pouvez observer qu’un transistor possède trois pattes.
Cela n’est pas de la moindre importance, au contraire il s’agit là d’une chose essentielle !
En fait, le transistor bipolaire à une
 &lt;em&gt;
  broche d’entrée
 &lt;/em&gt;
 (
 &lt;strong&gt;
  collecteur
 &lt;/strong&gt;
 ), une
 &lt;em&gt;
  broche de sortie
 &lt;/em&gt;
 (
 &lt;strong&gt;
  émetteur
 &lt;/strong&gt;
 ) et une
 &lt;em&gt;
  broche de commande
 &lt;/em&gt;
 (
 &lt;strong&gt;
  base
 &lt;/strong&gt;
 ).
Son symbole est le suivant :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Symbole du transistor bipôlaire" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/symbole-du-transistor-bipolaire.png"/&gt;
 &lt;figcaption&gt;
  Symbole du transistor bipôlaire
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ce symbole est celui d’un transistor bipolaire de
   &lt;strong&gt;
    type NPN
   &lt;/strong&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Il en existe qui sont de
 &lt;strong&gt;
  type PNP
 &lt;/strong&gt;
 , mais ils sont beaucoup moins utilisés que les NPN.
Quoi qu’il en soit, nous n’utiliserons que des transistors NPN dans ce chapitre.
&lt;/p&gt;
&lt;h5 id="fonctionnement-en-commutation-du-transistor-bipolaire"&gt;
 &lt;a aria-hidden="true" href="#fonctionnement-en-commutation-du-transistor-bipolaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Fonctionnement en commutation du transistor bipolaire
&lt;/h5&gt;
&lt;p&gt;
 Pour faire simple,
 &lt;strong&gt;
  le transistor bipolaire NPN
 &lt;/strong&gt;
 (c’est la dernière fois que je précise ce point) est un
 &lt;strong&gt;
  interrupteur commandé en courant
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ceci est une présentation très vulgarisée et simplifiée sur le transistor pour l’utilisation que nous en ferons ici.
Les usages et possibilités des transistors sont très nombreux et ils mériteraient un grand livre à eux seuls !
Si vous voulez plus d’informations, rendez-vous sur le cours sur l’électronique ou approfondissez en cherchant des tutoriels sur le web.
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 C’est tout ce qu’il faut savoir, pour ce qui est du fonctionnement.
Après, on va voir ensemble comment l’utiliser et sans le faire griller !
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
&lt;/p&gt;
&lt;h5 id="utilisation-générale"&gt;
 &lt;a aria-hidden="true" href="#utilisation-générale"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utilisation générale
&lt;/h5&gt;
&lt;p&gt;
 On peut utiliser notre transistor de deux manières différentes (pour notre application toujours, mais on peut bien évidemment utiliser le transistor avec beaucoup plus de flexibilités).
A commencer par le câblage :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Câblage du transistor en commutation" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/cablage-du-transistor-en-commutation.jpg"/&gt;
 &lt;figcaption&gt;
  Câblage du transistor en commutation
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Dans le cas présent, le collecteur (qui est l’entrée du transistor) se trouve être après l’ampoule, elle-même connectée à l’alimentation.
L’émetteur (broche où il y a la flèche) est relié à la masse du montage.
Cette disposition est "universelle", on ne peut pas inverser le sens de ces broches et mettre le collecteur à la place de l’émetteur et vice versa.
Sans quoi, le montage ne fonctionnerait pas. Pour le moment, l’ampoule est éteinte car le transistor ne conduit pas.
On dit qu’il est
 &lt;strong&gt;
  bloqué
 &lt;/strong&gt;
 et empêche donc le courant
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         I
        &lt;/mi&gt;
        &lt;mi&gt;
         C
        &lt;/mi&gt;
       &lt;/msub&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       I_C
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.07847em;"&gt;
       I
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.32833099999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mathit mtight" style="margin-right:0.07153em;"&gt;
             C
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 de circuler à travers l’ampoule.
Soit
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         I
        &lt;/mi&gt;
        &lt;mi&gt;
         C
        &lt;/mi&gt;
       &lt;/msub&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       I_C = 0
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.07847em;"&gt;
       I
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.32833099999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mathit mtight" style="margin-right:0.07153em;"&gt;
             C
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 car
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         I
        &lt;/mi&gt;
        &lt;mi&gt;
         B
        &lt;/mi&gt;
       &lt;/msub&gt;
       &lt;mo&gt;
        =
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       I_B = 0
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.68333em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.07847em;"&gt;
       I
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.32833099999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mathit mtight" style="margin-right:0.05017em;"&gt;
             B
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      =
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 . A présent, appuyons sur l’interrupteur :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Allumage de la lampe" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/allumage-de-la-lampe.jpg"/&gt;
 &lt;figcaption&gt;
  Allumage de la lampe
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Que se passe-t-il ? Eh bien la base du transistor, qui était jusqu’à présent "en l’air", est parcourue par un courant électrique. Cette cause à pour conséquence de rendre le transistor
 &lt;strong&gt;
  passant
 &lt;/strong&gt;
 ou
 &lt;strong&gt;
  saturé
 &lt;/strong&gt;
 et permet au courant de s’établir à travers l’ampoule. Soit
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         I
        &lt;/mi&gt;
        &lt;mi&gt;
         C
        &lt;/mi&gt;
       &lt;/msub&gt;
       &lt;mo&gt;
        ≠
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       I_C \ne 0
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.716em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.9309999999999999em;vertical-align:-0.215em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.07847em;"&gt;
       I
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.32833099999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mathit mtight" style="margin-right:0.07153em;"&gt;
             C
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      ≠
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 car
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;msub&gt;
        &lt;mi&gt;
         I
        &lt;/mi&gt;
        &lt;mi&gt;
         B
        &lt;/mi&gt;
       &lt;/msub&gt;
       &lt;mo&gt;
        ≠
       &lt;/mo&gt;
       &lt;mn&gt;
        0
       &lt;/mn&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       I_B \ne 0
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.716em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.9309999999999999em;vertical-align:-0.215em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mord"&gt;
      &lt;span class="mord mathit" style="margin-right:0.07847em;"&gt;
       I
      &lt;/span&gt;
      &lt;span class="msupsub"&gt;
       &lt;span class="vlist-t vlist-t2"&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.32833099999999993em;"&gt;
          &lt;span style="top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;"&gt;
           &lt;span class="pstrut" style="height:2.7em;"&gt;
           &lt;/span&gt;
           &lt;span class="sizing reset-size6 size3 mtight"&gt;
            &lt;span class="mord mathit mtight" style="margin-right:0.05017em;"&gt;
             B
            &lt;/span&gt;
           &lt;/span&gt;
          &lt;/span&gt;
         &lt;/span&gt;
         &lt;span class="vlist-s"&gt;
          ​
         &lt;/span&gt;
        &lt;/span&gt;
        &lt;span class="vlist-r"&gt;
         &lt;span class="vlist" style="height:0.15em;"&gt;
         &lt;/span&gt;
        &lt;/span&gt;
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mrel"&gt;
      ≠
     &lt;/span&gt;
     &lt;span class="mord rule" style="margin-right:0.2777777777777778em;"&gt;
     &lt;/span&gt;
     &lt;span class="mord"&gt;
      0
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 .
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   La résistance sur la base du transistor permet de le protéger des courants trop forts.
Plus la résistance est de faible valeur, plus l’ampoule sera lumineuse.
A l’inverse, une résistance trop forte sur la base du transistor pourra l’empêcher de conduire et de faire s’allumer l’ampoule.
Rassurez_vous, je vous donnerais les valeurs de résistances à utiliser.
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="utilisation-avec-nos-afficheurs"&gt;
 &lt;a aria-hidden="true" href="#utilisation-avec-nos-afficheurs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utilisation avec nos afficheurs
&lt;/h5&gt;
&lt;p&gt;
 Voyons un peu comment on va pouvoir utiliser ce transistor avec notre Arduino.
La carte Arduino est en fait le générateur de tension (schéma précédent) du montage.
Elle va définir si sa sortie est de 0V (transistor bloqué) ou de 5V (transistor saturé).
Ainsi, on va pouvoir allumer ou éteindre les afficheurs.
Voilà le modèle équivalent de la carte Arduino et de la commande de l’afficheur :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Montage de la commande" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/montage-de-la-commande.png"/&gt;
 &lt;figcaption&gt;
  Montage de la commande
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 La carte Arduino va soit mettre à la masse la base du transistor, soit la mettre à +5V.
Dans le premier cas, il sera bloqué et l’afficheur sera éteint, dans le second il sera saturé et l’afficheur allumé.
Il en est de même pour chaque broche de l’afficheur. Elles seront au +5V ou à la masse selon la configuration que l’on aura définie dans le programme.
&lt;/p&gt;
&lt;h5 id="schéma-final"&gt;
 &lt;a aria-hidden="true" href="#schéma-final"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Schéma final
&lt;/h5&gt;
&lt;p&gt;
 Et comme vous l’attendez surement depuis tout à l’heure, voici le schéma tant attendu (nous verrons juste après comment programmer ce nouveau montage) !
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="2*7 segments - Schéma" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/27-segments-schema.png"/&gt;
 &lt;figcaption&gt;
  2*7 segments - Schéma
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="2*7 segments - Montage" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/27-segments-montage.png"/&gt;
 &lt;figcaption&gt;
  2*7 segments - Montage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="quelques-détails-techniques"&gt;
 &lt;a aria-hidden="true" href="#quelques-détails-techniques"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Quelques détails techniques
&lt;/h4&gt;
&lt;ul&gt;
 &lt;li&gt;
  Dans notre cas (et je vous passe les détails vraiment techniques et calculatoires), la résistance sur la base du transistor sera de
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
        &lt;mi mathvariant="normal"&gt;
         .
        &lt;/mi&gt;
        &lt;mn&gt;
         2
        &lt;/mn&gt;
        &lt;mi&gt;
         k
        &lt;/mi&gt;
        &lt;mi mathvariant="normal"&gt;
         Ω
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        2.2k\Omega
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.69444em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.69444em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       .
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       2
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.03148em;"&gt;
       k
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       Ω
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  (si vous n’avez pas cette valeur, elle pourra être de
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mn&gt;
         3
        &lt;/mn&gt;
        &lt;mi mathvariant="normal"&gt;
         .
        &lt;/mi&gt;
        &lt;mn&gt;
         3
        &lt;/mn&gt;
        &lt;mi&gt;
         k
        &lt;/mi&gt;
        &lt;mi mathvariant="normal"&gt;
         Ω
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        3.3k\Omega
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.69444em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.69444em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       3
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       .
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       3
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.03148em;"&gt;
       k
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       Ω
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  , ou encore de
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mn&gt;
         3
        &lt;/mn&gt;
        &lt;mi mathvariant="normal"&gt;
         .
        &lt;/mi&gt;
        &lt;mn&gt;
         9
        &lt;/mn&gt;
        &lt;mi&gt;
         k
        &lt;/mi&gt;
        &lt;mi mathvariant="normal"&gt;
         Ω
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        3.9k\Omega
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.69444em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.69444em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       3
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       .
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       9
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.03148em;"&gt;
       k
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       Ω
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  , voir même de
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mn&gt;
         4
        &lt;/mn&gt;
        &lt;mi mathvariant="normal"&gt;
         .
        &lt;/mi&gt;
        &lt;mn&gt;
         7
        &lt;/mn&gt;
        &lt;mi&gt;
         k
        &lt;/mi&gt;
        &lt;mi mathvariant="normal"&gt;
         Ω
        &lt;/mi&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        4.7k\Omega
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.69444em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.69444em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mord"&gt;
       4
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       .
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       7
      &lt;/span&gt;
      &lt;span class="mord mathit" style="margin-right:0.03148em;"&gt;
       k
      &lt;/span&gt;
      &lt;span class="mord"&gt;
       Ω
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  ).
 &lt;/li&gt;
 &lt;li&gt;
  Les transistors seront des transistors bipolaires NPN de référence 2N2222, ou bien un équivalent qui est le BC547. Il en faudra deux donc.
 &lt;/li&gt;
 &lt;li&gt;
  Le décodeur
  &lt;abbr title="Binary Coded Decimal ou Binaire Codé Décimal"&gt;
   BCD
  &lt;/abbr&gt;
  est le même que précédemment (ou équivalent).
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Et avec tout ça, on est prêt pour programmer !
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
&lt;/p&gt;
&lt;h4 id="et-de-programmation"&gt;
 &lt;a aria-hidden="true" href="#et-de-programmation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 …et de programmation
&lt;/h4&gt;
&lt;p&gt;
 Nous utilisons deux nouvelles broches servant à piloter chacun des interrupteurs (transistors).
Chacune de ces broches doivent donc être déclarées en global (pour son numéro) puis régler comme sortie.
Ensuite, il ne vous restera plus qu’à alimenter chacun des transistors au bon moment pour allumer l’afficheur souhaité.
En synchronisant l’allumage avec la valeur envoyé au décodeur, vous afficherez les nombres souhaités comme bon vous semble.
Voici un exemple de code complet, de la fonction setup() jusqu’à la fonction d’affichage.
Ce code est commenté et vous ne devriez donc avoir aucun mal à le comprendre !
Ce programme est un compteur sur 2 segments, il compte donc de 0 à 99 et recommence au début dès qu’il a atteint 99.
La vidéo se trouve juste après ce code.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// définition des broches du décodeur 7 segments&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// (vous pouvez changer les numéros si vous voulez)&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_A = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_B = &lt;span class="hljs-number"&gt;3&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_C = &lt;span class="hljs-number"&gt;4&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_D = &lt;span class="hljs-number"&gt;5&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// définitions des broches des transistors pour chaque afficheur&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; alim_dizaine = &lt;span class="hljs-number"&gt;6&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// les dizaines&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; alim_unite = &lt;span class="hljs-number"&gt;7&lt;/span&gt;;   &lt;span class="hljs-comment"&gt;// les unites&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// Les broches sont toutes des sorties&lt;/span&gt;
    pinMode(bit_A, OUTPUT);
    pinMode(bit_B, OUTPUT);
    pinMode(bit_C, OUTPUT);
    pinMode(bit_D, OUTPUT);
    pinMode(alim_dizaine, OUTPUT);
    pinMode(alim_unite, OUTPUT);

    &lt;span class="hljs-comment"&gt;// Les broches sont toutes mises à l'état bas&lt;/span&gt;
    digitalWrite(bit_A, LOW);
    digitalWrite(bit_B, LOW);
    digitalWrite(bit_C, LOW);
    digitalWrite(bit_D, LOW);
    digitalWrite(alim_dizaine, LOW);
    digitalWrite(alim_unite, LOW);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;span class="hljs-comment"&gt;// fonction principale&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// boucle qui permet de compter de 0 à 99 (= 100 valeurs)&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; i = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class="hljs-number"&gt;100&lt;/span&gt;; i++)
    {
        &lt;span class="hljs-comment"&gt;// appel de la fonction affichage avec envoi du nombre à afficher&lt;/span&gt;
        afficher_nombre(i);
    }
}

&lt;span class="hljs-comment"&gt;// fonction permettant d'afficher un nombre sur deux afficheurs&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;afficher_nombre&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; nombre)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; temps; &lt;span class="hljs-comment"&gt;// variable utilisée pour savoir le temps écoulé...&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; unite = &lt;span class="hljs-number"&gt;0&lt;/span&gt;, dizaine = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// variable pour chaque afficheur&lt;/span&gt;

    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(nombre &amp;gt; &lt;span class="hljs-number"&gt;9&lt;/span&gt;) &lt;span class="hljs-comment"&gt;// si le nombre reçu dépasse 9&lt;/span&gt;
    {
        dizaine = nombre / &lt;span class="hljs-number"&gt;10&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// on récupère les dizaines&lt;/span&gt;
    }

    unite = nombre - (dizaine*&lt;span class="hljs-number"&gt;10&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// on récupère les unités&lt;/span&gt;

    temps = millis(); &lt;span class="hljs-comment"&gt;// on récupère le temps courant&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;// tant qu'on a pas affiché ce chiffre pendant au moins 500 millisecondes&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// permet donc de pouvoir lire le nombre affiché&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;((millis()-temps) &amp;lt; &lt;span class="hljs-number"&gt;500&lt;/span&gt;)
    {
        &lt;span class="hljs-comment"&gt;// on affiche le nombre&lt;/span&gt;

        &lt;span class="hljs-comment"&gt;// d'abord les dizaines pendant 10 ms&lt;/span&gt;

        &lt;span class="hljs-comment"&gt;// le transistor de l'afficheur des dizaines est saturé,&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// donc l'afficheur est allumé&lt;/span&gt;
        digitalWrite(alim_dizaine, HIGH);
        &lt;span class="hljs-comment"&gt;// on appel la fonction qui permet d'afficher le chiffre dizaine&lt;/span&gt;
        afficher(dizaine);
        &lt;span class="hljs-comment"&gt;// l'autre transistor est bloqué et l'afficheur éteint&lt;/span&gt;
        digitalWrite(alim_unite, LOW);
        delay(&lt;span class="hljs-number"&gt;10&lt;/span&gt;);

        &lt;span class="hljs-comment"&gt;// puis les unités pendant 10 ms&lt;/span&gt;

        &lt;span class="hljs-comment"&gt;// on éteint le transistor allumé&lt;/span&gt;
        digitalWrite(alim_dizaine, LOW);
        &lt;span class="hljs-comment"&gt;// on appel la fonction qui permet d'afficher le chiffre unité&lt;/span&gt;
        afficher(unite);
        &lt;span class="hljs-comment"&gt;// et on allume l'autre&lt;/span&gt;
        digitalWrite(alim_unite, HIGH);
        delay(&lt;span class="hljs-number"&gt;10&lt;/span&gt;);
    }
}

&lt;span class="hljs-comment"&gt;// fonction écrivant sur un seul afficheur&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// on utilise le même principe que vu plus haut&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;afficher&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; chiffre)&lt;/span&gt;
&lt;/span&gt;{
    digitalWrite(bit_A, LOW);
    digitalWrite(bit_B, LOW);
    digitalWrite(bit_C, LOW);
    digitalWrite(bit_D, LOW);

    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;8&lt;/span&gt;)
    {
        digitalWrite(bit_D, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;8&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;4&lt;/span&gt;)
    {
        digitalWrite(bit_C, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;4&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;2&lt;/span&gt;)
    {
        digitalWrite(bit_B, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;1&lt;/span&gt;)
    {
        digitalWrite(bit_A, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;1&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Le compteur de 0 à 99
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Voilà donc la vidéo présentant le résultat final :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/zgvV25s_ilQ" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Et la même chose sur simulateur interactif. Là encore j’ai du modifié un peu le circuit pour utiliser le CD4511 et donc des afficheurs à cathode commune.
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/6hNGcB1uLcF" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="contraintes-des-évènements"&gt;
 &lt;a aria-hidden="true" href="#contraintes-des-évènements"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Contraintes des évènements
&lt;/h3&gt;
&lt;p&gt;
 Comme vous l’avez vu juste avant, afficher de manière alternative n’est pas trop difficile.
Cependant, vous avez surement remarqué, nous avons utilisé des fonctions bloquantes (delay).
Si jamais un évènement devait arriver pendant ce temps, nous aurions beaucoup de chance de le rater car il pourrait arriver "pendant" un délai d’attente pour l’affichage.
Pour parer à cela, je vais maintenant vous expliquer une autre méthode, préférable, pour faire de l’affichage.
Elle s’appuiera sur l’utilisation de la fonction millis(), qui nous permettra de générer une boucle de rafraîchissement de l’affichage.
Voici un organigramme qui explique le principe :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;img alt="organigramme de rafraichissement" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/organigramme-de-rafraichissement.jpg"/&gt;
  &lt;figcaption&gt;
   organigramme de rafraichissement
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 Comme vous pouvez le voir, il n’y a plus de fonction qui "attend".
Tout se passe de manière continue, sans qu’il n’y ai jamais de pause.
Ainsi, aucun évènement ne sera raté (en théorie, un évènement trèèèèèès rapide pourra toujours passer inaperçu).
Voici un exemple de programmation de la boucle principal (suivi de ses fonctions annexes) :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// définition des broches du décodeur 7 segments&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// (vous pouvez changer les numéros si vous voulez)&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_A = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_B = &lt;span class="hljs-number"&gt;3&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_C = &lt;span class="hljs-number"&gt;4&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_D = &lt;span class="hljs-number"&gt;5&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// définitions des broches des transistors pour chaque afficheur&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; alim_dizaine = &lt;span class="hljs-number"&gt;6&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// les dizaines&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; alim_unite = &lt;span class="hljs-number"&gt;7&lt;/span&gt;;   &lt;span class="hljs-comment"&gt;// les unites&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// variable pour l'affichage&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;bool&lt;/span&gt; afficheur = &lt;span class="hljs-literal"&gt;false&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;long&lt;/span&gt; tempsaffichage = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;long&lt;/span&gt; tempscomptage = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; valeur = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// Les broches sont toutes des sorties&lt;/span&gt;
    pinMode(bit_A, OUTPUT);
    pinMode(bit_B, OUTPUT);
    pinMode(bit_C, OUTPUT);
    pinMode(bit_D, OUTPUT);
    pinMode(alim_dizaine, OUTPUT);
    pinMode(alim_unite, OUTPUT);

    &lt;span class="hljs-comment"&gt;// Les broches sont toutes mises à l'état bas&lt;/span&gt;
    digitalWrite(bit_A, LOW);
    digitalWrite(bit_B, LOW);
    digitalWrite(bit_C, LOW);
    digitalWrite(bit_D, LOW);
    digitalWrite(alim_dizaine, LOW);
    digitalWrite(alim_unite, LOW);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// gestion du rafraichissement&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// si ça fait plus de 10 ms qu'on affiche,&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// on change de 7 segments (alternance unité &amp;lt;-&amp;gt; dizaine)&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;((millis() - tempsaffichage) &amp;gt; &lt;span class="hljs-number"&gt;250&lt;/span&gt;)
    {
        &lt;span class="hljs-comment"&gt;// on inverse la valeur de "afficheur"&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// pour changer d'afficheur (unité ou dizaine)&lt;/span&gt;
        afficheur = !afficheur;
        &lt;span class="hljs-comment"&gt;// on affiche la valeur sur l'afficheur&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// afficheur : true-&amp;gt;dizaines, false-&amp;gt;unités&lt;/span&gt;
        afficher_nombre(valeur, afficheur);
        tempsaffichage = millis(); &lt;span class="hljs-comment"&gt;// on met à jour le temps&lt;/span&gt;
    }

    &lt;span class="hljs-comment"&gt;// ici, on peut traiter les évènements (bouton...)&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// Par exemple on incrément le compteur toutes les secondes&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;((millis() - tempscomptage) &amp;gt; &lt;span class="hljs-number"&gt;1000&lt;/span&gt;)
    {
        valeur++;
        tempscomptage = millis(); &lt;span class="hljs-comment"&gt;// on met à jour le temps&lt;/span&gt;
    }
}

&lt;span class="hljs-comment"&gt;// fonction permettant d'afficher un nombre&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// elle affiche soit les dizaines soit les unités&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;afficher_nombre&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; nombre, &lt;span class="hljs-keyword"&gt;bool&lt;/span&gt; afficheur)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; unite = &lt;span class="hljs-number"&gt;0&lt;/span&gt;, dizaine = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(nombre &amp;gt; &lt;span class="hljs-number"&gt;9&lt;/span&gt;)
        dizaine = nombre / &lt;span class="hljs-number"&gt;10&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// on recupere les dizaines&lt;/span&gt;
    unite = nombre - (dizaine*&lt;span class="hljs-number"&gt;10&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// on recupere les unités&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;// si "&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(afficheur)
    {
        &lt;span class="hljs-comment"&gt;// on affiche les dizaines&lt;/span&gt;
        digitalWrite(alim_unite, LOW);
        afficher(dizaine);
        digitalWrite(alim_dizaine, HIGH);
    }
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;span class="hljs-comment"&gt;// égal à : else if(!afficheur)&lt;/span&gt;
    {
        &lt;span class="hljs-comment"&gt;// on affiche les unités&lt;/span&gt;
        digitalWrite(alim_dizaine, LOW);
        afficher(unite);
        digitalWrite(alim_unite, HIGH);
    }
}

&lt;span class="hljs-comment"&gt;// fonction écrivant sur un seul afficheur&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;afficher&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; chiffre)&lt;/span&gt;
&lt;/span&gt;{
    digitalWrite(bit_A, LOW);
    digitalWrite(bit_B, LOW);
    digitalWrite(bit_C, LOW);
    digitalWrite(bit_D, LOW);

    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;8&lt;/span&gt;)
    {
        digitalWrite(bit_D, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;8&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;4&lt;/span&gt;)
    {
        digitalWrite(bit_C, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;4&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;2&lt;/span&gt;)
    {
        digitalWrite(bit_B, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;1&lt;/span&gt;)
    {
        digitalWrite(bit_A, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;1&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  L’affichage de deux chiffres en utilisant
  &lt;code&gt;
   millis
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Si vous voulez tester le phénomène de persistance rétinienne, vous pouvez changer le temps de la boucle de rafraichissement (ligne 9). Si vous l’augmenter, vous commencerez à vois les afficheurs clignoter.
En mettant une valeur d’un peu moins de une seconde vous verrez les afficheurs s’illuminer l’un après l’autre.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voici l’exemple avec le simulateur (volontairement lent pour voir l’affichage en alternance) :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/e96lqNLGXel" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Ce chapitre vous a appris à utiliser un nouveau moyen pour afficher des informations avec votre carte Arduino. L’afficheur peut sembler peu utilisé mais en fait de nombreuses applications existe ! (chronomètre, réveil, horloge, compteur de passage, afficheur de score, etc.). Par exemple, il pourra vous servir pour déboguer votre code et afficher la valeur des variables souhaitées…
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>[TP] Parking</title><link href="https://eskimon.fr/tuto-arduino-206-tp-parking" rel="alternate"></link><published>2013-12-10T20:03:00+01:00</published><updated>2013-12-10T20:03:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-10:/tuto-arduino-206-tp-parking</id><summary type="html">&lt;p&gt;
 Ça y est, une page se tourne avec l’acquisition de nombreuses connaissances de base.
C’est donc l’occasion idéale pour faire un (gros
 &lt;img alt=":diable:" class="smiley" src="./static/smileys/diable.png"/&gt;
 ) TP qui utilisera l’ensemble de vos connaissances durement acquises.
J’aime utiliser les situations de la vie réelle, je vais donc en prendre une …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Ça y est, une page se tourne avec l’acquisition de nombreuses connaissances de base.
C’est donc l’occasion idéale pour faire un (gros
 &lt;img alt=":diable:" class="smiley" src="./static/smileys/diable.png"/&gt;
 ) TP qui utilisera l’ensemble de vos connaissances durement acquises.
J’aime utiliser les situations de la vie réelle, je vais donc en prendre une pour ce sujet. Je vous propose de réaliser la gestion d’un parking souterrain… RDV aux consignes pour les détails.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#consigne"&gt;
    Consigne
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#histoire"&gt;
       Histoire
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#matériel"&gt;
       Matériel
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#correction"&gt;
    Correction !
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#montage"&gt;
      Montage
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#schéma"&gt;
       Schéma
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#procédure-de-montage"&gt;
       Procédure de montage
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#programme"&gt;
      Programme
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#les-variables-utiles-et-déclarations"&gt;
       Les variables utiles et déclarations
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#linitialisation-de-la-fonction-setup"&gt;
       L’initialisation de la fonction setup()
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-boucle-principale-loop"&gt;
       La boucle principale (loop)
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-fonctions-daffichages"&gt;
       Les fonctions d’affichages
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#et-le-code-au-complet"&gt;
       Et le code au complet
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#conclusion"&gt;
     Conclusion
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="consigne"&gt;
 &lt;a aria-hidden="true" href="#consigne"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Consigne
&lt;/h3&gt;
&lt;p&gt;
 Après tant de connaissances chacune séparée dans son coin, nous allons pouvoir mettre en œuvre tout ce petit monde dans un TP traitant sur un sujet de la vie courante : les
 &lt;strong&gt;
  parkings
 &lt;/strong&gt;
 !
&lt;/p&gt;
&lt;h5 id="histoire"&gt;
 &lt;a aria-hidden="true" href="#histoire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Histoire
&lt;/h5&gt;
&lt;p&gt;
 Le maire de zCity à décidé de rentabiliser le parking communal d’une capacité de 99 places (pas une de plus ni de moins).
En effet, chaque jour des centaines de zTouristes viennent se promener en voiture et ont besoin de la garer quelque part.
Le parking, n’étant pour le moment pas rentable, servira à financer l’entretien de la ville.
Pour cela, il faut rajouter au parking existant un afficheur permettant de savoir le nombre de places disponibles en temps réel (le système de paiement du parking ne sera pas traité).
Il dispose aussi dans la ville des lumières vertes et rouges signalant un parking complet ou non.
Enfin, l’entrée du parking est équipée de deux barrières (une pour l’entrée et l’autre pour la sortie).
Chaque entrée de voiture ou sortie génère un signal pour la gestion du nombre de places.
Le maire vous a choisi pour vos compétences, votre esprit de créativité et il sait que vous aimez les défis. Vous acceptez évidemment en lui promettant de réussir dans les plus brefs délais !
&lt;/p&gt;
&lt;h5 id="matériel"&gt;
 &lt;a aria-hidden="true" href="#matériel"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Matériel
&lt;/h5&gt;
&lt;p&gt;
 Pour mener à bien ce TP voici la liste des courses conseillée :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Une carte Arduino (évidemment)
 &lt;/li&gt;
 &lt;li&gt;
  2 LEDs avec leur résistance de limitations de courant (habituellement 330 Ohms) -&amp;gt; Elles symbolisent les témoins lumineux disposés dans la ville
 &lt;/li&gt;
 &lt;li&gt;
  2 boutons (avec 2 résistances de 10 kOhms et 2 condensateurs de 10 nF) -&amp;gt; Ce sont les "capteurs" d’entrée et de sortie.
 &lt;/li&gt;
 &lt;li&gt;
  2 afficheurs 7 segments -&amp;gt; pour afficher le nombre de places disponibles
 &lt;/li&gt;
 &lt;li&gt;
  1 décodeur 4 bits vers 7 segments
 &lt;/li&gt;
 &lt;li&gt;
  7 résistances de 330 Ohms (pour les 7 segments)
 &lt;/li&gt;
 &lt;li&gt;
  Une breadboard pour assembler le tout
 &lt;/li&gt;
 &lt;li&gt;
  Un paquet de fils
 &lt;/li&gt;
 &lt;li&gt;
  Votre cerveau et quelques doigts…
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Voici une vidéo pour vous montrer le résultat attendu par le maire :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/pZWYGTFN7nM" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="text-center"&gt;
 &lt;p&gt;
  &lt;strong&gt;
   Bon courage !
  &lt;/strong&gt;
 &lt;/p&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Pour ceux qui veulent uniquement se concentrer sur le code, le montage via simulateur, sans code, est disponible dans la correction, juste avant la partie concernant le programme.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="correction"&gt;
 &lt;a aria-hidden="true" href="#correction"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Correction !
&lt;/h3&gt;
&lt;p&gt;
 J’espère que tout s’est bien passé pour vous et que le maire sera content de votre travail.
Voilà maintenant une correction (parmi tant d’autres, comme souvent en programmation et en électronique).
Nous commencerons par voir le schéma électronique, puis ensuite nous rentrerons dans le code.
&lt;/p&gt;
&lt;h4 id="montage"&gt;
 &lt;a aria-hidden="true" href="#montage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Montage
&lt;/h4&gt;
&lt;p&gt;
 Le montage électronique est la base de ce qui va nous servir pour réaliser le système.
Une fois qu’il est terminé on pourra l’utiliser grâce aux entrées/sorties de la carte Arduino et lui faire faire pleins de choses.
Mais ça, vous le savez déjà.
Alors ici pas de grand discours, il "suffit" de reprendre les différents blocs vus un par un dans les chapitres précédents et de faire le montage de façon simple.
&lt;/p&gt;
&lt;h5 id="schéma"&gt;
 &lt;a aria-hidden="true" href="#schéma"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Schéma
&lt;/h5&gt;
&lt;p&gt;
 Je vous montre le schéma que j’ai réalisé, il n’est pas absolu et peut différer selon ce que vous avez fait, mais il reprend essentiellement tous les "blocs" (ou mini montages électroniques) que l’on a vus dans les précédents chapitres, en les assemblant de façon logique et ordonnée :
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;img alt="TP Parking - Schéma" src="./images/uploaded/tuto-arduino-206-tp-parking/tp-parking-schema.png"/&gt;
   &lt;figcaption&gt;
    TP Parking - Schéma
   &lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;figure&gt;
   &lt;img alt="TP Parking - Montage" src="./images/uploaded/tuto-arduino-206-tp-parking/tp-parking-montage.png"/&gt;
   &lt;figcaption&gt;
    TP Parking - Montage
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="procédure-de-montage"&gt;
 &lt;a aria-hidden="true" href="#procédure-de-montage"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Procédure de montage
&lt;/h5&gt;
&lt;p&gt;
 Voici l’ordre que j’ai suivi pour réaliser le montage :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Débrancher la carte Arduino !
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   Mettre les boutons
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    Mettre les résistances de pull-up
   &lt;/li&gt;
   &lt;li&gt;
    Puis les condensateurs de filtrage
   &lt;/li&gt;
   &lt;li&gt;
    Et tirez des fils de signaux jusqu’à la carte Arduino
   &lt;/li&gt;
   &lt;li&gt;
    Enfin, vérifiez la position des alimentations (+5V et masse)
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Mettre les LEDs rouge et verte avec leur résistance de limitation de courant et un fil vers Arduino
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   Mettre les décodeurs
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    Relier les fils ABCD à Arduino
   &lt;/li&gt;
   &lt;li&gt;
    Mettre au +5V ou à la masse les signaux de commandes du décodeur
   &lt;/li&gt;
   &lt;li&gt;
    Mettre les résistances de limitations de courant des 7 segments
   &lt;/li&gt;
   &lt;li&gt;
    Enfin, vérifier la position des alimentations (+5V et masse)
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Puis mettre les afficheurs -&amp;gt; les relier entre le décodeur et leurs segments) -&amp;gt; les connecter au +5V
 &lt;/li&gt;
 &lt;li&gt;
  Amener du +5V et la masse sur la breadboard
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Ce étant terminé, la maquette est fin prête à être utilisée !
Évidemment, cela fait un montage (un peu) plus complet que les précédents !
&lt;/p&gt;
&lt;p&gt;
 Pour ceux qui veulent uniquement faire le code, voici le montage sur simulateur, avec les déclarations de broches. Il ne reste plus qu’à coder !
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/gHgLrsGuuxR" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="programme"&gt;
 &lt;a aria-hidden="true" href="#programme"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Programme
&lt;/h4&gt;
&lt;p&gt;
 Nous allons maintenant voir une solution de programme pour le problème de départ.
La vôtre sera peut-être (voire surement) différente, et ce n’est pas grave, un problème n’exige pas une solution unique.
Je n’ai peut-être même pas la meilleure solution ! (mais ça m’étonnerait
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 &lt;img alt=":ninja:" class="smiley" src="./static/smileys/ninja.png"/&gt;
 )
&lt;/p&gt;
&lt;h5 id="les-variables-utiles-et-déclarations"&gt;
 &lt;a aria-hidden="true" href="#les-variables-utiles-et-déclarations"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les variables utiles et déclarations
&lt;/h5&gt;
&lt;p&gt;
 Tout d’abord, nous allons voir les variables globales que nous allons utiliser ainsi que les déclarations utiles à faire.
Pour ma part, j’utilise six variables globales.
Vous reconnaîtrez la plupart d’entre elles car elles viennent des chapitres précédents.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Celles pour stocker l’état des boutons un coup sur l’autre et une pour le stocker de manière courante
 &lt;/li&gt;
 &lt;li&gt;
  Un char stockant le nombre de places disponibles dans le parking
 &lt;/li&gt;
 &lt;li&gt;
  Un booléen désignant l’afficheur utilisé en dernier
 &lt;/li&gt;
 &lt;li&gt;
  Un long stockant l’information de temps pour le rafraîchissement de l’affichage
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Voici ces différentes variables commentées.
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// les broches du décodeur 7 segments&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_A = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_B = &lt;span class="hljs-number"&gt;3&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_C = &lt;span class="hljs-number"&gt;4&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_D = &lt;span class="hljs-number"&gt;5&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// les broches des transistors pour l'afficheur des dizaines et des unités&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; alim_dizaine = &lt;span class="hljs-number"&gt;6&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; alim_unite = &lt;span class="hljs-number"&gt;7&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// les broches des boutons&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; btn_entree = &lt;span class="hljs-number"&gt;8&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; btn_sortie = &lt;span class="hljs-number"&gt;9&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// les leds de signalements&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_rouge = &lt;span class="hljs-number"&gt;12&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_verte = &lt;span class="hljs-number"&gt;11&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// les mémoires d'état des boutons&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; mem_entree = HIGH;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; mem_sortie = HIGH;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; etat = HIGH; &lt;span class="hljs-comment"&gt;// variable stockant l'état courant d'un bouton&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; place_dispo = &lt;span class="hljs-number"&gt;99&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// contenu des places dispos&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;bool&lt;/span&gt; afficheur = &lt;span class="hljs-literal"&gt;false&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;long&lt;/span&gt; temps;
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    Les variables et constantes
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="linitialisation-de-la-fonction-setup"&gt;
 &lt;a aria-hidden="true" href="#linitialisation-de-la-fonction-setup"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’initialisation de la fonction setup()
&lt;/h5&gt;
&lt;p&gt;
 Je ne vais pas faire un long baratin sur cette partie car je pense que vous serez en mesure de tout comprendre très facilement car il n’y a vraiment rien d’original par rapport à tout ce que l’on a fait avant (réglages des entrées/sorties et de leurs niveaux).
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// Les broches sont toutes des sorties (sauf les boutons)&lt;/span&gt;
    pinMode(bit_A, OUTPUT);
    pinMode(bit_B, OUTPUT);
    pinMode(bit_C, OUTPUT);
    pinMode(bit_D, OUTPUT);
    pinMode(alim_dizaine, OUTPUT);
    pinMode(alim_unite, OUTPUT);
    pinMode(led_rouge, OUTPUT);
    pinMode(led_verte, OUTPUT);

    pinMode(btn_entree, INPUT);
    pinMode(btn_sortie, INPUT);

    &lt;span class="hljs-comment"&gt;// Les broches sont toutes mise à l'état bas (sauf led rouge éteinte)&lt;/span&gt;
    digitalWrite(bit_A, LOW);
    digitalWrite(bit_B, LOW);
    digitalWrite(bit_C, LOW);
    digitalWrite(bit_D, LOW);
    digitalWrite(alim_dizaine, LOW);
    digitalWrite(alim_unite, LOW);
    digitalWrite(led_rouge, HIGH);
    digitalWrite(led_verte, LOW); &lt;span class="hljs-comment"&gt;// vert par défaut&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// rappel: dans cette configuration, la LED est éteinte à l'état HIGH&lt;/span&gt;

    temps = millis(); &lt;span class="hljs-comment"&gt;// enregistre "l'heure"&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    L’initialisation
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="la-boucle-principale-loop"&gt;
 &lt;a aria-hidden="true" href="#la-boucle-principale-loop"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La boucle principale (loop)
&lt;/h5&gt;
&lt;p&gt;
 Ici se trouve la partie la plus compliquée du TP.
En effet, elle doit s’occuper de gérer d’une part une boucle de rafraichissement de l’allumage des afficheurs 7 segments et d’autre part gérer les évènements.
Rappelons-nous de l’organigramme vu dans la dernière partie sur les 7 segments :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Organigramme TP Parking" src="./images/uploaded/tuto-arduino-206-tp-parking/organigramme-tp-parking.jpg"/&gt;
 &lt;figcaption&gt;
  Organigramme TP Parking
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Dans notre application, la gestion d’évènements sera "une voiture rentre-t/sort-elle du parking ?" qui sera symbolisée par un appui sur un bouton.
Ensuite, il faudra aussi prendre en compte l’affichage de la disponibilité sur les LEDs selon si le parking est complet ou non…
Voici une manière de coder tout cela :
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;div class="hljs-code-div"&gt;
   &lt;div class="hljs-line-numbers"&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
    &lt;span&gt;
    &lt;/span&gt;
   &lt;/div&gt;
   &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// si ca fait plus de 10 ms qu'on affiche, on change de 7 segments&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;((millis() - temps) &amp;gt; &lt;span class="hljs-number"&gt;10&lt;/span&gt;)
    {
        &lt;span class="hljs-comment"&gt;// on inverse la valeur de "afficheur"&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// pour changer d'afficheur (unité ou dizaine)&lt;/span&gt;
        afficheur = !afficheur;
        &lt;span class="hljs-comment"&gt;// on affiche&lt;/span&gt;
        afficher_nombre(place_dispo, afficheur);
        temps = millis(); &lt;span class="hljs-comment"&gt;// on met à jour le temps&lt;/span&gt;
    }

    &lt;span class="hljs-comment"&gt;// on test maintenant si les boutons ont subi un appui (ou pas)&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// d'abord le bouton plus puis le moins&lt;/span&gt;
    etat = digitalRead(btn_entree);
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;((etat != mem_entree) &amp;amp;&amp;amp; (etat == LOW))
        place_dispo += &lt;span class="hljs-number"&gt;1&lt;/span&gt;;
    mem_entree = etat; &lt;span class="hljs-comment"&gt;// on enregistre l'état du bouton pour le tour suivant&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;// et maintenant pareil pour le bouton qui décrémente&lt;/span&gt;
    etat = digitalRead(btn_sortie);
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;((etat != mem_sortie) &amp;amp;&amp;amp; (etat == LOW))
        place_dispo -= &lt;span class="hljs-number"&gt;1&lt;/span&gt;;
    mem_sortie = etat; &lt;span class="hljs-comment"&gt;// on enregistre l'état du bouton pour le tour suivant&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;// on applique des limites au nombre pour ne pas dépasser 99 ou 0&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(place_dispo &amp;gt; &lt;span class="hljs-number"&gt;99&lt;/span&gt;)
        place_dispo = &lt;span class="hljs-number"&gt;99&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(place_dispo &amp;lt; &lt;span class="hljs-number"&gt;0&lt;/span&gt;)
        place_dispo = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

    &lt;span class="hljs-comment"&gt;// on met à jour l'état des leds&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// on commence par les éteindres&lt;/span&gt;
    digitalWrite(led_verte, HIGH);
    digitalWrite(led_rouge, HIGH);
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(place_dispo == &lt;span class="hljs-number"&gt;0&lt;/span&gt;) &lt;span class="hljs-comment"&gt;// s'il n'y a plus de place&lt;/span&gt;
        digitalWrite(led_rouge, LOW);
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
        digitalWrite(led_verte, LOW);
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Dans les lignes 4 à 11, on retrouve la gestion du rafraichissement des 7 segments.
Ensuite, on s’occupe de réceptionner les évènements en faisant un test par bouton pour savoir si son état a changé et s’il est à l’état bas.
Enfin, on va borner le nombre de places et faire l’affichage sur les LED en conséquence.
Vous voyez, ce n’était pas si difficile en fait ! Si, un peu quand même, non ?
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 Il ne reste maintenant plus qu’à faire les fonctions d’affichages.
&lt;/p&gt;
&lt;h5 id="les-fonctions-daffichages"&gt;
 &lt;a aria-hidden="true" href="#les-fonctions-daffichages"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les fonctions d’affichages
&lt;/h5&gt;
&lt;p&gt;
 Là encore, je ne vais pas faire de grand discours puisque ces fonctions sont exactement les mêmes que celles réalisées dans la partie concernant l’affichage sur plusieurs afficheurs.
Si elles ne vous semblent pas claires, je vous conseille de revenir sur le chapitre concernant les 7 segments.
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// fonction permettant d'afficher un nombre&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;afficher_nombre&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; nombre, &lt;span class="hljs-keyword"&gt;bool&lt;/span&gt; afficheur)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; temps;
    &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; unite = &lt;span class="hljs-number"&gt;0&lt;/span&gt;, dizaine = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(nombre &amp;gt; &lt;span class="hljs-number"&gt;9&lt;/span&gt;)
        dizaine = nombre / &lt;span class="hljs-number"&gt;10&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// on recupere les dizaines&lt;/span&gt;
    unite = nombre - (dizaine*&lt;span class="hljs-number"&gt;10&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// on recupere les unités&lt;/span&gt;

    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(afficheur)
    {
        &lt;span class="hljs-comment"&gt;// on affiche les dizaines&lt;/span&gt;
        digitalWrite(alim_unite, LOW);
        digitalWrite(alim_dizaine, HIGH);
        afficher(dizaine);
    }
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
    {
        &lt;span class="hljs-comment"&gt;// on affiche les unités&lt;/span&gt;
        digitalWrite(alim_dizaine, LOW);
        digitalWrite(alim_unite, HIGH);
        afficher(unite);
    }
}

&lt;span class="hljs-comment"&gt;// fonction écriveant sur un seul afficheur&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;afficher&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; chiffre)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on commence par écrire 0, donc tout à l'état bas&lt;/span&gt;
    digitalWrite(bit_A, LOW);
    digitalWrite(bit_B, LOW);
    digitalWrite(bit_C, LOW);
    digitalWrite(bit_D, LOW);

    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;8&lt;/span&gt;)
    {
        digitalWrite(bit_D, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;8&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;4&lt;/span&gt;)
    {
        digitalWrite(bit_C, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;4&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;2&lt;/span&gt;)
    {
        digitalWrite(bit_B, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;1&lt;/span&gt;)
    {
        digitalWrite(bit_A, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;1&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    Les fonctions d’affichage
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="et-le-code-au-complet"&gt;
 &lt;a aria-hidden="true" href="#et-le-code-au-complet"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Et le code au complet
&lt;/h5&gt;
&lt;p&gt;
 Si vous voulez tester l’ensemble de l’application sans faire d’erreurs de copier/coller, voici le code complet (qui doit fonctionner si on considère que vous avez branché chaque composant au même endroit que sur le schéma fourni au départ !)
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// les broches du décodeur 7 segments&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_A = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_B = &lt;span class="hljs-number"&gt;3&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_C = &lt;span class="hljs-number"&gt;4&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; bit_D = &lt;span class="hljs-number"&gt;5&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// les broches des transistors pour l'afficheur des dizaines et celui des unités&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; alim_dizaine = &lt;span class="hljs-number"&gt;6&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; alim_unite = &lt;span class="hljs-number"&gt;7&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// les broches des boutons&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; btn_entree = &lt;span class="hljs-number"&gt;8&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; btn_sortie = &lt;span class="hljs-number"&gt;9&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// les leds de signalements&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_rouge = &lt;span class="hljs-number"&gt;12&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; led_verte = &lt;span class="hljs-number"&gt;11&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// les mémoires d'état des boutons&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; mem_entree = HIGH;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; mem_sortie = HIGH;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; etat = HIGH; &lt;span class="hljs-comment"&gt;// variable stockant l'état courant d'un bouton&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; place_dispo = &lt;span class="hljs-number"&gt;10&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// contenu des places dispos&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;bool&lt;/span&gt; afficheur = &lt;span class="hljs-literal"&gt;false&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;long&lt;/span&gt; temps;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// Les broches sont toutes des sorties (sauf les boutons)&lt;/span&gt;
    pinMode(bit_A, OUTPUT);
    pinMode(bit_B, OUTPUT);
    pinMode(bit_C, OUTPUT);
    pinMode(bit_D, OUTPUT);
    pinMode(alim_dizaine, OUTPUT);
    pinMode(alim_unite, OUTPUT);
    pinMode(btn_entree, INPUT);
    pinMode(btn_sortie, INPUT);
    pinMode(led_rouge, OUTPUT);
    pinMode(led_verte, OUTPUT);

    &lt;span class="hljs-comment"&gt;// Les broches sont toutes mises à l'état bas (sauf led rouge éteinte)&lt;/span&gt;
    digitalWrite(bit_A, LOW);
    digitalWrite(bit_B, LOW);
    digitalWrite(bit_C, LOW);
    digitalWrite(bit_D, LOW);
    digitalWrite(alim_dizaine, LOW);
    digitalWrite(alim_unite, LOW);
    digitalWrite(led_rouge, HIGH);
    digitalWrite(led_verte, LOW); &lt;span class="hljs-comment"&gt;// vert par défaut&lt;/span&gt;
    temps = millis(); &lt;span class="hljs-comment"&gt;// enregistre "l'heure"&lt;/span&gt;
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// si ca fait plus de 10 ms qu'on affiche, on change de 7 segments&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;((millis() - temps) &amp;gt; &lt;span class="hljs-number"&gt;10&lt;/span&gt;)
    {
        &lt;span class="hljs-comment"&gt;// on inverse la valeur de "afficheur"&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// pour changer d'afficheur (unité ou dizaine)&lt;/span&gt;
        afficheur = !afficheur;
        &lt;span class="hljs-comment"&gt;// on affiche&lt;/span&gt;
        afficher_nombre(place_dispo, afficheur);
        temps = millis(); &lt;span class="hljs-comment"&gt;// on met à jour le temps&lt;/span&gt;
    }

    &lt;span class="hljs-comment"&gt;// on test maintenant si les boutons ont subi un appui (ou pas)&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// d'abord le bouton plus puis le moins&lt;/span&gt;
    etat = digitalRead(btn_entree);
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;((etat != mem_entree) &amp;amp;&amp;amp; (etat == LOW))
        place_dispo += &lt;span class="hljs-number"&gt;1&lt;/span&gt;;
    mem_entree = etat; &lt;span class="hljs-comment"&gt;// on enregistre l'état du bouton pour le tour suivant&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;// et maintenant pareil pour le bouton qui décrémente&lt;/span&gt;
    etat = digitalRead(btn_sortie);
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;((etat != mem_sortie) &amp;amp;&amp;amp; (etat == LOW))
        place_dispo -= &lt;span class="hljs-number"&gt;1&lt;/span&gt;;
    mem_sortie = etat; &lt;span class="hljs-comment"&gt;// on enregistre l'état du bouton pour le tour suivant&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;// on applique des limites au nombre pour ne pas dépasser 99 ou 0&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(place_dispo &amp;gt; &lt;span class="hljs-number"&gt;99&lt;/span&gt;)
        place_dispo = &lt;span class="hljs-number"&gt;99&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(place_dispo &amp;lt; &lt;span class="hljs-number"&gt;0&lt;/span&gt;)
        place_dispo = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

    &lt;span class="hljs-comment"&gt;// on met à jour l'état des leds&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// on commence par les éteindre&lt;/span&gt;
    digitalWrite(led_verte, HIGH);
    digitalWrite(led_rouge, HIGH);
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(place_dispo == &lt;span class="hljs-number"&gt;0&lt;/span&gt;) &lt;span class="hljs-comment"&gt;// s'il n'y a plus de place&lt;/span&gt;
        digitalWrite(led_rouge, LOW);
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
        digitalWrite(led_verte, LOW);
}

&lt;span class="hljs-comment"&gt;// fonction permettant d'afficher un nombre&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;afficher_nombre&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; nombre, &lt;span class="hljs-keyword"&gt;bool&lt;/span&gt; afficheur)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; temps;
    &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; unite = &lt;span class="hljs-number"&gt;0&lt;/span&gt;, dizaine = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(nombre &amp;gt; &lt;span class="hljs-number"&gt;9&lt;/span&gt;)
        dizaine = nombre / &lt;span class="hljs-number"&gt;10&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// on récupère les dizaines&lt;/span&gt;
    unite = nombre - (dizaine*&lt;span class="hljs-number"&gt;10&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// on récupère les unités&lt;/span&gt;

    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(afficheur)
    {
        &lt;span class="hljs-comment"&gt;// on affiche les dizaines&lt;/span&gt;
        digitalWrite(alim_unite, LOW);
        digitalWrite(alim_dizaine, HIGH);
        afficher(dizaine);
    }
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
    {
        &lt;span class="hljs-comment"&gt;// on affiche les unités&lt;/span&gt;
        digitalWrite(alim_dizaine, LOW);
        digitalWrite(alim_unite, HIGH);
        afficher(unite);
    }
}

&lt;span class="hljs-comment"&gt;// fonction écrivant sur un seul afficheur&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;afficher&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; chiffre)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on commence par écrire 0, donc tout à l'état bas&lt;/span&gt;
    digitalWrite(bit_A, LOW);
    digitalWrite(bit_B, LOW);
    digitalWrite(bit_C, LOW);
    digitalWrite(bit_D, LOW);

    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;8&lt;/span&gt;)
    {
        digitalWrite(bit_D, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;8&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;4&lt;/span&gt;)
    {
        digitalWrite(bit_C, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;4&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;2&lt;/span&gt;)
    {
        digitalWrite(bit_B, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(chiffre &amp;gt;= &lt;span class="hljs-number"&gt;1&lt;/span&gt;)
    {
        digitalWrite(bit_A, HIGH);
        chiffre = chiffre - &lt;span class="hljs-number"&gt;1&lt;/span&gt;;
    }
}
&lt;span class="hljs-comment"&gt;// Fin du programme !&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Le code complet
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Et voici la correction complète sur simulateur interactif.
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/9l3ird4QSYJ" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="conclusion"&gt;
 &lt;a aria-hidden="true" href="#conclusion"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Conclusion
&lt;/h4&gt;
&lt;p&gt;
 Bon, si vous ne comprenez pas tout du premier coup, c’est un petit peu normal, c’est en effet difficile de reprendre un programme que l’on a pas fait soi-même et ce pour diverses raisons.
Le principal est que vous ayez cherché une solution par vous-même et que vous soyez arrivé à réaliser l’objectif final.
Si vous n’avez pas réussi mais que vous pensiez y être presque, alors je vous invite à chercher profondément le pourquoi du comment votre programme ne fonctionne pas ou pas entièrement, cela vous aidera à trouver vos erreurs et à ne plus en refaire !
&lt;/p&gt;
&lt;p&gt;
 Il est pas magnifique ce parking ? J’espère que vous avez apprécié sa réalisation.
Nous allons maintenant continuer à apprendre de nouvelles choses, toujours plus sympas les unes que les autres.
Un conseil, gardez votre travail quelques part au chaud, vous pourriez l’améliorer avec vos connaissances futures !
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Généralités sur la voie série</title><link href="https://eskimon.fr/tuto-arduino-301-g%C3%A9n%C3%A9ralit%C3%A9s-sur-la-voie-s%C3%A9rie" rel="alternate"></link><published>2013-12-10T20:03:00+01:00</published><updated>2013-12-10T20:03:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-10:/tuto-arduino-301-généralités-sur-la-voie-série</id><summary type="html">&lt;p&gt;
 La communication… que ferait-on sans ! Le téléphone, Internet, la télévision, les journaux, la publicité… rien de tout cela n’existerait s’il n’y avait pas de communication. Évidemment, ce n’est pas de ces moyens là dont nous allons faire l’objet dans la partie présente. Non, nous allons …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 La communication… que ferait-on sans ! Le téléphone, Internet, la télévision, les journaux, la publicité… rien de tout cela n’existerait s’il n’y avait pas de communication. Évidemment, ce n’est pas de ces moyens là dont nous allons faire l’objet dans la partie présente. Non, nous allons voir un moyen de communication que possède la carte Arduino. Vous pourrez ainsi faire communiquer votre carte avec un ordinateur ou bien une autre carte Arduino ! Et oui ! Elle en a sous le capot cette petite carte !
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#communiquer-pourquoi"&gt;
    Communiquer, pourquoi ?
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#transmettre-des-informations"&gt;
      Transmettre des informations
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#Émetteur-et-récepteur"&gt;
       Émetteur et récepteur
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-communication-en-trois-cas"&gt;
       La communication en trois cas
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#le-récepteur"&gt;
     Le récepteur
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#la-norme-rs232"&gt;
    La norme RS232
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#applications-de-la-norme"&gt;
       Applications de la norme
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#la-mécanique"&gt;
     La mécanique
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#le-signal-électrique-et-le-protocole"&gt;
      Le signal électrique et le protocole
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#les-tensions-utilisées"&gt;
       Les tensions utilisées
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-données"&gt;
       Les données
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#lordre-et-les-délimiteurs"&gt;
       L’ordre et les délimiteurs
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#un-peu-de-vocabulaire"&gt;
       Un peu de vocabulaire
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-vitesse"&gt;
       La vitesse
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-gestion-des-erreurs"&gt;
       La gestion des erreurs
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#connexion-série-entre-arduino-et-"&gt;
    Connexion série entre Arduino et …
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#Émulation-du-port-série"&gt;
     Émulation du port série
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#arduino-et-un-autre-microcontrôleur"&gt;
      Arduino et un autre microcontrôleur
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#la-tension-des-microcontrôleurs"&gt;
       La tension des microcontrôleurs
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#croisement-de-données"&gt;
       Croisement de données
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#arduino-au-pc"&gt;
      Arduino au PC
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-connecteur-série-ou-sortie-db9"&gt;
       Le connecteur série (ou sortie DB9)
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#une-petite-histoire-dadaptation"&gt;
       Une petite histoire d’adaptation
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#au-delà-darduino-avec-la-connexion-série"&gt;
    Au delà d’Arduino avec la connexion série
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#le-connecteur-série-ou-sortie-db9-1"&gt;
      Le connecteur série (ou sortie DB9)
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-brochage-au-complet"&gt;
       Le brochage au complet !
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#désolé-je-suis-occupé"&gt;
      Désolé, je suis occupé…
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#contrôle-de-flux-logiciel"&gt;
       Contrôle de flux logiciel
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#contrôle-de-flux-matériel"&gt;
       Contrôle de flux matériel
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#avec-ou-sans-horloge"&gt;
      Avec ou sans horloge ?
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#lusb"&gt;
       L’USB
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#li2c"&gt;
       L’I2C
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="communiquer-pourquoi"&gt;
 &lt;a aria-hidden="true" href="#communiquer-pourquoi"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Communiquer, pourquoi ?
&lt;/h3&gt;
&lt;p&gt;
 Nous avons vu dans la partie précédente où nous faisions nos premiers pas avec Arduino, comment utiliser la carte. Nous avons principalement utilisé des LED pour communiquer à l’utilisateur (donc vous, à priori) certaines informations. Cela pouvait être une LED ou un groupe de LED qui peut indiquer tout et n’importe quoi, ou bien un afficheur 7 segments qui affiche des chiffres ou certains caractères pouvant tout aussi bien indiquer quelque chose. Tout dépend de ce que vous voulez signaler avec les moyens que vous mettez à disposition. On peut très bien imaginer un ensemble de LED ayant chacune un nom, sigle ou autre marqueur pour indiquer, selon l’état d’une ou plusieurs d’entre-elles, un mode de fonctionnement ou bien une erreur ou panne d’un système. Cependant, cette solution reste tout de même précaire et demande à l’utilisateur d’être devant le système de signalisation. Aujourd’hui, avec l’avancée de la technologie et du "tout connecté", il serait fâcheux de ne pouvoir aller plus loin. Je vais donc vous présenter un nouveau moyen de
 &lt;strong&gt;
  communication
 &lt;/strong&gt;
 grâce à la
 &lt;strong&gt;
  voie série
 &lt;/strong&gt;
 (ou "liaison série"), qui va vous permettre de communiquer des informations à l’utilisateur par divers intermédiaires. A la fin de la partie, vous serez capable de transmettre des informations à un ordinateur ou une autre carte Arduino.
&lt;/p&gt;
&lt;h4 id="transmettre-des-informations"&gt;
 &lt;a aria-hidden="true" href="#transmettre-des-informations"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Transmettre des informations
&lt;/h4&gt;
&lt;p&gt;
 Tel est le principal objectif de la communication. Mais comment transmettre des informations… et puis quelles informations ? Avec votre carte Arduino, vous aurez certainement besoin de transmettre des mesures de températures ou autres grandeurs (tension, luminosité, etc.). Ces informations pourront alimenter une base de donnée, servir dans un calcul, ou à autre chose. Tout dépendra de ce que vous en ferez.
&lt;/p&gt;
&lt;h5 id="Émetteur-et-récepteur"&gt;
 &lt;a aria-hidden="true" href="#Émetteur-et-récepteur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Émetteur et récepteur
&lt;/h5&gt;
&lt;p&gt;
 Lorsque l’on communique des informations, il faut nécessairement un
 &lt;strong&gt;
  émetteur
 &lt;/strong&gt;
 , qui va transmettre les informations à communiquer, et un
 &lt;strong&gt;
  récepteur
 &lt;/strong&gt;
 , qui va recevoir les informations pour les traiter.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Communication entre deux cartes" src="./images/uploaded/tuto-arduino-301-généralités-sur-la-voie-série/communication-entre-deux-cartes.jpg"/&gt;
 &lt;figcaption&gt;
  Communication entre deux cartes
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Dans le cas présent, deux carte Arduino communiquent. L’une communique à l’autre tandis que l’autre réceptionne le message envoyé par la première.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Pourtant, il y a deux flèches sur ton dessin. L’autre aussi, qui réceptionne le message, peut envoyer des données ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Absolument ! Cependant, tout dépend du type de communication.
&lt;/p&gt;
&lt;h5 id="la-communication-en-trois-cas"&gt;
 &lt;a aria-hidden="true" href="#la-communication-en-trois-cas"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La communication en trois cas
&lt;/h5&gt;
&lt;p&gt;
 Pour parler, on peut par exemple différencier trois types de conversations. A chaque conversation, il n’y a que deux interlocuteurs. On ne peut effectivement pas en faire communiquer plus dans notre cas ! On dit que c’est une communication
 &lt;strong&gt;
  point-à-point
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Le premier type serait lorsqu’un interlocuteur parle à son compère sans que celui-ci dise quoi que ce soit puisqu’il ne peut pas répondre. Il est muet et se contente d’écouter. C’est une communication à sens unilatérale, ou techniquement appelée communication
  &lt;strong&gt;
   simplex
  &lt;/strong&gt;
  . L’un parle et l’autre écoute.
 &lt;/li&gt;
 &lt;li&gt;
  Le deuxième type serait une conversation normale où chacun des interlocuteurs est poli et attend que l’autre est finie de parler pour parler à son tour. Il s’agit d’une communication
  &lt;strong&gt;
   half-duplex
  &lt;/strong&gt;
  . Chaque interlocuteur parle
  &lt;strong&gt;
   à tour de rôle
  &lt;/strong&gt;
  .
 &lt;/li&gt;
 &lt;li&gt;
  Enfin, il y a la conversation du type "débat politique" (ce n’est évidemment pas son vrai nom
  &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
  ) où chaque interlocuteur parle en même temps que l’autre. Bon, cela dit, ce type de communication marche très bien (pas au sens politique, je parle au niveau technique !) et est très utilisé ! C’est une communication dite
  &lt;strong&gt;
   full-duplex
  &lt;/strong&gt;
  .
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 A notre échelle, Arduino est capable de faire des communications de type full-duplex, puisqu’elle est capable de comprendre son interlocuteur tout en lui parlant en même temps.
&lt;/p&gt;
&lt;h4 id="le-récepteur"&gt;
 &lt;a aria-hidden="true" href="#le-récepteur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le récepteur
&lt;/h4&gt;
&lt;p&gt;
 Qu’en est-il ? Eh bien il peut s’agir, comme je le sous-entendais plus tôt, d’une autre carte Arduino. Cela étant, n’importe quel autre appareil utilisant la voie série et son
 &lt;strong&gt;
  protocole de communication
 &lt;/strong&gt;
 pourrait communiquer avec. Cela peut être notamment un ordinateur, c’est d’ailleurs le principal interlocuteur que nous mettrons en relation avec Arduino.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   C’est quoi ça, un protocole de communication ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 C’est un ensemble de règles qui régissent la façon dont communiquent deux dispositifs entre eux. Cela définit par exemple le rythme de la conversation (le débit de parole des acteurs si vous préférez), l’ordre des informations envoyées (la grammaire en quelque sorte), le nombre d’informations, etc… On peut analogiquement comparer à une phrase en français, qui place le sujet, le verbe puis le complément. C’est une forme de protocole. Si je mélange tout ça, en plaçant par exemple le sujet, le complément et le verbe, cela donnerait un style parlé de maître Yoda… bon c’est moins facilement compréhensible, mais ça le reste. En revanche, deux dispositifs qui communiquent avec un protocole différent ne se comprendront pas correctement et pourraient même interpréter des actions à effectuer qui seraient à l’opposé de ce qui est demandé. Ce serait en effet dommage que votre interlocuteur "donne le chat à manger" alors que vous lui avez demandé "donne à manger au chat".
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 Bref, si les dispositifs communiquant n’utilisent pas le bon protocole, cela risque de devenir un véritable capharnaüm !
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/NLbVg0muX38" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/EXQpPWVT7QQ" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="la-norme-rs232"&gt;
 &lt;a aria-hidden="true" href="#la-norme-rs232"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La norme RS232
&lt;/h3&gt;
&lt;p&gt;
 Des liaisons séries, il en existe un paquet ! Je peux en citer quelques unes : RS-232, Universal Serial Bus (USB), Serial ATA, SPI, … Et pour dire, vous pouvez très bien inventer votre propre norme de communication pour la voie série que vous décidez de créer. L’inconvénient, bien que cela puisse être également un avantage, il n’y a que vous seul qui puissiez alors utiliser une telle communication.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Et nous, laquelle allons-nous voir parmi celles-là ? Il y en a des meilleurs que d’autres ? oO
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 D’abord, nous allons voir la voie série utilisant la norme RS-232. Ensuite, oui, il y en a qui ont des avantages par rapport à d’autres. On peut essentiellement noter le type d’utilisation que l’on veut en faire et la vitesse à laquelle les dispositifs peuvent communiquer avec.
&lt;/p&gt;
&lt;h5 id="applications-de-la-norme"&gt;
 &lt;a aria-hidden="true" href="#applications-de-la-norme"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Applications de la norme
&lt;/h5&gt;
&lt;p&gt;
 La
 &lt;strong&gt;
  norme RS-232
 &lt;/strong&gt;
 s’applique sur trois champs d’une communication de type série. Elle définit le signal électrique, le protocole utilisé et tout ce qui est lié à la mécanique (la connectique, le câblage, etc…).
&lt;/p&gt;
&lt;h4 id="la-mécanique"&gt;
 &lt;a aria-hidden="true" href="#la-mécanique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La mécanique
&lt;/h4&gt;
&lt;p&gt;
 Pour communiquer via la voie série, deux dispositifs doivent avoir 3 câbles minimum.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Le premier câble est la
  &lt;strong&gt;
   référence électrique
  &lt;/strong&gt;
  , communément appelée
  &lt;strong&gt;
   masse électrique
  &lt;/strong&gt;
  . Cela permet de prendre les mesures de tension en se fixant un même référentiel. Un peu lorsque vous vous mesurez : vous mesurez 1,7 mètre du sol au sommet de votre tête et non pas 4,4 mètre parce que vous êtes au premier étage et que vous vous basez par rapport au sol du rez-de-chaussé. Dans notre cas, on considérera que le 0V sera notre référentiel électrique commun.
 &lt;/li&gt;
 &lt;li&gt;
  Les deux autres câbles permettent la transmission des données. L’un sert à l’envoi des données pour un émetteur, mais sert aussi pour la réception des données venant de l’autre émetteur. Idem pour l’autre câble. Il permet l’émission de l’un et la réception de l’autre.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
 &lt;img alt="Deux Arduino reliées entre elles" src="./images/uploaded/tuto-arduino-301-généralités-sur-la-voie-série/deux-arduino-reliees-entre-elles.png"/&gt;
 &lt;figcaption&gt;
  Deux Arduino reliées entre elles
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Deux cartes Arduino reliées par 3 câbles :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Le
  &lt;strong&gt;
   noir
  &lt;/strong&gt;
  est la masse électrique commune
 &lt;/li&gt;
 &lt;li&gt;
  Le
  &lt;strong&gt;
   vert
  &lt;/strong&gt;
  est celui utilisé pour l’envoi des données de la première carte (à gauche), mais sert également à la réception des données envoyées pour la deuxième carte (à droite)
 &lt;/li&gt;
 &lt;li&gt;
  Le
  &lt;strong&gt;
   orange
  &lt;/strong&gt;
  est celui utilisé pour l’envoi des données de la deuxième carte (à droite), mais sert également à la réception des données envoyées pour la première carte (à gauche)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Cela, il s’agit du strict minimum utilisé. La norme n’interdit pas l’utilisation d’autres câbles qui servent à faire du contrôle de flux et de la gestion des erreurs.
&lt;/p&gt;
&lt;h4 id="le-signal-électrique-et-le-protocole"&gt;
 &lt;a aria-hidden="true" href="#le-signal-électrique-et-le-protocole"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le signal électrique et le protocole
&lt;/h4&gt;
&lt;p&gt;
 Avant tout, il faut savoir que pour communiquer, deux dispositifs électronique ou informatique utilisent des données sous forme de
 &lt;strong&gt;
  bits
 &lt;/strong&gt;
 . Ces bits, je le rappel, sont des états logiques (vrai ou faux) qui peuvent être regroupés pour faire des ensembles de bits. Généralement, ces ensembles sont constitués de 8 bits qui forment alors un
 &lt;strong&gt;
  octet
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;h5 id="les-tensions-utilisées"&gt;
 &lt;a aria-hidden="true" href="#les-tensions-utilisées"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les tensions utilisées
&lt;/h5&gt;
&lt;p&gt;
 Ces bits sont en fait des niveaux de tension électrique. Et la norme RS-232 définit quelles tensions doivent être utilisées. On peut spécifier les niveaux de tension imposés par la norme dans un tableau, que voici :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
      &lt;/th&gt;
      &lt;th&gt;
       Niveau logique 0
      &lt;/th&gt;
      &lt;th&gt;
       Niveau logique 1
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Tension électrique minimale
      &lt;/td&gt;
      &lt;td&gt;
       +3V
      &lt;/td&gt;
      &lt;td&gt;
       -3V
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       Tension électrique maximale
      &lt;/td&gt;
      &lt;td&gt;
       +25V
      &lt;/td&gt;
      &lt;td&gt;
       -25V
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Niveau électrique de la norme RS-232
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 Ainsi, toutes les tensions au delà des valeurs imposées, donc entre -3V et +3V, au dessous de -25V et au dessus de +25V, sont hors normes. Pour les tensions trop élevées (aux extrêmes de + et -25V) elles pourraient endommager le matériel. Quand aux tensions comprises entre + et -3V, eh bien elles sont ignorées car c’est dans ces zones là que se trouvent la plupart et même la quasi totalité des parasites. C’est un moyen permettant d’éviter un certain nombre d’erreurs de transmissions.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Les parasites dont je parle sont simplement des pics de tensions qui peuvent survenir à cause de différentes sources (interrupteur, téléviseur, micro-ondes, …) et qui risquent alors de modifier des données lors d’une transmission effectuée grâce à la voie série.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Lorsqu’il n’y a pas de communication sur la voie série, il y a ce qu’on appelle un
 &lt;strong&gt;
  état de repos
 &lt;/strong&gt;
 . C’est à dire un niveau logique toujours présent. Il s’agit du niveau logique 1. Soit une tension comprise entre -3V et -25V. Si cet état de repos n’est pas présent, c’est qu’il peut y avoir un problème de câblage.
&lt;/p&gt;
&lt;h5 id="les-données"&gt;
 &lt;a aria-hidden="true" href="#les-données"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les données
&lt;/h5&gt;
&lt;p&gt;
 Les données qui transitent par la voie série sont transmises sous une forme binaire. C’est à dire avec des niveaux logiques 0 et 1. Prenons une donnée que nous voudrions envoyer, par exemple la lettre "P" majuscule. Vous ne le saviez peut-être pas mais une lettre du clavier est codé sur un nombre de 8 bits, donc un octet. Réellement c’est en fait sur 7 bits qu’elle est codée, mais en rajoutant un 0 devant le codage, cela conserve sa valeur et permet d’avoir un codage de la lettre sur 8 bits. Ces codes sont définis selon la
 &lt;strong&gt;
  table ASCII
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 Ainsi, pour chaque caractère du clavier, on retrouve un codage sur 8 bits. Vous pouvez aller consulter cette table pour comprendre un peu comment elle fonctionne en
 &lt;a href="http://fr.wikipedia.org/wiki/American_Standard_Code_for_Information_Interchange#Table_des_128_caract.C3.A8res_ASCII"&gt;
  suivant ce lien
 &lt;/a&gt;
 . En haut à gauche de la table ASCII, on observe la ligne : "Code en base…" et là vous avez : 10, 8, 16, 2. Respectivement, ce sont les bases décimale (10), octale (8), hexadécimale (16) et binaire (2).
&lt;/p&gt;
&lt;p&gt;
 Certaines ne vous sont donc pas inconnues puisque l’on en a vu. Nous, ce qui va nous intéresser, c’est la base binaire. Oui car le binaire est une succession de 0 et de 1, qui sont les états logiques 0 (LOW) et 1 (HIGH). En observant la table, on tombe sur la lettre "P" majuscule et l’on voit sa correspondance en binaire :
 &lt;em&gt;
  01010000
 &lt;/em&gt;
 .
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Je crois ne pas bien comprendre pourquoi on envoie une lettre… qui va la recevoir et pour quoi faire ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Il faut vous imaginer qu’il y a un destinataire. Dans notre cas, il s’agira avant tout de l’ordinateur avec lequel vous programmez votre carte. On va lui envoyer la lettre "P" mais cela pourrait être une autre lettre, une suite de lettres ou autres caractères, voire même des phrases complètes. Pour ne pas aller trop vite, nous resterons avec cette unique lettre. Lorsque l’on enverra la lettre à l’ordinateur, nous utiliserons un petit module intégré dans le logiciel Arduino pour visualiser le message réceptionné. C’est donc nous qui allons voir ce que l’on transmet via la voie série.
&lt;/p&gt;
&lt;h5 id="lordre-et-les-délimiteurs"&gt;
 &lt;a aria-hidden="true" href="#lordre-et-les-délimiteurs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’ordre et les délimiteurs
&lt;/h5&gt;
&lt;p&gt;
 On va à présent voir comment est transmit un octet sur la voie série en envoyant notre exemple, la lettre "P". Analogiquement, je vais vous montrer que cette communication par la voie série se présente un peu comme un appel téléphonique :
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
  Lorsque l’on passe un coup de fil, bien généralement on commence par dire "Bonjour" ou "Allo". Ce début de message permet de faire l’ouverture de la conversation. En effet, si l’on reçoit un appel et que personne ne répond après avoir décroché, la conversation ne peut avoir lieu. Dans la norme RS-232, on va avoir une ouverture de la communication grâce à un
  &lt;strong&gt;
   bit de départ
  &lt;/strong&gt;
  . C’est lui qui va engager la conversation avec son interlocuteur. Dans la norme RS-232, ce dernier est un état 0.
 &lt;/li&gt;
 &lt;li&gt;
  Ensuite, vous allez commencer à parler et donner les informations que vous souhaitez transmettre. Ce sera les
  &lt;strong&gt;
   données
  &lt;/strong&gt;
  . L’élément principal de la conversation (ici notre lettre 'P’).
 &lt;/li&gt;
 &lt;li&gt;
  Enfin, après avoir renseigné tout ce que vous aviez à dire, vous terminez la conversation par un "Au revoir" ou "Salut !", "A plus !" etc. Cela termine la conversation. Il y aura donc un
  &lt;strong&gt;
   bit de fin
  &lt;/strong&gt;
  ou
  &lt;strong&gt;
   bit de stop
  &lt;/strong&gt;
  qui fera de même sur la voie série. Dans la norme RS-232, c’est un état 1.
 &lt;/li&gt;
&lt;/ol&gt;
&lt;figure&gt;
 &lt;img alt="Chronogramme d'un échange sur la voie série" src="./images/uploaded/tuto-arduino-301-généralités-sur-la-voie-série/chronogramme-dun-echange-sur-la-voie-serie.jpg"/&gt;
 &lt;figcaption&gt;
  Chronogramme d'un échange sur la voie série
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 C’est de cette manière là que la communication série fonctionne. D’ailleurs, savez-vous pourquoi la voie série s’appelle ainsi ? En fait, c’est parce que les données à transmettre sont envoyées une par une. Si l’on veut, elles sont à la queue leu-leu. Exactement comme une conversation entre deux personnes : la personne qui parle ne peut pas dire plusieurs phrases en même temps, ni plusieurs mots ou sons. Chaque élément se suit selon un ordre logique. L’image précédente résume la communication que l’on vient d’avoir, il n’y a plus qu’à la compléter pour envoyer la lettre "P".
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ha, je vois. Donc il y a le bit de start, notre lettre P et le bit de stop. D’après ce qu’on a dit, cela donnerait, dans l’ordre, ceci : 0 (Start) 01010000 (Données) et 1 (Stop).
   &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Eh bien… c’est presque ça. Sauf que les
 &lt;del&gt;
  petits malins
 &lt;/del&gt;
 ingénieurs qui ont inventé ce protocole ont eu la bonne idée de transmettre les données à l’envers… Par conséquent, la bonne réponse était : 0000010101. Avec un chronogramme, on observerait ceci :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Chronogramme de la transmission de la lettre 'P'" src="./images/uploaded/tuto-arduino-301-généralités-sur-la-voie-série/chronogramme-de-la-transmission-de-la-lettre-p.jpg"/&gt;
 &lt;figcaption&gt;
  Chronogramme de la transmission de la lettre 'P'
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="un-peu-de-vocabulaire"&gt;
 &lt;a aria-hidden="true" href="#un-peu-de-vocabulaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un peu de vocabulaire
&lt;/h5&gt;
&lt;p&gt;
 Avant de continuer à voir ce que compose le protocole RS-232, voyons un peu de vocabulaire, mais sans trop en abuser bien sûr !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Les données sont envoyées à l’envers, je le disais. Ce qu’il faut savoir c’est que le bit de donnée qui vient après le bit de start s’appelle le
 &lt;strong&gt;
  bit de poids faible
 &lt;/strong&gt;
 ou
 &lt;strong&gt;
  LSB
 &lt;/strong&gt;
 en anglais pour Less Significant Bit. C’est un peu comme un nombre qui a des unités (tout à droite), des dizaines, des centaines, des milliers (à gauche), etc.
&lt;/p&gt;
&lt;p&gt;
 Par exemple le nombre
 &lt;em&gt;
  6395
 &lt;/em&gt;
 possède 5 unités (à droite), 9 dizaines, 3 centaines et 6 milliers (à gauche). On peut faire référence au bit de poids faible en binaire qui est donc à droite. Plus on s’éloigne et plus on monte vers… le bit de
 &lt;strong&gt;
  poids fort
 &lt;/strong&gt;
 ou
 &lt;strong&gt;
  MSB
 &lt;/strong&gt;
 en anglais pour Most Significant Bit. Et comme les données sont envoyées à l’envers sur la liaisons série, on aura le bit de poids faible juste après le start, donc à gauche et le bit de poids fort à droite.
&lt;/p&gt;
&lt;p&gt;
 Avec le nombre précédent, si l’on devait le lire à l’envers cela donnerait : 5936. Bit de poids faible à gauche et à droite le bit de poids fort.
&lt;/p&gt;
&lt;div class="custom-block alert alert-danger"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Il est donc essentiel de savoir où est le bit de poids faible pour pouvoir lire les données à l’endroit. Sinon on se retrouve avec une donnée erronée !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Pour regrouper un peu tout ce que l’on a vu sur le protocole de la norme RS-232, voici une image le résumant :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Protocole de la norme RS-232" src="./images/uploaded/tuto-arduino-301-généralités-sur-la-voie-série/protocole-de-la-norme-rs-232.png"/&gt;
 &lt;figcaption&gt;
  Protocole de la norme RS-232 - (CC-SA,
  &lt;a href="http://commons.wikimedia.org/wiki/File:Rs232_oscilloscope_trace.svg"&gt;
   Ktnbn
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Vous devrez être capable de trouver quel est le caractère envoyé sur cette trame… alors ?
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 Indice : c’est une lettre… On lit les niveaux logiques de gauche à droite, soit 11010010 ; puis on les retourne soit 01001011 ; enfin on compare à la table ASCII et on trouve la lettre "K" majuscule. Attention aux tensions négatives qui correspondent à l’état logique 1 et les tensions positives à l’état logique 0.
&lt;/p&gt;
&lt;h5 id="la-vitesse"&gt;
 &lt;a aria-hidden="true" href="#la-vitesse"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La vitesse
&lt;/h5&gt;
&lt;p&gt;
 La norme RS-232 définit la vitesse à laquelle sont envoyée les données. Elles sont exprimés en bit par seconde (bit/s). Elle préconise des vitesse inférieures à 20 000 bits/s. Sauf qu’en pratique, il est très courant d’utiliser des débits supérieurs pouvant atteindre les 115 200 bits/s. Quand on va utiliser la voie série, on va définir la vitesse à laquelle sont transférées les données.
&lt;/p&gt;
&lt;p&gt;
 Cette vitesse dépend de plusieurs contraintes que sont : la longueur du câble utilisé reliant les deux interlocuteurs et la vitesse à laquelle les deux interlocuteurs peuvent se comprendre. Pour vous donner un ordre d’idée, je reprend le tableau fourni sur la page Wikipédia sur la norme RS-232 :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Débit en bit/s
      &lt;/th&gt;
      &lt;th&gt;
       Longueur du câble en mètres (m)
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       2 400
      &lt;/td&gt;
      &lt;td&gt;
       900
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       4 800
      &lt;/td&gt;
      &lt;td&gt;
       300
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       9 600
      &lt;/td&gt;
      &lt;td&gt;
       150
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       19 200
      &lt;/td&gt;
      &lt;td&gt;
       15
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Vitesses théoriques de la norme RS-232
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 Plus le câble est court, plus le débit pourra être élevé car moins il y a d’affaiblissement des tensions et de risque de parasites. Tandis que si la distance séparant les deux interlocuteurs grandie, la vitesse de communication diminuera de façon effective.
&lt;/p&gt;
&lt;h5 id="la-gestion-des-erreurs"&gt;
 &lt;a aria-hidden="true" href="#la-gestion-des-erreurs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La gestion des erreurs
&lt;/h5&gt;
&lt;p&gt;
 Malgré les tensions imposées par la norme, il arrive qu’il y ai d’autres parasites et que des erreurs de transmission surviennent. Pour limiter ce risque, il existe une solution. Elle consiste à ajouter un
 &lt;strong&gt;
  bit de parité
 &lt;/strong&gt;
 . Vous allez voir, c’est hyper simple !
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;p&gt;
 Juste avant le bit de stop, on va ajouter un bit qui sera pair ou impair. Donc, respectivement, soit un 0 soit un 1. Lorsque l’on utilisera la voie série, si l’on choisi une parité paire, alors le nombre de niveaux logiques 1 dans les données plus le bit de parité doit donner un nombre paire. Donc, dans le cas ou il y a 5 niveaux logiques 1 sans le bit de parité, ce dernier devra prendre un niveau logique 1 pour que le nombre de 1 dans le signal soit paire. Soit 6 au total :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Chronogramme pair" src="./images/uploaded/tuto-arduino-301-généralités-sur-la-voie-série/chronogramme-pair.jpg"/&gt;
 &lt;figcaption&gt;
  Chronogramme pair
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Dans le cas où l’on choisirait une parité impaire, alors dans le même signal où il y a 5 niveaux logiques 1, eh bien le bit de parité devra prendre la valeur qui garde un nombre impaire de 1 dans le signal. Soit un bit de parité égal à 0 dans notre cas :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Chronogramme impair" src="./images/uploaded/tuto-arduino-301-généralités-sur-la-voie-série/chronogramme-impair.jpg"/&gt;
 &lt;figcaption&gt;
  Chronogramme impair
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Après, c’est le récepteur qui va vérifier si le nombre de niveaux logiques 1 est bien égale à ce que indique le bit de parité. Dans le cas où une erreur de transmissions serait survenu, ce sera au récepteur de traiter le problème et de demander à son interlocuteur de répéter. Au fait, ne vous inquiétez pas, on aura l’occasion de voir tout ça plus tard dans les prochains chapitres. De quoi s’occuper en somme…
 &lt;img alt=":diable:" class="smiley" src="./static/smileys/diable.png"/&gt;
&lt;/p&gt;
&lt;h3 id="connexion-série-entre-arduino-et-"&gt;
 &lt;a aria-hidden="true" href="#connexion-série-entre-arduino-et-"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Connexion série entre Arduino et …
&lt;/h3&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Et on connecte quoi à où pour utiliser la voie série avec la carte Arduino et le PC ? C’est le même câblage ? Et on connecte où sur le PC ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Là, on va avoir le choix…
&lt;/p&gt;
&lt;h4 id="Émulation-du-port-série"&gt;
 &lt;a aria-hidden="true" href="#Émulation-du-port-série"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Émulation du port série
&lt;/h4&gt;
&lt;p&gt;
 Le premier objectif et le seul que nous mettrons en place dans le cours, va être de connecter et d’utiliser la voie série avec l’ordinateur. Pour cela, rien de plus simple, il n’y a que le câble USB à brancher entre la carte Arduino et le PC. En fait, la voie série va être
 &lt;strong&gt;
  émulée
 &lt;/strong&gt;
 à travers l’USB. C’est une forme virtuelle de cette liaison. Elle n’existe pas réellement, mais elle fonctionne comme si c’était bien une vraie voie série. Tout ça va être géré par un petit composant présent sur votre carte Arduino et le gestionnaire de port USB et périphérique de votre ordinateur.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Le composant entouré en rouge gère l'émulation de la voie série" src="./images/uploaded/tuto-arduino-301-généralités-sur-la-voie-série/le-composant-entoure-en-rouge-gere-lemulation-de-la-voie-serie.jpg"/&gt;
 &lt;figcaption&gt;
  Le composant entouré en rouge gère l'émulation de la voie série
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 C’est la solution la plus simple et celle que nous allons utiliser pour vos débuts.
&lt;/p&gt;
&lt;h4 id="arduino-et-un-autre-microcontrôleur"&gt;
 &lt;a aria-hidden="true" href="#arduino-et-un-autre-microcontrôleur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Arduino et un autre microcontrôleur
&lt;/h4&gt;
&lt;p&gt;
 On a un peu abordé ce sujet, au début de la présentation sur la voie série. Mais, on va voir un peu plus de choses. Le but de connecter deux microcontrôleur ensemble est de pouvoir les faire communiquer entre eux pour qu’ils puissent s’échanger des données.
&lt;/p&gt;
&lt;h5 id="la-tension-des-microcontrôleurs"&gt;
 &lt;a aria-hidden="true" href="#la-tension-des-microcontrôleurs"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La tension des microcontrôleurs
&lt;/h5&gt;
&lt;div class="text-center"&gt;
 &lt;div class="table-wrapper"&gt;
  &lt;table class=" table table-bordered table-striped"&gt;
   &lt;thead&gt;
    &lt;tr&gt;
     &lt;th&gt;
     &lt;/th&gt;
     &lt;th&gt;
      Tension
     &lt;/th&gt;
    &lt;/tr&gt;
   &lt;/thead&gt;
   &lt;tbody&gt;
    &lt;tr&gt;
     &lt;td&gt;
      NL0
     &lt;/td&gt;
     &lt;td&gt;
      0V
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td&gt;
      NL1
     &lt;/td&gt;
     &lt;td&gt;
      +5V
     &lt;/td&gt;
    &lt;/tr&gt;
   &lt;/tbody&gt;
  &lt;/table&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Contrairement à ce qu’impose la norme RS-232, les microcontrôleur ne peuvent pas utiliser des tensions négatives. Du coup, ils utilisent les seuls et uniques tensions qu’ils peuvent utiliser, à savoir le 0V et le +5V. Il y a donc quelques petits changement au niveau de la transmission série.
&lt;/p&gt;
&lt;p&gt;
 Un niveau logique 0 correspond à une tension de 0V et un niveau logique 1 correspond à une tension de +5V (cf. tableau ci-contre). Fort heureusement, comme les microcontrôleurs utilisent quasiment tous cette norme, il n’y a aucun problème à connecter deux microcontrôleurs entre-eux. Cette norme s’appelle alors UART pour
 &lt;strong&gt;
  U
 &lt;/strong&gt;
 niversal
 &lt;strong&gt;
  A
 &lt;/strong&gt;
 synchronous
 &lt;strong&gt;
  R
 &lt;/strong&gt;
 eceiver
 &lt;strong&gt;
  T
 &lt;/strong&gt;
 ransmitter plutôt que RS232. Hormis les tensions électriques et le connecteur, c’est la même chose !
&lt;/p&gt;
&lt;h5 id="croisement-de-données"&gt;
 &lt;a aria-hidden="true" href="#croisement-de-données"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Croisement de données
&lt;/h5&gt;
&lt;p&gt;
 Il va simplement falloir faire attention à bien croiser les fils. On connecte le Tx (broche de transmission) d’un microcontrôleur au Rx (broche de réception) de l’autre microcontrôleur. Et inversement, le Tx de l’autre au Rx du premier. Et bien sûr, la masse à la masse pour faire une référence commune. Exactement comme le premier schéma que je vous ai montré :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Deux Arduino reliées entre elles" src="./images/uploaded/tuto-arduino-301-généralités-sur-la-voie-série/deux-arduino-reliees-entre-elles.png"/&gt;
 &lt;figcaption&gt;
  Deux Arduino reliées entre elles
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Tx
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mo&gt;
        →
       &lt;/mo&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       \rightarrow
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.36687em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.36687em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mrel"&gt;
      →
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 Rx, fil vert || Rx
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mo&gt;
        →
       &lt;/mo&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       \rightarrow
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.36687em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.36687em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mrel"&gt;
      →
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 Tx, fil orange Masse
 &lt;span class="inlineMath"&gt;
  &lt;span class="katex"&gt;
   &lt;span class="katex-mathml"&gt;
    &lt;math&gt;
     &lt;semantics&gt;
      &lt;mrow&gt;
       &lt;mo&gt;
        →
       &lt;/mo&gt;
      &lt;/mrow&gt;
      &lt;annotation encoding="application/x-tex"&gt;
       \rightarrow
      &lt;/annotation&gt;
     &lt;/semantics&gt;
    &lt;/math&gt;
   &lt;/span&gt;
   &lt;span aria-hidden="true" class="katex-html"&gt;
    &lt;span class="strut" style="height:0.36687em;"&gt;
    &lt;/span&gt;
    &lt;span class="strut bottom" style="height:0.36687em;vertical-align:0em;"&gt;
    &lt;/span&gt;
    &lt;span class="base"&gt;
     &lt;span class="mrel"&gt;
      →
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
 &lt;/span&gt;
 Masse, fil noir
&lt;/p&gt;
&lt;p&gt;
 La couleur des fils importe peu, évidemment !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
&lt;/p&gt;
&lt;h4 id="arduino-au-pc"&gt;
 &lt;a aria-hidden="true" href="#arduino-au-pc"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Arduino au PC
&lt;/h4&gt;
&lt;h5 id="le-connecteur-série-ou-sortie-db9"&gt;
 &lt;a aria-hidden="true" href="#le-connecteur-série-ou-sortie-db9"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le connecteur série (ou sortie DB9)
&lt;/h5&gt;
&lt;p&gt;
 Alors là, les enfants, je vous parle d’un temps que les moins de vingt ans ne peuvent pas connaittttrrreuhhh… Bon on reprend ! Comme énoncé, je vous parle de quelque chose qui n’existe presque plus. Ou du moins, vous ne trouverez certainement plus cette "chose" sur la connectique de votre ordinateur. En effet, je vais vous parler du connecteur DB9 (ou DE9). Il y a quelques années, l’USB n’était pas si véloce et surtout pas tant répandu. Beaucoup de matériels (surtout d’un point de vue industriel) utilisaient la voie série (et le font encore).
&lt;/p&gt;
&lt;p&gt;
 À l’époque, les équipements se branchaient sur ce qu’on appelle une prise DB9 (9 car 9 broches). Sachez simplement que ce nom est attribué à un connecteur qui permet de relier divers matériels informatiques entre eux.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Connecteur DB9 Mâle" src="./images/uploaded/tuto-arduino-301-généralités-sur-la-voie-série/connecteur-db9-male.jpg"/&gt;
 &lt;figcaption&gt;
  Connecteur DB9 Mâle
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="Connecteur DB9 Femelle" src="./images/uploaded/tuto-arduino-301-généralités-sur-la-voie-série/connecteur-db9-femelle.jpg"/&gt;
 &lt;figcaption&gt;
  Connecteur DB9 Femelle - (CC-BY-SA,
  &lt;a href="http://commons.wikimedia.org/wiki/File:RS-232.jpeg"&gt;
   Faxe
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Photos extraites du site Wikipédia - Connecteur DB9 Mâle à gauche ; Femelle à droite
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   A quoi ça sert ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Si je vous parle de ça dans le chapitre sur la voie série, c’est qu’il doit y avoir un lien, non ?
 &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
 Juste, car la voie série (je parle là de la transmission des données) est véhiculée par ce connecteur dans la norme RS-232. Donc, notre ordinateur dispose d’un connecteur DB9, qui permet de relier, via un câble adapté, sa connexion série à un autre matériel. Avant, donc, lorsqu’il était très répandu, on utilisait beaucoup ce connecteur. D’ailleurs, la première version de la carte Arduino disposait d’un tel connecteur !
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="La première version de la carte Arduino, avec un connecteur DB9" src="./images/uploaded/tuto-arduino-301-généralités-sur-la-voie-série/la-premiere-version-de-la-carte-arduino-avec-un-connecteur-db9.jpg"/&gt;
 &lt;figcaption&gt;
  La première version de la carte Arduino, avec un connecteur DB9 - (CC-BY-SA,
  &lt;a href="http://arduino.cc/en/Main/Boards"&gt;
   arduino.cc
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Aujourd’hui, le connecteur DB9 a déjà bien disparu mais reste présent sur les "vieux" ordinateurs ou sur d’autres appareils utilisant la voie série. C’est pourquoi, le jour où vous aurez besoin de communiquer avec un tel dispositif, il vous faudra faire un peu d’électronique…
&lt;/p&gt;
&lt;h5 id="une-petite-histoire-dadaptation"&gt;
 &lt;a aria-hidden="true" href="#une-petite-histoire-dadaptation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Une petite histoire d’adaptation
&lt;/h5&gt;
&lt;p&gt;
 Si vous avez donc l’occasion de connecter votre carte Arduino à un quelconque dispositif utilisant la voie série, il va falloir faire attention aux tensions…oui, encore elles ! Je l’ai déjà dis, un microcontrôleur utilise des tensions de 0V et 5V, qu’on appel
 &lt;abbr title="Transistor-Transistor Logic"&gt;
  TTL
 &lt;/abbr&gt;
 . Hors, la norme RS-232 impose des tensions positives et négatives comprise en +/-3V et +/-25V. Il va donc falloir adapter ces tensions. Pour cela, il existe un composant très courant et très utilisé dans ce type de cas, qu’est le MAX232.
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;p&gt;
  &lt;a href="http://www.ti.com/lit/ds/symlink/max232.pdf"&gt;
   Datasheet du MAX232
  &lt;/a&gt;
 &lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;
 Je vous laisse regarder la datasheet et comprendre un peu le fonctionnement. Aussi, je vous met un schéma, extrait du site internet sonelec-musique.com :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Câblage du MAX232" src="./images/uploaded/tuto-arduino-301-généralités-sur-la-voie-série/cablage-du-max232.jpg"/&gt;
 &lt;figcaption&gt;
  Câblage du MAX232 - (Autorisation de reproduction par l’auteur, Rémy,
  &lt;a href="http://sonelec-musique.com/images/max232_001.gif"&gt;
   source
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Le principe de ce composant, utilisé avec quelques condensateur, est d’adapter les signaux de la voie série d’un microcontrôleur vers des tensions aux standards de la norme RS-232 et inversement. Ainsi, une fois le montage installé, vous n’avez plus à vous soucier de savoir quelle tension il faut, etc…
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Lien entre microcontrôleur et MAX232" src="./images/uploaded/tuto-arduino-301-généralités-sur-la-voie-série/lien-entre-microcontroleur-et-max232.jpg"/&gt;
 &lt;figcaption&gt;
  Lien entre microcontrôleur et MAX232
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-danger"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   En revanche, n’utilisez jamais ce composant pour relier deux microcontrôleurs entre eux ! Vous risqueriez d’en griller un. Ou alors il faut utiliser deux fois ce composant (un pour
   &lt;abbr title="Transistor-Transistor Logic"&gt;
    TTL
   &lt;/abbr&gt;
   &lt;span class="inlineMath"&gt;
    &lt;span class="katex"&gt;
     &lt;span class="katex-mathml"&gt;
      &lt;math&gt;
       &lt;semantics&gt;
        &lt;mrow&gt;
         &lt;mo&gt;
          →
         &lt;/mo&gt;
        &lt;/mrow&gt;
        &lt;annotation encoding="application/x-tex"&gt;
         \rightarrow
        &lt;/annotation&gt;
       &lt;/semantics&gt;
      &lt;/math&gt;
     &lt;/span&gt;
     &lt;span aria-hidden="true" class="katex-html"&gt;
      &lt;span class="strut" style="height:0.36687em;"&gt;
      &lt;/span&gt;
      &lt;span class="strut bottom" style="height:0.36687em;vertical-align:0em;"&gt;
      &lt;/span&gt;
      &lt;span class="base"&gt;
       &lt;span class="mrel"&gt;
        →
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
   RS232 et l’autre pour RS232
   &lt;span class="inlineMath"&gt;
    &lt;span class="katex"&gt;
     &lt;span class="katex-mathml"&gt;
      &lt;math&gt;
       &lt;semantics&gt;
        &lt;mrow&gt;
         &lt;mo&gt;
          →
         &lt;/mo&gt;
        &lt;/mrow&gt;
        &lt;annotation encoding="application/x-tex"&gt;
         \rightarrow
        &lt;/annotation&gt;
       &lt;/semantics&gt;
      &lt;/math&gt;
     &lt;/span&gt;
     &lt;span aria-hidden="true" class="katex-html"&gt;
      &lt;span class="strut" style="height:0.36687em;"&gt;
      &lt;/span&gt;
      &lt;span class="strut bottom" style="height:0.36687em;vertical-align:0em;"&gt;
      &lt;/span&gt;
      &lt;span class="base"&gt;
       &lt;span class="mrel"&gt;
        →
       &lt;/span&gt;
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
   &lt;abbr title="Transistor-Transistor Logic"&gt;
    TTL
   &lt;/abbr&gt;
   &amp;gt;_&amp;lt; ), mais cela deviendrait alors peu utile.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Donc en sortie du MAX232, vous aurez les signaux Rx et Tx au standard RS-232. Elles dépendent de son alimentation et sont en générale centrées autour de +/-12V. Vous pourrez par exemple connecter un connecteur DB9 à la sortie du MAX232 et relier la carte Arduino à un dispositif utilisant lui aussi la voie série et un connecteur DB9. Ou même à un dispositif n’utilisant pas de connecteur DB9 mais un autre (dont il faudra connaitre le brochage) et qui utilise la voie série.
&lt;/p&gt;
&lt;h3 id="au-delà-darduino-avec-la-connexion-série"&gt;
 &lt;a aria-hidden="true" href="#au-delà-darduino-avec-la-connexion-série"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Au delà d’Arduino avec la connexion série
&lt;/h3&gt;
&lt;p&gt;
 Voici une petite annexe qui va vous présenter un peu l’utilisation du vrai port série. Je ne vous oblige pas à la lire, elle n’est pas indispensable et peu seulement servir si vous avez un jour besoin de communiquer avec un dispositif qui exploite cette voie série.
&lt;/p&gt;
&lt;h4 id="le-connecteur-série-ou-sortie-db9-1"&gt;
 &lt;a aria-hidden="true" href="#le-connecteur-série-ou-sortie-db9-1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le connecteur série (ou sortie DB9)
&lt;/h4&gt;
&lt;h5 id="le-brochage-au-complet"&gt;
 &lt;a aria-hidden="true" href="#le-brochage-au-complet"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le brochage au complet !
&lt;/h5&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Oui, je veux savoir pourquoi il possède tant de broches puisque tu nous as dit que la voie série n’utilisait que 3 fils.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Eh bien, toutes ces broches ont une fonction bien précise. Je vais vous les décrire, ensuite on verra plus en détail ce que l’on peut faire avec :
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
  &lt;strong&gt;
   &lt;abbr title="Carrier Detect"&gt;
    DCD
   &lt;/abbr&gt;
  &lt;/strong&gt;
  : Détection d’un signal sur la ligne. Utilisée uniquement pour la connexion de l’ordinateur à un modem ; détecte la porteuse
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   &lt;abbr title="Receive Data"&gt;
    RXD
   &lt;/abbr&gt;
  &lt;/strong&gt;
  : Broche de réception des données
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   &lt;abbr title="Transmit Data"&gt;
    TXD
   &lt;/abbr&gt;
  &lt;/strong&gt;
  : Broche de transmission des données
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   &lt;abbr title="Data Terminal Ready"&gt;
    DTR
   &lt;/abbr&gt;
  &lt;/strong&gt;
  : Le support qui veut recevoir des données se déclare prêt à "écouter" l’autre
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   GND
  &lt;/strong&gt;
  : Le référentiel électrique commun ; la masse
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   DSR
  &lt;/strong&gt;
  : Le support voulant transmettre déclare avoir des choses à dire
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   &lt;abbr title="Request To Send"&gt;
    RTS
   &lt;/abbr&gt;
  &lt;/strong&gt;
  : Le support voulant transmettre des données indique qu’il voudrait communiquer
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   &lt;abbr title="Clear To Send"&gt;
    CTS
   &lt;/abbr&gt;
  &lt;/strong&gt;
  : Invitation à émettre. Le support de réception attend des données
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   &lt;abbr title="Ring Indicator"&gt;
    RI
   &lt;/abbr&gt;
  &lt;/strong&gt;
  : Très peu utilisé, indiquait la sonnerie dans le cas des modems RS232
 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
 Vous voyez déjà un aperçu de ce que vous pouvez faire avec toutes ces broches. Mais parlons-en plus amplement.
&lt;/p&gt;
&lt;h4 id="désolé-je-suis-occupé"&gt;
 &lt;a aria-hidden="true" href="#désolé-je-suis-occupé"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Désolé, je suis occupé…
&lt;/h4&gt;
&lt;p&gt;
 Dans certains cas, et il n’est pas rare, les dispositifs communicant entre eux par l’intermédiaire de la voie série ne traitent pas les données à la même vitesse. Tout comme lorsque l’on communique avec quelqu’un, il arrive parfois qu’il n’arrive plus à suivre ce que l’on dit car il en prend des notes. Il s’annonce alors indisponible à recevoir plus d’informations. Dès qu’il est à nouveau prêt, il nous le fait savoir. Il y a un moyen, mis en place grâce à certaines broches du connecteur pour effectuer ce genre d’opération que l’on appelle le
 &lt;strong&gt;
  contrôle de flux
 &lt;/strong&gt;
 . Il y a deux manières d’utiliser un contrôle de flux, nous allons les voir tout de suite.
&lt;/p&gt;
&lt;h5 id="contrôle-de-flux-logiciel"&gt;
 &lt;a aria-hidden="true" href="#contrôle-de-flux-logiciel"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Contrôle de flux logiciel
&lt;/h5&gt;
&lt;p&gt;
 Commençons par le contrôle de flux logiciel, plus simple à utiliser que le contrôle de flux matériel. En effet, il ne nécessite que trois fils : la masse, le Rx et le TX. Eh oui, ni plus ni moins, tout se passe logiciellement. Le fonctionnement très simple de ce contrôle de flux utilise des caractères de la table ASCII, le caractère 17 et 19, respectivement nommés
 &lt;strong&gt;
  XON
 &lt;/strong&gt;
 et
 &lt;strong&gt;
  XOFF
 &lt;/strong&gt;
 . Ceci se passe entre un équipement E, qui est l’émetteur, et un équipement R, qui est récepteur. Le récepteur reçoit des informations, il les traite et stockent celles qui continuent d’arriver en attendant de les traiter. Mais lorsqu’il ne peut plus stocker d’informations, le récepteur envoie le caractère XOFF pour indiquer à l’émetteur qu’il sature et qu’il n’est plus en mesure de recevoir d’autres informations. Lorsqu’il est à nouveau apte à traiter les informations, il envoie le caractère XON pour dire à l’émetteur qu’il est à nouveau prêt à écouter ce que l’émetteur à a lui dire.
&lt;/p&gt;
&lt;h5 id="contrôle-de-flux-matériel"&gt;
 &lt;a aria-hidden="true" href="#contrôle-de-flux-matériel"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Contrôle de flux matériel
&lt;/h5&gt;
&lt;p&gt;
 On n’utilisera pas le contrôle de flux matériel avec Arduino car la carte n’en est pas équipée, mais il est bon pour vous que vous sachiez ce que c’est. Je ne parlerai en revanche que du contrôle matériel à 5 fils. Il en existe un autre qui utilise 9 fils. Le principe est le même que pour le contrôle logiciel. Cependant, on utilise certaines broches du connecteur DB9 dont je parlais plus haut. Ces broches sont
 &lt;strong&gt;
  &lt;abbr title="Request To Send"&gt;
   RTS
  &lt;/abbr&gt;
 &lt;/strong&gt;
 et
 &lt;strong&gt;
  &lt;abbr title="Clear To Send"&gt;
   CTS
  &lt;/abbr&gt;
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Connexion avec contrôle de flux" src="./images/uploaded/tuto-arduino-301-généralités-sur-la-voie-série/connexion-avec-controle-de-flux.jpg"/&gt;
 &lt;figcaption&gt;
  Connexion avec contrôle de flux
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Voilà le branchement adéquat pour utilise ce contrôle de flux matériel à 5 fils. Une transmission s’effectue de la manière suivante :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Le dispositif 1, que je nommerais maintenant
  &lt;em&gt;
   l’émetteur
  &lt;/em&gt;
  , met un état logique 0 sur sa broche RTS1. Il demande donc au dispositif 2,
  &lt;em&gt;
   le récepteur
  &lt;/em&gt;
  , pour émettre des données.
 &lt;/li&gt;
 &lt;li&gt;
  Si le récepteur est prêt à recevoir des données, alors il met un niveau logique 0 sur sa broche RTS2.
 &lt;/li&gt;
 &lt;li&gt;
  Les deux dispositifs sont prêts, l’émetteur peut donc envoyer les données qu’il a à transmettre.
 &lt;/li&gt;
 &lt;li&gt;
  Une fois les données envoyées, l’émetteur passe à 1 l’état logique présent sur sa broche RTS1.
 &lt;/li&gt;
 &lt;li&gt;
  Le récepteur voit ce changement d’état et sait donc que c’est la fin de la communication des données, il passe alors l’état logique de sa broche RTS2 à 1.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Ce contrôle n’est pas très compliqué et est utilisé lorsque le contrôle de flux logiciel ne l’est pas.
&lt;/p&gt;
&lt;h4 id="avec-ou-sans-horloge"&gt;
 &lt;a aria-hidden="true" href="#avec-ou-sans-horloge"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Avec ou sans horloge ?
&lt;/h4&gt;
&lt;p&gt;
 Pour terminer, faisons une petite ouverture sur d’autres liaisons séries célèbres…
&lt;/p&gt;
&lt;h5 id="lusb"&gt;
 &lt;a aria-hidden="true" href="#lusb"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’USB
&lt;/h5&gt;
&lt;p&gt;
 On la côtoie tout les jours sans s’en soucier et pourtant elle nous entoure : C’est la liaison USB ! Comme son nom l’indique, Universal Serial Bus, il s’agit bien d’une voie série. Cette dernière existe en trois versions. La dernière, la 3.1, vient juste de sortir. Une des particularités de cette voie série est qu’elle se propose de livrer l’alimentation de l’équipement avec lequel elle communique. Par exemple votre ordinateur peut alimenter votre disque dur portable et en même temps lui demander des fichiers. Dans le cas de l’USB, la communication se fait de manière "maître-esclave". C’est l’hôte (l’ordinateur) qui demande des informations à l’esclave (le disque dur). Tant qu’il n’a pas été interrogé, ce dernier n’est pas censé parler. Afin de s’y retrouver, chaque périphérique se voit attribuer une adresse. La transmission électrique se fait grâce à un procédé "différentiel" entre deux fils, D+ et D-, afin de limiter les parasites.
&lt;/p&gt;
&lt;h5 id="li2c"&gt;
 &lt;a aria-hidden="true" href="#li2c"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’I2C
&lt;/h5&gt;
&lt;p&gt;
 L’I²C est un autre protocole de communication qui fut tout d’abord propriétaire (inventé par Philips) et né de la nécessité d’interfacer de plus en plus de microcontrôleurs. En effet, à ce moment là une voie série "classique" ne suffisait plus car elle ne pouvait relier que deux à deux les microcontrôleurs. La particularité de cette liaison est qu’elle transporte son propre signal d’horloge. Ainsi, la vitesse n’a pas besoin d’être connu d’avance. Les données sont transportées en même temps que l’horloge grâce à deux fils : SDA (Data) et SCL (Clock). Comme pour l’USB, la communication se fait sur un système de maître/esclave.
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Envoyer et recevoir des données sur la voie série</title><link href="https://eskimon.fr/tuto-arduino-302-envoyer-et-recevoir-des-donn%C3%A9es-sur-la-voie-s%C3%A9rie" rel="alternate"></link><published>2013-12-10T20:03:00+01:00</published><updated>2013-12-10T20:03:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-10:/tuto-arduino-302-envoyer-et-recevoir-des-données-sur-la-voie-série</id><summary type="html">&lt;p&gt;
 Dans ce chapitre, nous allons apprendre à utiliser la voie série avec Arduino. Nous allons voir comment envoyer puis recevoir des informations avec l’ordinateur, enfin nous ferons quelques exercices pour vérifier que vous avez tout compris.
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 Vous allez le découvrir bientôt, l’utilisation de la voie série avec Arduino …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Dans ce chapitre, nous allons apprendre à utiliser la voie série avec Arduino. Nous allons voir comment envoyer puis recevoir des informations avec l’ordinateur, enfin nous ferons quelques exercices pour vérifier que vous avez tout compris.
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 Vous allez le découvrir bientôt, l’utilisation de la voie série avec Arduino est quasiment un jeu d’enfant, puisque tout est opaque aux yeux de l’utilisateur…
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#préparer-la-voie-série"&gt;
    Préparer la voie série
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#du-côté-de-lordinateur"&gt;
     Du côté de l’ordinateur
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#du-côté-du-programme"&gt;
      Du côté du programme
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#lobjet-serial"&gt;
       L’objet Serial
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-setup"&gt;
       Le setup
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#envoyer-des-données"&gt;
    Envoyer des données
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#appréhender-lobjet-serial"&gt;
      Appréhender l’objet Serial
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#phrase-caractère"&gt;
       Phrase ? Caractère ?
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#println"&gt;
       println()
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#la-fonction-print-en-détail"&gt;
      La fonction print() en détail
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#envoyer-des-nombres"&gt;
       Envoyer des nombres
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#envoyer-la-valeur-dune-variable"&gt;
       Envoyer la valeur d’une variable
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#envoyer-dautres-données"&gt;
       Envoyer d’autres données
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#exercice-envoyer-lalphabet"&gt;
      Exercice : Envoyer l’alphabet
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#objectif"&gt;
       Objectif
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#correction"&gt;
       Correction
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#recevoir-des-données"&gt;
    Recevoir des données
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#réception-de-données"&gt;
      Réception de données
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#on-ma-parlé"&gt;
       On m’a parlé ?
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#lire-les-données-reçues"&gt;
       Lire les données reçues
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-serialevent"&gt;
       Le serialEvent
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#exemple-de-code-complet"&gt;
     Exemple de code complet
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#exercice-attention-à-la-casse"&gt;
    Exercice Attention à la casse !
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#consigne"&gt;
     Consigne
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#correction-1"&gt;
      Correction
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#la-fonction-setup-et-les-variables-utiles"&gt;
       La fonction setup() et les variables utiles
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-programme"&gt;
       Le programme
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="préparer-la-voie-série"&gt;
 &lt;a aria-hidden="true" href="#préparer-la-voie-série"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Préparer la voie série
&lt;/h3&gt;
&lt;p&gt;
 Notre objectif, pour le moment, est de communiquer des informations de la carte Arduino vers l’ordinateur et inversement. Pour ce faire, on va d’abord devoir préparer le terrain.
&lt;/p&gt;
&lt;h4 id="du-côté-de-lordinateur"&gt;
 &lt;a aria-hidden="true" href="#du-côté-de-lordinateur"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Du côté de l’ordinateur
&lt;/h4&gt;
&lt;p&gt;
 Pour pouvoir utiliser la communication de l’ordinateur, rien de plus simple. En effet, L’environnement de développement Arduino propose de base un outil pour communiquer. Pour cela, il suffit de cliquer sur le bouton
 &lt;img alt="Icône de la voie série" src="./images/uploaded/tuto-arduino-302-envoyer-et-recevoir-des-données-sur-la-voie-série/icone-de-la-voie-serie.jpg"/&gt;
 (pour les versions antérieures à la version 1.0) dans la barre de menu pour démarrer l’outil. Pour la version 1.0, l’icône a changé et de place et de visuel :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Sélection moniteur série" src="./images/uploaded/tuto-arduino-302-envoyer-et-recevoir-des-données-sur-la-voie-série/selection-moniteur-serie.jpg"/&gt;
 &lt;figcaption&gt;
  Sélection moniteur série
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Une nouvelle fenêtre s’ouvre : c’est le
 &lt;strong&gt;
  terminal série
 &lt;/strong&gt;
 :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;img alt="Voie série, vitesse" src="./images/uploaded/tuto-arduino-302-envoyer-et-recevoir-des-données-sur-la-voie-série/voie-serie-vitesse.jpg"/&gt;
  &lt;figcaption&gt;
   Voie série, vitesse
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 Dans cette fenêtre, vous allez pouvoir envoyer des messages sur la voie série de votre ordinateur (qui est émulée
 &lt;sup id="fnref-1-pPrPIX8h4Y"&gt;
  &lt;a class="footnote-ref" href="#fn-1-pPrPIX8h4Y"&gt;
   1
  &lt;/a&gt;
 &lt;/sup&gt;
 par l’Arduino) ; recevoir les messages que votre Arduino vous envoie ; et régler deux trois paramètres tels que la vitesse de communication avec l’Arduino et l’autoscroll qui fait défiler le texte automatiquement. On verra plus loin à quoi sert le dernier réglage.
&lt;/p&gt;
&lt;h4 id="du-côté-du-programme"&gt;
 &lt;a aria-hidden="true" href="#du-côté-du-programme"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Du côté du programme
&lt;/h4&gt;
&lt;h5 id="lobjet-serial"&gt;
 &lt;a aria-hidden="true" href="#lobjet-serial"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’objet
 &lt;em&gt;
  Serial
 &lt;/em&gt;
&lt;/h5&gt;
&lt;p&gt;
 Pour utiliser la voie série et communiquer avec notre ordinateur (par exemple), nous allons utiliser un
 &lt;em&gt;
  objet
 &lt;/em&gt;
 (une sorte de variable mais plus évoluée) qui est intégré nativement dans l’ensemble Arduino : l’objet
 &lt;strong&gt;
  Serial
 &lt;/strong&gt;
 .
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Pour le moment,
   &lt;em&gt;
    considérez qu’un objet est une variable évoluée qui peut exécuter plusieurs fonctions
   &lt;/em&gt;
   . On verra (beaucoup) plus loin ce que sont réellement des objets. On apprendra à en créer et à les utiliser lorsque l’on abordera le logiciel
   &lt;a href="http://processing.org/"&gt;
    Processing
   &lt;/a&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Cet objet rassemble des informations (vitesse, bits de données, etc.) et des fonctions (envoi, lecture de réception,…) sur ce qu’est une voie série pour Arduino. Ainsi, pas besoin pour le programmeur de recréer tous le protocole (sinon on aurait du écrire nous même TOUT le protocole, tel que "Ecrire un bit haut pendant 1 ms, puis 1 bit bas pendant 1 ms, puis le caractère 'a' en 8 ms…), bref, on gagne un temps fou et on évite les bugs !
&lt;/p&gt;
&lt;h5 id="le-setup"&gt;
 &lt;a aria-hidden="true" href="#le-setup"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le setup
&lt;/h5&gt;
&lt;p&gt;
 Pour commencer, nous allons donc initialiser l’objet Serial. Ce code sera à copier à chaque fois que vous allez créer un programme qui utilise la voie série. Le logiciel Arduino à prévu, dans sa
 &lt;em&gt;
  bibliothèque Serial
 &lt;/em&gt;
 , tout un tas de fonctions qui vont nous êtres très utiles, voir même indispensables afin de bien utiliser la voie série. Ces fonctions, je vous les laisse découvrir par vous même si vous le souhaitez, elles se trouvent sur
 &lt;a href="http://arduino.cc/en/Reference/Serial"&gt;
  cette page
 &lt;/a&gt;
 . Dans le but de créer une communication entre votre ordinateur et votre carte Arduino, il faut déclarer cette nouvelle communication et définir la vitesse à laquelle ces deux dispositifs vont communiquer. Et oui, si la vitesse est différente, l’Arduino ne comprendra pas ce que veut lui transmettre l’ordinateur et vice versa ! Ce réglage va donc se faire dans la fonction setup, en utilisant la fonction
 &lt;code&gt;
  begin()
 &lt;/code&gt;
 de l’objet Serial.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Lors d’une communication informatique, une vitesse peut s’exprimer en
   &lt;strong&gt;
    bits par seconde
   &lt;/strong&gt;
   (bps) ou en
   &lt;strong&gt;
    bauds
   &lt;/strong&gt;
   . Ainsi, pour une vitesse de 9600 bps on enverra jusqu’à 9600 '0' ou '1' en une seule seconde. Les vitesses les plus courantes sont 9600, 19200 et 115200 bits par seconde. Le baud quant à lui correspond aux nombre de
   &lt;em&gt;
    symboles
   &lt;/em&gt;
   par seconde. Ici, un symbole correspond à une transmission de 8 bits. Donc pour une vitesse de 9600 bps on peut aussi dire qu’on transmet à 1200 bauds (9600/8).
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on démarre la liaison&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// en la réglant à une vitesse de 9600 bits par seconde.&lt;/span&gt;
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Démarrage de la liaison série
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 À présent, votre carte Arduino a ouvert une nouvelle communication vers l’ordinateur. Ils vont pouvoir communiquer ensemble.
&lt;/p&gt;
&lt;h3 id="envoyer-des-données"&gt;
 &lt;a aria-hidden="true" href="#envoyer-des-données"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Envoyer des données
&lt;/h3&gt;
&lt;p&gt;
 Le titre est piégeur, en effet, cela peut être l’Arduino qui envoie des données ou l’ordinateur. Bon, on est pas non plus dénué d’une certaine logique puisque pour envoyé des données à partir de l’ordinateur vers la carte Arduino il suffit d’ouvrir le terminal série et de taper le texte dedans !
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 Donc, on va bien programmer et voir comment faire pour que votre carte Arduino envoie des données à l’ordinateur.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Et ces données, elles proviennent d’où ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Eh bien de la carte Arduino… En fait, lorsque l’on utilise la voie série pour transmettre de l’information, c’est qu’on en a de l’information à envoyer, sinon cela ne sert à rien. Ces informations proviennent généralement de capteurs connectés à la carte ou de son programme (par exemple la valeur d’une variable). La carte Arduino traite les informations provenant de ces capteurs, s’il faut elle adapte ces informations, puis elle les transmet. On aura l’occasion de faire ça dans la partie dédiée aux capteurs, comme afficher la température sur son écran, l’heure, le passage d’une personne, etc.
&lt;/p&gt;
&lt;h4 id="appréhender-lobjet-serial"&gt;
 &lt;a aria-hidden="true" href="#appréhender-lobjet-serial"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Appréhender l’objet Serial
&lt;/h4&gt;
&lt;p&gt;
 Dans un premier temps, nous allons utiliser l’objet Serial pour tester quelques envois de données. Puis nous nous attèlerons à un petit exercice que vous ferez seul ou presque, du moins vous aurez eu auparavant assez d’informations pour pouvoir le réaliser (ben oui, sinon c’est plus un exercice !).
&lt;/p&gt;
&lt;h5 id="phrase-caractère"&gt;
 &lt;a aria-hidden="true" href="#phrase-caractère"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Phrase ? Caractère ?
&lt;/h5&gt;
&lt;p&gt;
 On va commencer par envoyer un caractère et une phrase. À ce propos, savez-vous quelle est la correspondance entre un caractère et une phrase ? Une phrase est constituée de caractères les uns à la suite des autres. En programmation, on parle plutôt de
 &lt;strong&gt;
  chaine caractères
 &lt;/strong&gt;
 pour désigner une phrase.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Un caractère seul s’écrit entre guillemets simples : 'A’, 'a’, '2’, '!’, …
 &lt;/li&gt;
 &lt;li&gt;
  Une phrase est une suite de caractère et s’écrit entre guillemets doubles : "Salut tout le monde", "J’ai 42 ans", "Vive Clem' !"
 &lt;/li&gt;
&lt;/ul&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Pour vous garantir un succès dans le monde de l’informatique, essayez d’y penser et de respecter cette convention, écrire 'A' ce n’est pas pareil qu’écrire "A" !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="println"&gt;
 &lt;a aria-hidden="true" href="#println"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 &lt;code&gt;
  println()
 &lt;/code&gt;
&lt;/h5&gt;
&lt;p&gt;
 La fonction que l’on va utiliser pour débuter, s’agit de
 &lt;code&gt;
  println()
 &lt;/code&gt;
 . Ces deux fonctions sont quasiment identiques, mais à quoi servent-elles ?
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;code&gt;
   print()
  &lt;/code&gt;
  : cette fonction permet d’envoyer des données sur la voie série. On peut par exemple envoyer un caractère, une chaine de caractère ou d’autres données dont je ne vous ai pas encore parlé.
 &lt;/li&gt;
 &lt;li&gt;
  &lt;code&gt;
   println()
  &lt;/code&gt;
  : c’est la même fonction que la précédente, elle permet simplement un retour à la ligne à la fin du message envoyé.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Pour utiliser ces fonctions, rien de plus simple :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;Serial.print(&lt;span class="hljs-string"&gt;"Salut ca zeste ?!"&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Bien sûr, au préalable, vous devrez avoir "déclaré/créé" votre objet Serial et définis une valeur de vitesse de communication :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// création de l'objet Serial&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// (=établissement d'une nouvelle communication série)&lt;/span&gt;
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// envoie de la chaine "Salut ca zeste ?!" sur la voie série&lt;/span&gt;
    Serial.print(&lt;span class="hljs-string"&gt;"Salut ca zeste ?!"&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Envoi d’un message simple via la liaison série
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Cet objet, parlons-en. Pour vous aider à représenter de façon plus concise ce qu’est l’objet Serial, je vous propose cette petite illustration de mon cru :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="L'objet Serial" src="./images/uploaded/tuto-arduino-302-envoyer-et-recevoir-des-données-sur-la-voie-série/lobjet-serial.jpg"/&gt;
 &lt;figcaption&gt;
  L'objet Serial
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Comme je vous le présente, l’objet Serial est muni d’un panel de fonctions qui lui sont propres. Cet objet est capable de réaliser ces fonctions selon ce que le programme lui ordonne de faire. Donc, par exemple, quand j’écris :
 &lt;code&gt;
  print()
 &lt;/code&gt;
 en lui passant pour paramètre la chaine de caractère : "Salut ca zeste ?!". On peut compléter le code précédent comme ceci :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);

    &lt;span class="hljs-comment"&gt;// l'objet exécute une première fonction&lt;/span&gt;
    Serial.print(&lt;span class="hljs-string"&gt;"Salut ca zeste ?!"&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// puis une deuxième fonction, différente cette fois-ci&lt;/span&gt;
    Serial.println(&lt;span class="hljs-string"&gt;"Vive Clem' !"&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// et exécute à nouveau la même&lt;/span&gt;
    Serial.println(&lt;span class="hljs-string"&gt;"Cette phrase passe en dessous des deux precedentes"&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Sur le terminal série, on verra ceci :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;Salut ca zeste ?! Vive Clem&lt;span class="hljs-string"&gt;' !
Cette phrase passe en dessous des deux precedentes
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="la-fonction-print-en-détail"&gt;
 &lt;a aria-hidden="true" href="#la-fonction-print-en-détail"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La fonction
 &lt;code&gt;
  print()
 &lt;/code&gt;
 en détail
&lt;/h4&gt;
&lt;p&gt;
 Après cette courte prise en main de l’objet Serial, je vous propose de découvrir plus en profondeur les surprises que nous réserve la fonction
 &lt;code&gt;
  print()
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Petite précision, je vais utiliser de préférence
   &lt;code&gt;
    print()
   &lt;/code&gt;
   .
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Résumons un peu ce que nous venons d’apprendre : on sait maintenant envoyer des caractères sur la voie série et des phrases. C’est déjà bien, mais ce n’est qu’un très bref aperçu de ce que l’on peut faire avec cette fonction.
&lt;/p&gt;
&lt;h5 id="envoyer-des-nombres"&gt;
 &lt;a aria-hidden="true" href="#envoyer-des-nombres"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Envoyer des nombres
&lt;/h5&gt;
&lt;p&gt;
 Avec la fonction
 &lt;code&gt;
  print()
 &lt;/code&gt;
 , il est aussi possible d’envoyer des chiffres ou des nombres car ce sont des caractères :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);

    Serial.println(&lt;span class="hljs-number"&gt;9&lt;/span&gt;);            &lt;span class="hljs-comment"&gt;// chiffre&lt;/span&gt;
    Serial.println(&lt;span class="hljs-number"&gt;42&lt;/span&gt;);           &lt;span class="hljs-comment"&gt;// nombre&lt;/span&gt;
    Serial.println(&lt;span class="hljs-number"&gt;32768&lt;/span&gt;);        &lt;span class="hljs-comment"&gt;// nombre&lt;/span&gt;
    Serial.print(&lt;span class="hljs-number"&gt;3.1415926535&lt;/span&gt;);   &lt;span class="hljs-comment"&gt;// nombre décimale&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;9
42
32768
3.14
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Tiens, le nombre pi n’est pas affiché complètement ! C’est quoi le bug ?
   &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Rassurez-vous, ce n’est ni un bug, ni un oubli inopiné de ma part.
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 En fait, pour les nombres décimaux, la fonction
 &lt;code&gt;
  print()
 &lt;/code&gt;
 affiche par défaut seulement deux chiffres après la virgule. C’est la valeur par défaut et heureusement elle est modifiable. Il suffit de rajouter le nombre de décimales que l’on veut afficher :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);

    Serial.println(&lt;span class="hljs-number"&gt;3.1415926535&lt;/span&gt;, &lt;span class="hljs-number"&gt;0&lt;/span&gt;);
    Serial.println(&lt;span class="hljs-number"&gt;3.1415926535&lt;/span&gt;, &lt;span class="hljs-number"&gt;2&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// valeur par défaut&lt;/span&gt;
    Serial.println(&lt;span class="hljs-number"&gt;3.1415926535&lt;/span&gt;, &lt;span class="hljs-number"&gt;4&lt;/span&gt;);
    Serial.println(&lt;span class="hljs-number"&gt;3.1415926535&lt;/span&gt;, &lt;span class="hljs-number"&gt;10&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-number"&gt;3&lt;/span&gt;
&lt;span class="hljs-number"&gt;3.14&lt;/span&gt;
&lt;span class="hljs-number"&gt;3.1415&lt;/span&gt;
&lt;span class="hljs-number"&gt;3.1415926535&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="envoyer-la-valeur-dune-variable"&gt;
 &lt;a aria-hidden="true" href="#envoyer-la-valeur-dune-variable"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Envoyer la valeur d’une variable
&lt;/h5&gt;
&lt;p&gt;
 Là encore, on utilise toujours la même fonction (qu’est-ce qu’elle polyvalente !). Ici aucune surprise. Au lieu de mettre un caractère ou un nombre, il suffit de passer la variable en paramètre pour qu’elle soit ensuite affichée à l’écran :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; variable = &lt;span class="hljs-number"&gt;512&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; lettre = &lt;span class="hljs-string"&gt;'a'&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);

    Serial.println(variable);
    Serial.print(lettre);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;512
a
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Trop facile n’est-ce pas ?
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/Jk4jA0OHJDo" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="envoyer-dautres-données"&gt;
 &lt;a aria-hidden="true" href="#envoyer-dautres-données"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Envoyer d’autres données
&lt;/h5&gt;
&lt;p&gt;
 Ce n’est pas fini, on va terminer notre petit tour avec les types de variables que l’on peut transmettre grâce à cette fonction
 &lt;code&gt;
  print()
 &lt;/code&gt;
 sur la voie série. Prenons l’exemple d’un nombre choisi judicieusement : 65.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Pourquoi ce nombre en particulier ? Et pourquoi pas 12 ou 900 ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Eh bien, c’est relatif à la
 &lt;strong&gt;
  table ASCII
 &lt;/strong&gt;
 que nous allons utiliser dans un instant.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Tout d’abord, petit cours de prononciation, ASCII se prononce comme si on disait "A ski", on a donc : "la table à ski" en prononciation phonétique.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 La table ASCII, de l’américain "
 &lt;strong&gt;
  A
 &lt;/strong&gt;
 merican
 &lt;strong&gt;
  S
 &lt;/strong&gt;
 tandard
 &lt;strong&gt;
  C
 &lt;/strong&gt;
 ode for
 &lt;strong&gt;
  I
 &lt;/strong&gt;
 nformation
 &lt;strong&gt;
  I
 &lt;/strong&gt;
 nterchange", soit en bon français : "Code américain normalisé pour l’échange d’information" est, selon Wikipédia :
&lt;/p&gt;
&lt;figure&gt;
 &lt;blockquote&gt;
  &lt;p&gt;
   "la norme de codage de caractères en informatique la plus connue, la plus ancienne et la plus largement compatible"
  &lt;/p&gt;
 &lt;/blockquote&gt;
 &lt;figcaption&gt;
  Wikipédia
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 En somme, c’est un tableau de valeurs codées sur 8bits qui à chaque valeur associent un caractère. Ces caractères sont les lettres de l’alphabet en minuscule et majuscule, les chiffres, des caractères spéciaux et des symboles bizarres. Dans cette table, il y a plusieurs colonnes avec la valeur décimale, la valeur hexadécimale, la valeur binaire et la valeur octale parfois. Nous n’aurons pas besoin de tout ça, mais pour votre culture voici une table ASCII étendu (0 à 255).
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Table ASCII étendu" src="./images/uploaded/tuto-arduino-302-envoyer-et-recevoir-des-données-sur-la-voie-série/table-ascii-etendu.jpg"/&gt;
 &lt;figcaption&gt;
  Table ASCII étendu - (CC-BY-SA,
  &lt;a href="http://commons.wikimedia.org/wiki/File:Ascii-codes-table.png"&gt;
   Yuriy Arabskyy
  &lt;/a&gt;
  )
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Revenons à notre exemple, le nombre 65. C’est en effet grâce à la table ASCII que l’on sait passer d’un nombre à un caractère, car rappelons-le, dans l’ordinateur tout est traité sous forme de nombre en base 2 (binaire). Donc lorsque l’on code :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;maVariable = &lt;span class="hljs-string"&gt;'A'&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// l'ordinateur stocke la valeur 65 dans sa mémoire (cf. table ASCII)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Si vous faites ensuite :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;maVariable = maVariable + &lt;span class="hljs-number"&gt;1&lt;/span&gt;;
&lt;span class="hljs-comment"&gt;// la valeur stockée passe à 66 (= 65 + 1)&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// à l'écran, on verra s'afficher la lettre "B"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Au début, on trouvait une seule table ASCII, qui allait de 0 à 127 (codée sur 7bits) et représentait l’alphabet, les chiffres arabes et quelques signes de ponctuation. Depuis, de nombreuses tables dites "étendues" sont apparues et vont de 0 à 255 caractères (valeurs maximales codables sur un type
   &lt;em&gt;
    char
   &lt;/em&gt;
   qui fait 8 bits).
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Et que fait-on avec la fonction print() et cette table ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Là est tout l’intérêt de la table, on peut envoyer des données, avec la fonction print(), de tous types ! En binaire, en hexadécimal, en octal et en décimal.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);

    Serial.println(&lt;span class="hljs-number"&gt;65&lt;/span&gt;, BIN); &lt;span class="hljs-comment"&gt;// envoie la valeur 1000001&lt;/span&gt;
    Serial.println(&lt;span class="hljs-number"&gt;65&lt;/span&gt;, DEC); &lt;span class="hljs-comment"&gt;// envoie la valeur 65&lt;/span&gt;
    Serial.println(&lt;span class="hljs-number"&gt;65&lt;/span&gt;, OCT); &lt;span class="hljs-comment"&gt;// envoie la valeur 101 (ce n'est pas du binaire !)&lt;/span&gt;
    Serial.println(&lt;span class="hljs-number"&gt;65&lt;/span&gt;, HEX); &lt;span class="hljs-comment"&gt;// envoie la valeur 41&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Différents moyens d’afficher la même information
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Vous pouvez donc manipuler les données que vous envoyez à travers la voie série ! C’est là qu’est l’avantage de cette fonction.
&lt;/p&gt;
&lt;h4 id="exercice-envoyer-lalphabet"&gt;
 &lt;a aria-hidden="true" href="#exercice-envoyer-lalphabet"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Exercice : Envoyer l’alphabet
&lt;/h4&gt;
&lt;h5 id="objectif"&gt;
 &lt;a aria-hidden="true" href="#objectif"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Objectif
&lt;/h5&gt;
&lt;p&gt;
 Nous allons maintenant faire un petit exercice, histoire de s’entraîner à envoyer des données. Le but, tout simple, est d’envoyer l’ensemble des lettres de l’alphabet de manière
 &lt;em&gt;
  la plus intelligente
 &lt;/em&gt;
 possible, autrement dit, sans écrire 26 fois "print();"… La fonction setup restera la même que celle vue précédemment. Un délai de 250 ms est attendu entre chaque envoi de lettre et un delay de 5 secondes est attendu entre l’envoi de deux alphabets.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Bon courage !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="correction"&gt;
 &lt;a aria-hidden="true" href="#correction"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Correction
&lt;/h5&gt;
&lt;p&gt;
 Bon j’espère que tout c’est bien passé et que vous n’avez pas joué au roi du copier/coller en me mettant 26 print…
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
  &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; i = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
  &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; lettre = &lt;span class="hljs-string"&gt;'a'&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// ou 'A' pour envoyer en majuscule&lt;/span&gt;

  &lt;span class="hljs-comment"&gt;// petit message d'accueil&lt;/span&gt;
  Serial.println(&lt;span class="hljs-string"&gt;"------  L'alphabet des Zesteurs  ------"&lt;/span&gt;);

  &lt;span class="hljs-comment"&gt;// on commence les envois&lt;/span&gt;
  &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(i=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class="hljs-number"&gt;26&lt;/span&gt;; i++)
  {
      Serial.print(lettre); &lt;span class="hljs-comment"&gt;// on envoie la lettre&lt;/span&gt;
      lettre = lettre + &lt;span class="hljs-number"&gt;1&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// on passe à la lettre suivante&lt;/span&gt;
      delay(&lt;span class="hljs-number"&gt;250&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// on attend 250ms avant de réenvoyer&lt;/span&gt;
   }
  Serial.println(&lt;span class="hljs-string"&gt;""&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// on fait un retour à la ligne&lt;/span&gt;

   delay(&lt;span class="hljs-number"&gt;5000&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// on attend 5 secondes avant de renvoyer l'alphabet&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    Exercice d’écriture de l’alphabet
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Si l’exercice vous a paru trop simple, vous pouvez essayer d’envoyer l’alphabet à l’envers, ou l’alphabet minuscule ET majuscule ET les chiffres de 0 à 9… Amusez-vous bien !
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;h3 id="recevoir-des-données"&gt;
 &lt;a aria-hidden="true" href="#recevoir-des-données"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Recevoir des données
&lt;/h3&gt;
&lt;p&gt;
 Cette fois, il s’agit de l’Arduino qui reçoit les données que nous, utilisateur, allons transmettre à travers le terminal série. Je vais prendre un exemple courant : une communication téléphonique. En règle générale, on dit "Hallo" pour dire à l’interlocuteur que l’on est prêt à écouter le message. Tant que la personne qui appelle n’a pas cette confirmation, elle ne dit rien (ou dans ce cas elle fait un monologue
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 ). Pareillement à cette conversion, l’objet Serial dispose d’une fonction pour "écouter" la voie série afin de savoir si oui ou non il y a une communication de données.
&lt;/p&gt;
&lt;h4 id="réception-de-données"&gt;
 &lt;a aria-hidden="true" href="#réception-de-données"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Réception de données
&lt;/h4&gt;
&lt;h5 id="on-ma-parlé"&gt;
 &lt;a aria-hidden="true" href="#on-ma-parlé"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 On m’a parlé ?
&lt;/h5&gt;
&lt;p&gt;
 Pour vérifier si on a reçu des données, on va régulièrement interroger la carte pour lui demander si des données sont disponibles dans son
 &lt;strong&gt;
  buffer de réception
 &lt;/strong&gt;
 . Un buffer est une zone mémoire permettant de stocker des données sur un cours instant. Dans notre situation, cette mémoire est dédiée à la réception sur la voie série. Il en existe un aussi pour l’envoi de donnée, qui met à la queue leu leu les données à envoyer et les envoie dès que possible. En résumé, un buffer est une sorte de salle d’attente pour les données. Je disais donc, nous allons régulièrement vérifier si des données sont arrivées. Pour cela, on utilise la fonction
 &lt;code&gt;
  available()
 &lt;/code&gt;
 (de l’anglais "disponible") de l’objet Serial. Cette fonction renvoie le nombre de caractères dans le buffer de réception de la voie série. Voici un exemple de traitement :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// lecture du nombre de caractères disponibles dans le buffer&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; donneesALire = Serial.available();
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(donneesALire &amp;gt; &lt;span class="hljs-number"&gt;0&lt;/span&gt;) &lt;span class="hljs-comment"&gt;// si le buffer n'est pas vide&lt;/span&gt;
    {
        &lt;span class="hljs-comment"&gt;// Il y a des données, on les lit et on fait du traitement&lt;/span&gt;
    }
    &lt;span class="hljs-comment"&gt;// on a fini de traiter la réception ou il n'y a rien à lire&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Lecture simple de données sur la voie série
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Cette fonction de l’objet Serial, available(), renvoie la valeur -1 quand il n’y a rien à lire sur le buffer de réception.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="lire-les-données-reçues"&gt;
 &lt;a aria-hidden="true" href="#lire-les-données-reçues"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Lire les données reçues
&lt;/h5&gt;
&lt;p&gt;
 Une fois que l’on sait qu’il y a des données, il faut aller les lire pour éventuellement en faire quelque chose. La lecture se fera tout simplement avec la fonction… read() ! Cette fonction renverra le premier caractère arrivé non traité (comme un supermarché traite la première personne arrivée dans la file d’attente de la caisse avant de passer au suivant). On accède donc
 &lt;em&gt;
  caractère par caractère
 &lt;/em&gt;
 aux données reçues. Ce type de fonctionnement est appelé FIFO (First In First Out, premier arrivé, premier traité). Si jamais rien n’est à lire (personne dans la file d’attente), je le disais, la fonction renverra -1 pour le signaler.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on lit le premier caractère non traité du buffer&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; choseLue = Serial.read();

    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(choseLue == &lt;span class="hljs-number"&gt;-1&lt;/span&gt;) &lt;span class="hljs-comment"&gt;// si le buffer est vide&lt;/span&gt;
    {
        &lt;span class="hljs-comment"&gt;// Rien à lire, rien lu&lt;/span&gt;
    }
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;span class="hljs-comment"&gt;// le buffer n'est pas vide&lt;/span&gt;
    {
        &lt;span class="hljs-comment"&gt;// On a lu un caractère&lt;/span&gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Lecture simple de données sur la voie série sans
  &lt;code&gt;
   available
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ce code est une façon simple de se passer de la fonction available().
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/DpOahtA9NM0" width="560"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="le-serialevent"&gt;
 &lt;a aria-hidden="true" href="#le-serialevent"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le serialEvent
&lt;/h5&gt;
&lt;p&gt;
 Si vous voulez éviter de mettre le test de présence de données sur la voie série dans votre code, Arduino a rajouter une fonction qui s’exécute de manière régulière. Cette dernière se lance régulièrement avant chaque redémarrage de la loop. Ainsi, si vous n’avez pas besoin de traiter les données de la voie série à un moment précis, il vous suffit de rajouter cette fonction. Pour l’implémenter c’est très simple, il suffit de mettre du code dans une fonction nommé
 &lt;code&gt;
  serialEvent()
 &lt;/code&gt;
 (attention à la casse) qui sera a rajouté en dehors du setup et du loop. Le reste du traitement de texte se fait normalement, avec
 &lt;code&gt;
  Serial.read()
 &lt;/code&gt;
 par exemple. Voici un exemple de squelette possible :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; maLed = &lt;span class="hljs-number"&gt;11&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// on met une LED sur la broche 11&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    pinMode(maLed, OUTPUT); &lt;span class="hljs-comment"&gt;// la LED est une sortie&lt;/span&gt;
    digitalWrite(maLed, HIGH); &lt;span class="hljs-comment"&gt;// on éteint la LED&lt;/span&gt;
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// on démarre la voie série&lt;/span&gt;
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    delay(&lt;span class="hljs-number"&gt;500&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// fait une petite pause&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// on ne fait rien dans la loop&lt;/span&gt;
    digitalWrite(maLed, HIGH); &lt;span class="hljs-comment"&gt;// on éteint la LED&lt;/span&gt;

}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;serialEvent&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;span class="hljs-comment"&gt;// déclaration de la fonction d'interruption sur la voie série&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// lit toutes les données (vide le buffer de réception)&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(Serial.read() != &lt;span class="hljs-number"&gt;-1&lt;/span&gt;);

    &lt;span class="hljs-comment"&gt;// puis on allume la LED&lt;/span&gt;
    digitalWrite(maLed, LOW);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Utilisation de
  &lt;code&gt;
   serialEvent
  &lt;/code&gt;
  pour tester la présence de données
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="exemple-de-code-complet"&gt;
 &lt;a aria-hidden="true" href="#exemple-de-code-complet"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Exemple de code complet
&lt;/h4&gt;
&lt;p&gt;
 Voici maintenant un exemple de code complet qui va aller lire les caractères présents dans le buffer de réception s’il y en a et les renvoyer tels quels à l’expéditeur (mécanisme d’écho).
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// variable contenant le caractère à lire&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;char&lt;/span&gt; carlu = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
    &lt;span class="hljs-comment"&gt;// variable contenant le nombre de caractère disponibles dans le buffer&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; cardispo = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

    cardispo = Serial.available();

    &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(cardispo &amp;gt; &lt;span class="hljs-number"&gt;0&lt;/span&gt;) &lt;span class="hljs-comment"&gt;// tant qu'il y a des caractères à lire&lt;/span&gt;
    {
        carlu = Serial.read(); &lt;span class="hljs-comment"&gt;// on lit le caractère&lt;/span&gt;
        Serial.print(carlu); &lt;span class="hljs-comment"&gt;// puis on le renvoi à l’expéditeur tel quel&lt;/span&gt;
        cardispo = Serial.available(); &lt;span class="hljs-comment"&gt;// on relit le nombre de caractères dispo&lt;/span&gt;
    }
    &lt;span class="hljs-comment"&gt;// fin du programme&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Code complet pour faire un
  &lt;em&gt;
   echo
  &lt;/em&gt;
  avec la liaison série
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Avouez que tout cela n’était pas bien difficile. Je vais donc en profiter pour prendre des vacances et vous laisser faire un exercice qui demande un peu de réflexion.
 &lt;img alt=":diable:" class="smiley" src="./static/smileys/diable.png"/&gt;
&lt;/p&gt;
&lt;h3 id="exercice-attention-à-la-casse"&gt;
 &lt;a aria-hidden="true" href="#exercice-attention-à-la-casse"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 [Exercice] Attention à la casse !
&lt;/h3&gt;
&lt;h4 id="consigne"&gt;
 &lt;a aria-hidden="true" href="#consigne"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Consigne
&lt;/h4&gt;
&lt;p&gt;
 Le but de cet exercice est très simple. L’utilisateur saisit un caractère à partir de l’ordinateur et si ce caractère est minuscule, il est renvoyé en majuscule ; s’il est majuscule il est renvoyé en minuscule. Enfin, si le caractère n’est pas une lettre on se contente de le renvoyer normalement, tel qu’il est. Voilà le résultat de mon programme :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/9i-gfmQu2Cc" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voici le simulateur interactif avec juste une Arduino, pour ceux qui n’ont pas le matériel en réel mais veulent tout de même faire l’exercice :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/hLVCsf3NkbI" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="correction-1"&gt;
 &lt;a aria-hidden="true" href="#correction-1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Correction
&lt;/h4&gt;
&lt;p&gt;
 Je suppose que grâce au superbe tutoriel qui précède vous avez déjà fini sans problème, n’est-ce pas ?
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
&lt;/p&gt;
&lt;h5 id="la-fonction-setup-et-les-variables-utiles"&gt;
 &lt;a aria-hidden="true" href="#la-fonction-setup-et-les-variables-utiles"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La fonction
 &lt;code&gt;
  setup()
 &lt;/code&gt;
 et les variables utiles
&lt;/h5&gt;
&lt;p&gt;
 Une fois n’est pas coutume, on va commencer par énumérer les variables utiles et le contenu de la fonction
 &lt;code&gt;
  setup()
 &lt;/code&gt;
 . Pour ce qui est des variables globales, on n’en retrouve qu’une seule, "carlu". Cette variable de type
 &lt;code&gt;
  int
 &lt;/code&gt;
 sert à stocker le caractère lu sur le buffer de la carte Arduino. Puis on démarre une nouvelle voie série à 9600 bps :
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; carlu; &lt;span class="hljs-comment"&gt;// stock le caractère lu sur la voie série&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
   Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    Exercice, le
    &lt;code&gt;
     setup
    &lt;/code&gt;
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="le-programme"&gt;
 &lt;a aria-hidden="true" href="#le-programme"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le programme
&lt;/h5&gt;
&lt;p&gt;
 Le programme principal n’est pas très difficile non plus. Il va se faire en trois temps.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Tout d’abord, on boucle jusqu’à recevoir un caractère sur la voie série
 &lt;/li&gt;
 &lt;li&gt;
  Lorsqu’on a reçu un caractère, on regarde si c’est une lettre
 &lt;/li&gt;
 &lt;li&gt;
  Si c’est une lettre, on renvoie son acolyte majuscule ; sinon on renvoie simplement le caractère lu
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Voici le programme décrivant ce comportement :
&lt;/p&gt;
&lt;div class="custom-block custom-block-spoiler"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;figure&gt;
   &lt;div class="hljs-code-div"&gt;
    &lt;div class="hljs-line-numbers"&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
     &lt;span&gt;
     &lt;/span&gt;
    &lt;/div&gt;
    &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
   &lt;span class="hljs-comment"&gt;// on commence par vérifier si un caractère est disponible dans le buffer&lt;/span&gt;
   &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(Serial.available() &amp;gt; &lt;span class="hljs-number"&gt;0&lt;/span&gt;)
   {
       carlu = Serial.read(); &lt;span class="hljs-comment"&gt;// lecture du premier caractère disponible&lt;/span&gt;

       &lt;span class="hljs-comment"&gt;// Est-ce que c'est un caractère minuscule ?&lt;/span&gt;
       &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(carlu &amp;gt;= &lt;span class="hljs-string"&gt;'a'&lt;/span&gt; &amp;amp;&amp;amp; carlu &amp;lt;= &lt;span class="hljs-string"&gt;'z'&lt;/span&gt;)
       {
           carlu = carlu - &lt;span class="hljs-string"&gt;'a'&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// on garde juste le "numéro de lettre"&lt;/span&gt;
           carlu = carlu + &lt;span class="hljs-string"&gt;'A'&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// on passe en majuscule&lt;/span&gt;
       }
       &lt;span class="hljs-comment"&gt;// Est-ce que c'est un caractère MAJUSCULE ?&lt;/span&gt;
       &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(carlu &amp;gt;= &lt;span class="hljs-string"&gt;'A'&lt;/span&gt; &amp;amp;&amp;amp; carlu &amp;lt;= &lt;span class="hljs-string"&gt;'Z'&lt;/span&gt;)
       {
           carlu = carlu - &lt;span class="hljs-string"&gt;'A'&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// on garde juste le "numéro de lettre"&lt;/span&gt;
           carlu = carlu + &lt;span class="hljs-string"&gt;'a'&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// on passe en minuscule&lt;/span&gt;
       }
       &lt;span class="hljs-comment"&gt;// ni l'un ni l'autre on renvoie en tant que BYTE&lt;/span&gt;
       &lt;span class="hljs-comment"&gt;// ou alors on renvoie le caractère modifié&lt;/span&gt;
       Serial.write(carlu);
   }
}
&lt;/code&gt;&lt;/pre&gt;
   &lt;/div&gt;
   &lt;figcaption&gt;
    Exercice, la
    &lt;code&gt;
     loop
    &lt;/code&gt;
   &lt;/figcaption&gt;
  &lt;/figure&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Je vais maintenant vous expliquer les parties importantes de ce code. Comme vu dans le cours, la ligne 4 va nous servir à attendre un caractère sur la voie série. Tant qu’on ne reçoit rien, on ne fait rien ! Sitôt que l’on reçoit un caractère, on va chercher à savoir si c’est une lettre. Pour cela, on va faire deux tests. L’un est à la ligne 8 et l’autre à la ligne 13. Ils se présentent de la même façon :
 &lt;strong&gt;
  SI
 &lt;/strong&gt;
 le caractère lu à une valeur supérieure ou égale à la lettre
 &lt;code&gt;
  'a'
 &lt;/code&gt;
 (ou
 &lt;code&gt;
  'A'
 &lt;/code&gt;
 )
 &lt;strong&gt;
  ET
 &lt;/strong&gt;
 inférieure ou égale à la lettre
 &lt;code&gt;
  'z'
 &lt;/code&gt;
 (
 &lt;code&gt;
  'Z'
 &lt;/code&gt;
 ), alors on est en présence d’une lettre. Sinon, c’est autre chose, donc on se contente de passer au renvoi du caractère lu ligne 21. Une fois que l’on a détecté une lettre, on effectue quelques transformations afin de changer sa casse. Voici les explications à travers un exemple :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="table-wrapper"&gt;
  &lt;table class=" table table-bordered table-striped"&gt;
   &lt;thead&gt;
    &lt;tr&gt;
     &lt;th&gt;
      Description
     &lt;/th&gt;
     &lt;th&gt;
      Opération (lettre)
     &lt;/th&gt;
     &lt;th&gt;
      Opération (nombre)
     &lt;/th&gt;
     &lt;th&gt;
      Valeur de carlu
     &lt;/th&gt;
    &lt;/tr&gt;
   &lt;/thead&gt;
   &lt;tbody&gt;
    &lt;tr&gt;
     &lt;td&gt;
      On récupère la lettre
      &lt;code&gt;
       'e'
      &lt;/code&gt;
     &lt;/td&gt;
     &lt;td&gt;
      e
     &lt;/td&gt;
     &lt;td&gt;
      101
     &lt;/td&gt;
     &lt;td&gt;
      &lt;code&gt;
       'e'
      &lt;/code&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td&gt;
      On isole son numéro de lettre en lui enlevant la valeur de 'a'
     &lt;/td&gt;
     &lt;td&gt;
      e-a
     &lt;/td&gt;
     &lt;td&gt;
      101–97
     &lt;/td&gt;
     &lt;td&gt;
      4
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td&gt;
      On ajoute ce nombre à la lettre
      &lt;code&gt;
       'A'
      &lt;/code&gt;
     &lt;/td&gt;
     &lt;td&gt;
      A + (e-a)
     &lt;/td&gt;
     &lt;td&gt;
      65 + (101–97) = 69
     &lt;/td&gt;
     &lt;td&gt;
      &lt;code&gt;
       'E'
      &lt;/code&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
     &lt;td&gt;
      Il ne suffit plus qu’à retourner cette lettre
     &lt;/td&gt;
     &lt;td&gt;
      E
     &lt;/td&gt;
     &lt;td&gt;
      69
     &lt;/td&gt;
     &lt;td&gt;
      &lt;code&gt;
       E
      &lt;/code&gt;
     &lt;/td&gt;
    &lt;/tr&gt;
   &lt;/tbody&gt;
  &lt;/table&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 On effectuera sensiblement les mêmes opérations lors du passage de majuscule à minuscule.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   A la ligne 22, j’utilise la fonction
   &lt;code&gt;
    write()
   &lt;/code&gt;
   qui envoie le caractère en tant que variable de type
   &lt;em&gt;
    byte
   &lt;/em&gt;
   , signifiant que l’on renvoie l’information sous la forme d’un seul octet. Sinon Arduino enverrait le caractère en tant que 'int’, ce qui donnerait des problèmes lors de l’affichage.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voici l’exercice sous forme de simulateur interactif :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/flg9YQX2g1f" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous savez maintenant lire et écrire sur la voie série de l’Arduino ! Grâce à cette nouvelle corde à votre arc, vous allez pouvoir ajouter une touche d’interactivité supplémentaire à vos programmes.
&lt;/p&gt;
&lt;div class="footnotes"&gt;
 &lt;hr/&gt;
 &lt;ol&gt;
  &lt;li id="fn-1-pPrPIX8h4Y"&gt;
   &lt;p&gt;
    créée de façon fictive
   &lt;/p&gt;
   &lt;a class="footnote-backref" href="#fnref-1-pPrPIX8h4Y" title="Retourner au texte de la note 1"&gt;
    ↩
   &lt;/a&gt;
  &lt;/li&gt;
 &lt;/ol&gt;
&lt;/div&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>[TP] Baignade interdite !</title><link href="https://eskimon.fr/tuto-arduino-303-tp-baignade-interdite" rel="alternate"></link><published>2013-12-10T20:03:00+01:00</published><updated>2013-12-10T20:03:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-10:/tuto-arduino-303-tp-baignade-interdite</id><summary type="html">&lt;p&gt;
 Afin d’appliquer vos connaissances acquises durant la lecture de ce tutoriel, nous allons maintenant faire un
 &lt;strong&gt;
  gros TP
 &lt;/strong&gt;
 . Il regroupera tout ce que vous êtes censé savoir en terme de matériel (LED, boutons, voie série et bien entendu Arduino) et je vous fais aussi confiance pour utiliser au mieux …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Afin d’appliquer vos connaissances acquises durant la lecture de ce tutoriel, nous allons maintenant faire un
 &lt;strong&gt;
  gros TP
 &lt;/strong&gt;
 . Il regroupera tout ce que vous êtes censé savoir en terme de matériel (LED, boutons, voie série et bien entendu Arduino) et je vous fais aussi confiance pour utiliser au mieux vos connaissances en terme de "savoir coder" (variables, fonctions, tableaux…). Bon courage et, le plus important : Amusez-vous bien !
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#sujet-du-tp"&gt;
    Sujet du TP
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#contexte"&gt;
     Contexte
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#objectif"&gt;
     Objectif
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#conseil"&gt;
      Conseil
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#réalisation"&gt;
       Réalisation
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#précision-sur-les-chaines-de-caractères"&gt;
       Précision sur les chaines de caractères
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#résultat"&gt;
     Résultat
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#correction"&gt;
    Correction !
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#le-schéma-électronique"&gt;
     Le schéma électronique
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#les-variables-globales-et-la-fonction-setup"&gt;
      Les variables globales et la fonction setup()
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#les-variables-globales"&gt;
       Les variables globales
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#la-fonction-setup"&gt;
       La fonction setup()
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#la-fonction-principale-et-les-autres"&gt;
      La fonction principale et les autres
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#algorithme"&gt;
       Algorithme
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#fonction-loop"&gt;
       Fonction loop()
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#lecture-des-données-sur-la-voie-série"&gt;
       Lecture des données sur la voie série
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#allumer-les-drapeaux"&gt;
       Allumer les drapeaux
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#faire-clignoter-la-led-rouge"&gt;
       Faire clignoter la LED rouge
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#comparer-les-mots"&gt;
       Comparer les mots
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#code-complet"&gt;
     Code complet
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#améliorations"&gt;
    Améliorations
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#améliorations-logicielles"&gt;
       Améliorations logicielles
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#améliorations-matérielles"&gt;
       Améliorations matérielles
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="sujet-du-tp"&gt;
 &lt;a aria-hidden="true" href="#sujet-du-tp"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sujet du TP
&lt;/h3&gt;
&lt;h4 id="contexte"&gt;
 &lt;a aria-hidden="true" href="#contexte"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Contexte
&lt;/h4&gt;
&lt;p&gt;
 Imaginez-vous au bord de la plage. Le ciel est bleu, la mer aussi… Ahhh le rêve. Puis, tout un coup le drapeau rouge se lève ! "Requiiiinn" crie un nageur… L’application que je vous propose de développer ici correspond à ce genre de situation. Vous êtes au QG de la zPlage, le nouvel endroit branché pour les vacances. Votre mission si vous l’acceptez est d’afficher en temps réel un indicateur de qualité de la plage et de ses flots. Pour cela, vous devez informer les zTouristes par l’affichage d’un code de 3 couleurs. Des zSurveillants sont là pour vous prévenir que tout est rentré dans l’ordre si un incident survient.
&lt;/p&gt;
&lt;h4 id="objectif"&gt;
 &lt;a aria-hidden="true" href="#objectif"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Objectif
&lt;/h4&gt;
&lt;p&gt;
 Comme expliqué ci-dessus, l’affichage de qualité se fera au travers de 3 couleurs qui seront représentées par des LEDs :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;strong&gt;
   Rouge
  &lt;/strong&gt;
  : Danger, ne pas se baigner
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   Orange
  &lt;/strong&gt;
  : Baignade risquée pour les novices
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   Vert
  &lt;/strong&gt;
  : Tout baigne !
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 La zPlage est équipée de deux boutons. L’un servira à déclencher un SOS (si quelqu’un voit un nageur en difficulté par exemple). La lumière passe alors au rouge clignotant jusqu’à ce qu’un sauveteur ait appuyé sur l’autre bouton signalant "
 &lt;strong&gt;
  Problème réglé, tout revient à la situation précédente
 &lt;/strong&gt;
 ". Enfin, dernier point mais pas des moindres, le QG (vous) reçoit des informations météorologiques et provenant des marins au large. Ces messages sont retransmis sous forme de textos (symbolisés par la voie série) aux sauveteurs sur la plage pour qu’ils changent les couleurs en temps réel. Voici les mots-clés et leurs impacts :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;strong&gt;
   Rouge
  &lt;/strong&gt;
  : meduse, tempete, requin : Des animaux dangereux ou la météo rendent la zPlage dangereuse. Baignade interdite
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   Orange
  &lt;/strong&gt;
  : vague : La natation est réservée aux bons nageurs
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   Vert
  &lt;/strong&gt;
  : surveillant, calme : Tout baigne, les zSauveteurs sont là et la mer est cool
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="conseil"&gt;
 &lt;a aria-hidden="true" href="#conseil"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Conseil
&lt;/h4&gt;
&lt;p&gt;
 Voici quelques conseils pour mener à bien votre objectif.
&lt;/p&gt;
&lt;h5 id="réalisation"&gt;
 &lt;a aria-hidden="true" href="#réalisation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Réalisation
&lt;/h5&gt;
&lt;p&gt;
 Une fois n’est pas coutume,
 &lt;strong&gt;
  nommez bien vos variables
 &lt;/strong&gt;
 ! Vous verrez que dès qu’une application prend du volume il est agréable de ne pas avoir à chercher qui sert à quoi. - N’hésitez pas à
 &lt;strong&gt;
  décomposer votre code en fonction
 &lt;/strong&gt;
 . Par exemple les fonctions
 &lt;code&gt;
  changerDeCouleur()
 &lt;/code&gt;
 peuvent-être les bienvenues.
 &lt;img alt=":euh:" class="smiley" src="./static/smileys/unsure.gif"/&gt;
&lt;/p&gt;
&lt;h5 id="précision-sur-les-chaines-de-caractères"&gt;
 &lt;a aria-hidden="true" href="#précision-sur-les-chaines-de-caractères"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Précision sur les chaines de caractères
&lt;/h5&gt;
&lt;p&gt;
 Lorsque l’on écrit une phrase, on a l’habitude de la finir par un point. En informatique c’est pareil mais à l’échelle du mot ! Je m’explique. Une chaîne de caractères (un mot) est, comme l’indique son nom, une suite de caractères. Généralement on la déclare de la façon suivante :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; mot[&lt;span class="hljs-number"&gt;20&lt;/span&gt;] = &lt;span class="hljs-string"&gt;"coucou"&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Lorsque vous faites ça, vous ne le voyez pas, l’ordinateur rajoute juste après le dernier caractère (ici 'u’) un caractère invisible qui s’écrit
 &lt;strong&gt;
  &lt;code&gt;
   \0
  &lt;/code&gt;
 &lt;/strong&gt;
 (antislash-zéro). Ce caractère signifie "fin de la chaîne". En mémoire, on a donc :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       case
      &lt;/th&gt;
      &lt;th&gt;
       car.
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       mot[0]
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        'c'
       &lt;/code&gt;
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       mot[1]
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        'o'
       &lt;/code&gt;
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       mot[2]
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        'u'
       &lt;/code&gt;
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       mot[3]
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        'c'
       &lt;/code&gt;
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       mot[4]
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        'o'
       &lt;/code&gt;
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       mot[5]
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        'u'
       &lt;/code&gt;
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       mot[6]
      &lt;/td&gt;
      &lt;td&gt;
       &lt;code&gt;
        '\0'
       &lt;/code&gt;
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Correspondance des lettres vers le tableau
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ce caractère est
   &lt;strong&gt;
    très important
   &lt;/strong&gt;
   pour la suite car je vais vous donner un petit coup de pouce pour le traitement des mots reçus.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Une bibliothèque, nommée "string" (chaîne en anglais) et présente nativement dans votre logiciel Arduino, permet de traiter des chaînes de caractères. Vous pourrez ainsi plus facilement comparer deux chaînes avec la fonction
 &lt;code&gt;
  strcmp(chaine1, chaine2)
 &lt;/code&gt;
 . Cette fonction vous renverra 0 si les deux chaînes sont identiques. Vous pouvez par exemple l’utiliser de la manière suivante :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// utilisation de la fonction strcmp(chaine1, chaine2) pour comparer des mots&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; resultat = &lt;span class="hljs-built_in"&gt;strcmp&lt;/span&gt;(motRecu, &lt;span class="hljs-string"&gt;"requin"&lt;/span&gt;);

&lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(resultat == &lt;span class="hljs-number"&gt;0&lt;/span&gt;)
    Serial.print(&lt;span class="hljs-string"&gt;"Les chaines sont identiques"&lt;/span&gt;);
&lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
    Serial.print(&lt;span class="hljs-string"&gt;"Les chaines sont différentes"&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Utilisation de
  &lt;code&gt;
   strcmp
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Le truc, c’est que cette fonction compare
 &lt;em&gt;
  caractère par caractère
 &lt;/em&gt;
 les chaînes, or celle de droite : "requin" possède ce fameux
 &lt;code&gt;
  '\0'
 &lt;/code&gt;
 après le
 &lt;code&gt;
  'n'
 &lt;/code&gt;
 . Pour que le résultat soit identique, il faut donc que les deux chaînes soient parfaitement identiques ! Donc, avant d’envoyer la chaîne tapée sur la voie série, il faut lui rajouter ce fameux
 &lt;code&gt;
  '\0'
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Je comprends que ce point soit délicat à comprendre, je ne vous taperais donc pas sur les doigts si vous avez des difficultés lors de la comparaison des chaînes et que vous allez vous balader sur la solution… Mais essayez tout de même, c’est tellement plus sympa de réussir en réfléchissant et en essayant !
   &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="résultat"&gt;
 &lt;a aria-hidden="true" href="#résultat"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Résultat
&lt;/h4&gt;
&lt;p&gt;
 Prenez votre temps, faites-moi quelque chose de beau et amusez-vous bien ! Je vous laisse aussi choisir comment et où brancher les composants sur votre carte Arduino.
 &lt;img alt=":ninja:" class="smiley" src="./static/smileys/ninja.png"/&gt;
 Voici une photo d’illustration du montage ainsi qu’une vidéo du montage en action.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Photo du TP : Baignade Intedite" src="./images/uploaded/tuto-arduino-303-tp-baignade-interdite/photo-du-tp-baignade-intedite.jpg"/&gt;
 &lt;figcaption&gt;
  Photo du TP : Baignade Intedite
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/KncBc25Skxo" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Bon Courage !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Pour ceux voulant uniquement se plonger dans le code ou ne disposant pas du matériel, un simulateur avec uniquement le montage est disponible dans la correction, à la fin de la partie concernant l’électronique.
&lt;/p&gt;
&lt;h3 id="correction"&gt;
 &lt;a aria-hidden="true" href="#correction"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Correction !
&lt;/h3&gt;
&lt;p&gt;
 J’espère que vous avez réussi à avoir un bout de solution ou une solution complète et que vous vous êtes amusé. Si vous êtes énervé sans avoir trouvé de solutions mais que vous avez cherché, ce n’est pas grave, regardez la correction et essayez de comprendre où et pourquoi vous avez fait une erreur.
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
&lt;/p&gt;
&lt;h4 id="le-schéma-électronique"&gt;
 &lt;a aria-hidden="true" href="#le-schéma-électronique"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le schéma électronique
&lt;/h4&gt;
&lt;p&gt;
 Commençons par le schéma électronique, voici le mien, entre vous et moi, seules les entrées/sorties ne sont probablement pas les mêmes. En effet, il est difficile de faire autrement que comme ceci :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="[TP] Baignade Interdite - Schéma" src="./images/uploaded/tuto-arduino-303-tp-baignade-interdite/tp-baignade-interdite-schema.png"/&gt;
 &lt;figcaption&gt;
  [TP] Baignade Interdite - Schéma
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
 &lt;img alt="[TP] Baignade Interdite - Montage" src="./images/uploaded/tuto-arduino-303-tp-baignade-interdite/tp-baignade-interdite-montage.png"/&gt;
 &lt;figcaption&gt;
  [TP] Baignade Interdite - Montage
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Quelles raisons nous ont poussés à faire ces branchements ? Eh bien :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  On utilise la voie série, donc il ne faut pas brancher de boutons ou de LED sur les broches 0 ou 1 (broche de transmission/réception)
 &lt;/li&gt;
 &lt;li&gt;
  On utilisera les LED à l’état bas, pour éviter que la carte Arduino délivre du courant
 &lt;/li&gt;
 &lt;li&gt;
  Les rebonds des boutons sont filtrés par des condensateurs (au passage, les boutons sont actifs à l’état bas)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Voici le simulateur avec juste l’électronique de prêt, à vous de faire le code !
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/7NX9hi4SkUJ" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="les-variables-globales-et-la-fonction-setup"&gt;
 &lt;a aria-hidden="true" href="#les-variables-globales-et-la-fonction-setup"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les variables globales et la fonction
 &lt;code&gt;
  setup()
 &lt;/code&gt;
&lt;/h4&gt;
&lt;p&gt;
 Poursuivons notre explication avec les variables que nous allons utiliser dans le programme et les paramètres à déclarer dans la fonction
 &lt;code&gt;
  setup()
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;h5 id="les-variables-globales"&gt;
 &lt;a aria-hidden="true" href="#les-variables-globales"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les variables globales
&lt;/h5&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;define&lt;/span&gt; VERT 0&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;define&lt;/span&gt; ORANGE 1&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;define&lt;/span&gt; ROUGE 2&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; etat = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// stock l'état de la situation (vert = 0, orange = 1, rouge = 2)&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; mot[&lt;span class="hljs-number"&gt;20&lt;/span&gt;]; &lt;span class="hljs-comment"&gt;// le mot lu sur la voie série&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// numéro des broches utilisées&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; btn_SOS = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; btn_OK = &lt;span class="hljs-number"&gt;3&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; leds[&lt;span class="hljs-number"&gt;3&lt;/span&gt;] = {&lt;span class="hljs-number"&gt;11&lt;/span&gt;,&lt;span class="hljs-number"&gt;12&lt;/span&gt;,&lt;span class="hljs-number"&gt;13&lt;/span&gt;}; &lt;span class="hljs-comment"&gt;// tableau de 3 éléments contenant les numéros de broches des LED&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  TP, initialisation des variables
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Afin d’appliquer le cours, on se servira ici d’un tableau pour contenir les numéros des broches des LED. Cela nous évite de mettre trois fois
 &lt;code&gt;
  int leds_xxx
 &lt;/code&gt;
 (vert, orange ou rouge). Bien entendu, dans notre cas, l’intérêt est faible, mais ça suffira pour l’exercice.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Et c’est quoi ça "#define" ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Le "#define" est ce que l’on appelle
 &lt;strong&gt;
  une directive de préprocesseur
 &lt;/strong&gt;
 . Lorsque le logiciel Arduino va compiler votre programme, il va remplacer le terme défini par la valeur qui le suit. Par exemple, chaque fois que le compilateur verra le terme VERT (en majuscule), il mettra la valeur 0 à la place. Tout simplement ! C’est exactement la même chose que d’écrire :
 &lt;code&gt;
  const int btn_SOS = 2;
 &lt;/code&gt;
&lt;/p&gt;
&lt;h5 id="la-fonction-setup"&gt;
 &lt;a aria-hidden="true" href="#la-fonction-setup"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La fonction
 &lt;code&gt;
  setup()
 &lt;/code&gt;
&lt;/h5&gt;
&lt;p&gt;
 Rien de particulier dans la fonction
 &lt;code&gt;
  setup()
 &lt;/code&gt;
 par rapport à ce que vous avez vu précédemment, on initialise les variables
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// On démarre la voie série avec une vitesse de 9600 bits/seconde&lt;/span&gt;
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);

    &lt;span class="hljs-comment"&gt;// réglage des entrées/sorties&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// les entrées (2 boutons)&lt;/span&gt;
    pinMode(btn_SOS, INPUT);
    pinMode(btn_OK, INPUT);

    &lt;span class="hljs-comment"&gt;// les sorties (3 LED) éteintes&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class="hljs-number"&gt;3&lt;/span&gt;; i++)
    {
        pinMode(leds[i], OUTPUT);
        digitalWrite(leds[i], HIGH);
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  TP, le
  &lt;code&gt;
   setup
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Dans le code précédent, l’astuce mise en œuvre est celle d’utiliser une boucle for pour initialiser les broches en tant que sorties et les mettre à l’état haut en même temps ! Sans cette astuce, le code d’initialisation (lignes 11 à 15) aurait été comme ceci :
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// on définit les broches, où les LED sont connectées, en sortie&lt;/span&gt;
pinMode(led_vert, OUTPUT);
pinMode(led_rouge, OUTPUT);
pinMode(led_orange, OUTPUT);

&lt;span class="hljs-comment"&gt;// On éteint les LED&lt;/span&gt;
digitalWrite(led_vert, HIGH);
digitalWrite(led_orange, HIGH);
digitalWrite(led_rouge, HIGH);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Si vous n’utilisez pas cette astuce dans notre cas, ce n’est pas dramatique. En fait, cela est utilisé lorsque vous avez 20 ou même 100 LED et broches à initialiser ! C’est moins fatigant comme ça… Qui a dit programmeur ?
 &lt;img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/&gt;
&lt;/p&gt;
&lt;h4 id="la-fonction-principale-et-les-autres"&gt;
 &lt;a aria-hidden="true" href="#la-fonction-principale-et-les-autres"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 La fonction principale et les autres
&lt;/h4&gt;
&lt;h5 id="algorithme"&gt;
 &lt;a aria-hidden="true" href="#algorithme"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Algorithme
&lt;/h5&gt;
&lt;p&gt;
 Prenez l’habitude de
 &lt;em&gt;
  toujours rédiger un brouillon
 &lt;/em&gt;
 de type algorithme ou quelque chose qui y ressemble avant de commencer à coder, cela vous permettra de mieux vous repérer dans l’endroit où vous en êtes sur l’avancement de votre programme. Voilà l’organigramme que j’ai fait lorsque j’ai commencé ce TP :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Organigramme baignade interdite" src="./images/uploaded/tuto-arduino-303-tp-baignade-interdite/organigramme-baignade-interdite.png"/&gt;
 &lt;figcaption&gt;
  Organigramme baignade interdite
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Et voilà en quelques mots la lecture de cet organigramme:
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  On démarre la fonction loop
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   Si on a un appui sur le bouton SOS :
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    On commence par faire clignoter la led rouge pour signaler l’alarme
   &lt;/li&gt;
   &lt;li&gt;
    Et on clignote tant que le sauveteur n’a pas appuyé sur le second bouton
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   Sinon (ou si l’évènement est fini) on vérifie la présence d’un mot sur la voie série
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    S’il y a quelque chose à lire on va le récupérer
   &lt;/li&gt;
   &lt;li&gt;
    Sinon on continue dans le programme
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Enfin, on met à jour les drapeaux
 &lt;/li&gt;
 &lt;li&gt;
  Puis on repart au début et refaisons le même traitement
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Fort de cet outil, nous allons pouvoir coder proprement notre fonction
 &lt;code&gt;
  loop()
 &lt;/code&gt;
 puis tout un tas de fonctions utiles tout autour.
&lt;/p&gt;
&lt;h5 id="fonction-loop"&gt;
 &lt;a aria-hidden="true" href="#fonction-loop"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Fonction loop()
&lt;/h5&gt;
&lt;p&gt;
 Voici dès maintenant la fonction loop(), qui va exécuter l’algorithme présenté ci-dessus. Vous voyez qu’il est assez "léger" car je fais appel à de nombreuses fonctions que j’ai créées. Nous verrons ensuite le rôle de ces différentes fonctions. Cependant, j’ai fait en sorte quelles aient toutes un nom explicite pour que le programme soit facilement compréhensible sans même connaître le code qu’elles contiennent.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on regarde si le bouton SOS est appuyé&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(digitalRead(btn_SOS) == LOW)
    {
        &lt;span class="hljs-comment"&gt;// si oui, on émet l'alerte en appelant la fonction prévue à cet effet&lt;/span&gt;
        alerte();
    }

    &lt;span class="hljs-comment"&gt;// puis on continu en vérifiant la présence de caractère sur la voie série&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// s'il y a des données disponibles sur la voie série&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// (Serial.available() renvoi un nombre supérieur à 0)&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(Serial.available())
    {
        &lt;span class="hljs-comment"&gt;// alors on va lire le contenu de la réception&lt;/span&gt;
        lireVoieSerie();
        &lt;span class="hljs-comment"&gt;// on entre dans une variable la valeur retournée par&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// la fonction comparerMot()&lt;/span&gt;
        etat = comparerMot(mot);
    }
    &lt;span class="hljs-comment"&gt;// Puis on met à jour l'état des LED&lt;/span&gt;
    allumerDrapeau(etat);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  TP, la boucle principale
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="lecture-des-données-sur-la-voie-série"&gt;
 &lt;a aria-hidden="true" href="#lecture-des-données-sur-la-voie-série"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Lecture des données sur la voie série
&lt;/h5&gt;
&lt;p&gt;
 Afin de garder la fonction loop "légère", nous avons rajouté quelques fonctions annexes. La première sera celle de lecture de la voie série. Son job consiste à aller lire les informations contenues dans le buffer de réception du micro-contrôleur. On va lire les caractères en les stockant dans le tableau global
 &lt;code&gt;
  mot[]
 &lt;/code&gt;
 déclaré plus tôt. La lecture s’arrête sous deux conditions :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Soit on a trop de caractère et donc on risque d’inscrire des caractères dans des variables n’existant pas (ici tableau limité à 20 caractères)
 &lt;/li&gt;
 &lt;li&gt;
  Soit on a rencontré le caractère symbolisant la fin de ligne. Ce caractère est
  &lt;code&gt;
   '\n'
  &lt;/code&gt;
  .
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Voici maintenant le code de cette fonction :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// lit un mot sur la voie série (lit jusqu'à rencontrer le caractère '\n')&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;lireVoieSerie&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;void&lt;/span&gt;)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// variable locale pour l'incrémentation des données du tableau&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i = &lt;span class="hljs-number"&gt;0&lt;/span&gt;;

    &lt;span class="hljs-comment"&gt;// on lit les caractères tant qu'il y en a&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// OU si jamais le nombre de caractères lus atteint 19&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// (limite du tableau stockant le mot - 1 caractère)&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(Serial.available() &amp;gt; &lt;span class="hljs-number"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; i &amp;lt;= &lt;span class="hljs-number"&gt;19&lt;/span&gt;)
    {
        &lt;span class="hljs-comment"&gt;// on enregistre le caractère lu&lt;/span&gt;
        mot[i] = Serial.read();
        &lt;span class="hljs-comment"&gt;// laisse un peu de temps entre chaque accès a la mémoire&lt;/span&gt;
        delay(&lt;span class="hljs-number"&gt;10&lt;/span&gt;);
        &lt;span class="hljs-comment"&gt;// on passe à l'indice suivant&lt;/span&gt;
        i++;
    }
    &lt;span class="hljs-comment"&gt;// on supprime le caractère '\n'&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// et on le remplace par celui de fin de chaine '\0'&lt;/span&gt;
    mot[i] = &lt;span class="hljs-string"&gt;'\0'&lt;/span&gt;;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  TP, la fonction
  &lt;code&gt;
   lireVoieSerie
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="allumer-les-drapeaux"&gt;
 &lt;a aria-hidden="true" href="#allumer-les-drapeaux"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Allumer les drapeaux
&lt;/h5&gt;
&lt;p&gt;
 Voilà un titre à en rendre fou plus d’un ! Vous pouvez ranger vos briquets, on en aura pas besoin.
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
 Une deuxième fonction est celle permettant d’allumer et d’éteindre les LED. Elle est assez simple et prend un paramètre : le numéro de la LED à allumer. Dans notre cas : 0, 1 ou 2 correspondant respectivement à vert, orange, rouge. En passant le paramètre -1, on éteint toutes les LED.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;/*
Rappel du fonctionnement du code qui précède celui-ci :
&amp;gt; lit un mot sur la voie série (lit jusqu'à rencontrer le caractère '\n')
Fonction allumerDrapeau() :
&amp;gt; Allume un des trois drapeaux
&amp;gt; paramètre : le numéro du drapeau à allumer
&amp;gt; (note : si le paramètre est -1, on éteint toutes les LED)
*/&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;allumerDrapeau&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; numLed)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// On commence par éteindre les trois LED&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; j=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; j&amp;lt;&lt;span class="hljs-number"&gt;3&lt;/span&gt;; j++)
    {
        digitalWrite(leds[j], HIGH);
    }
    &lt;span class="hljs-comment"&gt;// puis on allume une seule LED si besoin&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(numLed != &lt;span class="hljs-number"&gt;-1&lt;/span&gt;)
    {
        digitalWrite(leds[numLed], LOW);
    }

    &lt;span class="hljs-comment"&gt;/* Note : vous pourrez améliorer cette fonction en
    vérifiant par exemple que le paramètre ne
    dépasse pas le nombre présent de LED
    */&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  TP, la fonction
  &lt;code&gt;
   allumerDrapeau
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Vous pouvez voir ici un autre intérêt du tableau utilisé dans la fonction
 &lt;code&gt;
  setup()
 &lt;/code&gt;
 pour initialiser les LED. Une seule ligne permet de faire l’allumage de la LED concernée !
&lt;/p&gt;
&lt;h5 id="faire-clignoter-la-led-rouge"&gt;
 &lt;a aria-hidden="true" href="#faire-clignoter-la-led-rouge"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Faire clignoter la LED rouge
&lt;/h5&gt;
&lt;p&gt;
 Lorsque quelqu’un appui sur le bouton d’alerte, il faut immédiatement avertir les sauveteurs sur la zPlage. Dans le programme principal, on va détecter l’appui sur le bouton SOS. Ensuite, on passera dans la fonction
 &lt;code&gt;
  alerte()
 &lt;/code&gt;
 codée ci-dessous. Cette fonction est assez simple. Elle va tout d’abord relever le temps à laquelle elle est au moment même (nombre de millisecondes écoulées depuis le démarrage). Ensuite, on va éteindre toutes les LED. Enfin, et c’est là le plus important, on va attendre du sauveteur un appui sur le bouton. TANT QUE cet appui n’est pas fait, on change l’état de la LED rouge toute les 250 millisecondes (choix arbitraire modifiable selon votre humeur). Une fois que l’appui du Sauveteur a été réalisé, on va repartir dans la boucle principale et continuer l’exécution du programme.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Éteint les LED et fais clignoter la LED rouge&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// en attendant l'appui du bouton "sauveteur"&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;alerte&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;void&lt;/span&gt;)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; temps = millis();
    boolean clignotant = &lt;span class="hljs-literal"&gt;false&lt;/span&gt;;
    allumerDrapeau(&lt;span class="hljs-number"&gt;-1&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// on éteint toutes les LED&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;// tant que le bouton de sauveteur n'est pas appuyé&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// on fait clignoté la LED rouge&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(digitalRead(btn_OK) != LOW)
    {
        &lt;span class="hljs-comment"&gt;// S'il s'est écoulé 250 ms ou plus depuis la dernière vérification&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(millis() - temps &amp;gt; &lt;span class="hljs-number"&gt;250&lt;/span&gt;)
        {
            &lt;span class="hljs-comment"&gt;// on change l'état de la LED rouge&lt;/span&gt;
            &lt;span class="hljs-comment"&gt;// si clignotant était FALSE, il devient TRUE et inversement&lt;/span&gt;
            clignotant = !clignotant;
            &lt;span class="hljs-comment"&gt;// la LED est allumée au gré de la variable clignotant&lt;/span&gt;
            digitalWrite(leds[ROUGE], clignotant);
            &lt;span class="hljs-comment"&gt;// on se rappel de la date de dernier passage&lt;/span&gt;
            temps = millis();
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  TP, la fonction
  &lt;code&gt;
   alerte
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="comparer-les-mots"&gt;
 &lt;a aria-hidden="true" href="#comparer-les-mots"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Comparer les mots
&lt;/h5&gt;
&lt;p&gt;
 Et voici maintenant le plus dur pour la fin, enfin j’exagère un peu. En effet, il ne vous reste plus qu’à comparer le mot reçu sur la voie série avec la banque de données de mots possible. Nous allons donc effectuer cette vérification dans la fonction
 &lt;code&gt;
  comparerMot()
 &lt;/code&gt;
 . Cette fonction recevra en paramètre la chaîne de caractères représentant le mot qui doit être vérifié et comparé. Elle renverra ensuite "l’état" (vert (0), orange (1) ou rouge (2)) qui en résulte. Si aucun mot n’a été reconnu, on renvoie "ORANGE" car incertitude.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; &lt;span class="hljs-title"&gt;comparerMot&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; mot[])&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on compare les mots "VERT" (surveillant, calme)&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(&lt;span class="hljs-built_in"&gt;strcmp&lt;/span&gt;(mot, &lt;span class="hljs-string"&gt;"surveillant"&lt;/span&gt;) == &lt;span class="hljs-number"&gt;0&lt;/span&gt;)
    {
        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; VERT;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(&lt;span class="hljs-built_in"&gt;strcmp&lt;/span&gt;(mot, &lt;span class="hljs-string"&gt;"calme"&lt;/span&gt;) == &lt;span class="hljs-number"&gt;0&lt;/span&gt;)
    {
        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; VERT;
    }
    &lt;span class="hljs-comment"&gt;// on compare les mots "ORANGE" (vague)&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(&lt;span class="hljs-built_in"&gt;strcmp&lt;/span&gt;(mot, &lt;span class="hljs-string"&gt;"vague"&lt;/span&gt;) == &lt;span class="hljs-number"&gt;0&lt;/span&gt;)
    {
        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; ORANGE;
    }
    &lt;span class="hljs-comment"&gt;// on compare les mots "ROUGE" (meduse, tempete, requin)&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(&lt;span class="hljs-built_in"&gt;strcmp&lt;/span&gt;(mot, &lt;span class="hljs-string"&gt;"meduse"&lt;/span&gt;) == &lt;span class="hljs-number"&gt;0&lt;/span&gt;)
    {
        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; ROUGE;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(&lt;span class="hljs-built_in"&gt;strcmp&lt;/span&gt;(mot, &lt;span class="hljs-string"&gt;"tempete"&lt;/span&gt;) == &lt;span class="hljs-number"&gt;0&lt;/span&gt;)
    {
        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; ROUGE;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(&lt;span class="hljs-built_in"&gt;strcmp&lt;/span&gt;(mot, &lt;span class="hljs-string"&gt;"requin"&lt;/span&gt;) == &lt;span class="hljs-number"&gt;0&lt;/span&gt;)
    {
        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; ROUGE;
    }

    &lt;span class="hljs-comment"&gt;// si on a rien reconnu on renvoi ORANGE&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; ORANGE;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  TP, la fonction
  &lt;code&gt;
   comparerMot
  &lt;/code&gt;
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="code-complet"&gt;
 &lt;a aria-hidden="true" href="#code-complet"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Code complet
&lt;/h4&gt;
&lt;p&gt;
 Comme vous avez été sage jusqu’à présent, j’ai rassemblé pour vous le code complet de ce TP. Bien entendu, il va de pair avec le bon câblage des LED, placées sur les bonnes broches, ainsi que les boutons et le reste… Je vous fais cependant confiance pour changer les valeurs des variables si les broches utilisées sont différentes.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;define&lt;/span&gt; VERT 0&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;define&lt;/span&gt; ORANGE 1&lt;/span&gt;
&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;define&lt;/span&gt; ROUGE 2&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; etat = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// stock l'état de la situation (vert = 0, orange = 1, rouge = 2)&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; mot[&lt;span class="hljs-number"&gt;20&lt;/span&gt;]; &lt;span class="hljs-comment"&gt;// le mot lu sur la voie série&lt;/span&gt;

&lt;span class="hljs-comment"&gt;// numéro des broches utilisées&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; btn_SOS = &lt;span class="hljs-number"&gt;2&lt;/span&gt;;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; btn_OK = &lt;span class="hljs-number"&gt;3&lt;/span&gt;;

&lt;span class="hljs-comment"&gt;// tableau de 3 éléments contenant les numéros de broches des LED&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; leds[&lt;span class="hljs-number"&gt;3&lt;/span&gt;] = {&lt;span class="hljs-number"&gt;11&lt;/span&gt;,&lt;span class="hljs-number"&gt;12&lt;/span&gt;,&lt;span class="hljs-number"&gt;13&lt;/span&gt;};

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// On démarre la voie série avec une vitesse de 9600 bits/seconde&lt;/span&gt;
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);

    &lt;span class="hljs-comment"&gt;// réglage des entrées/sorties&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// les entrées (2 boutons)&lt;/span&gt;
    pinMode(btn_SOS, INPUT);
    pinMode(btn_OK, INPUT);

    &lt;span class="hljs-comment"&gt;// les sorties (3 LED) éteintes&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; i&amp;lt;&lt;span class="hljs-number"&gt;3&lt;/span&gt;; i++)
    {
        pinMode(leds[i], OUTPUT);
        digitalWrite(leds[i], HIGH);
    }
}


&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on regarde si le bouton SOS est appuyé&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(digitalRead(btn_SOS) == LOW)
    {
        &lt;span class="hljs-comment"&gt;// si oui, on émet l'alerte en appelant la fonction prévue à cet effet&lt;/span&gt;
        alerte();
    }

    &lt;span class="hljs-comment"&gt;// puis on continu en vérifiant la présence de caractère sur la voie série&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// s'il y a des données disponibles sur la voie série&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// (Serial.available() renvoi un nombre supérieur à 0)&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(Serial.available())
    {
        &lt;span class="hljs-comment"&gt;// alors on va lire le contenu de la réception&lt;/span&gt;
        lireVoieSerie();
        &lt;span class="hljs-comment"&gt;// on entre dans une variable la valeur retournée&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// par la fonction comparerMot()&lt;/span&gt;
        etat = comparerMot(mot);
    }
    &lt;span class="hljs-comment"&gt;// Puis on met à jour l'état des LED&lt;/span&gt;
    allumerDrapeau(etat);
}


&lt;span class="hljs-comment"&gt;// lit un mot sur la voie série (lit jusqu'à rencontrer le caractère '\n')&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;lireVoieSerie&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;void&lt;/span&gt;)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i = &lt;span class="hljs-number"&gt;0&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// variable locale pour l'incrémentation des données du tableau&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;// on lit les caractères tant qu'il y en a&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// OU si jamais le nombre de caractères lus atteint 19&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// (limite du tableau stockant le mot - 1 caractère)&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(Serial.available() &amp;gt; &lt;span class="hljs-number"&gt;0&lt;/span&gt; &amp;amp;&amp;amp; i &amp;lt;= &lt;span class="hljs-number"&gt;19&lt;/span&gt;)
    {
        mot[i] = Serial.read(); &lt;span class="hljs-comment"&gt;// on enregistre le caractère lu&lt;/span&gt;
        delay(&lt;span class="hljs-number"&gt;10&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// laisse un peu de temps entre chaque accès a la mémoire&lt;/span&gt;
        i++; &lt;span class="hljs-comment"&gt;// on passe à l'indice suivant&lt;/span&gt;
    }
    &lt;span class="hljs-comment"&gt;// on supprime le caractère '\n'&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// et on le remplace par celui de fin de chaine '\0'&lt;/span&gt;
    mot[i] = &lt;span class="hljs-string"&gt;'\0'&lt;/span&gt;;
}


&lt;span class="hljs-comment"&gt;/*
Rappel du fonctionnement du code qui précède celui-ci :
&amp;gt; lit un mot sur la voie série (lit jusqu'à rencontrer le caractère '\n')
Fonction allumerDrapeau() :
&amp;gt; Allume un des trois drapeaux
&amp;gt; paramètre : le numéro du drapeau à allumer
&amp;gt; (note : si le paramètre est -1, on éteint toutes les LED)
*/&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;allumerDrapeau&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; numLed)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// On commence par éteindre les trois LED&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; j=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; j&amp;lt;&lt;span class="hljs-number"&gt;3&lt;/span&gt;; j++)
    {
        digitalWrite(leds[j], HIGH);
    }
    &lt;span class="hljs-comment"&gt;// puis on allume une seule LED si besoin&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(numLed != &lt;span class="hljs-number"&gt;-1&lt;/span&gt;)
    {
        digitalWrite(leds[numLed], LOW);
    }

    &lt;span class="hljs-comment"&gt;/* Note : vous pourrez améliorer cette fonction en
vérifiant par exemple que le paramètre ne
dépasse pas le nombre présent de LED
*/&lt;/span&gt;
}


&lt;span class="hljs-comment"&gt;// Éteint les LED et fais clignoter la LED rouge&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// en attendant l'appui du bouton "sauveteur"&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;alerte&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;void&lt;/span&gt;)&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;long&lt;/span&gt; temps = millis();
    boolean clignotant = &lt;span class="hljs-literal"&gt;false&lt;/span&gt;;
    allumerDrapeau(&lt;span class="hljs-number"&gt;-1&lt;/span&gt;); &lt;span class="hljs-comment"&gt;// on éteint toutes les LED&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;// tant que le bouton de sauveteur n'est pas appuyé&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// on fait clignoté la LED rouge&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(digitalRead(btn_OK) != LOW)
    {
        &lt;span class="hljs-comment"&gt;// S'il s'est écoulé 250 ms ou plus depuis la dernière vérification&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(millis() - temps &amp;gt; &lt;span class="hljs-number"&gt;250&lt;/span&gt;)
        {
            &lt;span class="hljs-comment"&gt;// on change l'état de la LED rouge&lt;/span&gt;
            &lt;span class="hljs-comment"&gt;// si clignotant était FALSE, il devient TRUE et inversement&lt;/span&gt;
            clignotant = !clignotant;
            &lt;span class="hljs-comment"&gt;// la LED est allumée au gré de la variable clignotant&lt;/span&gt;
            digitalWrite(leds[ROUGE], clignotant);
            &lt;span class="hljs-comment"&gt;// on se rappel de la date de dernier passage&lt;/span&gt;
            temps = millis();
        }
    }
}


&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; &lt;span class="hljs-title"&gt;comparerMot&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; mot[])&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on compare les mots "VERT" (surveillant, calme)&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(&lt;span class="hljs-built_in"&gt;strcmp&lt;/span&gt;(mot, &lt;span class="hljs-string"&gt;"surveillant"&lt;/span&gt;) == &lt;span class="hljs-number"&gt;0&lt;/span&gt;)
    {
        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; VERT;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(&lt;span class="hljs-built_in"&gt;strcmp&lt;/span&gt;(mot, &lt;span class="hljs-string"&gt;"calme"&lt;/span&gt;) == &lt;span class="hljs-number"&gt;0&lt;/span&gt;)
    {
        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; VERT;
    }
    &lt;span class="hljs-comment"&gt;// on compare les mots "ORANGE" (vague)&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(&lt;span class="hljs-built_in"&gt;strcmp&lt;/span&gt;(mot, &lt;span class="hljs-string"&gt;"vague"&lt;/span&gt;) == &lt;span class="hljs-number"&gt;0&lt;/span&gt;)
    {
        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; ORANGE;
    }
    &lt;span class="hljs-comment"&gt;// on compare les mots "ROUGE" (meduse, tempete, requin)&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(&lt;span class="hljs-built_in"&gt;strcmp&lt;/span&gt;(mot, &lt;span class="hljs-string"&gt;"meduse"&lt;/span&gt;) == &lt;span class="hljs-number"&gt;0&lt;/span&gt;)
    {
        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; ROUGE;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(&lt;span class="hljs-built_in"&gt;strcmp&lt;/span&gt;(mot, &lt;span class="hljs-string"&gt;"tempete"&lt;/span&gt;) == &lt;span class="hljs-number"&gt;0&lt;/span&gt;)
    {
        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; ROUGE;
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(&lt;span class="hljs-built_in"&gt;strcmp&lt;/span&gt;(mot, &lt;span class="hljs-string"&gt;"requin"&lt;/span&gt;) == &lt;span class="hljs-number"&gt;0&lt;/span&gt;)
    {
        &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; ROUGE;
    }

    &lt;span class="hljs-comment"&gt;// si on a rien reconnu on renvoi ORANGE&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;return&lt;/span&gt; ORANGE;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  TP, code complet
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Je rappel que si vous n’avez pas réussi à faire fonctionner complètement votre programme, aidez vous de celui-ci pour comprendre le pourquoi du comment qui empêche votre programme de fonctionner correctement ! A bons entendeurs.
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Voici la correction interactive :
&lt;/p&gt;
&lt;div class="video-container"&gt;
 &lt;div class="video-wrapper"&gt;
  &lt;iframe allowfullscreen="" frameborder="0" height="800" src="https://www.tinkercad.com/embed/9xf4ByxOK1B" width="100%"&gt;
  &lt;/iframe&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="améliorations"&gt;
 &lt;a aria-hidden="true" href="#améliorations"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Améliorations
&lt;/h3&gt;
&lt;p&gt;
 Je peux vous proposer quelques idées d’améliorations que je n’ai pas mises en oeuvre, mais qui me sont passées par la tête au moment où j’écrivais ces lignes :
&lt;/p&gt;
&lt;h5 id="améliorations-logicielles"&gt;
 &lt;a aria-hidden="true" href="#améliorations-logicielles"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Améliorations logicielles
&lt;/h5&gt;
&lt;p&gt;
 Avec la nouvelle version d’Arduino, la version 1.0,; il existe une fonction
 &lt;code&gt;
  SerialEvent()
 &lt;/code&gt;
 qui est exécutée dès qu’il y a un évènement sur la voie série du micro-contrôleur. Je vous laisse le soin de chercher à comprendre comment elle fonctionne et s’utilise, sur
 &lt;a href="http://arduino.cc/en/Reference/SerialEvent"&gt;
  cette page
 &lt;/a&gt;
 .
&lt;/p&gt;
&lt;h5 id="améliorations-matérielles"&gt;
 &lt;a aria-hidden="true" href="#améliorations-matérielles"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Améliorations matérielles
&lt;/h5&gt;
&lt;ul&gt;
 &lt;li&gt;
  On peut par exemple automatiser le changement d’un drapeau en utilisant un système mécanique avec un ou plusieurs moteurs électriques. Ce serait dans le cas d’utilisation réelle de ce montage, c’est-à-dire sur une plage…
 &lt;/li&gt;
 &lt;li&gt;
  Une liaison filaire entre un PC et une carte Arduino, ce n’est pas toujours la joie. Et puis bon, ce n’est pas toujours facile d’avoir un PC sous la main pour commander ce genre de montage. Alors pourquoi ne pas rendre la connexion sans-fil en utilisant par exemple des modules XBee ? Ces petits modules permettent une connexion sans-fil utilisant la voie série pour communiquer. Ainsi, d’un côté vous avez la télécommande (à base d’Arduino et d’un module XBee) de l’autre vous avez le récepteur, toujours avec un module XBee et une Arduino, puis le montage de ce TP avec l’amélioration précédente.
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Sérieusement si ce montage venait à être réalité avec les améliorations que je vous ai données, prévenez-moi par MP et faites en une vidéo pour que l’on puisse l’ajouter en lien ici même !
 &lt;img alt="^^" class="smiley" src="./static/smileys/hihi.png"/&gt;
&lt;/p&gt;
&lt;p&gt;
 Voila une grosse tâche de terminée ! J’espère qu’elle vous a plu même si vous avez pu rencontrer des difficultés. Souvenez-vous, "à vaincre sans difficulté on triomphe sans gloire", donc tant mieux si vous avez passé quelques heures dessus et, surtout, j’espère que vous avez appris des choses et pris du plaisir à faire votre montage, le dompter et le faire fonctionner comme vous le souhaitiez !
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>[Annexe] Ordinateur et voie série dans un autre langage de programmation</title><link href="https://eskimon.fr/tuto-arduino-304-annexe-ordinateur-et-voie-s%C3%A9rie-dans-un-autre-langage-de-programmation" rel="alternate"></link><published>2013-12-10T20:03:00+01:00</published><updated>2013-12-10T20:03:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2013-12-10:/tuto-arduino-304-annexe-ordinateur-et-voie-série-dans-un-autre-langage-de-programmation</id><summary type="html">&lt;p&gt;
 Maintenant que vous savez comment utiliser la voie série avec Arduino, il peut être bon de savoir comment visualiser les données envoyées avec vos propres programmes (l’émulateur terminal Windows ou le moniteur série Arduino ne comptent pas
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 ). Cette annexe a donc pour but de vous montrer comment utiliser la …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Maintenant que vous savez comment utiliser la voie série avec Arduino, il peut être bon de savoir comment visualiser les données envoyées avec vos propres programmes (l’émulateur terminal Windows ou le moniteur série Arduino ne comptent pas
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 ). Cette annexe a donc pour but de vous montrer comment utiliser la voie série avec quelques langages de programmation. Les langages utilisés ci-dessous ont été choisis arbitrairement en fonction de mes connaissances, car je ne connais pas tous les langages possibles et une fois vu quelques exemples, il ne devrait pas être trop dur de l’utiliser avec un autre langage. Nous allons donc travailler avec :
&lt;/p&gt;
&lt;p&gt;
 Afin de se concentrer sur la partie "Informatique", nous allons reprendre un programme travaillé précédemment dans le cours. Ce sera celui de l’exercice :
 &lt;a href="http://zestedesavoir.com/tutoriels/537/arduino-premiers-pas-en-informatique-embarquee/744/la-communication-avec-arduino/3427/envoyer-et-recevoir-des-donnees-sur-la-voie-serie/#4-exercice-attention-a-la-casse"&gt;
  Attention à la casse
 &lt;/a&gt;
 . Pensez donc à le charger dans votre carte Arduino avant de faire les tests.
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#en-c-avec-qt"&gt;
    En C++ avec Qt
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#installer-qextserialport"&gt;
      Installer QextSerialPort
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#1ère-étape-télécharger-les-sources"&gt;
       1ère étape : télécharger les sources
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#compiler-la-librairie"&gt;
       Compiler la librairie
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#installer-la-librairie-sous-linux"&gt;
       Installer la librairie : Sous Linux
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#installer-la-librairie-sous-windows"&gt;
       Installer la librairie : Sous Windows
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#infos-à-rajouter-dans-le-pro"&gt;
       Infos à rajouter dans le .pro
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#les-trucs-utiles"&gt;
      Les trucs utiles
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#linterface-utilisée"&gt;
       L’interface utilisée
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#lister-les-liaisons-séries"&gt;
       Lister les liaisons séries
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#gérer-une-connexion"&gt;
       Gérer une connexion
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#Émettre-et-recevoir-des-données"&gt;
      Émettre et recevoir des données
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#Émettre-des-données"&gt;
       Émettre des données
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#recevoir-des-données"&gt;
       Recevoir des données
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#en-c-net"&gt;
    En C# (.Net)
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#les-trucs-utiles-1"&gt;
      Les trucs utiles
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#linterface-et-les-imports"&gt;
       L’interface et les imports
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#lister-les-liaisons-séries-1"&gt;
       Lister les liaisons séries
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#gérer-une-connexion-1"&gt;
       Gérer une connexion
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#Émettre-et-recevoir-des-données-1"&gt;
      Émettre et recevoir des données
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#envoyer-des-données"&gt;
       Envoyer des données
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#recevoir-des-données-1"&gt;
       Recevoir des données
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#en-python"&gt;
    En Python
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#installation"&gt;
      Installation
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#ubuntu"&gt;
       Ubuntu
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#windows"&gt;
       Windows
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#utiliser-la-librairie"&gt;
      Utiliser la librairie
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#ouvrir-un-port-série"&gt;
       Ouvrir un port série
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#envoyer-des-données-1"&gt;
       Envoyer des données
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#recevoir-des-données-2"&gt;
       Recevoir des données
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#code-exemple-complet-et-commenté"&gt;
     Code exemple complet et commenté
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="en-c-avec-qt"&gt;
 &lt;a aria-hidden="true" href="#en-c-avec-qt"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 En C++ avec Qt
&lt;/h3&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Avant de commencer cette sous-partie, il est indispensable de connaître la programmation en C++ et savoir utiliser le framework Qt. Si vous ne connaissez pas tout cela, vous pouvez toujours aller vous renseigner avec un
   &lt;a href="http://fr.openclassrooms.com/informatique/cours/apprenez-a-programmer-en-c"&gt;
    tutoriel C++
   &lt;/a&gt;
   !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Le C++, OK, mais pourquoi Qt ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 J’ai choisi de vous faire travailler avec Qt pour plusieurs raisons d’ordres pratiques.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Qt est multiplateforme, donc les réfractaires à Linux (ou à Windows) pourront quand même travailler.
 &lt;/li&gt;
 &lt;li&gt;
  Dans le même ordre d’idée, nous allons utiliser une librairie tierce pour nous occuper de la voie série. Ainsi, aucun problème pour interfacer notre matériel que l’on soit sur un système ou un autre !
 &lt;/li&gt;
 &lt;li&gt;
  Enfin, j’aime beaucoup Qt et donc je vais vous en faire profiter
  &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 En fait, sachez que chaque système d’exploitation à sa manière de communiquer avec les périphériques matériels. L’utilisation d’une librairie tierce nous permet donc de faire abstraction de tout cela. Sinon il m’aurait fallu faire un tutoriel par OS, ce qui, on l’imagine facilement, serait une perte de temps (écrire trois fois
 &lt;em&gt;
  environ
 &lt;/em&gt;
 les mêmes choses) et vraiment galère à maintenir.
&lt;/p&gt;
&lt;h4 id="installer-qextserialport"&gt;
 &lt;a aria-hidden="true" href="#installer-qextserialport"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Installer QextSerialPort
&lt;/h4&gt;
&lt;p&gt;
 QextSerialPort est une librairie tierce réalisée par un membre de la communauté Qt. Pour utiliser cette librairie, il faut soit la compiler, soit utiliser les sources directement dans votre projet.
&lt;/p&gt;
&lt;h5 id="1ère-étape-télécharger-les-sources"&gt;
 &lt;a aria-hidden="true" href="#1ère-étape-télécharger-les-sources"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 1ère étape : télécharger les sources
&lt;/h5&gt;
&lt;p&gt;
 Le début de tout cela commence donc par récupérer les sources de la librairie. Pour cela, rendez-vous sur
 &lt;a href="http://code.google.com/p/qextserialport/"&gt;
  la page google code
 &lt;/a&gt;
 du projet. A partir d’ici vous avez plusieurs choix. Soit vous récupérez les sources en utilisant le gestionnaire de source mercurial (Hg). Il suffit de faire un clone du dépôt avec la commande suivante :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;hg &lt;span class="hljs-built_in"&gt;clone&lt;/span&gt; https:// code.google.com/p/qextserialport/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Sinon, vous pouvez
 &lt;a href="http://code.google.com/p/qextserialport/source/browse/#hg/src"&gt;
  récupérer les fichiers un par un
 &lt;/a&gt;
 (une dizaine). C’est plus contraignant mais ça marche aussi si vous n’avez jamais utilisé de gestionnaire de sources (mais c’est vraiment plus contraignant !)
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Cette dernière méthode est vraiment
   &lt;strong&gt;
    déconseillée
   &lt;/strong&gt;
   . En effet, vous vous retrouverez avec le strict minimum (fichiers sources sans exemples ou docs).
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 La manipulation est la même sous Windows ou Linux !
&lt;/p&gt;
&lt;h5 id="compiler-la-librairie"&gt;
 &lt;a aria-hidden="true" href="#compiler-la-librairie"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Compiler la librairie
&lt;/h5&gt;
&lt;p&gt;
 Maintenant que nous avons tous nos fichiers, nous allons pouvoir compiler la librairie. Pour cela, nous allons laisser Qt travailler à notre place.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Démarrez QtCreator et ouvrez le fichier .pro de QextSerialPort
 &lt;/li&gt;
 &lt;li&gt;
  Compilez…
 &lt;/li&gt;
 &lt;li&gt;
  C’est fini !
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Normalement vous avez un nouveau dossier à côté de celui des sources qui contient des exemples, ainsi que les
 &lt;strong&gt;
  librairies
 &lt;/strong&gt;
 QExtSerialPort.
&lt;/p&gt;
&lt;h5 id="installer-la-librairie-sous-linux"&gt;
 &lt;a aria-hidden="true" href="#installer-la-librairie-sous-linux"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Installer la librairie : Sous Linux
&lt;/h5&gt;
&lt;p&gt;
 Une fois que vous avez compilé votre nouvelle librairie, vous allez devoir placer les fichiers aux bons endroits pour les utiliser. Les librairies, qui sont apparues dans le dossier "build" qui vient d’être créé, vont être déplacées vers le dossier /usr/lib. Les fichiers sources qui étaient avec le fichier ".pro" pour la compilation sont à copier dans un sous-dossier "QextSerialPort" dans le répertoire de travail de votre projet courant.
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   A priori il y aurait un bug avec la compilation en mode release (la librairie générée ne fonctionnerait pas correctement). Je vous invite donc à compiler aussi la debug et travailler avec.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="installer-la-librairie-sous-windows"&gt;
 &lt;a aria-hidden="true" href="#installer-la-librairie-sous-windows"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Installer la librairie : Sous Windows
&lt;/h5&gt;
&lt;div class="custom-block alert alert-danger"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ce point est en cours de rédaction, merci de patienter avant sa mise en ligne.
   &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="infos-à-rajouter-dans-le-pro"&gt;
 &lt;a aria-hidden="true" href="#infos-à-rajouter-dans-le-pro"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Infos à rajouter dans le .pro
&lt;/h5&gt;
&lt;p&gt;
 Dans votre nouveau projet Qt pour traiter avec la voie série, vous aller rajouter les lignes suivantes à votre .pro :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-text"&gt;INCLUDEPATH += QextSerialPort

CONFIG(debug, debug|release):LIBS += -lqextserialportd
else:LIBS += -lqextserialport
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Ajout au .pro
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 La ligne "INCLUDEPATH" représente le dossier où vous avez mis les fichiers sources de QextSerialPort. Les deux autres lignes font le lien vers les librairies copiées plus tôt (les .so ou les .dll selon votre OS).
&lt;/p&gt;
&lt;h4 id="les-trucs-utiles"&gt;
 &lt;a aria-hidden="true" href="#les-trucs-utiles"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les trucs utiles
&lt;/h4&gt;
&lt;h5 id="linterface-utilisée"&gt;
 &lt;a aria-hidden="true" href="#linterface-utilisée"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’interface utilisée
&lt;/h5&gt;
&lt;p&gt;
 Comme expliqué dans l’introduction, nous allons toujours travailler sur le même exercice et juste changer le langage étudié. Voici donc l’interface sur laquelle nous allons travailler, et quels sont les noms et les types d’objets instanciés :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="interface Qt" src="./images/uploaded/tuto-arduino-304-annexe-ordinateur-et-voie-série-dans-un-autre-langage-de-programmation/interface-qt.png"/&gt;
 &lt;figcaption&gt;
  interface Qt
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Cette interface possède deux parties importantes : La
 &lt;strong&gt;
  gestion de la connexion
 &lt;/strong&gt;
 (en haut) et
 &lt;strong&gt;
  l’échange de résultat
 &lt;/strong&gt;
 (milieu -&amp;gt; émission, bas -&amp;gt; réception). Dans la partie supérieure, nous allons choisir le port de l’ordinateur sur lequel communiquer ainsi que la vitesse de cette communication. Ensuite, deux boîtes de texte sont présentes. L’une pour écrire du texte à émettre, et l’autre affichant le texte reçu. Voici les noms que j’utiliserai dans mon code :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Widget
      &lt;/th&gt;
      &lt;th&gt;
       Nom
      &lt;/th&gt;
      &lt;th&gt;
       Rôle
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       QComboBox
      &lt;/td&gt;
      &lt;td&gt;
       comboPort
      &lt;/td&gt;
      &lt;td&gt;
       Permet de choisir le port série
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       QComboBox
      &lt;/td&gt;
      &lt;td&gt;
       comboVitesse
      &lt;/td&gt;
      &lt;td&gt;
       Permet de choisir la vitesse de communication
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       QButton
      &lt;/td&gt;
      &lt;td&gt;
       btnconnexion
      &lt;/td&gt;
      &lt;td&gt;
       (Dé)Connecte la voie série (bouton "checkable")
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       QTextEdit
      &lt;/td&gt;
      &lt;td&gt;
       boxEmission
      &lt;/td&gt;
      &lt;td&gt;
       Nous écrirons ici le texte à envoyer
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       QTextEdit
      &lt;/td&gt;
      &lt;td&gt;
       boxReception
      &lt;/td&gt;
      &lt;td&gt;
       Ici apparaitra le texte à recevoir
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Liste des widgets utilisé
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;h5 id="lister-les-liaisons-séries"&gt;
 &lt;a aria-hidden="true" href="#lister-les-liaisons-séries"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Lister les liaisons séries
&lt;/h5&gt;
&lt;p&gt;
 Avant de créer et d’utiliser l’objet pour gérer la voie série, nous allons en voir quelques-uns pouvant être utiles. Tout d’abord, nous allons apprendre à obtenir la liste des ports série présents sur notre machine. Pour cela, un objet a été créé spécialement, il s’agit de
 &lt;code&gt;
  QextPortInfo
 &lt;/code&gt;
 . Voici un exemple de code leur permettant de fonctionner ensemble :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// L'objet mentionnant les infos&lt;/span&gt;
QextSerialEnumerator enumerateur;
&lt;span class="hljs-comment"&gt;// on met ces infos dans une liste&lt;/span&gt;
QList&amp;lt;QextPortInfo&amp;gt; ports = enumerateur.getPorts();
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Récuperation de la liste des ports séries
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Une fois que nous avons récupéré une énumération de tous les ports, nous allons pouvoir les ajouter au combobox qui est censé les afficher (comboPort). Pour cela on va parcourir la liste construite précédemment et ajouter à chaque fois une item dans le menu déroulant :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// on parcourt la liste des ports&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;for&lt;/span&gt;(&lt;span class="hljs-keyword"&gt;int&lt;/span&gt; i=&lt;span class="hljs-number"&gt;0&lt;/span&gt;; i&amp;lt;ports.size(); i++)
   ui-&amp;gt;ComboPort-&amp;gt;addItem(ports.at(i).physName);
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Remplissage du combobox des ports séries
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Les ports sont nommés différemment sous Windows et Linux, ne soyez donc pas surpris avec mes captures d’écrans, elles viennent toutes de Linux.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Une fois que la liste des ports est faite (attention, certains ports ne sont connectés à rien), on va construire la liste des vitesses, pour se laisser le choix le jour où l’on voudra faire une application à une vitesse différente. Cette opération n’est pas très compliquée puisqu’elle consiste simplement à ajouter des items dans la liste déroulante "comboVitesse".
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;ui-&amp;gt;comboVitesse-&amp;gt;addItem(&lt;span class="hljs-string"&gt;"300"&lt;/span&gt;);
ui-&amp;gt;comboVitesse-&amp;gt;addItem(&lt;span class="hljs-string"&gt;"1200"&lt;/span&gt;);
ui-&amp;gt;comboVitesse-&amp;gt;addItem(&lt;span class="hljs-string"&gt;"2400"&lt;/span&gt;);
ui-&amp;gt;comboVitesse-&amp;gt;addItem(&lt;span class="hljs-string"&gt;"4800"&lt;/span&gt;);
ui-&amp;gt;comboVitesse-&amp;gt;addItem(&lt;span class="hljs-string"&gt;"9600"&lt;/span&gt;);
ui-&amp;gt;comboVitesse-&amp;gt;addItem(&lt;span class="hljs-string"&gt;"14400"&lt;/span&gt;);
ui-&amp;gt;comboVitesse-&amp;gt;addItem(&lt;span class="hljs-string"&gt;"19200"&lt;/span&gt;);
ui-&amp;gt;comboVitesse-&amp;gt;addItem(&lt;span class="hljs-string"&gt;"38400"&lt;/span&gt;);
ui-&amp;gt;comboVitesse-&amp;gt;addItem(&lt;span class="hljs-string"&gt;"57600"&lt;/span&gt;);
ui-&amp;gt;comboVitesse-&amp;gt;addItem(&lt;span class="hljs-string"&gt;"115200"&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Remplissage du combobox des vitesses
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Votre interface est maintenant prête. En la démarrant maintenant vous devriez être en mesure de voir s’afficher les noms des ports séries existant sur l’ordinateur ainsi que les vitesses. Un clic sur le bouton ne fera évidemment rien puisque son comportement n’est pas encore implémenté.
&lt;/p&gt;
&lt;h5 id="gérer-une-connexion"&gt;
 &lt;a aria-hidden="true" href="#gérer-une-connexion"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Gérer une connexion
&lt;/h5&gt;
&lt;p&gt;
 Lorsque tous les détails concernant l’interface sont terminés, nous pouvons passer au cœur de l’application : la
 &lt;em&gt;
  communication série
 &lt;/em&gt;
 . La première étape pour pouvoir faire une communication est de se connecter (tout comme vous vous connectez sur une borne WiFi avant de communiquer et d’échanger des données avec cette dernière). C’est le rôle de notre bouton de connexion. A partir du système de slot automatique, nous allons créer une fonction qui va recevoir le clic de l’utilisateur. Cette fonction instanciera un objet QextSerialPort pour créer la communication, règlera cet objet et enfin ouvrira le canal. Dans le cas où le bouton était déjà coché (puisqu’il sera "checkable" rappelons-le) nous ferons la déconnexion, puis la destruction de l’objet QextSerialPort créé auparavant. Pour commencer nous allons donc déclarer les objets et méthodes utiles dans le .h de la classe avec laquelle nous travaillons :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;private&lt;/span&gt;:
&lt;span class="hljs-comment"&gt;// l'objet représentant le port&lt;/span&gt;
QextSerialPort * port;

&lt;span class="hljs-comment"&gt;// une fonction utile que j'expliquerais après&lt;/span&gt;
&lt;span class="hljs-function"&gt;BaudRateType &lt;span class="hljs-title"&gt;getBaudRateFromString&lt;/span&gt;&lt;span class="hljs-params"&gt;(QString baudRate)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-keyword"&gt;private&lt;/span&gt; slots:
&lt;span class="hljs-comment"&gt;// le slot automatique du bouton de connexion&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;on_btnconnexion_clicked&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ensuite, il nous faudra instancier le slot du bouton afin de traduire un comportement. Pour rappel, il devra :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Créer l’objet "port" de type QextSerialPort
 &lt;/li&gt;
 &lt;li&gt;
  Le régler avec les bons paramètres
 &lt;/li&gt;
 &lt;li&gt;
  Ouvrir la voie série
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Dans le cas où la voie série est déjà ouverte (le bouton est déjà appuyé) on devra la fermer et détruire l’objet. Voici le code commenté permettant l’ouverture de la voie série (quelques précisions viennent ensuite) :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;// Slot pour le click sur le bouton de connexion&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; Fenetre::on_btnconnexion_clicked() {
    &lt;span class="hljs-comment"&gt;// deux cas de figures à gérer,&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// soit on coche (connecte), soit on décoche (déconnecte)&lt;/span&gt;

    &lt;span class="hljs-comment"&gt;// on coche -&amp;gt; connexion&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(ui-&amp;gt;btnconnexion-&amp;gt;isChecked()) {
        &lt;span class="hljs-comment"&gt;// on essaie de faire la connexion avec la carte Arduino&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// on commence par créer l'objet port série&lt;/span&gt;
        port = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; QextSerialPort();
        &lt;span class="hljs-comment"&gt;// on règle le port utilisé (sélectionné dans la liste déroulante)&lt;/span&gt;
        port-&amp;gt;setPortName(ui-&amp;gt;ComboPort-&amp;gt;currentText());
        &lt;span class="hljs-comment"&gt;// on règle la vitesse utilisée&lt;/span&gt;
        port-&amp;gt;setBaudRate(
            getBaudRateFromString(ui-&amp;gt;comboVitesse-&amp;gt;currentText()));
        &lt;span class="hljs-comment"&gt;// quelques règlages pour que tout marche bien&lt;/span&gt;
        port-&amp;gt;setParity(PAR_NONE);&lt;span class="hljs-comment"&gt;// parité&lt;/span&gt;
        port-&amp;gt;setStopBits(STOP_1);&lt;span class="hljs-comment"&gt;// nombre de bits de stop&lt;/span&gt;
        port-&amp;gt;setDataBits(DATA_8);&lt;span class="hljs-comment"&gt;// nombre de bits de données&lt;/span&gt;
        port-&amp;gt;setFlowControl(FLOW_OFF);&lt;span class="hljs-comment"&gt;// pas de contrôle de flux&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// on démarre !&lt;/span&gt;
        port-&amp;gt;open(QextSerialPort::ReadWrite);
        &lt;span class="hljs-comment"&gt;// change le message du bouton&lt;/span&gt;
        ui-&amp;gt;btnconnexion-&amp;gt;setText(&lt;span class="hljs-string"&gt;"Deconnecter"&lt;/span&gt;);

        &lt;span class="hljs-comment"&gt;// on fait la connexion pour pouvoir obtenir les évènements&lt;/span&gt;
        connect(port,SIGNAL(readyRead()), &lt;span class="hljs-keyword"&gt;this&lt;/span&gt;, SLOT(readData()));
        connect(ui-&amp;gt;boxEmission,SIGNAL(textChanged()),&lt;span class="hljs-keyword"&gt;this&lt;/span&gt;,SLOT(sendData()));
    }
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; {
        &lt;span class="hljs-comment"&gt;// on se déconnecte de la carte Arduino&lt;/span&gt;
        port-&amp;gt;close();
        &lt;span class="hljs-comment"&gt;// puis on détruit l'objet port série devenu inutile&lt;/span&gt;
        &lt;span class="hljs-keyword"&gt;delete&lt;/span&gt; port;
        ui-&amp;gt;btnconnexion-&amp;gt;setText(&lt;span class="hljs-string"&gt;"Connecter"&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Gestion du bouton de connexion
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ce code n’est pas très compliqué à comprendre. Cependant quelques points méritent votre attention. Pour commencer, pour régler la vitesse du port série on fait appel à la fonction "setBaudRate". Cette fonction prend un paramètre de type BaudRateType qui fait partie d’une énumération de QextSerialPort. Afin de faire le lien entre le comboBox qui possède des chaines et le type particulier attendu, on crée et utilise la fonction "getBaudRateFromString". A partir d’un simple
 &lt;code&gt;
  BaudRateType
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;BaudRateType Fenetre::getBaudRateFromString(QString baudRate) {
    &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; vitesse = baudRate.toInt();
    &lt;span class="hljs-keyword"&gt;switch&lt;/span&gt;(vitesse) {
        &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;300&lt;/span&gt;):&lt;span class="hljs-keyword"&gt;return&lt;/span&gt; BAUD300;
        &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;1200&lt;/span&gt;):&lt;span class="hljs-keyword"&gt;return&lt;/span&gt; BAUD1200;
        &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;2400&lt;/span&gt;):&lt;span class="hljs-keyword"&gt;return&lt;/span&gt; BAUD2400;
        &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;4800&lt;/span&gt;):&lt;span class="hljs-keyword"&gt;return&lt;/span&gt; BAUD4800;
        &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;):&lt;span class="hljs-keyword"&gt;return&lt;/span&gt; BAUD9600;
        &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;14400&lt;/span&gt;):&lt;span class="hljs-keyword"&gt;return&lt;/span&gt; BAUD14400;
        &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;19200&lt;/span&gt;):&lt;span class="hljs-keyword"&gt;return&lt;/span&gt; BAUD19200;
        &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;38400&lt;/span&gt;):&lt;span class="hljs-keyword"&gt;return&lt;/span&gt; BAUD38400;
        &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;57600&lt;/span&gt;):&lt;span class="hljs-keyword"&gt;return&lt;/span&gt; BAUD57600;
        &lt;span class="hljs-keyword"&gt;case&lt;/span&gt;(&lt;span class="hljs-number"&gt;115200&lt;/span&gt;):&lt;span class="hljs-keyword"&gt;return&lt;/span&gt; BAUD115200;
        &lt;span class="hljs-keyword"&gt;default&lt;/span&gt;:&lt;span class="hljs-keyword"&gt;return&lt;/span&gt; BAUD9600;
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Gestion du changement de vitesse
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Un autre point important à regarder est l’utilisation de la fonction open() de l’objet QextSerialPort. En effet, il existe plusieurs façons d’ouvrir un port série :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  En lecture seule
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mo&gt;
         →
        &lt;/mo&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        \to
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.36687em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.36687em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mrel"&gt;
       →
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  QextSerialPort::ReadOnly
 &lt;/li&gt;
 &lt;li&gt;
  En écriture seule
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mo&gt;
         →
        &lt;/mo&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        \to
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.36687em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.36687em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mrel"&gt;
       →
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  QextSerialPort::WriteOnly
 &lt;/li&gt;
 &lt;li&gt;
  En lecture/écriture
  &lt;span class="inlineMath"&gt;
   &lt;span class="katex"&gt;
    &lt;span class="katex-mathml"&gt;
     &lt;math&gt;
      &lt;semantics&gt;
       &lt;mrow&gt;
        &lt;mo&gt;
         →
        &lt;/mo&gt;
       &lt;/mrow&gt;
       &lt;annotation encoding="application/x-tex"&gt;
        \to
       &lt;/annotation&gt;
      &lt;/semantics&gt;
     &lt;/math&gt;
    &lt;/span&gt;
    &lt;span aria-hidden="true" class="katex-html"&gt;
     &lt;span class="strut" style="height:0.36687em;"&gt;
     &lt;/span&gt;
     &lt;span class="strut bottom" style="height:0.36687em;vertical-align:0em;"&gt;
     &lt;/span&gt;
     &lt;span class="base"&gt;
      &lt;span class="mrel"&gt;
       →
      &lt;/span&gt;
     &lt;/span&gt;
    &lt;/span&gt;
   &lt;/span&gt;
  &lt;/span&gt;
  QextSerialPort::ReadWrite
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Ensuite, on connecte simplement les signaux émis par la voie série et par la boite de texte servant à l’émission (que l’on verra juste après). Enfin, lorsque l’utilisateur re-clic sur le bouton, on passe dans le
 &lt;code&gt;
  NULL
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Ce code présente le principe et n’est pas parfait ! Il faudrait par exemple s’assurer que le port est bien ouvert avant d’envoyer des données (faire un test
   &lt;code&gt;
    if(port-&amp;gt;isOpen())
   &lt;/code&gt;
   par exemple).
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="Émettre-et-recevoir-des-données"&gt;
 &lt;a aria-hidden="true" href="#Émettre-et-recevoir-des-données"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Émettre et recevoir des données
&lt;/h4&gt;
&lt;p&gt;
 Maintenant que la connexion est établie, nous allons pouvoir envoyer et recevoir des données. Ce sera le rôle de deux slots qui ont été brièvement évoqués dans la fonction
 &lt;code&gt;
  connect()
 &lt;/code&gt;
 du code de connexion précédent.
&lt;/p&gt;
&lt;h5 id="Émettre-des-données"&gt;
 &lt;a aria-hidden="true" href="#Émettre-des-données"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Émettre des données
&lt;/h5&gt;
&lt;p&gt;
 L’émission des données se fera dans le slot "sendData". Ce slot sera appelé à chaque fois qu’il y aura une modification du contenu de la boîte de texte "boxEmission". Pour l’application concernée (l’envoi d’un seul caractère), il nous suffit de chercher le dernier caractère tapé. On récupère donc le dernier caractère du texte contenu dans la boite avant de l’envoyer sur la voie série. L’envoi de texte se fait à partir de la fonction
 &lt;code&gt;
  toAscii()
 &lt;/code&gt;
 et on peut donc les utiliser directement. Voici le code qui illustre toutes ces explications (ne pas oublier de mettre les déclarations des slots dans le .h) :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; Fenetre::sendData() {
    &lt;span class="hljs-comment"&gt;// On récupère le dernier caractère tapé&lt;/span&gt;
    QString caractere = ui-&amp;gt;boxEmission-&amp;gt;toPlainText().right(&lt;span class="hljs-number"&gt;1&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// si le port est instancié (donc ouvert a priori)&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(port != &lt;span class="hljs-literal"&gt;NULL&lt;/span&gt;)
        port-&amp;gt;write(caractere.toAscii());
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Envoi de données
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="recevoir-des-données"&gt;
 &lt;a aria-hidden="true" href="#recevoir-des-données"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Recevoir des données
&lt;/h5&gt;
&lt;p&gt;
 Le programme étudié est censé nous répondre en renvoyant le caractère émis mais dans une
 &lt;em&gt;
  casse opposée
 &lt;/em&gt;
 (majuscule contre minuscule et vice versa). En temps normal, deux politiques différentes s’appliquent pour savoir si des données sont arrivées. La première est d’aller voir de manière régulière (ou pas) si des caractères sont présents dans le tampon de réception de la voie série. Cette méthode dite de *Polling n’est pas très fréquemment utilisée. La seconde est de déclencher un évènement lorsque des données arrivent sur la voie série. C’est la forme qui est utilisée par défaut par l’objet
 &lt;code&gt;
  readyRead()
 &lt;/code&gt;
 ) est émis par l’objet et peut donc être connecté à un slot. Pour changer le mode de fonctionnement, il faut utiliser la méthode
 &lt;code&gt;
  QextSerialPort::EventDriven
 &lt;/code&gt;
 pour la seconde (par défaut). Comme la connexion entre le signal et le slot est créée dans la fonction de connexion, il ne nous reste qu’à écrire le comportement du slot de réception lorsqu’une donnée arrive. Le travail est simple et se résume en deux étapes :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Lire le caractère reçu grâce à la fonction
  &lt;code&gt;
   QextSerialPort
  &lt;/code&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Le copier dans la boite de texte "réception"
 &lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; Fenetre::readData() {
    QByteArray &lt;span class="hljs-built_in"&gt;array&lt;/span&gt; = port-&amp;gt;readAll();
    ui-&amp;gt;boxReception-&amp;gt;insertPlainText(&lt;span class="hljs-built_in"&gt;array&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Réception de données
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Et voilà, vous êtes maintenant capable de travailler avec la voie série dans vos programmes Qt en C++. Au risque de me répéter, je suis conscient qu’il y a des lacunes en terme de "sécurité" et d’efficacité. Ce code a pour but de vous montrer les bases de la classe pour que vous puissiez continuer ensuite votre apprentissage. En effet, la programmation C++/Qt n’est pas le sujet de ce tutoriel.
 &lt;img alt=":ninja:" class="smiley" src="./static/smileys/ninja.png"/&gt;
 Nous vous serons donc reconnaissants de ne pas nous harceler de commentaires relatifs au tuto pour nous dire "bwaaaa c’est mal codéééééé". Merci !
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
&lt;/p&gt;
&lt;h3 id="en-c-net"&gt;
 &lt;a aria-hidden="true" href="#en-c-net"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 En C# (.Net)
&lt;/h3&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Dans cette partie (comme dans les précédentes) je pars du principe que vous connaissez le langage et avez déjà dessiné des interfaces et créé des actions sur des boutons par exemple. Cette sous-partie n’est pas là pour vous apprendre le C# !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Là encore je vais reprendre la même structure que les précédentes sous-parties.
&lt;/p&gt;
&lt;h4 id="les-trucs-utiles-1"&gt;
 &lt;a aria-hidden="true" href="#les-trucs-utiles-1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les trucs utiles
&lt;/h4&gt;
&lt;h5 id="linterface-et-les-imports"&gt;
 &lt;a aria-hidden="true" href="#linterface-et-les-imports"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 L’interface et les imports
&lt;/h5&gt;
&lt;p&gt;
 Voici tout de suite l’interface utilisée ! Je vous donnerai juste après le nom que j’utilise pour chacun des composants (et tant qu’à faire je vous donnerai aussi leurs types).
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="L'interface en C#" src="./images/uploaded/tuto-arduino-304-annexe-ordinateur-et-voie-série-dans-un-autre-langage-de-programmation/linterface-en-c.jpg"/&gt;
 &lt;figcaption&gt;
  L'interface en C#
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Comme cette interface est la même pour tout ce chapitre, nous retrouvons comme d’habitude le bandeau pour gérer la connexion ainsi que les deux boîtes de texte pour l’émission et la réception des données. Voici les types d’objets et leurs noms pour le bandeau de connexion :
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;figure&gt;
  &lt;div class="table-wrapper"&gt;
   &lt;table class=" table table-bordered table-striped"&gt;
    &lt;thead&gt;
     &lt;tr&gt;
      &lt;th&gt;
       Composant
      &lt;/th&gt;
      &lt;th&gt;
       Nom
      &lt;/th&gt;
      &lt;th&gt;
       Rôle
      &lt;/th&gt;
     &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
     &lt;tr&gt;
      &lt;td&gt;
       System.Windows.Forms.ComboBox
      &lt;/td&gt;
      &lt;td&gt;
       comboPort
      &lt;/td&gt;
      &lt;td&gt;
       Permet de choisir le port série
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       System.Windows.Forms.ComboBox
      &lt;/td&gt;
      &lt;td&gt;
       comboVitesse
      &lt;/td&gt;
      &lt;td&gt;
       Permet de choisir la vitesse de communication
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       System.Windows.Forms.Button
      &lt;/td&gt;
      &lt;td&gt;
       btnConnexion
      &lt;/td&gt;
      &lt;td&gt;
       (Dé)Connecte la voie série (bouton "checkable")
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       System.Windows.Forms.TextBox
      &lt;/td&gt;
      &lt;td&gt;
       boxEmission
      &lt;/td&gt;
      &lt;td&gt;
       Nous écrirons ici le texte à envoyer
      &lt;/td&gt;
     &lt;/tr&gt;
     &lt;tr&gt;
      &lt;td&gt;
       System.Windows.Forms.TextBox
      &lt;/td&gt;
      &lt;td&gt;
       boxReception
      &lt;/td&gt;
      &lt;td&gt;
       Ici apparaitra le texte à recevoir
      &lt;/td&gt;
     &lt;/tr&gt;
    &lt;/tbody&gt;
   &lt;/table&gt;
  &lt;/div&gt;
  &lt;figcaption&gt;
   Liste des widgets utilisé
  &lt;/figcaption&gt;
 &lt;/figure&gt;
&lt;/div&gt;
&lt;p&gt;
 Avant de commencer les choses marrantes, nous allons d’abord devoir ajouter une librairie : celle des liaisons séries. Elle se nomme simplement
 &lt;code&gt;
  using System.IO.Ports;
 &lt;/code&gt;
 . Nous allons en profiter pour rajouter une variable membre de la classe de type SerialPort que j’appellerai "port". Cette variable représentera, vous l’avez deviné, notre port série !
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-csharp"&gt;SerialPort port
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Maintenant que tous les outils sont prêts, nous pouvons commencer !
&lt;/p&gt;
&lt;h5 id="lister-les-liaisons-séries-1"&gt;
 &lt;a aria-hidden="true" href="#lister-les-liaisons-séries-1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Lister les liaisons séries
&lt;/h5&gt;
&lt;p&gt;
 La première étape sera de lister l’ensemble des liaisons séries sur l’ordinateur. Pour cela nous allons nous servir d’une fonction statique de la classe
 &lt;code&gt;
  String
 &lt;/code&gt;
 . Chaque case du tableau sera une chaîne de caractère comportant le nom d’une voie série. Une fois que nous avons ce tableau, nous allons l’ajouter sur l’interface, dans la liste déroulante prévue à cet effet pour pouvoir laisser le choix à l’utilisateur au démarrage de l’application. Dans le même élan, on va peupler la liste déroulante des vitesses avec quelques-unes des vitesses les plus courantes. Voici le code de cet ensemble. Personnellement je l’ai ajouté dans la méthode
 &lt;code&gt;
  InitializeComponent()
 &lt;/code&gt;
 qui charge les composants.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-csharp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;Form1_Load&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;span class="hljs-keyword"&gt;object&lt;/span&gt; sender, EventArgs e&lt;/span&gt;)
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on commence par lister les voies séries présentes&lt;/span&gt;
    String[] ports = SerialPort.GetPortNames(); &lt;span class="hljs-comment"&gt;// fonction statique&lt;/span&gt;
    &lt;span class="hljs-comment"&gt;// on ajoute les ports au combo box&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;foreach&lt;/span&gt; (String s &lt;span class="hljs-keyword"&gt;in&lt;/span&gt; ports)
        comboPort.Items.Add(s);

    &lt;span class="hljs-comment"&gt;// on ajoute les vitesses au combo des vitesses&lt;/span&gt;
    comboVitesse.Items.Add(&lt;span class="hljs-string"&gt;"300"&lt;/span&gt;);
    comboVitesse.Items.Add(&lt;span class="hljs-string"&gt;"1200"&lt;/span&gt;);
    comboVitesse.Items.Add(&lt;span class="hljs-string"&gt;"2400"&lt;/span&gt;);
    comboVitesse.Items.Add(&lt;span class="hljs-string"&gt;"4800"&lt;/span&gt;);
    comboVitesse.Items.Add(&lt;span class="hljs-string"&gt;"9600"&lt;/span&gt;);
    comboVitesse.Items.Add(&lt;span class="hljs-string"&gt;"14400"&lt;/span&gt;);
    comboVitesse.Items.Add(&lt;span class="hljs-string"&gt;"19200"&lt;/span&gt;);
    comboVitesse.Items.Add(&lt;span class="hljs-string"&gt;"38400"&lt;/span&gt;);
    comboVitesse.Items.Add(&lt;span class="hljs-string"&gt;"57600"&lt;/span&gt;);
    comboVitesse.Items.Add(&lt;span class="hljs-string"&gt;"115200"&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Intialisation du combobox des vitesses
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Si vous lancez votre programme maintenant avec la carte Arduino connectée, vous devriez avoir le choix des vitesses mais aussi d’au moins un port série. Si ce n’est pas le cas, il faut trouver pourquoi avant de passer à la suite (Vérifiez que la carte est bien connectée par exemple).
&lt;/p&gt;
&lt;h5 id="gérer-une-connexion-1"&gt;
 &lt;a aria-hidden="true" href="#gérer-une-connexion-1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Gérer une connexion
&lt;/h5&gt;
&lt;p&gt;
 Une fois que la carte est reconnue et que l’on voit bien son port dans la liste déroulante, nous allons pouvoir ouvrir le port pour établir le canal de communication entre Arduino et l’ordinateur. Comme vous vous en doutez surement, la fonction que nous allons écrire est celle du clic sur le bouton. Lorsque nous cliquons sur le bouton de connexion, deux actions peuvent être effectuées selon l’état précédent. Soit nous nous connectons, soit nous nous déconnectons. Les deux cas seront gérés en regardant le texte contenu dans le bouton ("Connecter" ou "Deconnecter"). Dans le cas de la déconnexion, il suffit de fermer le port à l’aide de la méthode
 &lt;code&gt;
  close()
 &lt;/code&gt;
 . Dans le cas de la connexion, plusieurs choses sont à faire. Dans l’ordre, nous allons commencer par instancier un nouvel objet de type
 &lt;code&gt;
  BaudRate
 &lt;/code&gt;
 et ainsi de suite. Voici le code commenté pour faire tout cela. Il y a cependant un dernier point évoqué rapidement juste après et sur lequel nous reviendrons plus tard.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-csharp"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;btnConnexion_Click&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;span class="hljs-keyword"&gt;object&lt;/span&gt; sender, EventArgs e&lt;/span&gt;)
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// on gère la connexion/déconnexion&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (btnConnexion.Text == &lt;span class="hljs-string"&gt;"Connecter"&lt;/span&gt;) &lt;span class="hljs-comment"&gt;// alors on connecte&lt;/span&gt;
    {
        &lt;span class="hljs-comment"&gt;// crée un nouvel objet voie série&lt;/span&gt;
        port = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; SerialPort();
        &lt;span class="hljs-comment"&gt;// règle la voie série&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// parse en int le combo des vitesses&lt;/span&gt;
        port.BaudRate = &lt;span class="hljs-keyword"&gt;int&lt;/span&gt;.Parse(comboVitesse.SelectedItem.ToString());
        port.DataBits = &lt;span class="hljs-number"&gt;8&lt;/span&gt;;
        port.StopBits = StopBits.One;
        port.Parity = Parity.None;
        &lt;span class="hljs-comment"&gt;// récupère le nom sélectionné&lt;/span&gt;
        port.PortName = comboPort.SelectedItem.ToString();

        &lt;span class="hljs-comment"&gt;// ajoute un gestionnaire de réception&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// pour la réception de donnée sur la voie série&lt;/span&gt;
        port.DataReceived +=
            &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; SerialDataReceivedEventHandler(DataReceivedHandler);

        port.Open(); &lt;span class="hljs-comment"&gt;// ouvre la voie série&lt;/span&gt;

        btnConnexion.Text = &lt;span class="hljs-string"&gt;"Deconnecter"&lt;/span&gt;;
    }
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; &lt;span class="hljs-comment"&gt;// sinon on déconnecte&lt;/span&gt;
    {
        port.Close(); &lt;span class="hljs-comment"&gt;// ferme la voie série&lt;/span&gt;
        btnConnexion.Text = &lt;span class="hljs-string"&gt;"Connecter"&lt;/span&gt;;
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Gestion du bouton de connexion
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Le point qui peut paraître étrange est la ligne 16, avec la propriété
 &lt;code&gt;
  Handler()
 &lt;/code&gt;
 qui devra être appelée lorsque des données arriveront. Je vais vous demander d’être patient, nous en reparlerons plus tard lorsque nous verrons la réception de données. A ce stade du développement, lorsque vous lancez votre application vous devriez pouvoir sélectionner une voie série, une vitesse, et cliquer sur "Connecter" et "Déconnecter" sans aucun bug.
&lt;/p&gt;
&lt;h4 id="Émettre-et-recevoir-des-données-1"&gt;
 &lt;a aria-hidden="true" href="#Émettre-et-recevoir-des-données-1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Émettre et recevoir des données
&lt;/h4&gt;
&lt;p&gt;
 La voie série est prête à être utilisée ! La connexion est bonne, il ne nous reste plus qu’à envoyer les données et espérer avoir quelque chose en retour.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
&lt;/p&gt;
&lt;h5 id="envoyer-des-données"&gt;
 &lt;a aria-hidden="true" href="#envoyer-des-données"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Envoyer des données
&lt;/h5&gt;
&lt;p&gt;
 Pour envoyer des données, une fonction toute prête existe pour les objets
 &lt;code&gt;
  char
 &lt;/code&gt;
 qui serait envoyé un par un. Dans notre cas d’utilisation, c’est ce deuxième cas qui nous intéresse. Nous allons donc implémenter la méthode
 &lt;code&gt;
  TextChanged
 &lt;/code&gt;
 du composant "boxEmission" afin de détecter chaque caractère entré par l’utilisateur. Ainsi, nous enverrons chaque nouveau caractère sur la voie série, un par un. Le code suivant, commenté, vous montre la voie à suivre.
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-csharp"&gt;&lt;span class="hljs-comment"&gt;// lors d'un envoi de caractère&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;boxEmission_TextChanged&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;span class="hljs-keyword"&gt;object&lt;/span&gt; sender, EventArgs e&lt;/span&gt;)
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// met le dernier caractère dans un tableau avec une seule case le contenant&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;char&lt;/span&gt;[] car = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; &lt;span class="hljs-keyword"&gt;char&lt;/span&gt;[] {boxEmission.Text[boxEmission.TextLength&lt;span class="hljs-number"&gt;-1&lt;/span&gt;]};
    &lt;span class="hljs-comment"&gt;// on s'assure que le port est existant et ouvert&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt;(port!=&lt;span class="hljs-literal"&gt;null&lt;/span&gt; &amp;amp;&amp;amp; port.IsOpen)
    {
        &lt;span class="hljs-comment"&gt;// envoie le tableau de caractère,&lt;/span&gt;
        &lt;span class="hljs-comment"&gt;// depuis la position 0, et envoie 1 seul élément&lt;/span&gt;
        port.Write(car,&lt;span class="hljs-number"&gt;0&lt;/span&gt;,&lt;span class="hljs-number"&gt;1&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Envoi de données
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="recevoir-des-données-1"&gt;
 &lt;a aria-hidden="true" href="#recevoir-des-données-1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Recevoir des données
&lt;/h5&gt;
&lt;p&gt;
 La dernière étape pour pouvoir gérer de manière complète notre voie série est de pouvoir afficher les caractères reçus. Cette étape est un petit peu plus compliquée. Tout d’abord, revenons à l’explication commencée un peu plus tôt. Lorsque nous démarrons la connexion et créons l’objet
 &lt;code&gt;
  boxReception
 &lt;/code&gt;
 . Dans l’idéal nous aimerions faire de la façon suivante :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-csharp"&gt;&lt;span class="hljs-comment"&gt;// gestionnaire de la réception de caractère&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;DataReceivedHandler&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;span class="hljs-keyword"&gt;object&lt;/span&gt; sender, SerialDataReceivedEventArgs e&lt;/span&gt;)
&lt;/span&gt;{
    String texte = port.ReadExisting();
    boxReception.Text += texte;
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Réception de données
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Cependant, les choses ne sont pas aussi simples cette fois-ci. En effet, pour des raisons de sécurité sur les processus, C# interdit que le texte d’un composant (
 &lt;code&gt;
  boxReception
 &lt;/code&gt;
 ) soit modifié de manière asynchrone, quand les données arrivent. Pour contourner cela, nous devons créer une méthode "déléguée" à qui on passera notre texte à afficher et qui se chargera d’afficher le texte quand l’interface sera prête. Pour créer cette déléguée, nous allons commencer par rajouter une méthode dite de
 &lt;em&gt;
  callback
 &lt;/em&gt;
 pour gérer la mise à jour du texte. La ligne suivante est donc à ajouter dans la classe, comme membre :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-csharp"&gt;&lt;span class="hljs-comment"&gt;// une déléguée pour pouvoir mettre à jour le texte de la boite de réception&lt;/span&gt;
&lt;span class="hljs-comment"&gt;// de manière "thread-safe"&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;delegate&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;SetTextCallback&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;span class="hljs-keyword"&gt;string&lt;/span&gt; text&lt;/span&gt;)&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Le code de la réception devient alors le suivant :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-csharp"&gt;&lt;span class="hljs-comment"&gt;// gestionnaire de la réception de caractère&lt;/span&gt;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;DataReceivedHandler&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;span class="hljs-keyword"&gt;object&lt;/span&gt; sender, SerialDataReceivedEventArgs e&lt;/span&gt;)
&lt;/span&gt;{
    String texte = port.ReadExisting();
    &lt;span class="hljs-comment"&gt;// boxReception.Text += texte;&lt;/span&gt;
    SetText(texte);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;private&lt;/span&gt; &lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;SetText&lt;/span&gt;(&lt;span class="hljs-params"&gt;&lt;span class="hljs-keyword"&gt;string&lt;/span&gt; text&lt;/span&gt;)
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (boxReception.InvokeRequired)
    {
        SetTextCallback d = &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; SetTextCallback(SetText);
        boxReception.Invoke(d, &lt;span class="hljs-keyword"&gt;new&lt;/span&gt; &lt;span class="hljs-keyword"&gt;object&lt;/span&gt;[] { text });
    }
    &lt;span class="hljs-keyword"&gt;else&lt;/span&gt;
    {
        boxReception.Text += text;
    }
}
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Réception de données avec la déléguée
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Je suis désolé si mes informations sont confuses. Je ne suis malheureusement pas un maitre dans l’art des threads UI de C#. Cependant, un tas de documentation mieux expliqué existe sur internet si vous voulez plus de détails.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Une fois tout cela instancié, vous devriez avoir un terminal voie série tout beau fait par vous même ! Libre à vous maintenant toutes les cartes en main pour créer des applications qui communiqueront avec votre Arduino et feront des échanges d’informations avec.
&lt;/p&gt;
&lt;h3 id="en-python"&gt;
 &lt;a aria-hidden="true" href="#en-python"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 En Python
&lt;/h3&gt;
&lt;p&gt;
 Comme ce langage à l’air d’être en vogue, je me suis un peu penché dessus pour vous fournir une approche de comment utiliser python pour se servir de la voie série. Mon niveau en python étant équivalent à "grand débutant", je vais vous proposer un code simple reprenant les fonctions utiles à savoir le tout sans interface graphique. Nul doute que les pythonistes chevronnés sauront creuser plus loin
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Comme pour les exemples dans les autres langages, on utilisera l’exercice "Attention à la casse" dans l’Arduino pour tester notre programme.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Pour communiquer avec la voie série, nous allons utiliser une librairie externe qui s’appelle
 &lt;a href="http://pyserial.sourceforge.net/"&gt;
  pySerial
 &lt;/a&gt;
 .
&lt;/p&gt;
&lt;h4 id="installation"&gt;
 &lt;a aria-hidden="true" href="#installation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Installation
&lt;/h4&gt;
&lt;h5 id="ubuntu"&gt;
 &lt;a aria-hidden="true" href="#ubuntu"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Ubuntu
&lt;/h5&gt;
&lt;p&gt;
 Pour installer pySerial sur votre une machine Ubuntu c’est très simple, il suffit de lancer une seule commande :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;sudo apt-get install python3-serial
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Vous pouvez aussi l’installer à partir des sources à l’adresse suivante : https:// pypi.python.org/pypi/pyserial . Ensuite, décompresser l’archive et exécuter la commande : (pour python 2)
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;python setup.py install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 (pour python 3)
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;python3 setup.py install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="windows"&gt;
 &lt;a aria-hidden="true" href="#windows"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Windows
&lt;/h5&gt;
&lt;p&gt;
 Si vous utilisez Windows, il vous faudra un logiciel capable de décompresser les archives de types tar.gz (comme 7-zip par exemple). Ensuite vous devrez récupérer les sources à la même adresse que pour Linux : https:// pypi.python.org/pypi/pyserial . Enfin, comme pour Linux encore il vous suffira d’exécuter la commande qui va bien :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;python setup.py install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="utiliser-la-librairie"&gt;
 &lt;a aria-hidden="true" href="#utiliser-la-librairie"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utiliser la librairie
&lt;/h4&gt;
&lt;p&gt;
 Pour utiliser la librairie, il vous faudra tout d’abord l’importer. Pour cela, on utilise la commande import :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; serial
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 mais comme seule une partie du module nous intéresse vraiment (Serial) on peut restreindre :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;&lt;span class="hljs-keyword"&gt;from&lt;/span&gt; serial &lt;span class="hljs-keyword"&gt;import&lt;/span&gt; Serial
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 (notez l’importance des majuscules/minuscules)
&lt;/p&gt;
&lt;h5 id="ouvrir-un-port-série"&gt;
 &lt;a aria-hidden="true" href="#ouvrir-un-port-série"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Ouvrir un port série
&lt;/h5&gt;
&lt;p&gt;
 Maintenant que le module est bien chargé, nous allons pouvoir commencer à l’utiliser. La première chose importante à faire est de connaître le port série à utiliser. On peut obtenir une liste de ces derniers grâce à la commande :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-bash"&gt;python -m serial.tools.list_ports
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Si comme chez moi cela ne fonctionne pas, vous pouvez utiliser d’autres méthodes.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Sous Windows : en allant dans le gestionnaire de périphériques pour trouver le port série concerné (COMx)
 &lt;/li&gt;
 &lt;li&gt;
  Sous Linux : en utilisant la commande
  &lt;code&gt;
   ls /dev
  &lt;/code&gt;
  , vous pourrez trouver le nom du port série sous le nom "ttyACMx" par exemple
 &lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
 &lt;img alt="Le port USB de l'Arduino" src="./images/uploaded/tuto-arduino-304-annexe-ordinateur-et-voie-série-dans-un-autre-langage-de-programmation/le-port-usb-de-larduino.jpg"/&gt;
 &lt;figcaption&gt;
  Le port USB de l'Arduino
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Lorsque le port USB est identifié, on peut créer un objet de type Serial. Le constructeur que l’on va utiliser prend deux paramètres, le nom du port série et la vitesse à utiliser (les autres paramètres (parité…) conviennent par défaut).
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;port = Serial(&lt;span class="hljs-string"&gt;'/dev/ttyACM0'&lt;/span&gt;, &lt;span class="hljs-number"&gt;9600&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Une fois cet objet créé, la connexion peut-être ouverte avec la fonction open()
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;port.open()
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Pour vérifier que la voie série est bien ouverte, on utilisera la méthode "isOpen()" qui retourne un booléen vrai si la connexion est établie.
&lt;/p&gt;
&lt;h5 id="envoyer-des-données-1"&gt;
 &lt;a aria-hidden="true" href="#envoyer-des-données-1"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Envoyer des données
&lt;/h5&gt;
&lt;p&gt;
 Maintenant que la voie série est ouverte, nous allons pouvoir lui envoyer des données à traiter. Pour le bien de l’exercice, il nous faut récupérer un (des) caractère(s) à envoyer et retourner avec la casse inversée. Nous allons donc commencer par récupérer une chaîne de caractère de l’utilisateur :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;chaine = input(&lt;span class="hljs-string"&gt;"Que voulez vous transformer ? "&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Puis nous allons simplement l’envoyer avec la fonction "write". Cette fonction prend en paramètre un tableau de bytes. Nous allons donc transformer notre chaîne pour convenir à ce format avec la fonction python "bytes()" qui prend en paramètres la chaine de caractères et le format d’encodage.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;bytes(chaine, &lt;span class="hljs-string"&gt;'UTF-8'&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ce tableau peut directement être envoyé dans la fonction write() :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;port.write(bytes(chaine, &lt;span class="hljs-string"&gt;'UTF-8'&lt;/span&gt;))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h5 id="recevoir-des-données-2"&gt;
 &lt;a aria-hidden="true" href="#recevoir-des-données-2"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Recevoir des données
&lt;/h5&gt;
&lt;p&gt;
 La suite logique des choses voudrait que l’on réussisse à recevoir des données. C’est ce que nous allons voir maintenant.
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 Nous allons tout d’abord vérifier que des données sont arrivées sur la voie série via la méthode inWaiting(). Cette dernière nous renvoie le nombre de caractères dans le buffer de réception de la voie série. S’il est différent de 0, cela signifie qu’il y a des données à lire. S’il y a des caractères, nous allons utiliser la fonction "read()" pour les récupérer. Cette fonction retourne les caractères (byte) un par un dans l’ordre où il sont arrivés. Un exemple de récupération de caractère pourrait-être :
&lt;/p&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-python"&gt;&lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(port.inWaiting() != &lt;span class="hljs-number"&gt;0&lt;/span&gt;):
    car = port.read() &lt;span class="hljs-comment"&gt;#on lit un caractère&lt;/span&gt;
    print(car) &lt;span class="hljs-comment"&gt;#on l'affiche&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Lecture des données en python
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Vous en savez maintenant presque autant que moi sur la voie série en python
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 ! Je suis conscient que c’est assez maigre comparé aux autres langages, mais je ne vais pas non plus apprendre tout les langages du monde
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
&lt;/p&gt;
&lt;h4 id="code-exemple-complet-et-commenté"&gt;
 &lt;a aria-hidden="true" href="#code-exemple-complet-et-commenté"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Code exemple complet et commenté
&lt;/h4&gt;
&lt;figure&gt;
 &lt;div class="hljs-code-div"&gt;
  &lt;div class="hljs-line-numbers"&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
   &lt;span&gt;
   &lt;/span&gt;
  &lt;/div&gt;
  &lt;pre&gt;&lt;code class="hljs language-python"&gt;&lt;span class="hljs-comment"&gt;#!/usr/bin/python3&lt;/span&gt;
&lt;span class="hljs-comment"&gt;## -*-coding:Utf-8 -*&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;from&lt;/span&gt; serial &lt;span class="hljs-keyword"&gt;import&lt;/span&gt; Serial
&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; time

port = Serial(&lt;span class="hljs-string"&gt;'/dev/ttyACM0'&lt;/span&gt;, &lt;span class="hljs-number"&gt;9600&lt;/span&gt;)

port.open()

&lt;span class="hljs-comment"&gt;## test que le port est ouvert&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (port.isOpen()):
    &lt;span class="hljs-comment"&gt;# demande de la chaîne à envoyer&lt;/span&gt;
    chaine = input(&lt;span class="hljs-string"&gt;"Que voulez vous transformer ? "&lt;/span&gt;)
    &lt;span class="hljs-comment"&gt;# on écrit la chaîne en question&lt;/span&gt;
    port.write(bytes(chaine, &lt;span class="hljs-string"&gt;'UTF-8'&lt;/span&gt;))
    &lt;span class="hljs-comment"&gt;# attend que des données soit revenues&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(port.inWaiting() == &lt;span class="hljs-number"&gt;0&lt;/span&gt;):
        &lt;span class="hljs-comment"&gt;# on attend 0.5 seconde pour que les données arrive&lt;/span&gt;
        time.sleep(&lt;span class="hljs-number"&gt;0.5&lt;/span&gt;)

    &lt;span class="hljs-comment"&gt;# si on arrive là, des données sont arrivées&lt;/span&gt;
    &lt;span class="hljs-keyword"&gt;while&lt;/span&gt;(port.inWaiting() != &lt;span class="hljs-number"&gt;0&lt;/span&gt;):
        &lt;span class="hljs-comment"&gt;# il y a des données !&lt;/span&gt;
        car = port.read() &lt;span class="hljs-comment"&gt;#on lit un caractère&lt;/span&gt;
        print(car) &lt;span class="hljs-comment"&gt;#on l'affiche&lt;/span&gt;
&lt;span class="hljs-keyword"&gt;else&lt;/span&gt;:
    &lt;span class="hljs-keyword"&gt;print&lt;/span&gt; (&lt;span class="hljs-string"&gt;"Le port n'a pas pu être ouvert !"&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;
 &lt;/div&gt;
 &lt;figcaption&gt;
  Code complet d’utilisation de la liaison série en python
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Cette annexe vous aura permis de comprendre un peu comment utiliser la voie série en général avec un ordinateur. Avec vos connaissances vous êtes dorénavant capable de créer des interfaces graphiques pour communiquer avec votre arduino. De grandes possibilités s’offrent à vous, et de plus grandes vous attendent avec les parties qui suivent…
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Les ports</title><link href="https://eskimon.fr/tuto-arduino-904-les-ports" rel="alternate"></link><published>2010-12-03T10:20:00+01:00</published><updated>2010-12-03T10:20:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2010-12-03:/tuto-arduino-904-les-ports</id><summary type="html">&lt;p&gt;
 Partons dans les entrailles du microcontrôleur en allant à la rencontre d’une mémoire un peu particulière : les registres.
Dans notre cas nous allons parler des ports, un registre servant à gérer les entrées/sorties de la carte.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#utiliser-les-ports"&gt;
    Utiliser les ports
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#retour-aux-sources"&gt;
      Retour aux sources
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#les-avantages-dutiliser-les-ports"&gt;
       Les avantages d’utiliser les …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;
 Partons dans les entrailles du microcontrôleur en allant à la rencontre d’une mémoire un peu particulière : les registres.
Dans notre cas nous allons parler des ports, un registre servant à gérer les entrées/sorties de la carte.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#utiliser-les-ports"&gt;
    Utiliser les ports
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#retour-aux-sources"&gt;
      Retour aux sources
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#les-avantages-dutiliser-les-ports"&gt;
       Les avantages d’utiliser les ports
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#les-risques-et-inconvénients-à-connaître"&gt;
       Les risques et inconvénients à connaître
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#utilisation-des-ports"&gt;
      Utilisation des ports
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#le-registre-ddrx"&gt;
       Le registre DDRx
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-registre-portx"&gt;
       Le registre PORTx
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#le-registre-pinx"&gt;
       Le registre PINx
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="utiliser-les-ports"&gt;
 &lt;a aria-hidden="true" href="#utiliser-les-ports"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utiliser les ports
&lt;/h3&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Dans cette partie nous allons voir une technique avancée de programmation de microcontrôleur. Bien qu’elle soit sans
danger pour votre matériel, une mauvaise manipulation concernant la liaison série peut arriver et apporter des complications
au niveau du chargement du programme (nous allons voir pourquoi). Soyez donc prudent et codez en connaissance de
cause. Bien entendu, je vais tout vous expliquer pour que vous réussissiez sans problèmes !
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h4 id="retour-aux-sources"&gt;
 &lt;a aria-hidden="true" href="#retour-aux-sources"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Retour aux sources
&lt;/h4&gt;
&lt;p&gt;
 Vous vous souvenez, lorsque nous avons introduit la notion de "microcontrôleur" ? On a parlé de différentes choses qui se
trouvaient à l’intérieur de ce composant et notamment des registres, en expliquant brièvement que ce sont des sortes
de mémoires spécifiques… eh bien en voici un exemple complet : les
 &lt;strong&gt;
  ports
 &lt;/strong&gt;
 . Ces derniers sont en effet des bits au sens le plus strict qui soit puisqu’ils traduisent directement
l’état et le comportement des sorties. Ces bits servent donc à configurer vos entrées/sorties et à lire/écrire dessus.
Ils sont accessibles directement et ont un effet immédiat sur l’électronique de votre microcontrôleur. En clair, c’est
passer au travers de fonctions déjà toutes prêtes pour appliquer directement ce que vous voulez faire avec votre microcontrôleur.
Cela revient à rentrer dans le détail et à coder façon "bas niveau". Par exemple, lorsque vous direz "mets ce bit à 1
(ou 0)" vous irez en fait activer (ou désactiver) un transistor à l’intérieur du microcontrôleur, ce qui aura pour effet
de basculer la sortie à l’état haut ou bas. Lorsque vous utilisez les fonctions pinMode() ou digitalRead() ou digitalWrite(),
sans le savoir vous utilisez en fait les registres en question. La seule différence est que certaines opérations de contrôle
sont faites pour s’assurer que vous ne fassiez pas trop de bêtises.
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Des bêtises ? des vérifications ? je vais casser quelque chose ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Non rassurez-vous
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 .
&lt;/p&gt;
&lt;h5 id="les-avantages-dutiliser-les-ports"&gt;
 &lt;a aria-hidden="true" href="#les-avantages-dutiliser-les-ports"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les avantages d’utiliser les ports
&lt;/h5&gt;
&lt;p&gt;
 Lorsque l’on décide d’utiliser les ports plutôt que les fonctions d’abstractions digitalWrite(), on le fait souvent avec
une bonne raison (et vous comprendrez pourquoi en lisant les inconvénients). Voici deux grandes raisons qui pourraient
vous inciter, dans des cas précis, à vouloir utiliser les ports :
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Dans le cas où vous rédigez une application qui possède un côté critique au niveau du temps (par exemple la broche 3 et la
broche 4 doivent basculer de manière synchrone sinon le message ne passe pas), l’utilisation des ports est faite
pour vous ! En effet, comme dit plus haut contrairement à
  &lt;code&gt;
   digitalWrite()
  &lt;/code&gt;
  , ici vous agissez directement sur le matériel, sans abstraction. Du coup ça va plus vite ! (là ou il pourrait
s’écouler quelques précieuses micro-secondes entre deux
  &lt;code&gt;
   digitalWrite()
  &lt;/code&gt;
  consécutifs)
 &lt;/li&gt;
 &lt;li&gt;
  Si votre code rentre au chausse pied dans le microcontrôleur et que gagner quelques octets de mémoire programme vous arrangerait
bien, là encore jouer avec les registres est une solution. En effet, chaque appel à
  &lt;code&gt;
   digitalWrite()
  &lt;/code&gt;
  représente plus d’instructions machines qu’un appel direct au port. Au bout d’un code assez conséquent, il peut
donc s’avérer utile de passer par les ports pour sauver quelques octets à chaque fois (en particulier si les
fonctions
  &lt;code&gt;
   digitalWrite()
  &lt;/code&gt;
  sont très souvent utilisées à plein d’endroits différents).
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id="les-risques-et-inconvénients-à-connaître"&gt;
 &lt;a aria-hidden="true" href="#les-risques-et-inconvénients-à-connaître"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Les risques et inconvénients à connaître
&lt;/h5&gt;
&lt;p&gt;
 Vous avez décidé que finalement utiliser les ports c’était pas si mal, et en valait la peine ? Voyons pourquoi vous feriez-mieux
d’y réfléchir une deuxième fois…
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;strong&gt;
   Inconvénient n°1 :
  &lt;/strong&gt;
  Votre code va devenir difficile à relire. En effet, utiliser les ports nécessite d’écrire
des lignes du genre
  &lt;code&gt;
   PORTD |= B00000100;
  &lt;/code&gt;
  là où un simple
  &lt;code&gt;
   digitalWrite(2)
  &lt;/code&gt;
  aurait fait l’affaire.
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   Inconvénient n°2 :
  &lt;/strong&gt;
  Votre code devient moins portable. Les registres utilisés peuvent changer (de nom,
d’adresse, etc…) entre les gammes de microcontrôleur. D’ordinaire, c’est la fonction
  &lt;code&gt;
   digitalWrite()
  &lt;/code&gt;
  qui justement s’assure que tout est bien fait. En écrivant directement dans les registres, vous court-circuitez
les vérifications et donc vous devez vous assurer vous-même de bien écrire pour activer les bonnes entrées/sorties
(sous peine d’activer la mauvaise I/O ou même de ne pas compiler tout court
  &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
  )
 &lt;/li&gt;
 &lt;li&gt;
  &lt;strong&gt;
   Inconvénient n°3 :
  &lt;/strong&gt;
  Vous allez vous arracher les cheveux ! Lorsqu’on joue avec les ports, on doit faire
des opérations en binaire avec des masques. Il est très rapide de faire une erreur et de ne plus rien comprendre.
La plus triste d’entre elles serait de bidouiller les broches utilisées par la liaison série et de se retrouver
sans liaison série (ce qui d’ailleurs pourrait rendre difficile la reprogrammation de la carte…)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 Mais, si vous ne manquez pas de rigueur, vous trouverez toutes les informations nécessaires relatives au microcontrôleur
que vous utilisez. Donc le risque est amoindri et vous savez ce que vous faites.
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   OK j’ai bien compris tout ça et c’est bien gentil, mais concrètement on fait quoi ?
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Concrètement, vous allez agir sur 3 données particulières qui s’appellent DDR, PORT ou encore PIN. Voyons maintenant à quoi
elles servent et comment nous allons nous en servir…
&lt;/p&gt;
&lt;h4 id="utilisation-des-ports"&gt;
 &lt;a aria-hidden="true" href="#utilisation-des-ports"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utilisation des ports
&lt;/h4&gt;
&lt;p&gt;
 Vous êtes encore là ? Vous n’avez pas froid aux yeux, j’aime ça ! (ou simplement curieux ou inconscient, ça marche aussi
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 ). Puisque vous êtes là, continuons, voyons voir les étapes nécessaires à cette utilisation mystique des broches…
Tout d’abord, sachez qu’il y a trois registres à manipuler pour réussir à se servir des broches. Un premier registre,
 &lt;strong&gt;
  DDR
 &lt;/strong&gt;
 , servira "d’aiguillage". Ensuite deux autres serviront à lire ou écrire sur une broche, ce sont
 &lt;strong&gt;
  PORT
 &lt;/strong&gt;
 et
 &lt;strong&gt;
  PIN
 &lt;/strong&gt;
 . Dans une Arduino Uno, ces trois registres existent en trois exemplaires, le B, le C et le D. B sert pour
les broches numériques 8 à 13, C pour les broches analogiques et D pour les broches 0 à 7.
&lt;/p&gt;
&lt;h5 id="le-registre-ddrx"&gt;
 &lt;a aria-hidden="true" href="#le-registre-ddrx"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le registre DDRx
&lt;/h5&gt;
&lt;p&gt;
 Comme je viens de le dire, DDR sert d’aiguillage. C’est lui qui permet de définir l’utilisation d’une broche en entrée, ou
en sortie, tout comme le faisait la fonction pinMode(). Un 0 signifie "entrée" et un 1 signifie "sortie". Chaque broche
d’un même port étant commandée par ce registre. Au début de votre programme, vous avez la fonction
 &lt;code&gt;
  pinMode()
 &lt;/code&gt;
 pour définir l’utilisation des broches. Admettons que vous souhaitiez utiliser les broches 4, 5 et 6 en sortie et aussi
13 et 11 ainsi que les broches analogiques 2 à 4. Pour cela, vous auriez d’ordinaire écrit :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-c"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;//définition des broches suivantes utilisées en sortie logique&lt;/span&gt;
    pinMode(&lt;span class="hljs-number"&gt;4&lt;/span&gt;, OUTPUT);
    pinMode(&lt;span class="hljs-number"&gt;5&lt;/span&gt;, OUTPUT);
    pinMode(&lt;span class="hljs-number"&gt;6&lt;/span&gt;, OUTPUT);
    pinMode(&lt;span class="hljs-number"&gt;11&lt;/span&gt;, OUTPUT);
    pinMode(&lt;span class="hljs-number"&gt;13&lt;/span&gt;, OUTPUT);
    pinMode(A2, OUTPUT);
    pinMode(A3, OUTPUT);
    pinMode(A4, OUTPUT);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Plutôt long et fastidieux non ? Avec les ports tout cela tiendra en 3 lignes, une par port. Pour cela, imaginez que
les entrées/sorties soient représentées chacune par un bit dans un octet. Par exemple pour le registre D qui représente
les entrées/sorties de 0 à 7, on pourrait avoir 00110010. Les numéros des broches sont ensuite les mêmes que ceux des
bits, le poids faible sera la broche 0 et le poids fort la broche 7. Donc pour mettre les broches 4, 5 et 6 en sortie
(donc les autres en entrée) on fera :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-c"&gt;PORTD = B01110100;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Le B devant la suite de 0 et 1 signifie que l’on donne un nombre binaire. On pourrait également donner un nombre hexadécimal
en mettant un
 &lt;code&gt;
  0x
 &lt;/code&gt;
 suivi de deux caractères hexadécimaux. Dans la même lignée, nous pouvons donc déclarer l’utilisation de toutes les entrées/sorties
précédentes :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-c"&gt;DDRD = B01110100; &lt;span class="hljs-comment"&gt;// 0 (poids faible) vers 7 (poids fort)&lt;/span&gt;
DDRC = B00011100; &lt;span class="hljs-comment"&gt;// A0 (poids faible) vers A5 (poids fort)&lt;/span&gt;
DDRB = B00101000; &lt;span class="hljs-comment"&gt;// 8 (poids faible) vers 13 (poids fort)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-warning"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Le registre D possède l’accès aux broches de la transmission série. Je vous recommande très fortement de toujours laisser
ces derniers à 1 (pour le Tx) et 0 (pour le Rx), pour faire DDRD = xxxxxx10 si vous ne voulez pas avoir de mauvaises
surprises…
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="le-registre-portx"&gt;
 &lt;a aria-hidden="true" href="#le-registre-portx"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le registre PORTx
&lt;/h5&gt;
&lt;p&gt;
 C’est maintenant que l’on s’amuse
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 . En effet, c’est ici que l’utilisation des ports va prendre tout son sens… Imaginons
que vous vouliez basculer à l’état haut toutes les sorties 2, 3, 5 et 7
 &lt;strong&gt;
  en même temps
 &lt;/strong&gt;
 . Vous pourriez utiliser plusieurs fois digitalWrite(x, HIGH) mais il risque de se passer quelques
microsecondes entre chaque action. Nous allons donc utiliser le registre PORT pour faire cette opération. Tout d’abord,
on définit les broches en sortie (encore une fois, attention aux deux derniers bits pour la liaison série) :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-c"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    DDRD = B11111110; &lt;span class="hljs-comment"&gt;// Tout le monde (de 1 à 7) en sortie !&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ensuite, au moment d’exécuter notre programme nous allons juste avoir à utiliser PORTD pour actionner les sorties. Par
exemple en faisant :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-c"&gt;PORTD |= B10101100; &lt;span class="hljs-comment"&gt;//2, 3, 5 et 7 à l'état haut&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Avez-vous remarqué ? J’ai utilisé l’opérateur OU (|) pour actionner
 &lt;strong&gt;
  uniquement
 &lt;/strong&gt;
 les sorties qui m’intéressaient tout en ignorant les autres. Cela doit vous rappeler des opérations
de masquage que l’on avait vu un peu plus tôt, dans un chapitre précédent. Maintenant, je vais au contraire utiliser
l’opérateur antagoniste ET (&amp;amp;) pour mettre à l’état bas les sorties précédentes.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-c"&gt;PORTD &amp;amp;= B01010011; &lt;span class="hljs-comment"&gt;//2, 3, 5 et 7 à l'état bas&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Je mets ainsi à zéro les broches qui m’intéressent en ignorant l’état des autres. C’est en tout point l’inverse du précédent
! Avec les ports (et les registres en général) les opérateurs de masquage ET et OU sont très importants à connaître et
à maîtriser.
&lt;/p&gt;
&lt;h5 id="le-registre-pinx"&gt;
 &lt;a aria-hidden="true" href="#le-registre-pinx"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le registre PINx
&lt;/h5&gt;
&lt;p&gt;
 Bon c’est chouette, vous savez modifier toutes les broches en une seule fois, mais savez-vous les lire en une seule fois
? Pour cela, il faut d’abord mettre quelques broches en entrée pour qu’elles puissent être lues. Je vous propose de reprendre
celles de tout à l’heure (2, 3, 5 et 7) :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-c"&gt;&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    DDRD = B00000010; &lt;span class="hljs-comment"&gt;// Tout le monde (de 2 à 7) en entrée !&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Ensuite, pour lire les données présentes sur ce port, il faut utiliser le dernier registre de cette leçon qui s’appelle
PIN. Par exemple, pour stocker l’état des sorties dans un octet on fera :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-c"&gt;&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; lePort = PIND;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   C’est cool mais moi je ne veux qu’une certaine broche dans ma variable, comme avec digitalRead() !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Et à votre avis ? on fait quoi ? Et bien oui, on masque ! Pour obtenir la broche 3 uniquement par exemple, on fera :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-c"&gt;&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; monEntree = PIND &amp;amp; B00001000; &lt;span class="hljs-comment"&gt;//sélectionne le bit 3 uniquement&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Et c’est tout !
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
&lt;/p&gt;
&lt;hr/&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   En fait c’est tout c’est vite dit.
   &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
   Le monde des registres est assez immense et important dans les microcontrôleurs.
Et ceux que l’on vient de voir font partie des choses les plus simples à utiliser. Libre à vous avec vos nouvelles
connaissances de continuer à en découvrir toujours plus.
   &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Organiser votre code en fichiers</title><link href="https://eskimon.fr/tuto-arduino-905-organisez-votre-code-en-fichiers" rel="alternate"></link><published>2010-12-03T10:20:00+01:00</published><updated>2010-12-03T10:20:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2010-12-03:/tuto-arduino-905-organisez-votre-code-en-fichiers</id><summary type="html">&lt;p&gt;
 Lorsque vous commencez à faire de gros projets, il devient utile voire indispensable de (très) bien organiser son code. Cela
commence par séparer son code en différents fichiers afin d’avoir des entités logiques séparées les unes des autres. Voyons
cela !
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#séparer-en-fichiers"&gt;
    Séparer en fichiers
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#le-fichier-h"&gt;
     Le fichier .h
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#le-second-fichier-cpp"&gt;
     Le second …&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;</summary><content type="html">&lt;p&gt;
 Lorsque vous commencez à faire de gros projets, il devient utile voire indispensable de (très) bien organiser son code. Cela
commence par séparer son code en différents fichiers afin d’avoir des entités logiques séparées les unes des autres. Voyons
cela !
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#séparer-en-fichiers"&gt;
    Séparer en fichiers
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#le-fichier-h"&gt;
     Le fichier .h
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#le-second-fichier-cpp"&gt;
     Le second fichier .cpp
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;a href="#lier-nos-fichiers-au-programme-principal"&gt;
     Lier nos fichiers au programme principal
    &lt;/a&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="séparer-en-fichiers"&gt;
 &lt;a aria-hidden="true" href="#séparer-en-fichiers"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Séparer en fichiers
&lt;/h3&gt;
&lt;p&gt;
 Une opération simple à faire et qui permet de gagner beaucoup en organisation de son code est de séparer ce dernier en différents
fichiers. Généralement, on fait un fichier par unités "logiques". Par exemple, imaginons que nous utilisions un composant
un peu compliqué qui sert d’horloge. Ce composant peut renvoyer une date en entier, juste le jour, mois, année ou encore
juste l’heure, la minute ou la seconde courante. Pour bien faire, il nous faudrait une fonction par unité de temps. On aurait
ainsi au moins 6 fonctions pour récupérer heure/minutes/secondes/jour/mois/année et 6 fonctions pour les régler dans le composant.
12 fonctions + la loop et le setup et vous voilà avec un fichier original bien encombré
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 . Pour créer un nouveau fichier
dans l’IDE Arduino, il suffit de cliquer sur la petite flèche en haut de l’espace d’édition du code puis ensuite de cliquer
sur "Nouvel Onglet" ou "New Tab" comme mis en évidence sur la capture d’écran ci-dessous :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Ajout de fichiers" src="./images/uploaded/tuto-arduino-905-organisez-votre-code-en-fichiers/ajout-de-fichiers.png"/&gt;
 &lt;figcaption&gt;
  Ajout de fichiers
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="le-fichier-h"&gt;
 &lt;a aria-hidden="true" href="#le-fichier-h"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le fichier .h
&lt;/h4&gt;
&lt;p&gt;
 lorsque l’on veut séparer son code en plusieurs fichiers, il y a certaines choses à respecter. Ainsi, à chaque fois que l’on
veut créer un nouveau fichier de code on ne vas pas en créer un mais deux ! Le premier fichier aura l’extension .h signifiant
 &lt;strong&gt;
  header
 &lt;/strong&gt;
 , c’est ce que nous allons voir maintenant. Ce fichier va regrouper les
 &lt;strong&gt;
  prototypes
 &lt;/strong&gt;
 des fonctions ainsi que les définitions de structures ou de classes mais nous verrons cela après. Le
prototype d’une fonction représente un peu un contrat. Il va définir le nom de la fonction, ce qui rentre à l’intérieur (les
paramètres) et ce qui en sort (la variable de retour). Ainsi, votre programme principal aura une idée de comment fonctionne
 &lt;em&gt;
  extérieurement
 &lt;/em&gt;
 votre fonction. Un peu comme s’il s’adressait à une boîte noire. Si l’on devait écrire l’exemple ci-dessus
on pourrait avoir le contenu de fichier suivant :
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  horloge.h
 &lt;/strong&gt;
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-comment"&gt;/* fichier horloge.h */&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; &lt;span class="hljs-title"&gt;getHeure&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;&lt;/span&gt;;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; &lt;span class="hljs-title"&gt;getMinute&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;&lt;/span&gt;;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; &lt;span class="hljs-title"&gt;getSeconde&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;&lt;/span&gt;;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; &lt;span class="hljs-title"&gt;getJour&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;&lt;/span&gt;;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; &lt;span class="hljs-title"&gt;getMois&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;&lt;/span&gt;;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; &lt;span class="hljs-title"&gt;getAnnee&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setHeure&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; val)&lt;/span&gt;&lt;/span&gt;;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setMinute&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; val)&lt;/span&gt;&lt;/span&gt;;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setSeconde&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; val)&lt;/span&gt;&lt;/span&gt;;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setJour&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; val)&lt;/span&gt;&lt;/span&gt;;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setMois&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; val)&lt;/span&gt;&lt;/span&gt;;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setAnnee&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; val)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;afficherDate&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;&lt;/span&gt;;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;afficherHeure&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;&lt;/span&gt;;
&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;afficherDateHeure&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Comme vous pouvez le voir, avec ces définitions on peut savoir ce qu’est supposé faire la fonction grâce à son nom et le
type de variable qu’elle manipule en entrée et en sortie. Bien, maintenant passons à la suite pour voir où et comment implémenter
ces fonctions.
&lt;/p&gt;
&lt;h4 id="le-second-fichier-cpp"&gt;
 &lt;a aria-hidden="true" href="#le-second-fichier-cpp"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le second fichier .cpp
&lt;/h4&gt;
&lt;p&gt;
 Le second fichier que nous allons créer sera avec une extension .cpp (pour C plus plus ou C++). Il regroupera le code à proprement
parler, l’implémentation de vos fonctions. C’est ici que vous allez écrire le contenu de vos fonctions, ce qui est censé
se passer à l’intérieur de ces dernières. Pour faire cela, la première étape sera d’inclure le fichier de prototypes via
la commande de préprocesseur
 &lt;code&gt;
  #include
 &lt;/code&gt;
 :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;"horloge.h"&lt;/span&gt; &lt;span class="hljs-comment"&gt;//horloge.h pour notre exemple&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Cette ligne doit être la
   &lt;strong&gt;
    première
   &lt;/strong&gt;
   de votre fichier .cpp et elle ne prend pas de
   &lt;code&gt;
    ;
   &lt;/code&gt;
   à la fin.
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
 Une fois cela fait, il va falloir taper le code de vos fonctions. Pour le besoin de l’exercice, je vais me contenter d’écrire
des instructions bidons. Dans la vraie vie de tous les jours, vous auriez bien sûr fait un joli code pour communiquer avec
un module où je ne sais quoi encore bien sûr
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 .
&lt;/p&gt;
&lt;p&gt;
 &lt;strong&gt;
  horloge.cpp
 &lt;/strong&gt;
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-arduino"&gt;&lt;span class="hljs-comment"&gt;/* fichier horloge.cpp */&lt;/span&gt;

&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;"horloge.h"&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; getHeure() {
   &lt;span class="hljs-built_in"&gt;Serial&lt;/span&gt;.&lt;span class="hljs-built_in"&gt;println&lt;/span&gt;(&lt;span class="hljs-string"&gt;"getHeure"&lt;/span&gt;);
   &lt;span class="hljs-built_in"&gt;return&lt;/span&gt; &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
}

&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; getMinute() {
   &lt;span class="hljs-built_in"&gt;Serial&lt;/span&gt;.&lt;span class="hljs-built_in"&gt;println&lt;/span&gt;(&lt;span class="hljs-string"&gt;"getHeure"&lt;/span&gt;);
   &lt;span class="hljs-built_in"&gt;return&lt;/span&gt; &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
}

&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; getSeconde() {
   &lt;span class="hljs-built_in"&gt;Serial&lt;/span&gt;.&lt;span class="hljs-built_in"&gt;println&lt;/span&gt;(&lt;span class="hljs-string"&gt;"getHeure"&lt;/span&gt;);
   &lt;span class="hljs-built_in"&gt;return&lt;/span&gt; &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
}

&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; getJour() {
   &lt;span class="hljs-built_in"&gt;Serial&lt;/span&gt;.&lt;span class="hljs-built_in"&gt;println&lt;/span&gt;(&lt;span class="hljs-string"&gt;"getHeure"&lt;/span&gt;);
   &lt;span class="hljs-built_in"&gt;return&lt;/span&gt; &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
}

&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; getMois() {
   &lt;span class="hljs-built_in"&gt;Serial&lt;/span&gt;.&lt;span class="hljs-built_in"&gt;println&lt;/span&gt;(&lt;span class="hljs-string"&gt;"getHeure"&lt;/span&gt;);
   &lt;span class="hljs-built_in"&gt;return&lt;/span&gt; &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
}

&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; getAnnee() {
   &lt;span class="hljs-built_in"&gt;Serial&lt;/span&gt;.&lt;span class="hljs-built_in"&gt;println&lt;/span&gt;(&lt;span class="hljs-string"&gt;"getHeure"&lt;/span&gt;);
   &lt;span class="hljs-built_in"&gt;return&lt;/span&gt; &lt;span class="hljs-number"&gt;0&lt;/span&gt;;
}


&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; setHeure(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; val) {
   &lt;span class="hljs-built_in"&gt;Serial&lt;/span&gt;.&lt;span class="hljs-built_in"&gt;print&lt;/span&gt;(&lt;span class="hljs-string"&gt;"setHeure : "&lt;/span&gt;);
   &lt;span class="hljs-built_in"&gt;Serial&lt;/span&gt;.&lt;span class="hljs-built_in"&gt;println&lt;/span&gt;(val, DEC);
}

&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; setMinute(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; val) {
   &lt;span class="hljs-built_in"&gt;Serial&lt;/span&gt;.&lt;span class="hljs-built_in"&gt;print&lt;/span&gt;(&lt;span class="hljs-string"&gt;"setMinute : "&lt;/span&gt;);
   &lt;span class="hljs-built_in"&gt;Serial&lt;/span&gt;.&lt;span class="hljs-built_in"&gt;println&lt;/span&gt;(val, DEC);
}

&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; setSeconde(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; val) {
   &lt;span class="hljs-built_in"&gt;Serial&lt;/span&gt;.&lt;span class="hljs-built_in"&gt;print&lt;/span&gt;(&lt;span class="hljs-string"&gt;"setSeconde : "&lt;/span&gt;);
   &lt;span class="hljs-built_in"&gt;Serial&lt;/span&gt;.&lt;span class="hljs-built_in"&gt;println&lt;/span&gt;(val, DEC);
}

&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; setJour(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; val) {
   &lt;span class="hljs-built_in"&gt;Serial&lt;/span&gt;.&lt;span class="hljs-built_in"&gt;print&lt;/span&gt;(&lt;span class="hljs-string"&gt;"setJour : "&lt;/span&gt;);
   &lt;span class="hljs-built_in"&gt;Serial&lt;/span&gt;.&lt;span class="hljs-built_in"&gt;println&lt;/span&gt;(val, DEC);
}

&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; setMois(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; val) {
   &lt;span class="hljs-built_in"&gt;Serial&lt;/span&gt;.&lt;span class="hljs-built_in"&gt;print&lt;/span&gt;(&lt;span class="hljs-string"&gt;"setMois : "&lt;/span&gt;);
   &lt;span class="hljs-built_in"&gt;Serial&lt;/span&gt;.&lt;span class="hljs-built_in"&gt;println&lt;/span&gt;(val, DEC);
}

&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; setAnnee(&lt;span class="hljs-keyword"&gt;char&lt;/span&gt; val) {
   &lt;span class="hljs-built_in"&gt;Serial&lt;/span&gt;.&lt;span class="hljs-built_in"&gt;print&lt;/span&gt;(&lt;span class="hljs-string"&gt;"setAnnee : "&lt;/span&gt;);
   &lt;span class="hljs-built_in"&gt;Serial&lt;/span&gt;.&lt;span class="hljs-built_in"&gt;println&lt;/span&gt;(val, DEC);
}


&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; afficherDate() {
   &lt;span class="hljs-built_in"&gt;Serial&lt;/span&gt;.&lt;span class="hljs-built_in"&gt;println&lt;/span&gt;(&lt;span class="hljs-string"&gt;"afficherDate"&lt;/span&gt;);
}

&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; afficherHeure() {
   &lt;span class="hljs-built_in"&gt;Serial&lt;/span&gt;.&lt;span class="hljs-built_in"&gt;println&lt;/span&gt;(&lt;span class="hljs-string"&gt;"afficherHeure"&lt;/span&gt;);
}

&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; afficherDateHeure() {
   &lt;span class="hljs-built_in"&gt;Serial&lt;/span&gt;.&lt;span class="hljs-built_in"&gt;println&lt;/span&gt;(&lt;span class="hljs-string"&gt;"afficherDateHeure"&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id="lier-nos-fichiers-au-programme-principal"&gt;
 &lt;a aria-hidden="true" href="#lier-nos-fichiers-au-programme-principal"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Lier nos fichiers au programme principal
&lt;/h4&gt;
&lt;p&gt;
 Vos définitions sont écrites et vos fonctions sont implémentées ? Il ne reste plus qu’à les ajouter à votre programme principal
! C’est en fait très simple vous aller voir. Tout d’abord, il va falloir s’assurer que vos fichiers .h et .cpp sont dans
le même dossier que votre .ino où se trouve votre fichier de programme Arduino. Comme ceci :
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Emplacement des fichiers" src="./images/uploaded/tuto-arduino-905-organisez-votre-code-en-fichiers/emplacement-des-fichiers.png"/&gt;
 &lt;figcaption&gt;
  Emplacement des fichiers
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 C’est bon ? Bien, il ne reste qu’une seule chose à faire, l’inclure dans le programme. Pour cela c’est tout bête, il suffit
d’ajouter la ligne
 &lt;code&gt;
  #include "horloge.h"
 &lt;/code&gt;
 en haut de votre fichier. Et voilà ! Il ne vous reste plus qu’à faire des appels
tout simples à vos fonctions perso dans le programme (setup ou loop ou où vous voulez !). Maintenant, quand vous allez compiler,
le compilateur va aller chercher le fichier pointé par le include, le compiler puis le lier dans votre programme principal.
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Il peut arriver que le lien avec les symboles/librairies Arduino ne se fasse pas correctement. Dans ce cas là, rajoutez l’include
suivant au début de votre .h ou .cpp :
   &lt;code&gt;
    #include "Arduino.h"
   &lt;/code&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;
 Séparer son code en fichiers est important pour facilement s’y retrouver, j’espère que vous l’avez bien compris.
Une fois cette étape faite, vous devriez y voir plus clair dans vos gros programmes. Les plus aguerris d’entre vous qui connaissent
le C++ peuvent même coder en C++ pour créer des classes et ainsi pousser l’organisation encore plus loin !
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Utiliser Sublime Text comme IDE</title><link href="https://eskimon.fr/tuto-arduino-906-utiliser-sublime-text-comme-ide" rel="alternate"></link><published>2010-12-03T10:20:00+01:00</published><updated>2010-12-03T10:20:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2010-12-03:/tuto-arduino-906-utiliser-sublime-text-comme-ide</id><summary type="html">&lt;p&gt;
 Utiliser un vrai IDE change complètement la donne quand il s’agit de faire du développement de projet un peu conséquent… Personnellement j’utilise quotidiennement l’éditeur Sublime Text pour de nombreuses raisons (Vitesse, personnalisation, beauté de l’interface, j’ai dit vitesse ?).
Je vous propose du coup d’en …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Utiliser un vrai IDE change complètement la donne quand il s’agit de faire du développement de projet un peu conséquent… Personnellement j’utilise quotidiennement l’éditeur Sublime Text pour de nombreuses raisons (Vitesse, personnalisation, beauté de l’interface, j’ai dit vitesse ?).
Je vous propose du coup d’en profiter pour l’utiliser avec notre compagnon de bricolage : la carte Arduino !
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#sublime-text"&gt;
    Sublime Text
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#installer-sublime-text"&gt;
      Installer Sublime Text
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;p&gt;
       &lt;a href="#des-plugins-bien-utiles"&gt;
        Des plugins bien utiles !
       &lt;/a&gt;
      &lt;/p&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;a href="#package-control"&gt;
         Package Control
        &lt;/a&gt;
       &lt;/li&gt;
       &lt;li&gt;
        &lt;a href="#sidebar-enhancement"&gt;
         Sidebar Enhancement
        &lt;/a&gt;
       &lt;/li&gt;
       &lt;li&gt;
        &lt;a href="#git-et-gitgutter"&gt;
         Git et GitGutter
        &lt;/a&gt;
       &lt;/li&gt;
       &lt;li&gt;
        &lt;a href="#theme-soda"&gt;
         Theme Soda
        &lt;/a&gt;
       &lt;/li&gt;
      &lt;/ul&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#le-plugin-arduino"&gt;
    Le plugin Arduino
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#installation"&gt;
       Installation
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#configuration"&gt;
       Configuration
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#utilisation"&gt;
    Utilisation
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;p&gt;
       &lt;a href="#le-nouveau-menu"&gt;
        Le nouveau menu
       &lt;/a&gt;
      &lt;/p&gt;
      &lt;ul&gt;
       &lt;li&gt;
        &lt;a href="#créer-un-projet"&gt;
         Créer un projet
        &lt;/a&gt;
       &lt;/li&gt;
       &lt;li&gt;
        &lt;a href="#vérifier--compiler"&gt;
         Vérifier / Compiler
        &lt;/a&gt;
       &lt;/li&gt;
       &lt;li&gt;
        &lt;a href="#envoyer-le-programme"&gt;
         Envoyer le programme
        &lt;/a&gt;
       &lt;/li&gt;
       &lt;li&gt;
        &lt;a href="#un-nouveau-terminal"&gt;
         Un nouveau terminal
        &lt;/a&gt;
       &lt;/li&gt;
      &lt;/ul&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="sublime-text"&gt;
 &lt;a aria-hidden="true" href="#sublime-text"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sublime Text
&lt;/h3&gt;
&lt;p&gt;
 Sublime Text est un éditeur de texte. Autrement dit, son boulot consiste à ouvrir des fichiers contenant du texte pour vous
permettre de le modifier. Dit comme ça, rien de bien sexy… Mais Sublime Text ce n’est pas que cela, c’est bien plus. En
effet, c’est un logiciel que l’on qualifie d'
 &lt;em&gt;
  Environnement de Développement
 &lt;/em&gt;
 (IDE en anglais). Il est optimisé pour le traitement de fichier de type "code source"
en proposant une coloration syntaxique puissante, personnalisable et d’autres atouts divers et variés comme la complétion
automatique de code, la fermeture de balise, l’indentation intelligente et bien plus encore !
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Logo Sublime Text" src="./images/uploaded/tuto-arduino-906-utiliser-sublime-text-comme-ide/logo-sublime-text.png"/&gt;
 &lt;figcaption&gt;
  Logo Sublime Text
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Dans le monde du développement, Sublime Text est assez à la mode en ce moment. Il s’est fait remarquer grâce à sa charte
graphique élégante ainsi que sa rapidité même contre de gros fichiers / projets. De plus, son moteur de plugin est très bien
fait ce qui en permet une personnalisation très avancée. Comparé au petit IDE Arduino natif, c’est le jour et la nuit. Sublime
Text brille de toute sa splendeur et sa puissance devant Arduino dont l’environnement laisse quelque peu à désirer quand
on est habitué à plus "gros". Nous allons voir comment installer un plugin sur ST qui, je pense, ne vous ferra pas revenir
en arrière de sitôt… Mais avant toute chose, installons le logiciel !
&lt;/p&gt;
&lt;h4 id="installer-sublime-text"&gt;
 &lt;a aria-hidden="true" href="#installer-sublime-text"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Installer Sublime Text
&lt;/h4&gt;
&lt;p&gt;
 Si ce n’est pas encore fait, je vous invite à vous rendre sur
 &lt;a href="http://www.sublimetext.com/"&gt;
  le site officiel
 &lt;/a&gt;
 pour un aperçu rapide (qui fait peur) et plus particulièrement allez dans
 &lt;a href="http://www.sublimetext.com/3"&gt;
  la section "Download"
 &lt;/a&gt;
 . À partir de là choisissez la version adaptée à votre système d’exploitation puis installez le
logiciel comme vous le feriez d’habitude. Rien de réellement compliqué ! Personnellement, au moment d’écrire ces lignes j’utilise
la version "Beta" (sans bug pour autant !) 3059. Je vous la recommande (ou une version plus récente si cela a été mis à jour
depuis !).
&lt;/p&gt;
&lt;div class="custom-block alert alert-primary"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Petite information importante, Sublime Text est distribué gratuitement et de manière complète mais vous invitera régulièrement
à acheter une licence. Si vous aimez le logiciel et voulez soutenir les développeurs, n’hésitez pas à vous en offrir
une !
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h5 id="des-plugins-bien-utiles"&gt;
 &lt;a aria-hidden="true" href="#des-plugins-bien-utiles"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Des plugins bien utiles !
&lt;/h5&gt;
&lt;p&gt;
 Maintenant que le logiciel est installé, passons en revue quelques plug-ins bien utiles au quotidien et qui vont nous permettre
de voir comment leurs installations fonctionnent (c’est très simple vous allez voir !).
&lt;/p&gt;
&lt;h6 id="package-control"&gt;
 &lt;a aria-hidden="true" href="#package-control"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Package Control
&lt;/h6&gt;
&lt;p&gt;
 On commence par le plus compliqué (pour une fois) mais indispensable : Package Control ! Ce plugin est LE plugin à installer
en premier. En effet, il permet de centraliser les extensions existantes dans le monde et ainsi de les installer en deux
clics ! C’est donc bien pratique ! Pour l’installer, il faudra faire une manipulation un peu bizarre que l’on ne fera que
pour ce dernier. Le reste sera simple, promis ! Commencez par ouvrir la console du logiciel en appuyant sur la combinaison
de touche
 &lt;code&gt;
  Ctrl + ~
 &lt;/code&gt;
 . La console devrait apparaître en bas. Dans celle-ci, collez le texte suivant :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-python"&gt;&lt;span class="hljs-keyword"&gt;import&lt;/span&gt; urllib.request,os,hashlib; h = &lt;span class="hljs-string"&gt;'7183a2d3e96f11eeadd761d777e62404'&lt;/span&gt; + &lt;span class="hljs-string"&gt;'e330c659d4bb41d3bdf022e94cab3cd0'&lt;/span&gt;; pf = &lt;span class="hljs-string"&gt;'Package Control.sublime-package'&lt;/span&gt;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &lt;span class="hljs-string"&gt;'http://sublime.wbond.net/'&lt;/span&gt; + pf.replace(&lt;span class="hljs-string"&gt;' '&lt;/span&gt;, &lt;span class="hljs-string"&gt;'%20'&lt;/span&gt;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&lt;span class="hljs-string"&gt;'Error validating download (got %s instead of %s), please try manual install'&lt;/span&gt; % (dh, h)) &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; dh != h &lt;span class="hljs-keyword"&gt;else&lt;/span&gt; open(os.path.join( ipp, pf), &lt;span class="hljs-string"&gt;'wb'&lt;/span&gt; ).write(by)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 On redémarre Sublime Text et on laisse la magie opérer ! Maintenant quand vous ouvrirez la palette de commande (raccourci
 &lt;code&gt;
  Ctrl + Alt + P
 &lt;/code&gt;
 vous pourrez trouver l’option "Install Package". Lorsque vous la sélectionnez, vous pourrez alors installer les plug-ins
suivants…
&lt;/p&gt;
&lt;h6 id="sidebar-enhancement"&gt;
 &lt;a aria-hidden="true" href="#sidebar-enhancement"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sidebar Enhancement
&lt;/h6&gt;
&lt;p&gt;
 Et on commence tout de suite avec un ajout permettant d’améliorer la fonctionnalité de la side bar (panneau latéral gauche
listant les fichiers ouverts). Ce plugin permet de rajouter une poignée de fonctions supplémentaires bien pratiques. Vous
pouvez découvrir le projet sur
 &lt;a href="https://github.com/titoBouzout/SideBarEnhancements"&gt;
  le github de l’auteur
 &lt;/a&gt;
 . Pour l’installer :
 &lt;code&gt;
  Ctrl + Alt + P
 &lt;/code&gt;
 puis "Install Package" et enfin "SideBarEnhancements".
&lt;/p&gt;
&lt;div class="custom-block alert alert-info"&gt;
 &lt;div class="custom-block-body"&gt;
  &lt;p&gt;
   Avez vous remarqué la rapidité/simplicité de la recherche ? Même pas besoin de taper "Install" que vous êtes déjà arrivé sur la bonne fonction
   &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
  &lt;/p&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h6 id="git-et-gitgutter"&gt;
 &lt;a aria-hidden="true" href="#git-et-gitgutter"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Git et GitGutter
&lt;/h6&gt;
&lt;p&gt;
 Étant un grand fan du gestionnaire de code source git, les extensions git et gitgutter sont les bienvenues ! La première
permet d’utiliser les commandes git dans le logiciel et la deuxième vous indique à côté de votre code où sont les modifications
avec le fichier actuel. On refait pareil !
 &lt;code&gt;
  Ctrl + Alt + P
 &lt;/code&gt;
 puis "Install Package" et "Git" puis rebelote avec "GitGutter". Rapide non ?
&lt;/p&gt;
&lt;h6 id="theme-soda"&gt;
 &lt;a aria-hidden="true" href="#theme-soda"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Theme Soda
&lt;/h6&gt;
&lt;p&gt;
 Enfin, Sublime Text ce n’est pas que des plug-ins, c’est aussi des zolis thèmes. Il en existe de très nombreux. Parmi tous,
j’aime beaucoup le thème "Soda" en version Dark (à régler dans vos paramètres perso). Je le trouve très reposant lors d’une
utilisation prolongée.
&lt;/p&gt;
&lt;h3 id="le-plugin-arduino"&gt;
 &lt;a aria-hidden="true" href="#le-plugin-arduino"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le plugin Arduino
&lt;/h3&gt;
&lt;p&gt;
 Vous l’attendiez ? Eh bien le voilà ! Le fameux plugin Arduino qui nous intéresse tant ici. Histoire de faire un peu les
présentations, voici les fonctionnalités qu’il propose : LES MÊMES QUE L’ÉDITEUR D’ORIGINE ! Et oui, avec ce plugin vous
avez un environnement de développement complet pour Arduino, avec toutes les fonctions au rendez-vous (compilation, terminal
série etc…) La seule contrainte, c’est qu’il y a une petite étape de paramétrage à faire pour le faire fonctionner correctement.
Mais rien de bien méchant ! (ah et il n’y a pas de petites icônes mais un joli menu, c’est peut-être moins pratique mais
vous pouvez toujours ajouter des raccourcis clavier perso !).
&lt;/p&gt;
&lt;h5 id="installation"&gt;
 &lt;a aria-hidden="true" href="#installation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Installation
&lt;/h5&gt;
&lt;p&gt;
 Avant toute chose, il faut bien sûr que vous ayez une installation du logiciel Arduino qui fonctionne. En effet, le plugin
va se reposer sur les composants/outils installés pour fonctionner. Mais si vous suivez le tuto je suppose que c’est déjà
fait
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 (sinon
 &lt;a href='http://eskimon.fr/79-arduino-103-le-logiciel" title="[ Arduino 103] Le logiciel'&gt;
  allez ici
 &lt;/a&gt;
 pour voir comment faire !) Je pense que vous avez compris la routine maintenant, il suffit d’aller dans le
gestionnaire d’installation des packages et de trouver le paquet nommé : "Arduino-like IDE". Une fois installé, un menu "Arduino"
a du être rajouté dans la barre d’outils. Nous allons pouvoir faire la dernière étape avant de jouer : la configuration !
J’en profite pour vous donner le lien vers le GitHub du plugin :
 &lt;a href="https://github.com/Robot-Will/Stino"&gt;
  https://github.com/Robot-Will/Stino
 &lt;/a&gt;
 .
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Un nouveau menu voit le jour" src="./images/uploaded/tuto-arduino-906-utiliser-sublime-text-comme-ide/un-nouveau-menu-voit-le-jour.png"/&gt;
 &lt;figcaption&gt;
  Un nouveau menu voit le jour
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="configuration"&gt;
 &lt;a aria-hidden="true" href="#configuration"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Configuration
&lt;/h5&gt;
&lt;p&gt;
 Et oui, il ne reste plus qu’une chose à faire avant de jouer avec le plugin, lui indiquer où l’on veut ranger nos nouveaux
projets et où se trouve les exécutables et autres fichiers sources du framework Arduino. 1
 &lt;sup&gt;
  ère
 &lt;/sup&gt;
 étape : Nous allons commencer par définir le dossier où doivent être enregistrés les nouveaux projets. Ce dossier
correspond au "sketchbook" dans l’IDE classique. Pour cela, allez dans le menu Arduino puis sélectionnez "Preferences" et
"Change sketchbook folder". Maintenant, sélectionnez à l’aide des flèches de votre clavier (ou votre souris) le dossier où
vous souhaitez enregistrer vos nouveaux projets. 2
 &lt;sup&gt;
  ème
 &lt;/sup&gt;
 étape : Dire à Sublime Text où se trouve le dossier d’origine du Framework Arduino pour que la compilation se passe
correctement. Pour cela, la procédure est très similaire à l’étape précédente : Menu Arduino -&amp;gt; Preferences -&amp;gt; "Select
Arduino Application Folder". Il ne reste plus qu’à entrer le bon dossier.
&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;
  Sous Windows :
  &lt;code&gt;
   C:/Program Files/Arduino/
  &lt;/code&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Sous Linux :
  &lt;code&gt;
   /usr/share/arduino/
  &lt;/code&gt;
 &lt;/li&gt;
 &lt;li&gt;
  Sous Mac :
  &lt;code&gt;
   /Applications/Arduino.app
  &lt;/code&gt;
  (non vérifié)
 &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
 La configuration de base est maintenant prête ! Découvrons notre nouveau jouet !
&lt;/p&gt;
&lt;h3 id="utilisation"&gt;
 &lt;a aria-hidden="true" href="#utilisation"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utilisation
&lt;/h3&gt;
&lt;figure&gt;
 &lt;img alt="Un blink de toute beauté !" src="./images/uploaded/tuto-arduino-906-utiliser-sublime-text-comme-ide/un-blink-de-toute-beaute.png"/&gt;
 &lt;figcaption&gt;
  Un blink de toute beauté !
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Puisque tout est prêt à être utilisé, commençons à découvrir ce nouveau menu et prendre
nos marques avec cet environnement.
&lt;/p&gt;
&lt;h5 id="le-nouveau-menu"&gt;
 &lt;a aria-hidden="true" href="#le-nouveau-menu"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le nouveau menu
&lt;/h5&gt;
&lt;h6 id="créer-un-projet"&gt;
 &lt;a aria-hidden="true" href="#créer-un-projet"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Créer un projet
&lt;/h6&gt;
&lt;p&gt;
 La première chose qui va sûrement vous intéresser sera de pouvoir commencer un nouveau projet ou "Sketch" dans le langage
Arduino. Pour cela les choses sont simples, il suffira d’aller sur la première ligne du menu : "New Sketch". L’application
se chargera elle-même de créer le dossier du projet dans le "Sketchbook" décidé plus tôt et de préparer un fichier .ino avec
la fonction setup et loop n’attendant plus que vos instructions. Sympa !
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Le squelette de base est automatiquement proposé" src="./images/uploaded/tuto-arduino-906-utiliser-sublime-text-comme-ide/le-squelette-de-base-est-automatiquement-propose.png"/&gt;
 &lt;figcaption&gt;
  Le squelette de base est automatiquement proposé
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h6 id="vérifier--compiler"&gt;
 &lt;a aria-hidden="true" href="#vérifier--compiler"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Vérifier / Compiler
&lt;/h6&gt;
&lt;p&gt;
 Une fois que vous avez codé, vous avez sûrement envie de vérifier tout cela et de compiler votre projet. Il faudra alors
aller dans le menu et chercher l’option "Verify/Compile" pour lancer la compilation. Vous verrez alors la console s’afficher
en bas pour vous donner une idée de la progression et vous indiquer si votre code contient des erreurs. Pour aller plus vite,
vous pouvez utiliser le raccourci clavier
 &lt;code&gt;
  Ctrl+Alt+V
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="Un code avec une erreur de compilation (led non déclarée)" src="./images/uploaded/tuto-arduino-906-utiliser-sublime-text-comme-ide/un-code-avec-une-erreur-de-compilation-led-non-declaree.png"/&gt;
 &lt;figcaption&gt;
  Un code avec une erreur de compilation (led non déclarée)
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h6 id="envoyer-le-programme"&gt;
 &lt;a aria-hidden="true" href="#envoyer-le-programme"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Envoyer le programme
&lt;/h6&gt;
&lt;p&gt;
 Si votre programme compile et que vous êtes satisfait, il ne reste plus qu’à l’envoyer dans la carte. Pour cela, deux étapes
sont nécessaires. En premier, il faut s’assurer que la carte est branchée et bien sélectionnée dans le menu Arduino. Ensuite,
vous pouvez envoyer le code dans la carte via le menu (option "Upload") ou le raccourci clavier
 &lt;code&gt;
  Ctrl+Alt+U
 &lt;/code&gt;
 .
&lt;/p&gt;
&lt;h6 id="un-nouveau-terminal"&gt;
 &lt;a aria-hidden="true" href="#un-nouveau-terminal"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Un nouveau terminal
&lt;/h6&gt;
&lt;p&gt;
 Enfin, parlons un peu du terminal pour utiliser la voie série. Ce dernier se trouve à la ligne "Serial Monitor". Cette ligne
propose plusieurs options pour démarrer/fermer la voie série mais aussi quelques réglages tels que la vitesse ou le caractère
de fin de chaîne (quand vous appuyez sur Entrée). Pour la vitesse, sélectionnez celle requise par votre application. Pour
le caractère de fin de chaîne je vous conseille de sélectionner la dernière option : "Both CR &amp;amp; NL" afin que la touche
Entrée soit bien prise en compte. Sorti de ces deux options, tout se passe comme d’habitude. Les caractères reçus s’affichent
au milieu et ceux à envoyer sont à taper dans la zone en bas.
&lt;/p&gt;
&lt;hr/&gt;
&lt;p&gt;
 J’espère que ce tutoriel vous aura plu et que vous allez vous amuser avec ce nouvel environnement de développement. C’est
vrai que le changement est un peu radical au début, mais croyez moi il vaut très franchement le coup de passer quelques
minutes/heures difficiles à prendre en main le logiciel, ses particularités et raccourcis clavier tellement ce dernier
est puissant, personnalisable et agréable à utiliser ! Ah au fait, vous avez remarqué que le plug-in était aussi
en Français
 &lt;img alt=":-°" class="smiley" src="./static/smileys/siffle.png"/&gt;
 !
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>Utiliser un module Bluetooth HC-05 avec Arduino</title><link href="https://eskimon.fr/tuto-arduino-907-utiliser-un-module-bluetooth-hc-05-avec-arduino" rel="alternate"></link><published>2010-12-03T10:20:00+01:00</published><updated>2010-12-03T10:20:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2010-12-03:/tuto-arduino-907-utiliser-un-module-bluetooth-hc-05-avec-arduino</id><summary type="html">&lt;p&gt;
 Un fil USB pour communiquer c’est contraignant ! On est limité en distance et on ne peut pas mettre en boîte notre carte, une vraie laisse ! Heureusement, ce ne sont pas les solutions sans fil qui manquent ! Je vous propose dans cette annexe du tutoriel Arduino de découvrir, utiliser et …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Un fil USB pour communiquer c’est contraignant ! On est limité en distance et on ne peut pas mettre en boîte notre carte, une vraie laisse ! Heureusement, ce ne sont pas les solutions sans fil qui manquent ! Je vous propose dans cette annexe du tutoriel Arduino de découvrir, utiliser et paramétrer un module bluetooth qui coûte une poignée d’euros : le HC-05.
&lt;/p&gt;
&lt;h3 id="sommaire"&gt;
 &lt;a aria-hidden="true" href="#sommaire"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Sommaire
&lt;/h3&gt;
&lt;ul&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#le-bluetooth-et-le-module-hc-05"&gt;
    Le bluetooth et le module HC-05
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;a href="#quest-ce-que-le-bluetooth"&gt;
     Qu’est ce que le bluetooth ?
    &lt;/a&gt;
   &lt;/li&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#présentation-du-module-bluetooth-hc-05"&gt;
      Présentation du module bluetooth HC-05
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#brancher-le-module-à-larduino"&gt;
       Brancher le module à l’Arduino
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#communication-entre-hc-05-et-arduino"&gt;
    Communication entre HC-05 et Arduino
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;p&gt;
     &lt;a href="#une-question-de-voie-série"&gt;
      Une question de voie série
     &lt;/a&gt;
    &lt;/p&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#utiliser-la-bibliothèque"&gt;
       Utiliser la bibliothèque
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
 &lt;li&gt;
  &lt;p&gt;
   &lt;a href="#aller-plus-loin-la-configuration-at"&gt;
    Aller plus loin, la configuration (AT)
   &lt;/a&gt;
  &lt;/p&gt;
  &lt;ul&gt;
   &lt;li&gt;
    &lt;ul&gt;
     &lt;li&gt;
      &lt;a href="#passer-en-mode-commande"&gt;
       Passer en "mode commande"
      &lt;/a&gt;
     &lt;/li&gt;
     &lt;li&gt;
      &lt;a href="#envoyer-des-commandes"&gt;
       Envoyer des commandes
      &lt;/a&gt;
     &lt;/li&gt;
    &lt;/ul&gt;
   &lt;/li&gt;
  &lt;/ul&gt;
 &lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="le-bluetooth-et-le-module-hc-05"&gt;
 &lt;a aria-hidden="true" href="#le-bluetooth-et-le-module-hc-05"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Le bluetooth et le module HC-05
&lt;/h3&gt;
&lt;p&gt;
 Afin de bien débuter, voyons d’abord à quoi ressemble le bluetooth et découvrons de quoi est composé le nouveau module que nous allons utiliser.
&lt;/p&gt;
&lt;h4 id="quest-ce-que-le-bluetooth"&gt;
 &lt;a aria-hidden="true" href="#quest-ce-que-le-bluetooth"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Qu’est ce que le bluetooth ?
&lt;/h4&gt;
&lt;p&gt;
 Le bluetooth est un protocole de communication sans fil. Il a vu le jour à la fin des années 1990 et n’a vraiment percé que dans les années 2000. Il a subi de nombreuses révisions et évolutions pour atteindre aujourd’hui la version 4.1 depuis la fin 2013.
À l’origine, la société Ericsson cherchait à développer un moyen d’utiliser une voie série sans passer par un fil. Petit à petit, ses utilisations se sont étendues pour atteindre ce que l’on connais aujourd’hui, un moyen de connecter sans fil de nombreux appareils, allant d’une Arduino et sa voie série à un ordinateur, ou pour utiliser un casque audio ou encore une manette de jeu sur une console de salon.
&lt;/p&gt;
&lt;p&gt;
 Rentrons un peu dans le détail. Ce protocole est un cousin du Wi-Fi. En effet, ils respectent tous deux une même spécification IEEE et utilisent la même gamme de fréquences : 2.4 GHz (tout comme les téléphones portables et le zigbee par exemple). C’est une communication bidirectionnelle, deux modules peuvent communiquer ensemble en même temps. Le comportement utilisé est "maître/esclave". Un esclave pourra parler avec un seul maître, mais un maître pourra dialoguer avec plusieurs esclaves.
Pour son utilisation, elle se passe en plusieurs étapes :
&lt;/p&gt;
&lt;ol&gt;
 &lt;li&gt;
  Le maître se met en mode "reconnaissable"
 &lt;/li&gt;
 &lt;li&gt;
  L’esclave trouve le maître et demande à s’y connecter
 &lt;/li&gt;
 &lt;li&gt;
  Le maître accepte la connexion
 &lt;/li&gt;
 &lt;li&gt;
  Les périphériques sont alors appairés (ou associés)
 &lt;/li&gt;
 &lt;li&gt;
  La communication peut commencer
 &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
 Ensuite, selon le type de composant que vous utilisez (une oreillette bluetooth, une manette de jeu-vidéo etc) la communication pourra se faire selon un protocole ou un autre. Dans notre cas cela consistera simplement en une liaison série. Au final, nous aurons donc le même fonctionnement qu’une liaison série habituelle (partie 3 du tuto Arduino) mais toute la partie "filaire" de la communication sera englobée dans des trames bluetooth gérées par le module. C’est totalement transparent pour nous (ou presque). Faisons donc un peu plus connaissance avec "HC-05", le petit module bluetooth si pratique.
&lt;/p&gt;
&lt;h4 id="présentation-du-module-bluetooth-hc-05"&gt;
 &lt;a aria-hidden="true" href="#présentation-du-module-bluetooth-hc-05"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Présentation du module bluetooth HC-05
&lt;/h4&gt;
&lt;p&gt;
 Comme expliqué plus tôt, le module utilisé se nomme HC-05 et est trouvable assez facilement pour quelques euros (via des sites d’import de Chine). Il est aussi gros que le pouce et est en fait un montage d’un module bluetooth sur un petit PCB. Cela permet de s’affranchir de certaines contraintes comme la soudure du module (qui est très délicate), la conversion 5V -&amp;gt; 3.3V, la régulation de l’alimentation (3.3V de nouveau) ou encore l’ajout de LEDs de signal. Tout cela est déjà intégré !
Alors que trouvons nous sur ce petit module ?
Tout d’abord, un ensemble de broches. VCC et GND pour l’alimentation (5V), Rx/Tx pour la communication. On y voit aussi une broche "Key" qui servira à envoyer des commandes de configuration au module (nous y reviendrons plus tard). La dernière broche nommée "Led" permet de brancher une LED pour obtenir un signal sur l’état du module.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="HC-05" src="./images/uploaded/tuto-arduino-907-utiliser-un-module-bluetooth-hc-05-avec-arduino/hc-05.jpg"/&gt;
 &lt;figcaption&gt;
  Le module bluetooth HC-05
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h5 id="brancher-le-module-à-larduino"&gt;
 &lt;a aria-hidden="true" href="#brancher-le-module-à-larduino"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Brancher le module à l’Arduino
&lt;/h5&gt;
&lt;p&gt;
 Voyons comment brancher tout ça. Tout d’abord, l’alimentation. C’est assez habituel, le VCC sera relié au 5V de l’Arduino et le GND à la masse. Ensuite, viennent les broches de transmission de données, Rx et Tx. Vous pourrez au choix les connecter aux broches de liaison série de l’Arduino (0 et 1) pour utiliser la voie série native, ou alors les brancher sur n’importe quelle autre pin afin de garder la voie série disponible pour du debug avec l’ordinateur (ce que je conseille).
 &lt;strong&gt;
  Nous reviendrons sur ce point
 &lt;/strong&gt;
 . Il ne reste alors plus que les broches Key et Led. Led sert à connecter une LED de statut, vous pouvez la laisser déconnectée cela n’influencera pas le comportement du module. Key sert à utiliser le mode "commande" du module. Avec cette dernière vous pourrez reconfigurer la voie série (vitesse, parité etc…) et d’autres options liées au bluetooth (nom du module, mot de passe d’appairage, mode esclave/maître…). Cette broche est à connecter à n’importe quelle sortie numérique de l’Arduino.
&lt;/p&gt;
&lt;h3 id="communication-entre-hc-05-et-arduino"&gt;
 &lt;a aria-hidden="true" href="#communication-entre-hc-05-et-arduino"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Communication entre HC-05 et Arduino
&lt;/h3&gt;
&lt;p&gt;
 Maintenant que le module est connecté, il est temps de le mettre en œuvre avec notre Arduino ! Pour garder les choses simples, nous allons simplement faire une connexion qui permet de renvoyer tout sur la voie série de l’ordinateur. Tout le long de ce tutoriel, seul le mode "esclave" sera utilisé mais le mode "maître" n’est pas beaucoup plus compliqué à atteindre
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 .
&lt;/p&gt;
&lt;h4 id="une-question-de-voie-série"&gt;
 &lt;a aria-hidden="true" href="#une-question-de-voie-série"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Une question de voie série
&lt;/h4&gt;
&lt;p&gt;
 Comme il a été dit et répété tout au long de la présentation, le module fonctionne via une voie série. Sur une Arduino Uno nous pouvons en trouver seulement une que nous allons garder pour faire du
 &lt;em&gt;
  debugging
 &lt;/em&gt;
 avec l’ordinateur le temps de mettre en œuvre le module. Il y a donc un problème, comment allons nous faire pour communiquer avec le module si la voie série est déjà prise ?
La réponse est assez simple, nous allons
 &lt;em&gt;
  émuler
 &lt;/em&gt;
 une voie série ! Ainsi, nous allons pouvoir utiliser deux broches numériques classiques pour créer une voie série par dessus. C’est une méthode assez habituelle de contournement, c’est équivalent à trouver une solution logicielle à un problème matériel.
Pour mettre en œuvre cela il y a deux écoles : Coder la nouvelle voie série soi-même ou utiliser une librairie existante. Si vous avez du temps, la première solution est réellement intéressante et formatrice. Pour ma part, le temps est une denrée ce faisant rare, je vais donc utiliser une bibliothèque existante qui a été codée par des professionnels et testée par des milliers de personnes à travers le monde : SoftwareSerial.
&lt;/p&gt;
&lt;h5 id="utiliser-la-bibliothèque"&gt;
 &lt;a aria-hidden="true" href="#utiliser-la-bibliothèque"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Utiliser la bibliothèque
&lt;/h5&gt;
&lt;p&gt;
 Pour mettre en œuvre cette bibliothèque c’est assez simple. Il va tout d’abord falloir l’inclure dans vos projet. Au choix, soit en cliquant sur "Library/Import/SoftwareSerial" dans l’IDE Arduino (inclus de base) ou alors en ajoutant la ligne suivante en haut de votre programme :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;SoftwareSerial.h&amp;gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Une fois que la bibliothèque est là, il nous faudra l’utiliser. Cette bibliothèque nous donne l’accès à un objet nommé…SoftwareSerial (quelle coïncidence
 &lt;img alt=":P" class="smiley" src="./static/smileys/langue.png"/&gt;
 ). On peut donc créer une instance de cette objet en écrivant :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;SoftwareSerial &lt;span class="hljs-title"&gt;mavoieserie&lt;/span&gt;&lt;span class="hljs-params"&gt;(Rx, Tx)&lt;/span&gt;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Rx et Tx seront les numéros des broches sur lesquelles sont connectées les broches d’émission/réception de votre module bluetooth. Par exemple j’ai pour ma part la broche Rx du module branchée sur la pin 10 de l’Arduino et la broche Tx reliée a 11. J’ai donc dans mon programme :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-function"&gt;SoftwareSerial &lt;span class="hljs-title"&gt;mavoieserie&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;10&lt;/span&gt;, &lt;span class="hljs-number"&gt;11&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Une fois cela fait, tout est prêt ! En effet, cette bibliothèque offre les mêmes fonctions que la voie série habituelle, la seule différence sera qu’au lieu d’utiliser
 &lt;code&gt;
  Serial
 &lt;/code&gt;
 on utilisera
 &lt;code&gt;
  mavoieserie
 &lt;/code&gt;
 , comme on peut le voir dans le listing ci-dessous :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;mavoiserie.begin(speed);&lt;span class="hljs-comment"&gt;// démarre la voie série à la vitesse speed&lt;/span&gt;
mavoiserie.available(); &lt;span class="hljs-comment"&gt;// retourne le nombre de caractère à lire&lt;/span&gt;
mavoieserie.read();     &lt;span class="hljs-comment"&gt;// retourne le prochain caractère reçu&lt;/span&gt;
mavoiserie.write(val);  &lt;span class="hljs-comment"&gt;// envoie le char "val" sur la voie série&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Notre module fonctionnant par défaut en 9600 bauds, nous allons pouvoir le préparer en écrivant :
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;SoftwareSerial.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-function"&gt;SoftwareSerial &lt;span class="hljs-title"&gt;mavoieserie&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;10&lt;/span&gt;, &lt;span class="hljs-number"&gt;11&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
    mavoiserie.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Puis afin de tester tout cela, nous allons faire un petit code qui se contentera de faire un "echo" entre la voie série liée à l’ordinateur et celle liée au module bluetooth. Ainsi, chaque fois qu’un caractère/texte sera reçu sur la voie série de l’un, il sera renvoyé sur la voie série de l’autre. Notre Arduino servira alors de relais/adaptateur entre l’USB de l’ordinateur et le module bluetooth
 &lt;img alt=";)" class="smiley" src="./static/smileys/clin.png"/&gt;
 . Ce petit programme vous donne alors tout ce qu’il faut savoir pour faire vos premières applications avec
 &lt;img alt=":)" class="smiley" src="./static/smileys/smile.png"/&gt;
 . Juste une chose : branchez la broche "Key" à la masse pour que le module soit en mode "communication" et non pas en mode commande.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-meta"&gt;#&lt;span class="hljs-meta-keyword"&gt;include&lt;/span&gt; &lt;span class="hljs-meta-string"&gt;&amp;lt;SoftwareSerial.h&amp;gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class="hljs-function"&gt;SoftwareSerial &lt;span class="hljs-title"&gt;mavoieserie&lt;/span&gt;&lt;span class="hljs-params"&gt;(&lt;span class="hljs-number"&gt;11&lt;/span&gt;, &lt;span class="hljs-number"&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;; &lt;span class="hljs-comment"&gt;// (RX, TX) (pin Rx BT, pin Tx BT)&lt;/span&gt;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-comment"&gt;// Ouvre la voie série avec l'ordinateur&lt;/span&gt;
    Serial.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);
    &lt;span class="hljs-comment"&gt;// Ouvre la voie série avec le module BT&lt;/span&gt;
    mavoieserie.begin(&lt;span class="hljs-number"&gt;9600&lt;/span&gt;);
}

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;loop&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;span class="hljs-comment"&gt;// run over and over&lt;/span&gt;
&lt;/span&gt;{
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (mavoieserie.available()) {
        Serial.write(mavoieserie.read());
    }
    &lt;span class="hljs-keyword"&gt;if&lt;/span&gt; (Serial.available()) {
        mavoieserie.write(Serial.read());
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/Ory5NlvQF3s" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="aller-plus-loin-la-configuration-at"&gt;
 &lt;a aria-hidden="true" href="#aller-plus-loin-la-configuration-at"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Aller plus loin, la configuration (AT)
&lt;/h3&gt;
&lt;p&gt;
 Si vous voulez pouvoir utiliser plus de fonctionnalités avec votre module, il va falloir modifier ses paramètres internes. Pour pouvoir être configuré, le module utilise un jeu de commandes plus ou moins standards que l’on appelle "commande AT" (
 &lt;strong&gt;
  AT
 &lt;/strong&gt;
 tention) ou
 &lt;em&gt;
  Commande Hayes
 &lt;/em&gt;
 du nom de leur inventeur. Pour les utiliser, il faudra que le module soit placé dans un mode particulier, le mode "commande". Dans ce mode, toutes les informations envoyées au module seront interprétées pour faire de la configuration, rien ne sera envoyé en bluetooth à un autre appareil.
&lt;/p&gt;
&lt;p&gt;
 Les commandes AT portent plutôt bien leur nom. En effet, tous les ordres de configuration commencent par les caractères "AT+" suivis de l’ordre en question puis un retour à la ligne via les caractères "\r\n". Voyons cela plus en détail.
&lt;/p&gt;
&lt;h5 id="passer-en-mode-commande"&gt;
 &lt;a aria-hidden="true" href="#passer-en-mode-commande"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Passer en "mode commande"
&lt;/h5&gt;
&lt;p&gt;
 Pour que le module décide que ce qu’il reçoit doit être traité comme un ordre de configuration et non comme un bout de texte à transmettre, il faudra le placer en mode "commande". Dans ce mode, plus aucun texte ne sera transmis.
Afin d’établir cette communication, il existe deux méthodes.
La première consiste à démarrer le module avec sa broche "Key" à l’état HAUT (reliée au 5V). La LED présente sur le module devrait alors clignoter rapidement, signalant que le module est prêt à recevoir des ordres AT. Dans cette configuration, tous les messages envoyés seront interprétés comme des commandes et le seul moyen d’en sortir sera de redémarrer le module (en supprimant son alimentation). Attention, dans ce mode la connexion s’effectue à une vitesse de 38400 bauds ! N’oubliez pas de le prendre en compte dans votre programme. Je déconseille cette première méthode qui est finalement assez contraignante.
&lt;/p&gt;
&lt;p&gt;
 Une deuxième méthode, plus souple, sera d’utiliser la broche "Key" dans notre programme. Il faut donc dans un premiers temps déclarer cette dernière en sortie et la mettre à l’état bas par défaut. Elle sera connectée à la pin 12 pour ma part. Dans cette situation, la vitesse restera à 9600 bauds.
&lt;/p&gt;
&lt;div class="hljs-code-div"&gt;
 &lt;div class="hljs-line-numbers"&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
  &lt;span&gt;
  &lt;/span&gt;
 &lt;/div&gt;
 &lt;pre&gt;&lt;code class="hljs language-cpp"&gt;&lt;span class="hljs-keyword"&gt;const&lt;/span&gt; &lt;span class="hljs-keyword"&gt;int&lt;/span&gt; key = &lt;span class="hljs-number"&gt;12&lt;/span&gt;;

&lt;span class="hljs-function"&gt;&lt;span class="hljs-keyword"&gt;void&lt;/span&gt; &lt;span class="hljs-title"&gt;setup&lt;/span&gt;&lt;span class="hljs-params"&gt;()&lt;/span&gt; &lt;/span&gt;{
    pinMode(key, OUTPUT);
    pinMode(key, LOW);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;
 Maintenant, chaque fois que vous souhaiterez passer dans le mode "commande" vous devrez mettre cette broche à l’état haut et la maintenir dans cet état tant que vous envoyez des commandes.
&lt;/p&gt;
&lt;h5 id="envoyer-des-commandes"&gt;
 &lt;a aria-hidden="true" href="#envoyer-des-commandes"&gt;
  &lt;span class="es-autolink-heading"&gt;
  &lt;/span&gt;
 &lt;/a&gt;
 Envoyer des commandes
&lt;/h5&gt;
&lt;p&gt;
 Comme je l’écrivais plus tôt, chaque commande envoyée doit commencer par "AT+…" et finir par un retour à la ligne "\r\n". Il existe plusieurs commandes que l’on trouve en général dans les documents fournis par le constructeur. Vous pourrez trouver ce jeu de commande en faisant une recherche du type "HC-05 AT commandes" dans votre moteur de recherche préféré ou en téléchargeant
 &lt;a href="/commandes_AT_HC05.pdf"&gt;
  ce fichier
 &lt;/a&gt;
 (en anglais of course).
Que voyons nous ici ? À partir de la page 3, on peut voir une série de commandes et leur retour. Essayons tout cela.
Pour cela, passez tout d’abord votre module en mode commande en mettant sa broche Key à 1.
Maintenant, en reprenant le programme vu plus haut faisant un echo dans la voie série, envoyons la chaîne suivante "AT+NAME". Cette commande passée sans paramètre donne le nom visible du module. Par défaut vous devriez obtenir "HC-05" en retour. Si maintenant nous voulions changer ce nom, nous ferions "AT+NAME=TEST" pour l’appeler "TEST" par exemple. Si tout se passe bien, le module doit vous répondre "OK". C’est aussi simple que ça !
D’une manière générale, pour lire un paramètre on fera "AT+[paramètre]" et pour le changer on fera
 &lt;code&gt;
  AT+[paramètre]=[valeur]
 &lt;/code&gt;
 .
Lorsque vous utiliserez le module sans aucune liaison série externe pour vérifier, il peut être bon de s’assurer que tout se passe bien en vérifiant que le module renvoie bien "OK" lorsque vous changez un paramètre. Si au début du mode commande vous voulez vérifier que le module est bien présent et prêt à répondre, vous pouvez envoyer simplement "AT" et il vous répondra "OK" !
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/Ory5NlvQF3s" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;
&lt;hr/&gt;
&lt;p&gt;
 Vous devriez maintenant être en mesure d’utiliser votre module bluetooth HC-05. Il ne reste plus qu’a coder une petite application sur votre PC ou un téléphone et vous pourrez faire du pilotage à distance complètement autonome, sans fil relié à un ordinateur pour recevoir les ordres !
&lt;/p&gt;</content><category term="arduino"></category><category term="tuto"></category></entry><entry><title>RaspberryPi Compute, une carte qui change (presque) tout !</title><link href="https://eskimon.fr/raspberrypi-compute-carte-qui-change-presque-tout" rel="alternate"></link><published>2010-12-03T10:20:00+01:00</published><updated>2010-12-05T19:30:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2010-12-03:/raspberrypi-compute-carte-qui-change-presque-tout</id><summary type="html">&lt;p&gt;
 J’ai longtemps été un fan de la RaspberryPi. Early adopter, j’étais dans les rangs des geeks qui ont DDOS les sites de Farnell et RadioSpare pour faire partie des premiers a en avoir une…
J’ai pendant un moment joué avec, pour faire les mêmes applications que tout …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 J’ai longtemps été un fan de la RaspberryPi. Early adopter, j’étais dans les rangs des geeks qui ont DDOS les sites de Farnell et RadioSpare pour faire partie des premiers a en avoir une…
J’ai pendant un moment joué avec, pour faire les mêmes applications que tout le monde, mais une certaine déception me restait en travers de la gorge : C’est chiant à embarquer.
En effet, la carte possède peu de GPIO, donc pour piloter des trucs et des machins il faut forcément multiplexer et/ou passer par un composant externe. De plus, son format n’est pas des plus pratiques (notamment à cause des connecteurs placé un peu partout sur les bords de la carte…).
&lt;/p&gt;
&lt;p&gt;
 Mais aujourd’hui (en juin prochain en fait) une petite révolution va avoir lieu… La fondation RaspberryPi sort un nouveau produit : RaspBerryPi Compute.
Cette nouvelle carte est en fait en plein de points identique à une RPi classique a une différence près : Elle est fine et au format SO-DIMM (format des cartes de mémoires vive de PC portable). Ce passage au rouleau compresseur a permis à la carte d’échanger sa carte SD contre une mémoire eMMC de 4 Go pour le système d’exploitation. La cure d’amaigrissement permet aussi de dégager les connecteurs. Maintenant libre à vous de faire ce que vous voulez avec les 46 GPIO qui deviennent alors disponibles (UART, SPI, I2C, Timer/PWM…).
Bien sur il sera toujours possible sur une carte externe de câbler les bonnes entrées/sorties vers un port USB, un connecteur Ethernet ou une prise HDMI (et bien plus encore selon vos besoin et votre imagination).
&lt;/p&gt;
&lt;p&gt;
 Bref, vous l’aurez compris, cette carte offre un nouveau souffle (même si tout se portait déjà très bien) a la collection RaspberryPi.
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="RaspberryPi Compute" src="./images/uploaded/raspberrypi-compute-carte-qui-change-presque-tout/raspberrypi-compute.png"/&gt;
 &lt;figcaption&gt;
  La RaspberryPi Compute dans toute sa splendeur
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Ce nouveau jouet sera accompagné à sa sortie d’une sorte de kit de développement permettant de tirer les signaux sur une carte externe. Ainsi, vous pourrez tester vos applications facilement avant d’embarquer la carte dans vos nouvelles applications ! On y retrouve les connecteurs HDMI, USB Host et USB Power ainsi que des composants externes nécessaires au fonctionnement de la carte mais non embarqué sur cette dernière (comme les différentes alimentations par exemple).
&lt;/p&gt;
&lt;figure&gt;
 &lt;img alt="RPi Compute et support" src="./images/uploaded/raspberrypi-compute-carte-qui-change-presque-tout/rpi-compute-et-support.png"/&gt;
 &lt;figcaption&gt;
  La RPi Compute sur son support/kit de developpement
 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;
 Peu d’informations ont coulé sur le prix. Il devrait être similaire à celui de la RapsberryPi modèle B actuelle puisque le prix des connecteurs peut-être supprimé mais il faut rajouter celui de la mémoire eMMC. Le site officiel parle d’un tarif d’une trentaine de dollars dans le cas d’une commande de 100 cartes (données utiles pour les personnes voulant créer un produit à grande échelle). Il sera donc forcément supérieur pour des commandes individuelles.
&lt;/p&gt;
&lt;p&gt;
 Si vous parlez anglais, voici
 &lt;a href="http://www.raspberrypi.org/raspberry-pi-compute-module-new-product/"&gt;
  un lien vers l’article officiel
 &lt;/a&gt;
 .
&lt;/p&gt;</content><category term="memo"></category></entry><entry><title>Scrapheap Challenge, l’émission télé qui va vous plaire !</title><link href="https://eskimon.fr/scrapheap-challenge-l-emission-tele-qui-va-vous-plaire" rel="alternate"></link><published>2010-12-03T10:20:00+01:00</published><updated>2010-12-05T19:30:00+01:00</updated><author><name>Eskimon</name></author><id>tag:eskimon.fr,2010-12-03:/scrapheap-challenge-l-emission-tele-qui-va-vous-plaire</id><summary type="html">&lt;p&gt;
 Puisque ce blog parle d’informatique et d’électronique, pas de raison de ne pas digresser pour une fois et parler d’ingénierie dans un sens plus large. Et aujourd’hui cet article va aller encore plus loin en parlant d’un jeu télévisé ! Mais ne partez pas en courant …&lt;/p&gt;</summary><content type="html">&lt;p&gt;
 Puisque ce blog parle d’informatique et d’électronique, pas de raison de ne pas digresser pour une fois et parler d’ingénierie dans un sens plus large. Et aujourd’hui cet article va aller encore plus loin en parlant d’un jeu télévisé ! Mais ne partez pas en courant, croyez moi cela en vaut la peine !
&lt;/p&gt;
&lt;p&gt;
 J’ai envie de vous faire découvrir le méconnu (en France) et pourtant si génial "
 &lt;strong&gt;
  Scrapheap Challenge
 &lt;/strong&gt;
 " !
&lt;/p&gt;
&lt;p&gt;
 Dans cette émission, deux équipes s’affrontent pour réaliser chacune une machine permettant de répondre a un objectif loufoque. Par exemple : Lancer une mini-cooper le plus loin possible (une vieille, cassée pas toute neuve, pensons a la planète !). Ou encore faire une course contre-la-montre avec slalom dans un véhicule sans fenêtre/vue sur l’extérieur…
Pour corser le tout, toutes les pièces sont de la récupération ! En effet, les deux équipes sont lâchées dans une casse automobile ("scrap yard" chez Shakespeare) et ont un weekend pour construire leurs engins et s’affronter avec à la fin. Seuls un espace de travail et des outils sont fournis (et la casse est souvent agrémentée de pièces pouvant éventuellement servir au défi).
Originalité du jeu : Rien n’est a gagner ! Seul le plaisir et la fierté d’avoir participé, bricolé et le plaisir de s’être amusé sont présent comme récompense. Cela en fait une émission hors du commun puisque les équipes ont vraiment un bon esprit de compétition dans la bonne humeur et personne n’est mauvais/vilain envers l’équipe adverse en cas de défaite.
&lt;/p&gt;
&lt;p&gt;
 Bref, si vous aimez le bricolage, l’ingénierie (surtout mécanique) et bien rigoler n’hésitez surtout pas à regarder. Les épisodes ne sont pas simples à trouver, mais de plus en plus présents sur YouTube. Un épisode comprenant la présentation des équipes/objectifs, la récupération/fabrication et l’affrontement dure un petit peu moins d’une heure.
C’est aussi un excellent exercice pour apprendre des nouveaux termes techniques anglais (ou travailler sa compréhension orale en général) car il n’existe pas de version française ni de sous-titrage (désolé pour les allergiques a l’anglais). Vous entendrez alors parler de "clutch", "shaft" et autres "gears" ou "exhaust" jusqu’à être familier avec.
&lt;/p&gt;
&lt;p&gt;
 Bref, j’espère que cela vous amusera !
&lt;/p&gt;
&lt;p&gt;
 Ci-dessous, voici l’affrontement de l’épreuve "Lancez une mini-cooper le plus loin possible". On y retrouve deux techniques, une sorte d’arbalète (on tend un élastique et on lance) et une technique de trébuchet. Le final est…imprévu
 &lt;img alt=":D" class="smiley" src="./static/smileys/heureux.png"/&gt;
 Bon visionnage !
&lt;/p&gt;
&lt;div class="text-center"&gt;
 &lt;div class="video-container"&gt;
  &lt;div class="video-wrapper"&gt;
   &lt;iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/-fE5ZE4Pj5w" width="560"&gt;
   &lt;/iframe&gt;
  &lt;/div&gt;
 &lt;/div&gt;
&lt;/div&gt;</content><category term="divertissement"></category><category term="diy"></category><category term="bricolage"></category></entry></feed>