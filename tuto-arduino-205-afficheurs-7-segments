<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    <title>Afficheurs 7 segments &bull; Le blog d'Eskimon</title>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <link rel="stylesheet" href="/static/css/hljs-monokai.css" />
    <link rel="stylesheet" href="/static/css/style.css" />
    <!-- Google font -->
    <link href="https://fonts.googleapis.com/css?family=Roboto" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=Open+Sans" rel="stylesheet">

    <!-- Favicon -->
    <link rel="icon" type="image/x-icon" href="/static/images/favicon/favicon.ico">
    <link rel="apple-touch-icon" sizes="57x57" href="/static/images/favicon/apple-icon-57x57.png">
    <link rel="apple-touch-icon" sizes="60x60" href="/static/images/favicon/apple-icon-60x60.png">
    <link rel="apple-touch-icon" sizes="72x72" href="/static/images/favicon/apple-icon-72x72.png">
    <link rel="apple-touch-icon" sizes="76x76" href="/static/images/favicon/apple-icon-76x76.png">
    <link rel="apple-touch-icon" sizes="114x114" href="/static/images/favicon/apple-icon-114x114.png">
    <link rel="apple-touch-icon" sizes="120x120" href="/static/images/favicon/apple-icon-120x120.png">
    <link rel="apple-touch-icon" sizes="144x144" href="/static/images/favicon/apple-icon-144x144.png">
    <link rel="apple-touch-icon" sizes="152x152" href="/static/images/favicon/apple-icon-152x152.png">
    <link rel="apple-touch-icon" sizes="180x180" href="/static/images/favicon/apple-icon-180x180.png">
    <link rel="icon" type="image/png" sizes="192x192"  href="/static/images/favicon/android-icon-192x192.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/static/images/favicon/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="96x96" href="/static/images/favicon/favicon-96x96.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/static/images/favicon/favicon-16x16.png">
    <link rel="manifest" href="/static/images/favicon/manifest.json">
    <meta name="msapplication-TileColor" content="#ffffff">
    <meta name="msapplication-TileImage" content="/static/images/favicon/ms-icon-144x144.png">


    <meta name="description" content="Faire de l'affichage avec des LEDs c'est un bon début. Voyons maintenant comment faire quelque chose de plus complet avec des afficheurs 7 segments." />

    <meta name="tags" content="arduino" />
    <meta name="tags" content="tuto" />

  <meta property="og:site_name" content="Le blog d'Eskimon">
  <meta property="og:title" content="Afficheurs 7 segments">
  <meta property="og:url" content="https://eskimon.fr/tuto-arduino-205-afficheurs-7-segments">
  <meta property="og:language" content="fr_FR">
  <meta property="og:type" content="website">

  <meta property="twitter:domain" content="https://eskimon.fr/">
  <meta property="twitter:card" content="summary">
  <meta property="twitter:url" content="https://eskimon.fr/tuto-arduino-205-afficheurs-7-segments">
  <meta property="twitter:title" content="Afficheurs 7 segments">
<meta property="twitter:description" content="Faire de l'affichage avec des LEDs c'est un bon début. Voyons maintenant comment faire quelque chose de plus complet avec des afficheurs 7 segments.">  <meta property="twitter:site" content="SITENAME">
  <meta property="twitter:creator" content="@eskimon_fr">

  <link rel="schema.DC" href="http://purl.org/dc/elements/1.1/" />
  <meta name="DC.publisher" lang="fr" content="Le blog d'Eskimon" />
  <meta name="DC.creator" content="Eskimon" />
  <meta name="DC.type" content="text" />
  <meta name="DC.title" content="Afficheurs 7 segments" />
  <meta name="DC.abstract" content="Afficheurs 7 segments – Faire de l'affichage avec des LEDs c'est un bon début. Voyons maintenant comment faire quelque chose de plus complet avec des afficheurs 7 segments." />
  <meta name="DC.subject" lang="fr" content="Arduino/Gestion des entrées - sorties – arduino; tuto" />
<meta name="DC.description" lang="fr" content="Faire de l'affichage avec des LEDs c'est un bon début. Voyons maintenant comment faire quelque chose de plus complet avec des afficheurs 7 segments." />  <meta name="DC.date" content="2013-12-10T20:03:00+01:00" />
  <meta name="DC.format" content="text/html" />
  <meta name="DC.language" content="fr" />
  <meta name="DC.rights" content="CC BY-NC-SA" />


  <script async src="//pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"></script>
  <script>
    (adsbygoogle = window.adsbygoogle || []).push({
      google_ad_client: "ca-pub-2080155902357792",
      enable_page_level_ads: true
    });
    </script>
</head>

<body>
<nav class="navbar navbar-expand-lg navbar-light bg-secondary-l40 py-0">
    <a class="navbar-brand" href="/">
        <img src="/static/images/logo.png" width="20" height="20" alt="">
        Le blog d'Eskimon
    </a>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNavAltMarkup" aria-controls="navbarNavAltMarkup" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarNavAltMarkup">
        <div class="navbar-nav ml-auto">
                <a class="nav-item nav-link active" href="/category/arduino">Arduino</a>
                <a class="nav-item nav-link " href="/category/articles">Articles</a>
                <a class="nav-item nav-link " href="/category/tuto">Tuto</a>
            <!--<a class="nav-item nav-link active" href="#">Home <span class="sr-only">(current)</span></a>-->
        </div>
    </div>
</nav>
<!--
    <div class="vh-100 m-0 p-0 ">
        <div class="wmax-1024 mx-auto my-0 py-0 text-justify">
            <div class="text-center">
                <a href="https://eskimon.fr" class="text-dark no-decoration" >
                    <h1 class="logo-font text-center my-5 display-2 d-md-block d-none">Le blog d'Eskimon</h1>
                    <h2 class="logo-font text-center d-md-none my-5">Le blog d'Eskimon</h2>
                </a>
            </div>
        </div>
    </div>
-->
    <div class="container-fluid es-verticalfill">
<div class="row">
    <!-- Sidebar -->
    <div class="col-md-2 col-lg-2 d-none d-md-block sticky-top es-scrollable pt-3 px-1 bg-light es-ul-bordered" id="es-side-summary">
        <nav class="px-2" id="es-side-summary-content">
            <!-- Summary will come here -->
        </nav>
        <!-- Add here self-promo for ebook -->
        <!-- Add here adsense block -->
        <hr>
        <div id="es-side-summary-bot-annonce">
            <!-- Responsive sidebar -->
            <ins class="adsbygoogle"
            style="display:block"
            data-ad-client="ca-pub-2080155902357792"
            data-ad-slot="3497585408"
            data-ad-format="auto"></ins>
            <script>
            (adsbygoogle = window.adsbygoogle || []).push({});
            </script>
        </div>
    </div>
    <!-- Main content -->
    <div class="col-md-9 col-lg-7 offset-lg-1 d-block pt-3">
        <article>
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb bg-white">
                    <li class="breadcrumb-item"><a href="/category/arduino">Arduino</a></li>
                        <li class="breadcrumb-item"><a href="/subcategory/arduino/gestion-des-entrees-sorties.html">Gestion des entrées - sorties</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Afficheurs 7 segments</li>
                </ol>
            </nav>
            <header class="es-post-info">
                <h1 class="text-center my-4">Afficheurs 7 segments</h1>
            </header>
            <footer class="es-post-info pb-2 mb-2">
                <div class="row align-items-center">
                    <div class="col-auto mr-auto">
                        <span class="vcard author">
                            <a class="" href="/author/eskimon" rel="author">Eskimon</a>
                        </span>
                        ,
                        <time class="" datetime="2013-12-10T20:03:00+01:00" pubdate>
                            le mar. 10 décembre 2013
                        </time>
                    </div>
                    <div class="col-auto">
                        <a class="btn btn-outline-primary btn-sm" href="/tag/arduino" rel="tag">arduino</a>
                        <a class="btn btn-outline-primary btn-sm" href="/tag/tuto" rel="tag">tuto</a>
                    </div>
                </div>
            </footer>

            <!-- /.post-info -->
            <div class="entry-content">
                <p>
 Vous connaissez les afficheurs 7 segments ? Ou alors vous ne savez pas que ça s’appelle comme ça ? Il s’agit des petites lumières qui forment le chiffre 8 et qui sont de couleur rouge ou verte, la plupart du temps, mais peuvent aussi être bleus, blancs, etc. On en trouve beaucoup dans les radio-réveils, car ils servent principalement à afficher l’heure. Autre particularité, non seulement de pouvoir afficher des chiffres (0 à 9), ils peuvent également afficher certaines lettres de l’alphabet.
</p>
<h4 id="matériel">
 <a aria-hidden="true" href="#matériel">
  <span class="es-autolink-heading">
  </span>
 </a>
 Matériel
</h4>
<p>
 Pour ce chapitre, vous aurez besoin de :
</p>
<ul>
 <li>
  Un (et plus) afficheur 7 segments (évidemment)
 </li>
 <li>
  8 résistances de
  <span class="inlineMath">
   <span class="katex">
    <span class="katex-mathml">
     <math>
      <semantics>
       <mrow>
        <mn>
         3
        </mn>
        <mn>
         3
        </mn>
        <mn>
         0
        </mn>
        <mi mathvariant="normal">
         Ω
        </mi>
       </mrow>
       <annotation encoding="application/x-tex">
        330\Omega
       </annotation>
      </semantics>
     </math>
    </span>
    <span aria-hidden="true" class="katex-html">
     <span class="strut" style="height:0.68333em;">
     </span>
     <span class="strut bottom" style="height:0.68333em;vertical-align:0em;">
     </span>
     <span class="base textstyle uncramped">
      <span class="mord mathrm">
       3
      </span>
      <span class="mord mathrm">
       3
      </span>
      <span class="mord mathrm">
       0
      </span>
      <span class="mord mathrm">
       Ω
      </span>
     </span>
    </span>
   </span>
  </span>
 </li>
 <li>
  Un (ou deux) décodeurs
  <abbr title="Binary Coded Decimal ou Binaire Codé Décimal">
   BCD
  </abbr>
  7 segments
 </li>
 <li>
  Une carte Arduino ! Mais dans un premier temps on va d’abord bien saisir le truc avant de faire du code
  <img alt=":)" class="smiley" src="./static/smileys/smile.png"/>
 </li>
</ul>
<p>
 Nous allons commencer par une découverte de l’afficheur, comment il fonctionne et comment le branche-t-on. Ensuite nous verrons comment l’utiliser avec la carte Arduino. Enfin, le chapitre suivant amènera un TP résumant les différentes parties vues.
</p>
<h3 id="sommaire">
 <a aria-hidden="true" href="#sommaire">
  <span class="es-autolink-heading">
  </span>
 </a>
 Sommaire
</h3>
<ul>
 <li>
  <p>
   <a href="#première-approche-côté-électronique">
    Première approche : côté électronique
   </a>
  </p>
  <ul>
   <li>
    <p>
     <a href="#un-peu-beaucoup-délectronique">
      Un peu (beaucoup) d’électronique
     </a>
    </p>
    <ul>
     <li>
      <a href="#des-led-encore-des-led">
       Des LED, encore des LED
      </a>
     </li>
     <li>
      <a href="#cathode-commune-ou-anode-commune">
       Cathode commune ou Anode commune
      </a>
     </li>
     <li>
      <a href="#choix-de-lafficheur">
       Choix de l’afficheur
      </a>
     </li>
    </ul>
   </li>
   <li>
    <p>
     <a href="#branchement-complet-de-lafficheur">
      Branchement "complet" de l’afficheur
     </a>
    </p>
    <ul>
     <li>
      <a href="#présentation-du-boîtier">
       Présentation du boîtier
      </a>
     </li>
     <li>
      <a href="#exemple">
       Exemple
      </a>
     </li>
     <li>
      <a href="#seulement-7-segments-mais-plein-de-caractères">
       Seulement 7 segments mais plein de caractère(s) !
      </a>
     </li>
    </ul>
   </li>
  </ul>
 </li>
 <li>
  <p>
   <a href="#afficher-son-premier-chiffre">
    Afficher son premier chiffre !
   </a>
  </p>
  <ul>
   <li>
    <a href="#schéma-de-connexion">
     Schéma de connexion
    </a>
   </li>
   <li>
    <a href="#le-programme">
     Le programme
    </a>
   </li>
  </ul>
 </li>
 <li>
  <p>
   <a href="#techniques-daffichage">
    Techniques d’affichage
   </a>
  </p>
  <ul>
   <li>
    <p>
     <a href="#les-décodeurs-4-bits---7-segments">
      Les décodeurs "4 bits -&gt; 7 segments"
     </a>
    </p>
    <ul>
     <li>
      <a href="#décodeur-bcd---7-segments">
       Décodeur BCD -&gt; 7 segments
      </a>
     </li>
     <li>
      <a href="#principe-du-décodeur">
       Principe du décodeur
      </a>
     </li>
     <li>
      <a href="#choix-du-décodeur">
       Choix du décodeur
      </a>
     </li>
     <li>
      <a href="#fonctionnement">
       Fonctionnement
      </a>
     </li>
    </ul>
   </li>
   <li>
    <a href="#laffichage-par-alternance">
     L’affichage par alternance
    </a>
   </li>
  </ul>
 </li>
 <li>
  <p>
   <a href="#utilisation-du-décodeur-bcd">
    Utilisation du décodeur BCD
   </a>
  </p>
  <ul>
   <li>
    <a href="#initialisation">
     Initialisation
    </a>
   </li>
   <li>
    <a href="#programme-principal">
     Programme principal
    </a>
   </li>
   <li>
    <a href="#fonction-daffichage">
     Fonction d’affichage
    </a>
   </li>
  </ul>
 </li>
 <li>
  <p>
   <a href="#utiliser-plusieurs-afficheurs">
    Utiliser plusieurs afficheurs
   </a>
  </p>
  <ul>
   <li>
    <a href="#problématique">
     Problématique
    </a>
   </li>
   <li>
    <p>
     <a href="#un-peu-délectronique">
      Un peu d’électronique…
     </a>
    </p>
    <ul>
     <li>
      <a href="#le-transistor-bipolaire-présentation">
       Le transistor bipolaire : présentation
      </a>
     </li>
     <li>
      <a href="#fonctionnement-en-commutation-du-transistor-bipolaire">
       Fonctionnement en commutation du transistor bipolaire
      </a>
     </li>
     <li>
      <a href="#utilisation-générale">
       Utilisation générale
      </a>
     </li>
     <li>
      <a href="#utilisation-avec-nos-afficheurs">
       Utilisation avec nos afficheurs
      </a>
     </li>
     <li>
      <a href="#schéma-final">
       Schéma final
      </a>
     </li>
    </ul>
   </li>
   <li>
    <a href="#quelques-détails-techniques">
     Quelques détails techniques
    </a>
   </li>
   <li>
    <a href="#et-de-programmation">
     …et de programmation
    </a>
   </li>
  </ul>
 </li>
 <li>
  <a href="#contraintes-des-évènements">
   Contraintes des évènements
  </a>
 </li>
</ul>
<h3 id="première-approche-côté-électronique">
 <a aria-hidden="true" href="#première-approche-côté-électronique">
  <span class="es-autolink-heading">
  </span>
 </a>
 Première approche : côté électronique
</h3>
<h4 id="un-peu-beaucoup-délectronique">
 <a aria-hidden="true" href="#un-peu-beaucoup-délectronique">
  <span class="es-autolink-heading">
  </span>
 </a>
 Un peu (beaucoup) d’électronique
</h4>
<p>
 Comme son nom l’indique, l’afficheur 7 segments possède… 7 segments.
Mais un segment c’est quoi au juste ? Et bien c’est une portion de l’afficheur, qui est allumée ou éteinte pour réaliser l’affichage.
Cette portion n’est en fait rien d’autre qu’une LED qui au lieu d’être ronde comme d’habitude est plate et encastré dans un boiter.
On dénombre donc 8 portions en comptant le point de l’afficheur (mais il ne compte pas en tant que segment à part entière car il n’est pas toujours présent).
Regardez à quoi ça ressemble :
</p>
<p>
 <figure>
  <img alt="Un afficheur 7 segments" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/un-afficheur-7-segments.jpg"/>
  <figcaption>
   Un afficheur 7 segments - (CC-BY-SA,
   <a href="http://commons.wikimedia.org/wiki/File:Seven_segment_02_Pengo.jpg">
    Pengo
   </a>
   )
  </figcaption>
 </figure>
</p>
<h5 id="des-led-encore-des-led">
 <a aria-hidden="true" href="#des-led-encore-des-led">
  <span class="es-autolink-heading">
  </span>
 </a>
 Des LED, encore des LED
</h5>
<p>
 Et des LED, il y en a ! Entre 7 et 8 selon les modèles (c’est ce que je viens d’expliquer), voir beaucoup plus, mais on ne s’y attardera pas dessus.
Voici un schéma vous présentant un modèle d’afficheur sans le point (qui au final est juste une LED supplémentaire rappelez-vous) :
</p>
<p>
 <img alt="Schéma de l'afficheur 7segments" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/schema-de-lafficheur-7segments.png"/>
</p>
<p>
 <em>
  Les interrupteurs a,b,c,d,e,f,g représentent les signaux pilotant chaque segments
 </em>
</p>
<p>
 Comme vous le voyez sur ce schéma, toutes les LED possèdent une broche commune, reliée entre elle.
Selon que cette broche est la cathode ou l’anode on parlera d’afficheur à cathode commune ou… anode commune (vous suivez ?).
Dans l’absolu, ils fonctionnent de la même façon, seule la manière de les brancher diffère (actif sur état bas ou sur état haut).
</p>
<h5 id="cathode-commune-ou-anode-commune">
 <a aria-hidden="true" href="#cathode-commune-ou-anode-commune">
  <span class="es-autolink-heading">
  </span>
 </a>
 Cathode commune ou Anode commune
</h5>
<p>
 Dans le cas d’un afficheur à cathode commune, toutes les cathodes sont reliées entre elles en un seul point lui-même connecté à la masse.
Ensuite, chaque anode de chaque segment sera reliée à une broche de signal.
Pour allumer chaque segment, le signal devra être une tension positive.
En effet, si le signal est à 0, il n’y a pas de différence de potentiel entre les deux broches de la LED et donc elle ne s’allumera pas !
Si nous sommes dans le cas d’une anode commune, les anodes de toutes les LED sont reliées entre elles en un seul point qui sera connecté à l’alimentation.
Les cathodes elles seront reliées une par une aux broches de signal. En mettant une broche de signal à 0, le courant passera et le segment en question s’allumera.
Si la broche de signal est à l’état haut, le potentiel est le même de chaque côté de la LED, donc elle est bloquée et ne s’allume pas !
Que l’afficheur soit à anode ou à cathode commune, on doit toujours prendre en compte qu’il faut ajouter une résistance de limitation de courant entre la broche isolée et la broche de signal.
Traditionnellement, on prendra une résistance de
 <span class="inlineMath">
  <span class="katex">
   <span class="katex-mathml">
    <math>
     <semantics>
      <mrow>
       <mn>
        3
       </mn>
       <mn>
        3
       </mn>
       <mn>
        0
       </mn>
       <mi mathvariant="normal">
        Ω
       </mi>
      </mrow>
      <annotation encoding="application/x-tex">
       330\Omega
      </annotation>
     </semantics>
    </math>
   </span>
   <span aria-hidden="true" class="katex-html">
    <span class="strut" style="height:0.68333em;">
    </span>
    <span class="strut bottom" style="height:0.68333em;vertical-align:0em;">
    </span>
    <span class="base textstyle uncramped">
     <span class="mord mathrm">
      3
     </span>
     <span class="mord mathrm">
      3
     </span>
     <span class="mord mathrm">
      0
     </span>
     <span class="mord mathrm">
      Ω
     </span>
    </span>
   </span>
  </span>
 </span>
 pour une tension de +5V, mais cela se calcul (cf. chapitre 1, partie 2).
</p>
<ul>
 <li>
  Si vous voulez augmenter la luminosité, il suffit de diminuer cette valeur.
 </li>
 <li>
  Si au contraire vous voulez diminuer la luminosité, augmenter la résistance.
 </li>
</ul>
<h5 id="choix-de-lafficheur">
 <a aria-hidden="true" href="#choix-de-lafficheur">
  <span class="es-autolink-heading">
  </span>
 </a>
 Choix de l’afficheur
</h5>
<p>
 Pour la rédaction j’ai fait le choix d’utiliser des afficheurs à anode commune et ce n’est pas anodin.
En effet et on l’a vu jusqu’à maintenant, on branche les LED du +5V vers la broche de la carte Arduino.
Ainsi, dans le cas d’un afficheur à anode commune, les LED seront branchés d’un côté au +5V, et de l’autre côté aux broches de signaux.
Ainsi, pour allumer un segment on mettra la broche de signal à 0 et on l’éteindra en mettant le signal à 1. On a toujours fait comme ça depuis le début, ça ne vous posera donc aucun problème.
 <img alt=";)" class="smiley" src="./static/smileys/clin.png"/>
</p>
<h4 id="branchement-complet-de-lafficheur">
 <a aria-hidden="true" href="#branchement-complet-de-lafficheur">
  <span class="es-autolink-heading">
  </span>
 </a>
 Branchement "complet" de l’afficheur
</h4>
<p>
 Nous allons maintenant voir comment brancher l’afficheur à anode commune.
</p>
<h5 id="présentation-du-boîtier">
 <a aria-hidden="true" href="#présentation-du-boîtier">
  <span class="es-autolink-heading">
  </span>
 </a>
 Présentation du boîtier
</h5>
<p>
 Les afficheurs 7 segments se présentent sur un
 <em>
  boîtier
 </em>
 de type
 <abbr title="Dual Inline Package">
  DIP
 </abbr>
 10.*
Le format
 <abbr title="Dual Inline Package">
  DIP
 </abbr>
 régie l’espacement entre les différentes broches du circuit intégré ainsi que d’autres contraintes (présence d’échangeur thermique etc…).
Le chiffre 10 signifie qu’il possède 10 broches (5 de part et d’autre du boitier).
Voici une représentation de ce dernier (à gauche) :
</p>
<p>
 <figure>
  <img alt="Boîtier du 7 segments" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/boitier-du-7-segments.jpg"/>
  <figcaption>
   Boîtier du 7 segments - (source: datasheet)
  </figcaption>
 </figure>
</p>
<p>
 <figure>
  <img alt="7 segments" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/7-segments.png"/>
  <figcaption>
   Dénomination des segments - (CC-BY-SA,
   <a href="http://commons.wikimedia.org/wiki/File:7_segment_display_labeled.svg">
    h2g2bob
   </a>
   )
  </figcaption>
 </figure>
</p>
<p>
 Voici la signification des différentes broches :
</p>
<ol>
 <li>
  LED de la cathode E
 </li>
 <li>
  LED de la cathode D
 </li>
 <li>
  Anode commune des LED
 </li>
 <li>
  LED de la cathode C
 </li>
 <li>
  (facultatif) le point décimal.
 </li>
 <li>
  LED de la cathode B
 </li>
 <li>
  LED de la cathode A
 </li>
 <li>
  Anode commune des LED
 </li>
 <li>
  LED de la cathode F
 </li>
 <li>
  LED de la cathode G
 </li>
</ol>
<p>
 Pour allumer un segment c’est très simple, il suffit de le relier à la masse !
</p>
<div class="custom-block alert alert-danger">
 <div class="custom-block-body">
  <p>
   Nous cherchons à allumer les LED de l’afficheur, il est donc impératif de ne pas oubliez les résistances de limitations de courant !
  </p>
 </div>
</div>
<h5 id="exemple">
 <a aria-hidden="true" href="#exemple">
  <span class="es-autolink-heading">
  </span>
 </a>
 Exemple
</h5>
<p>
 Pour commencer, vous allez tout d’abord mettre l’afficheur à cheval sur la plaque d’essai (breadboard).
Ensuite, trouvez la broche représentant l’anode commune et reliez la à la future colonne du +5V. Prochaine étape, mettre une résistance sur chaque broche de signal.
Enfin, reliez quelques une de ces résistances à la masse. Si tous se passe bien, les segments reliés à la masse via leur résistance doivent s’allumer lorsque vous alimentez le circuit.
Voici un exemple de branchement :
</p>
<p>
 <img alt="7 segments schéma" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/7-segments-schema.jpg"/>
</p>
<p>
 <img alt="7 segments breadboard" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/7-segments-breadboard.png"/>
</p>
<p>
 Dans cet exemple de montage, vous verrez que tous les segment de l’afficheur s’allument ! Vous pouvez modifier le montage en déconnectant quelques unes des résistance de la masse et afficher de nombreux caractères.
</p>
<div class="custom-block alert alert-warning">
 <div class="custom-block-body">
  <p>
   Pensez à couper l’alimentation lorsque vous changer des fils de place.
  </p>
 </div>
</div>
<p>
 Les composants n’aiment pas forcément être (dé)branchés lorsqu’ils sont alimentés. Vous pourriez éventuellement leur causer des dommages.
</p>
<h5 id="seulement-7-segments-mais-plein-de-caractères">
 <a aria-hidden="true" href="#seulement-7-segments-mais-plein-de-caractères">
  <span class="es-autolink-heading">
  </span>
 </a>
 Seulement 7 segments mais plein de caractère(s) !
</h5>
<p>
 Vous l’avez peut-être remarqué avec "l’exercice" précédent, un afficheurs 7 segments ne se limite pas à afficher juste des chiffres.
Voici un tableau illustrant les caractères possibles et quels segments allumés.
Attention, il est possible qu’il manque certains caractères !
</p>
<div class="text-center">
 <div class="table-wrapper">
  <table class=" table table-bordered table-striped">
   <thead>
    <tr>
     <th colspan="1" rowspan="1">
      <p>
       Caractère
      </p>
     </th>
     <th colspan="1" rowspan="1">
      <p>
       seg. A
      </p>
     </th>
     <th colspan="1" rowspan="1">
      <p>
       seg. B
      </p>
     </th>
     <th colspan="1" rowspan="1">
      <p>
       seg. C
      </p>
     </th>
     <th colspan="1" rowspan="1">
      <p>
       seg. D
      </p>
     </th>
     <th colspan="1" rowspan="1">
      <p>
       seg. E
      </p>
     </th>
     <th colspan="1" rowspan="1">
      <p>
       seg. F
      </p>
     </th>
     <th colspan="1" rowspan="1">
      <p>
       seg. G
      </p>
     </th>
    </tr>
   </thead>
   <tbody>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       0
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       1
      </p>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       2
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       3
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       4
      </p>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       5
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       6
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       7
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       8
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       9
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       A
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       b
      </p>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       C
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       d
      </p>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       E
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       F
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       H
      </p>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       I
      </p>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       J
      </p>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       L
      </p>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       o
      </p>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       P
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       S
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       t
      </p>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       U
      </p>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       u
      </p>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       °
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
     <td colspan="1" rowspan="1">
      <div class="text-center">
       <p>
        x
       </p>
      </div>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <p>
  Table: Caractères affichage avec un afficheur 7 segments
 </p>
</div>
<div class="custom-block alert alert-primary">
 <div class="custom-block-body">
  <p>
   Aidez-vous de ce tableau lorsque vous aurez à coder l’affichage de caractères !
   <img alt=";)" class="smiley" src="./static/smileys/clin.png"/>
  </p>
 </div>
</div>
<h3 id="afficher-son-premier-chiffre">
 <a aria-hidden="true" href="#afficher-son-premier-chiffre">
  <span class="es-autolink-heading">
  </span>
 </a>
 Afficher son premier chiffre !
</h3>
<p>
 Pour commencer, nous allons prendre en main un afficheur et lui faire s’afficher notre premier chiffre ! C’est assez simple et ne requiert qu’un programme très simple, mais un peu rébarbatif.
</p>
<h4 id="schéma-de-connexion">
 <a aria-hidden="true" href="#schéma-de-connexion">
  <span class="es-autolink-heading">
  </span>
 </a>
 Schéma de connexion
</h4>
<p>
 Je vais reprendre le schéma précédent, mais je vais connecter chaque broche de l’afficheur à une sortie de la carte Arduino. Comme ceci :
</p>
<p>
 <img alt="7 segments schéma" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/7-segments-schema.jpg"/>
</p>
<p>
 <img alt="Afficheur 7 segments montage" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/afficheur-7-segments-montage.png"/>
</p>
<p>
 Vous voyez donc que chaque LED de l’afficheur va être commandée séparément les unes des autres.
Il n’y a rien de plus à faire, si ce n’est qu’à programmer…
</p>
<h4 id="le-programme">
 <a aria-hidden="true" href="#le-programme">
  <span class="es-autolink-heading">
  </span>
 </a>
 Le programme
</h4>
<p>
 L’objectif du programme va être d’afficher un chiffre. Eh bien… c’est partit ! Quoi ?!
Vous voulez de l’aide ?
 <img alt="o_O" class="smiley" src="./static/smileys/blink.gif"/>
 Ben je vous ai déjà tout dit y’a plus qu’à faire.
En plus vous avez un tableau avec lequel vous pouvez vous aider pour afficher votre chiffre.
Cherchez, je vous donnerais la solution ensuite.
</p>
<div class="custom-block custom-block-spoiler">
 <div class="custom-block-body">
  <figure>
   <div class="hljs-code-div">
    <div class="hljs-line-numbers">
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
     <span>
     </span>
    </div>
    <pre><code class="hljs language-cpp"><span class="hljs-comment">/* On assigne chaque LED à une broche de l'arduino */</span>
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> A = <span class="hljs-number">2</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> B = <span class="hljs-number">3</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> C = <span class="hljs-number">4</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> D = <span class="hljs-number">5</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> E = <span class="hljs-number">6</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> F = <span class="hljs-number">7</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> G = <span class="hljs-number">8</span>;
<span class="hljs-comment">// notez que l'on ne gère pas l'affichage du point,</span>
<span class="hljs-comment">// mais vous pouvez le rajouter si cela vous chante</span>

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-comment">// définition des broches en sortie</span>
    pinMode(A, OUTPUT);
    pinMode(B, OUTPUT);
    pinMode(C, OUTPUT);
    pinMode(D, OUTPUT);
    pinMode(E, OUTPUT);
    pinMode(F, OUTPUT);
    pinMode(G, OUTPUT);

    <span class="hljs-comment">// mise à l'état HAUT de ces sorties pour éteindre les LED de l'afficheur</span>
    digitalWrite(A, HIGH);
    digitalWrite(B, HIGH);
    digitalWrite(C, HIGH);
    digitalWrite(D, HIGH);
    digitalWrite(E, HIGH);
    digitalWrite(F, HIGH);
    digitalWrite(G, HIGH);
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-comment">// affichage du chiffre 5, d'après le tableau précédent</span>
    digitalWrite(A, LOW);
    digitalWrite(B, HIGH);
    digitalWrite(C, LOW);
    digitalWrite(D, LOW);
    digitalWrite(E, HIGH);
    digitalWrite(F, LOW);
    digitalWrite(G, LOW);
}
</code></pre>
   </div>
   <figcaption>
    Solution
   </figcaption>
  </figure>
 </div>
</div>
<p>
 Vous le voyez par vous-même, c’est un code hyper simple.
Essayez de le bidouiller pour afficher des messages, par exemple, en utilisant les fonctions introduisant le temps.
Ou bien compléter ce code pour afficher tous les chiffres, en fonction d’une variable définie au départ (ex: var = 1, affiche le chiffre 1 ; etc.).
</p>
<h3 id="techniques-daffichage">
 <a aria-hidden="true" href="#techniques-daffichage">
  <span class="es-autolink-heading">
  </span>
 </a>
 Techniques d’affichage
</h3>
<p>
 Vous vous en doutez peut-être, lorsque l’on veut utiliser plusieurs afficheur il va nous falloir beaucoup de broches.
Imaginons, nous voulons afficher un nombre entre 0 et 99, il nous faudra utiliser deux afficheurs avec
 <span class="inlineMath">
  <span class="katex">
   <span class="katex-mathml">
    <math>
     <semantics>
      <mrow>
       <mn>
        2
       </mn>
       <mo>
        ∗
       </mo>
       <mn>
        7
       </mn>
       <mo>
        =
       </mo>
       <mn>
        1
       </mn>
       <mn>
        4
       </mn>
      </mrow>
      <annotation encoding="application/x-tex">
       2*7 = 14
      </annotation>
     </semantics>
    </math>
   </span>
   <span aria-hidden="true" class="katex-html">
    <span class="strut" style="height:0.64444em;">
    </span>
    <span class="strut bottom" style="height:0.64444em;vertical-align:0em;">
    </span>
    <span class="base textstyle uncramped">
     <span class="mord mathrm">
      2
     </span>
     <span class="mbin">
      ∗
     </span>
     <span class="mord mathrm">
      7
     </span>
     <span class="mrel">
      =
     </span>
     <span class="mord mathrm">
      1
     </span>
     <span class="mord mathrm">
      4
     </span>
    </span>
   </span>
  </span>
 </span>
 broches connectées sur la carte Arduino.
Rappel : une carte Arduino UNO possède… 14 broches entrées/sorties classiques.
Si on ne fais rien d’autre que d’utiliser les afficheurs, cela ne nous gène pas, cependant, il est fort probable que vous serez amener à utiliser d’autres entrées avec votre carte Arduino.
Mais si on ne libère pas de place vous serez embêté.
</p>
<p>
 Nous allons donc voir deux techniques qui, une fois cumulées, vont nous permettre d’utiliser seulement 4 broches pour obtenir le même résultat qu’avec 14 broches !
</p>
<h4 id="les-décodeurs-4-bits---7-segments">
 <a aria-hidden="true" href="#les-décodeurs-4-bits---7-segments">
  <span class="es-autolink-heading">
  </span>
 </a>
 Les décodeurs "4 bits -&gt; 7 segments"
</h4>
<p>
 La première technique que nous allons utiliser met en œuvre un circuit intégré.
Vous vous souvenez quand je vous ai parlé de ces bêtes là ?
Oui, c’est le même type que le microcontrôleur de la carte Arduino.
Cependant, le circuit que nous allons utiliser ne fait pas autant de choses que celui sur votre carte Arduino.
</p>
<h5 id="décodeur-bcd---7-segments">
 <a aria-hidden="true" href="#décodeur-bcd---7-segments">
  <span class="es-autolink-heading">
  </span>
 </a>
 Décodeur
 <abbr title="Binary Coded Decimal ou Binaire Codé Décimal">
  BCD
 </abbr>
 -&gt; 7 segments
</h5>
<p>
 C’est le nom du circuit que nous allons utiliser. Son rôle est simple. Vous vous souvenez des conversions ?
Pour passer du binaire au décimal ?
Et bien c’est le moment de vous en servir, donc si vous ne vous rappelez plus de ça, allez revoir un peu
 <a href="https://zestedesavoir.com/contenus/686/arduino-premiers-pas-en-informatique-embarquee/742_decouverte-de-larduino/3415_quelques-bases-elementaires/#4-10781_les-bases-de-comptage-210-et-16">
  le cours
 </a>
 .
Je disais donc que son rôle est simple.
Et vous le constaterez par vous même, il va s’agir de convertir du binaire codé sur 4 bits vers un "code" utilisé pour afficher les chiffres.
Ce code correspond en quelque sorte au tableau précédemment évoqué.
</p>
<h5 id="principe-du-décodeur">
 <a aria-hidden="true" href="#principe-du-décodeur">
  <span class="es-autolink-heading">
  </span>
 </a>
 Principe du décodeur
</h5>
<p>
 Sur un afficheur 7 segments, on peut représenter aisément les chiffres de 0 à 9.
En informatique, pour représenter ces chiffres, il nous faut au maximum 4 bits.
Comme vous êtes des experts et que vous avez bien lu la partie sur le binaire, vous n’avez pas de mal à le comprendre.
 <span class="inlineMath">
  <span class="katex">
   <span class="katex-mathml">
    <math>
     <semantics>
      <mrow>
       <mo>
        (
       </mo>
       <mn>
        0
       </mn>
       <mn>
        0
       </mn>
       <mn>
        0
       </mn>
       <mn>
        0
       </mn>
       <msub>
        <mo>
         )
        </mo>
        <mn>
         2
        </mn>
       </msub>
      </mrow>
      <annotation encoding="application/x-tex">
       (0000)_2
      </annotation>
     </semantics>
    </math>
   </span>
   <span aria-hidden="true" class="katex-html">
    <span class="strut" style="height:0.75em;">
    </span>
    <span class="strut bottom" style="height:1em;vertical-align:-0.25em;">
    </span>
    <span class="base textstyle uncramped">
     <span class="mopen">
      (
     </span>
     <span class="mord mathrm">
      0
     </span>
     <span class="mord mathrm">
      0
     </span>
     <span class="mord mathrm">
      0
     </span>
     <span class="mord mathrm">
      0
     </span>
     <span class="mclose">
      <span class="mclose">
       )
      </span>
      <span class="msupsub">
       <span class="vlist">
        <span style="top:0.15em;margin-right:0.05em;margin-left:0em;">
         <span class="fontsize-ensurer reset-size5 size5">
          <span style="font-size:0em;">
           ​
          </span>
         </span>
         <span class="reset-textstyle scriptstyle cramped mtight">
          <span class="mord mathrm mtight">
           2
          </span>
         </span>
        </span>
        <span class="baseline-fix">
         <span class="fontsize-ensurer reset-size5 size5">
          <span style="font-size:0em;">
           ​
          </span>
         </span>
         ​
        </span>
       </span>
      </span>
     </span>
    </span>
   </span>
  </span>
 </span>
 fera
 <span class="inlineMath">
  <span class="katex">
   <span class="katex-mathml">
    <math>
     <semantics>
      <mrow>
       <mo>
        (
       </mo>
       <mn>
        0
       </mn>
       <msub>
        <mo>
         )
        </mo>
        <mrow>
         <mn>
          1
         </mn>
         <mn>
          0
         </mn>
        </mrow>
       </msub>
      </mrow>
      <annotation encoding="application/x-tex">
       (0)_{10}
      </annotation>
     </semantics>
    </math>
   </span>
   <span aria-hidden="true" class="katex-html">
    <span class="strut" style="height:0.75em;">
    </span>
    <span class="strut bottom" style="height:1em;vertical-align:-0.25em;">
    </span>
    <span class="base textstyle uncramped">
     <span class="mopen">
      (
     </span>
     <span class="mord mathrm">
      0
     </span>
     <span class="mclose">
      <span class="mclose">
       )
      </span>
      <span class="msupsub">
       <span class="vlist">
        <span style="top:0.15em;margin-right:0.05em;margin-left:0em;">
         <span class="fontsize-ensurer reset-size5 size5">
          <span style="font-size:0em;">
           ​
          </span>
         </span>
         <span class="reset-textstyle scriptstyle cramped mtight">
          <span class="mord scriptstyle cramped mtight">
           <span class="mord mathrm mtight">
            1
           </span>
           <span class="mord mathrm mtight">
            0
           </span>
          </span>
         </span>
        </span>
        <span class="baseline-fix">
         <span class="fontsize-ensurer reset-size5 size5">
          <span style="font-size:0em;">
           ​
          </span>
         </span>
         ​
        </span>
       </span>
      </span>
     </span>
    </span>
   </span>
  </span>
 </span>
 et
 <span class="inlineMath">
  <span class="katex">
   <span class="katex-mathml">
    <math>
     <semantics>
      <mrow>
       <mo>
        (
       </mo>
       <mn>
        1
       </mn>
       <mn>
        1
       </mn>
       <mn>
        1
       </mn>
       <mn>
        1
       </mn>
       <msub>
        <mo>
         )
        </mo>
        <mn>
         2
        </mn>
       </msub>
      </mrow>
      <annotation encoding="application/x-tex">
       (1111)_2
      </annotation>
     </semantics>
    </math>
   </span>
   <span aria-hidden="true" class="katex-html">
    <span class="strut" style="height:0.75em;">
    </span>
    <span class="strut bottom" style="height:1em;vertical-align:-0.25em;">
    </span>
    <span class="base textstyle uncramped">
     <span class="mopen">
      (
     </span>
     <span class="mord mathrm">
      1
     </span>
     <span class="mord mathrm">
      1
     </span>
     <span class="mord mathrm">
      1
     </span>
     <span class="mord mathrm">
      1
     </span>
     <span class="mclose">
      <span class="mclose">
       )
      </span>
      <span class="msupsub">
       <span class="vlist">
        <span style="top:0.15em;margin-right:0.05em;margin-left:0em;">
         <span class="fontsize-ensurer reset-size5 size5">
          <span style="font-size:0em;">
           ​
          </span>
         </span>
         <span class="reset-textstyle scriptstyle cramped mtight">
          <span class="mord mathrm mtight">
           2
          </span>
         </span>
        </span>
        <span class="baseline-fix">
         <span class="fontsize-ensurer reset-size5 size5">
          <span style="font-size:0em;">
           ​
          </span>
         </span>
         ​
        </span>
       </span>
      </span>
     </span>
    </span>
   </span>
  </span>
 </span>
 fera
 <span class="inlineMath">
  <span class="katex">
   <span class="katex-mathml">
    <math>
     <semantics>
      <mrow>
       <mo>
        (
       </mo>
       <mn>
        1
       </mn>
       <mn>
        5
       </mn>
       <msub>
        <mo>
         )
        </mo>
        <mrow>
         <mn>
          1
         </mn>
         <mn>
          0
         </mn>
        </mrow>
       </msub>
      </mrow>
      <annotation encoding="application/x-tex">
       (15)_{10}
      </annotation>
     </semantics>
    </math>
   </span>
   <span aria-hidden="true" class="katex-html">
    <span class="strut" style="height:0.75em;">
    </span>
    <span class="strut bottom" style="height:1em;vertical-align:-0.25em;">
    </span>
    <span class="base textstyle uncramped">
     <span class="mopen">
      (
     </span>
     <span class="mord mathrm">
      1
     </span>
     <span class="mord mathrm">
      5
     </span>
     <span class="mclose">
      <span class="mclose">
       )
      </span>
      <span class="msupsub">
       <span class="vlist">
        <span style="top:0.15em;margin-right:0.05em;margin-left:0em;">
         <span class="fontsize-ensurer reset-size5 size5">
          <span style="font-size:0em;">
           ​
          </span>
         </span>
         <span class="reset-textstyle scriptstyle cramped mtight">
          <span class="mord scriptstyle cramped mtight">
           <span class="mord mathrm mtight">
            1
           </span>
           <span class="mord mathrm mtight">
            0
           </span>
          </span>
         </span>
        </span>
        <span class="baseline-fix">
         <span class="fontsize-ensurer reset-size5 size5">
          <span style="font-size:0em;">
           ​
          </span>
         </span>
         ​
        </span>
       </span>
      </span>
     </span>
    </span>
   </span>
  </span>
 </span>
 ou
 <span class="inlineMath">
  <span class="katex">
   <span class="katex-mathml">
    <math>
     <semantics>
      <mrow>
       <mo>
        (
       </mo>
       <mi>
        F
       </mi>
       <msub>
        <mo>
         )
        </mo>
        <mrow>
         <mn>
          1
         </mn>
         <mn>
          6
         </mn>
        </mrow>
       </msub>
      </mrow>
      <annotation encoding="application/x-tex">
       (F)_{16}
      </annotation>
     </semantics>
    </math>
   </span>
   <span aria-hidden="true" class="katex-html">
    <span class="strut" style="height:0.75em;">
    </span>
    <span class="strut bottom" style="height:1em;vertical-align:-0.25em;">
    </span>
    <span class="base textstyle uncramped">
     <span class="mopen">
      (
     </span>
     <span class="mord mathit" style="margin-right:0.13889em;">
      F
     </span>
     <span class="mclose">
      <span class="mclose">
       )
      </span>
      <span class="msupsub">
       <span class="vlist">
        <span style="top:0.15em;margin-right:0.05em;margin-left:0em;">
         <span class="fontsize-ensurer reset-size5 size5">
          <span style="font-size:0em;">
           ​
          </span>
         </span>
         <span class="reset-textstyle scriptstyle cramped mtight">
          <span class="mord scriptstyle cramped mtight">
           <span class="mord mathrm mtight">
            1
           </span>
           <span class="mord mathrm mtight">
            6
           </span>
          </span>
         </span>
        </span>
        <span class="baseline-fix">
         <span class="fontsize-ensurer reset-size5 size5">
          <span style="font-size:0em;">
           ​
          </span>
         </span>
         ​
        </span>
       </span>
      </span>
     </span>
    </span>
   </span>
  </span>
 </span>
 .
Pour faire 9 par exemple on utilisera les bits 1001.
En partant de se constat, des ingénieurs ont inventé un composant au doux nom de "décodeur" ou "driver" 7 segments.
Il reçoit sur 4 broches les 4 bits de la valeur à afficher, et sur 7 autres broches ils pilotent les segments pour afficher ladite valeur.
Ajouter à cela une broche d’alimentation et une broche de masse on obtient 13 broches !
Et ce n’est pas fini. La plupart des circuits intégrés de type décodeur possède aussi une broche d’activation et une broche pour tester si tous les segments fonctionnent.
</p>
<h5 id="choix-du-décodeur">
 <a aria-hidden="true" href="#choix-du-décodeur">
  <span class="es-autolink-heading">
  </span>
 </a>
 Choix du décodeur
</h5>
<p>
 Nous allons utiliser le composant nommé MC14543B comme exemple (un equivalent utilisable et trouvable facilement est le CD4543BE).
Tout d’abord, ouvrez ce lien dans un nouvel onglet, il vous menera directement vers le pdf du décodeur :
</p>
<div class="text-center">
 <p>
  <a href="http://www.datasheetcatalog.org/datasheet2/4/09lwz6g28frlr15ayl6w0srxwz7y.pdf">
   Datasheet du MC14543B
  </a>
 </p>
</div>
<p>
 Les datasheets se composent souvent de la même manière. On trouve tout d’abord un résumé des fonctions du produit puis un schéma de son boîtier.
Dans notre cas, on voit qu’il est monté sur un
 <abbr title="Dual Inline Package">
  DIP
 </abbr>
 16 (
 <abbr title="Dual Inline Package">
  DIP
 </abbr>
 : Dual Inline Package, en gros "boîtier avec deux lignes de broches").
Si l’on continue, on voit la
 <strong>
  table de vérité
 </strong>
 faisant le lien entre les signaux d’entrées (INPUT) et les sorties (OUTPUT).
On voit ainsi plusieurs choses :
</p>
<ul>
 <li>
  Si l’on met la broche Bl (Blank, n°7) à un, toutes les sorties passent à zéro. En effet, comme son nom l’indique cette broche sert à effacer l’afficheur. Si vous ne voulez pas l’utiliser il faut donc la connecter à la masse pour la désactiver ;
 </li>
 <li>
  Les entrées A, B, C et D (broches 5,3,2 et 4 respectivement) sont actives à l’état HAUT. Les sorties elles sont actives à l’état BAS (pour piloter un afficheur à anode commune)
  <strong>
   OU
  </strong>
  HAUT selon l’état de la broche PH (6). C’est là un gros avantage de ce composant, il peut inverser la logique de la sortie, le rendant alors compatible avec des afficheurs à anode commune (broche PH à l’état 1) ou cathode commune (Ph = 0) ;
 </li>
 <li>
  La broche BI (Blank Input, n°7) sers à inhiber les entrées. On ne s’en servira pas et donc on la mettra à l’état HAUT (+5V) ;
 </li>
 <li>
  LD (n°1) sert à faire une mémoire de l’état des sorties, on ne s’en servira pas ici. Elle signifie "Latch Disable". En la mettant à 1 on désactive donc le "latch" (verrou) et nos entrées sont alors bien prises en considération ;
 </li>
 <li>
  Enfin, les deux broches d’alimentation sont la 8 (GND/VSS, masse) et la 16 (VCC, +5V).
 </li>
</ul>
<div class="custom-block alert alert-warning">
 <div class="custom-block-body">
  <p>
   N’oubliez pas de mettre des résistances de limitations de courant entre chaque segment et la broche de signal du circuit!
  </p>
 </div>
</div>
<h5 id="fonctionnement">
 <a aria-hidden="true" href="#fonctionnement">
  <span class="es-autolink-heading">
  </span>
 </a>
 Fonctionnement
</h5>
<div class="custom-block alert alert-info">
 <div class="custom-block-body">
  <p>
   C’est bien beau tout ça mais comment je lui dis au décodeur d’afficher le chiffre 5 par exemple ?
  </p>
 </div>
</div>
<p>
 Il suffit de regarder le datasheet et sa table de vérité (c’est le tableau avec les entrées et les sorties).
Ce que reçoit le décodeur sur ses entrées (A, B, C et D) défini les états de ses broches de sortie (a,b,c,d,e,f et g).
C’est tout ! Donc, on va donner un code binaire sur 4 bits à notre décodeur et en fonction de ce code, le décodeur affichera le caractère voulu.
En plus le fabricant est sympa, il met à disposition des notes d’applications à la page 6 pour bien brancher le composant :
</p>
<p>
 <figure>
  <img alt="Branchement du MC14543B" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/branchement-du-mc14543b.jpg"/>
  <figcaption>
   Branchement du MC14543B - (source: datasheet)
  </figcaption>
 </figure>
</p>
<p>
 On voit alors qu’il suffit simplement de brancher la résistance entre le CI et les segments et s’assurer que PH à la bonne valeur et c’est tout !
En titre d’exercice afin de vous permettre de mieux comprendre, je vous propose de changer les états des entrées A, B, C et D du décodeur pour observer ce qu’il affiche. Après avoir réaliser votre schéma, regarder s’il correspond avec celui présent dans cette balise secrète. Cela vous évitera peut-être un mauvais branchement, qui sait ?
</p>
<div class="custom-block custom-block-spoiler">
 <div class="custom-block-body">
  <p>
   <img alt="Montage 7 segments - Schéma" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/montage-7-segments-schema.png"/>
  </p>
  <p>
   <img alt="Montage 7 segments - Montage" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/montage-7-segments-montage.png"/>
  </p>
 </div>
</div>
<h4 id="laffichage-par-alternance">
 <a aria-hidden="true" href="#laffichage-par-alternance">
  <span class="es-autolink-heading">
  </span>
 </a>
 L’affichage par alternance
</h4>
<p>
 La seconde technique est utilisée dans le cas où l’on veut faire un affichage avec plusieurs afficheurs.
Elle utilise le phénomène de
 <a href="http://fr.wikipedia.org/wiki/Persistance_rétinienne">
  persistance rétinienne
 </a>
 .
Pour faire simple, c’est grâce à cela que le cinéma vous parait fluide.
On change une image toutes les 40 ms et votre œil n’a pas le temps de le voir, donc les images semble s’enchainer sans transition.
Bref… Ici, la même stratégie sera utilisée. On va allumer un afficheur un certain temps, puis nous allumerons l’autre en éteignant le premier.
Cette action est assez simple à réaliser, mais nécessite l’emploi de deux broche supplémentaires, de quatre autres composants et d’un peu de code.
Nous l’étudierons un petit peu plus tard, lorsque nous saurons géré un afficheur seul.
</p>
<h3 id="utilisation-du-décodeur-bcd">
 <a aria-hidden="true" href="#utilisation-du-décodeur-bcd">
  <span class="es-autolink-heading">
  </span>
 </a>
 Utilisation du décodeur
 <abbr title="Binary Coded Decimal ou Binaire Codé Décimal">
  BCD
 </abbr>
</h3>
<p>
 Nous y sommes, nous allons (enfin) utiliser la carte Arduino pour faire un affichage plus poussé qu’un unique afficheur.
Pour cela, nous allons très simplement utiliser le montage précédent composé du décodeur
 <abbr title="Binary Coded Decimal ou Binaire Codé Décimal">
  BCD
 </abbr>
 , de l’afficheur 7 segments et bien entendu des résistances de limitations de courant pour les LED de l’afficheur.
Je vais vous montrer deux techniques qui peuvent être employées pour faire le programme.
</p>
<h4 id="initialisation">
 <a aria-hidden="true" href="#initialisation">
  <span class="es-autolink-heading">
  </span>
 </a>
 Initialisation
</h4>
<p>
 Vous avez l’habitude maintenant, nous allons commencer par définir les différentes broches d’entrées/sorties.
Pour débuter (et conformément au schéma), nous utiliserons seulement 4 broches, en sorties, correspondantes aux entrées du décodeur 7 segments.
Voici le code pouvant traduire cette explication :
</p>
<figure>
 <div class="hljs-code-div">
  <div class="hljs-line-numbers">
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
  </div>
  <pre><code class="hljs language-cpp"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> bit_A = <span class="hljs-number">2</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> bit_B = <span class="hljs-number">3</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> bit_C = <span class="hljs-number">4</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> bit_D = <span class="hljs-number">5</span>;

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-comment">// on met les broches en sorties</span>
    pinMode(bit_A, OUTPUT);
    pinMode(bit_B, OUTPUT);
    pinMode(bit_C, OUTPUT);
    pinMode(bit_D, OUTPUT);

    <span class="hljs-comment">// on commence par écrire le chiffre 0, donc toutes les sorites à l'état bas</span>
    digitalWrite(bit_A, LOW);
    digitalWrite(bit_B, LOW);
    digitalWrite(bit_C, LOW);
    digitalWrite(bit_D, LOW);
}
</code></pre>
 </div>
 <figcaption>
  Initialisation des broches
 </figcaption>
</figure>
<p>
 Ce code permet juste de déclarer les quatre broches à utiliser, puis les affectes en sorties.
On les met ensuite toutes les quatre à zéro. Maintenant que l’afficheur est prêt, nous allons pouvoir commencer à afficher un chiffre !
</p>
<h4 id="programme-principal">
 <a aria-hidden="true" href="#programme-principal">
  <span class="es-autolink-heading">
  </span>
 </a>
 Programme principal
</h4>
<p>
 Si tout se passe bien, en ayant la boucle vide pour l’instant vous devriez voir un superbe 0 sur votre afficheur.
Nous allons maintenant mettre en place un petit programme pour afficher les nombres de 0 à 9 en les incrémentant (à partir de 0) toutes les secondes. C’est donc un compteur.
Pour cela, on va utiliser une boucle, qui comptera de 0 à 9. Dans cette boucle, on exécutera appellera la fonction
 <code>
  afficher()
 </code>
 qui s’occupera donc de l’affichage (belle démonstration de ce qui est une évidence :P
 <img alt="^^" class="smiley" src="./static/smileys/hihi.png"/>
 ).
</p>
<figure>
 <div class="hljs-code-div">
  <div class="hljs-line-numbers">
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
  </div>
  <pre><code class="hljs language-cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-keyword">char</span> i=<span class="hljs-number">0</span>; <span class="hljs-comment">// variable "compteur"</span>
    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; i++)
    {
        afficher(i); <span class="hljs-comment">// on appel la fonction d'affichage</span>
        delay(<span class="hljs-number">1000</span>); <span class="hljs-comment">// on attend 1 seconde</span>
    }
}
</code></pre>
 </div>
 <figcaption>
  Le compteur
 </figcaption>
</figure>
<h4 id="fonction-daffichage">
 <a aria-hidden="true" href="#fonction-daffichage">
  <span class="es-autolink-heading">
  </span>
 </a>
 Fonction d’affichage
</h4>
<p>
 Nous touchons maintenant au but ! Il ne nous reste plus qu’à réaliser la fonction d’affichage pour pouvoir convertir notre variable en chiffre sur l’afficheur. Pour cela, il existe différentes solutions.
Nous allons en voir ici une qui est assez simple à mettre en œuvre mais qui nécessite de bien être comprise.
Dans cette méthode, on va faire des opérations mathématiques (tout de suite c’est moins drôle
 <img alt=":lol:" class="smiley" src="./static/smileys/rire.gif"/>
 ) successives pour déterminer quels bits mettre à l’état haut. Rappelez-vous, nous avons quatre broches à notre disposition, avec chacune un poids différent (8, 4, 2 et 1). En combinant ces différentes broches ont peu obtenir n’importe quel nombre de 0 à 15. Voici une démarche mathématique envisageable :
</p>
<div class="text-center">
 <p>
  <img alt="Organigramme décodeur 7 segments" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/organigramme-decodeur-7-segments.jpg"/>
 </p>
</div>
<p>
 On peut coder cette méthode de manière assez simple et direct, en suivant cet organigramme :
</p>
<figure>
 <div class="hljs-code-div">
  <div class="hljs-line-numbers">
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
  </div>
  <pre><code class="hljs language-cpp"><span class="hljs-comment">// fonction écrivant sur un seul afficheur</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">afficher</span><span class="hljs-params">(<span class="hljs-keyword">char</span> chiffre)</span>
</span>{
    <span class="hljs-comment">// on met à zéro tout les bits du décodeur</span>
    digitalWrite(bit_A, LOW);
    digitalWrite(bit_B, LOW);
    digitalWrite(bit_C, LOW);
    digitalWrite(bit_D, LOW);

    <span class="hljs-comment">// On allume les bits nécessaires</span>
    <span class="hljs-keyword">if</span>(chiffre &gt;= <span class="hljs-number">8</span>)
    {
        digitalWrite(bit_D, HIGH);
        chiffre = chiffre - <span class="hljs-number">8</span>;
    }
    <span class="hljs-keyword">if</span>(chiffre &gt;= <span class="hljs-number">4</span>)
    {
        digitalWrite(bit_C, HIGH);
        chiffre = chiffre - <span class="hljs-number">4</span>;
    }
    <span class="hljs-keyword">if</span>(chiffre &gt;= <span class="hljs-number">2</span>)
    {
        digitalWrite(bit_B, HIGH);
        chiffre = chiffre - <span class="hljs-number">2</span>;
    }
    <span class="hljs-keyword">if</span>(chiffre &gt;= <span class="hljs-number">1</span>)
    {
        digitalWrite(bit_A, HIGH);
        chiffre = chiffre - <span class="hljs-number">1</span>;
    }
}
</code></pre>
 </div>
 <figcaption>
  Implémentation de l’affichage
 </figcaption>
</figure>
<p>
 Quelques explications s’imposent…
Le code gérant l’affichage réside sur les valeurs binaires des chiffres. Rappelons les valeurs binaires des chiffres :
</p>
<div class="text-center">
 <div class="table-wrapper">
  <table class=" table table-bordered table-striped">
   <thead>
    <tr>
     <th colspan="1" rowspan="1">
      <p>
       Chiffre
      </p>
     </th>
     <th colspan="1" rowspan="1">
      <p>
       DCBA
      </p>
     </th>
    </tr>
   </thead>
   <tbody>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       0
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <p>
       <span class="inlineMath">
        <span class="katex">
         <span class="katex-mathml">
          <math>
           <semantics>
            <mrow>
             <mo>
              (
             </mo>
             <mn>
              0
             </mn>
             <mn>
              0
             </mn>
             <mn>
              0
             </mn>
             <mn>
              0
             </mn>
             <msub>
              <mo>
               )
              </mo>
              <mn>
               2
              </mn>
             </msub>
            </mrow>
            <annotation encoding="application/x-tex">
             (0000)_2
            </annotation>
           </semantics>
          </math>
         </span>
         <span aria-hidden="true" class="katex-html">
          <span class="strut" style="height:0.75em;">
          </span>
          <span class="strut bottom" style="height:1em;vertical-align:-0.25em;">
          </span>
          <span class="base textstyle uncramped">
           <span class="mopen">
            (
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mclose">
            <span class="mclose">
             )
            </span>
            <span class="msupsub">
             <span class="vlist">
              <span style="top:0.15em;margin-right:0.05em;margin-left:0em;">
               <span class="fontsize-ensurer reset-size5 size5">
                <span style="font-size:0em;">
                 ​
                </span>
               </span>
               <span class="reset-textstyle scriptstyle cramped mtight">
                <span class="mord mathrm mtight">
                 2
                </span>
               </span>
              </span>
              <span class="baseline-fix">
               <span class="fontsize-ensurer reset-size5 size5">
                <span style="font-size:0em;">
                 ​
                </span>
               </span>
               ​
              </span>
             </span>
            </span>
           </span>
          </span>
         </span>
        </span>
       </span>
      </p>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       1
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <p>
       <span class="inlineMath">
        <span class="katex">
         <span class="katex-mathml">
          <math>
           <semantics>
            <mrow>
             <mo>
              (
             </mo>
             <mn>
              0
             </mn>
             <mn>
              0
             </mn>
             <mn>
              0
             </mn>
             <mn>
              1
             </mn>
             <msub>
              <mo>
               )
              </mo>
              <mn>
               2
              </mn>
             </msub>
            </mrow>
            <annotation encoding="application/x-tex">
             (0001)_2
            </annotation>
           </semantics>
          </math>
         </span>
         <span aria-hidden="true" class="katex-html">
          <span class="strut" style="height:0.75em;">
          </span>
          <span class="strut bottom" style="height:1em;vertical-align:-0.25em;">
          </span>
          <span class="base textstyle uncramped">
           <span class="mopen">
            (
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mord mathrm">
            1
           </span>
           <span class="mclose">
            <span class="mclose">
             )
            </span>
            <span class="msupsub">
             <span class="vlist">
              <span style="top:0.15em;margin-right:0.05em;margin-left:0em;">
               <span class="fontsize-ensurer reset-size5 size5">
                <span style="font-size:0em;">
                 ​
                </span>
               </span>
               <span class="reset-textstyle scriptstyle cramped mtight">
                <span class="mord mathrm mtight">
                 2
                </span>
               </span>
              </span>
              <span class="baseline-fix">
               <span class="fontsize-ensurer reset-size5 size5">
                <span style="font-size:0em;">
                 ​
                </span>
               </span>
               ​
              </span>
             </span>
            </span>
           </span>
          </span>
         </span>
        </span>
       </span>
      </p>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       2
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <p>
       <span class="inlineMath">
        <span class="katex">
         <span class="katex-mathml">
          <math>
           <semantics>
            <mrow>
             <mo>
              (
             </mo>
             <mn>
              0
             </mn>
             <mn>
              0
             </mn>
             <mn>
              1
             </mn>
             <mn>
              0
             </mn>
             <msub>
              <mo>
               )
              </mo>
              <mn>
               2
              </mn>
             </msub>
            </mrow>
            <annotation encoding="application/x-tex">
             (0010)_2
            </annotation>
           </semantics>
          </math>
         </span>
         <span aria-hidden="true" class="katex-html">
          <span class="strut" style="height:0.75em;">
          </span>
          <span class="strut bottom" style="height:1em;vertical-align:-0.25em;">
          </span>
          <span class="base textstyle uncramped">
           <span class="mopen">
            (
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mord mathrm">
            1
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mclose">
            <span class="mclose">
             )
            </span>
            <span class="msupsub">
             <span class="vlist">
              <span style="top:0.15em;margin-right:0.05em;margin-left:0em;">
               <span class="fontsize-ensurer reset-size5 size5">
                <span style="font-size:0em;">
                 ​
                </span>
               </span>
               <span class="reset-textstyle scriptstyle cramped mtight">
                <span class="mord mathrm mtight">
                 2
                </span>
               </span>
              </span>
              <span class="baseline-fix">
               <span class="fontsize-ensurer reset-size5 size5">
                <span style="font-size:0em;">
                 ​
                </span>
               </span>
               ​
              </span>
             </span>
            </span>
           </span>
          </span>
         </span>
        </span>
       </span>
      </p>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       3
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <p>
       <span class="inlineMath">
        <span class="katex">
         <span class="katex-mathml">
          <math>
           <semantics>
            <mrow>
             <mo>
              (
             </mo>
             <mn>
              0
             </mn>
             <mn>
              0
             </mn>
             <mn>
              1
             </mn>
             <mn>
              1
             </mn>
             <msub>
              <mo>
               )
              </mo>
              <mn>
               2
              </mn>
             </msub>
            </mrow>
            <annotation encoding="application/x-tex">
             (0011)_2
            </annotation>
           </semantics>
          </math>
         </span>
         <span aria-hidden="true" class="katex-html">
          <span class="strut" style="height:0.75em;">
          </span>
          <span class="strut bottom" style="height:1em;vertical-align:-0.25em;">
          </span>
          <span class="base textstyle uncramped">
           <span class="mopen">
            (
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mord mathrm">
            1
           </span>
           <span class="mord mathrm">
            1
           </span>
           <span class="mclose">
            <span class="mclose">
             )
            </span>
            <span class="msupsub">
             <span class="vlist">
              <span style="top:0.15em;margin-right:0.05em;margin-left:0em;">
               <span class="fontsize-ensurer reset-size5 size5">
                <span style="font-size:0em;">
                 ​
                </span>
               </span>
               <span class="reset-textstyle scriptstyle cramped mtight">
                <span class="mord mathrm mtight">
                 2
                </span>
               </span>
              </span>
              <span class="baseline-fix">
               <span class="fontsize-ensurer reset-size5 size5">
                <span style="font-size:0em;">
                 ​
                </span>
               </span>
               ​
              </span>
             </span>
            </span>
           </span>
          </span>
         </span>
        </span>
       </span>
      </p>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       4
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <p>
       <span class="inlineMath">
        <span class="katex">
         <span class="katex-mathml">
          <math>
           <semantics>
            <mrow>
             <mo>
              (
             </mo>
             <mn>
              0
             </mn>
             <mn>
              1
             </mn>
             <mn>
              0
             </mn>
             <mn>
              0
             </mn>
             <msub>
              <mo>
               )
              </mo>
              <mn>
               2
              </mn>
             </msub>
            </mrow>
            <annotation encoding="application/x-tex">
             (0100)_2
            </annotation>
           </semantics>
          </math>
         </span>
         <span aria-hidden="true" class="katex-html">
          <span class="strut" style="height:0.75em;">
          </span>
          <span class="strut bottom" style="height:1em;vertical-align:-0.25em;">
          </span>
          <span class="base textstyle uncramped">
           <span class="mopen">
            (
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mord mathrm">
            1
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mclose">
            <span class="mclose">
             )
            </span>
            <span class="msupsub">
             <span class="vlist">
              <span style="top:0.15em;margin-right:0.05em;margin-left:0em;">
               <span class="fontsize-ensurer reset-size5 size5">
                <span style="font-size:0em;">
                 ​
                </span>
               </span>
               <span class="reset-textstyle scriptstyle cramped mtight">
                <span class="mord mathrm mtight">
                 2
                </span>
               </span>
              </span>
              <span class="baseline-fix">
               <span class="fontsize-ensurer reset-size5 size5">
                <span style="font-size:0em;">
                 ​
                </span>
               </span>
               ​
              </span>
             </span>
            </span>
           </span>
          </span>
         </span>
        </span>
       </span>
      </p>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       5
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <p>
       <span class="inlineMath">
        <span class="katex">
         <span class="katex-mathml">
          <math>
           <semantics>
            <mrow>
             <mo>
              (
             </mo>
             <mn>
              0
             </mn>
             <mn>
              1
             </mn>
             <mn>
              0
             </mn>
             <mn>
              1
             </mn>
             <msub>
              <mo>
               )
              </mo>
              <mn>
               2
              </mn>
             </msub>
            </mrow>
            <annotation encoding="application/x-tex">
             (0101)_2
            </annotation>
           </semantics>
          </math>
         </span>
         <span aria-hidden="true" class="katex-html">
          <span class="strut" style="height:0.75em;">
          </span>
          <span class="strut bottom" style="height:1em;vertical-align:-0.25em;">
          </span>
          <span class="base textstyle uncramped">
           <span class="mopen">
            (
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mord mathrm">
            1
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mord mathrm">
            1
           </span>
           <span class="mclose">
            <span class="mclose">
             )
            </span>
            <span class="msupsub">
             <span class="vlist">
              <span style="top:0.15em;margin-right:0.05em;margin-left:0em;">
               <span class="fontsize-ensurer reset-size5 size5">
                <span style="font-size:0em;">
                 ​
                </span>
               </span>
               <span class="reset-textstyle scriptstyle cramped mtight">
                <span class="mord mathrm mtight">
                 2
                </span>
               </span>
              </span>
              <span class="baseline-fix">
               <span class="fontsize-ensurer reset-size5 size5">
                <span style="font-size:0em;">
                 ​
                </span>
               </span>
               ​
              </span>
             </span>
            </span>
           </span>
          </span>
         </span>
        </span>
       </span>
      </p>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       6
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <p>
       <span class="inlineMath">
        <span class="katex">
         <span class="katex-mathml">
          <math>
           <semantics>
            <mrow>
             <mo>
              (
             </mo>
             <mn>
              0
             </mn>
             <mn>
              1
             </mn>
             <mn>
              1
             </mn>
             <mn>
              0
             </mn>
             <msub>
              <mo>
               )
              </mo>
              <mn>
               2
              </mn>
             </msub>
            </mrow>
            <annotation encoding="application/x-tex">
             (0110)_2
            </annotation>
           </semantics>
          </math>
         </span>
         <span aria-hidden="true" class="katex-html">
          <span class="strut" style="height:0.75em;">
          </span>
          <span class="strut bottom" style="height:1em;vertical-align:-0.25em;">
          </span>
          <span class="base textstyle uncramped">
           <span class="mopen">
            (
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mord mathrm">
            1
           </span>
           <span class="mord mathrm">
            1
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mclose">
            <span class="mclose">
             )
            </span>
            <span class="msupsub">
             <span class="vlist">
              <span style="top:0.15em;margin-right:0.05em;margin-left:0em;">
               <span class="fontsize-ensurer reset-size5 size5">
                <span style="font-size:0em;">
                 ​
                </span>
               </span>
               <span class="reset-textstyle scriptstyle cramped mtight">
                <span class="mord mathrm mtight">
                 2
                </span>
               </span>
              </span>
              <span class="baseline-fix">
               <span class="fontsize-ensurer reset-size5 size5">
                <span style="font-size:0em;">
                 ​
                </span>
               </span>
               ​
              </span>
             </span>
            </span>
           </span>
          </span>
         </span>
        </span>
       </span>
      </p>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       7
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <p>
       <span class="inlineMath">
        <span class="katex">
         <span class="katex-mathml">
          <math>
           <semantics>
            <mrow>
             <mo>
              (
             </mo>
             <mn>
              0
             </mn>
             <mn>
              1
             </mn>
             <mn>
              1
             </mn>
             <mn>
              1
             </mn>
             <msub>
              <mo>
               )
              </mo>
              <mn>
               2
              </mn>
             </msub>
            </mrow>
            <annotation encoding="application/x-tex">
             (0111)_2
            </annotation>
           </semantics>
          </math>
         </span>
         <span aria-hidden="true" class="katex-html">
          <span class="strut" style="height:0.75em;">
          </span>
          <span class="strut bottom" style="height:1em;vertical-align:-0.25em;">
          </span>
          <span class="base textstyle uncramped">
           <span class="mopen">
            (
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mord mathrm">
            1
           </span>
           <span class="mord mathrm">
            1
           </span>
           <span class="mord mathrm">
            1
           </span>
           <span class="mclose">
            <span class="mclose">
             )
            </span>
            <span class="msupsub">
             <span class="vlist">
              <span style="top:0.15em;margin-right:0.05em;margin-left:0em;">
               <span class="fontsize-ensurer reset-size5 size5">
                <span style="font-size:0em;">
                 ​
                </span>
               </span>
               <span class="reset-textstyle scriptstyle cramped mtight">
                <span class="mord mathrm mtight">
                 2
                </span>
               </span>
              </span>
              <span class="baseline-fix">
               <span class="fontsize-ensurer reset-size5 size5">
                <span style="font-size:0em;">
                 ​
                </span>
               </span>
               ​
              </span>
             </span>
            </span>
           </span>
          </span>
         </span>
        </span>
       </span>
      </p>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       8
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <p>
       <span class="inlineMath">
        <span class="katex">
         <span class="katex-mathml">
          <math>
           <semantics>
            <mrow>
             <mo>
              (
             </mo>
             <mn>
              1
             </mn>
             <mn>
              0
             </mn>
             <mn>
              0
             </mn>
             <mn>
              0
             </mn>
             <msub>
              <mo>
               )
              </mo>
              <mn>
               2
              </mn>
             </msub>
            </mrow>
            <annotation encoding="application/x-tex">
             (1000)_2
            </annotation>
           </semantics>
          </math>
         </span>
         <span aria-hidden="true" class="katex-html">
          <span class="strut" style="height:0.75em;">
          </span>
          <span class="strut bottom" style="height:1em;vertical-align:-0.25em;">
          </span>
          <span class="base textstyle uncramped">
           <span class="mopen">
            (
           </span>
           <span class="mord mathrm">
            1
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mclose">
            <span class="mclose">
             )
            </span>
            <span class="msupsub">
             <span class="vlist">
              <span style="top:0.15em;margin-right:0.05em;margin-left:0em;">
               <span class="fontsize-ensurer reset-size5 size5">
                <span style="font-size:0em;">
                 ​
                </span>
               </span>
               <span class="reset-textstyle scriptstyle cramped mtight">
                <span class="mord mathrm mtight">
                 2
                </span>
               </span>
              </span>
              <span class="baseline-fix">
               <span class="fontsize-ensurer reset-size5 size5">
                <span style="font-size:0em;">
                 ​
                </span>
               </span>
               ​
              </span>
             </span>
            </span>
           </span>
          </span>
         </span>
        </span>
       </span>
      </p>
     </td>
    </tr>
    <tr>
     <td colspan="1" rowspan="1">
      <p>
       9
      </p>
     </td>
     <td colspan="1" rowspan="1">
      <p>
       <span class="inlineMath">
        <span class="katex">
         <span class="katex-mathml">
          <math>
           <semantics>
            <mrow>
             <mo>
              (
             </mo>
             <mn>
              1
             </mn>
             <mn>
              0
             </mn>
             <mn>
              0
             </mn>
             <mn>
              1
             </mn>
             <msub>
              <mo>
               )
              </mo>
              <mn>
               2
              </mn>
             </msub>
            </mrow>
            <annotation encoding="application/x-tex">
             (1001)_2
            </annotation>
           </semantics>
          </math>
         </span>
         <span aria-hidden="true" class="katex-html">
          <span class="strut" style="height:0.75em;">
          </span>
          <span class="strut bottom" style="height:1em;vertical-align:-0.25em;">
          </span>
          <span class="base textstyle uncramped">
           <span class="mopen">
            (
           </span>
           <span class="mord mathrm">
            1
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mord mathrm">
            0
           </span>
           <span class="mord mathrm">
            1
           </span>
           <span class="mclose">
            <span class="mclose">
             )
            </span>
            <span class="msupsub">
             <span class="vlist">
              <span style="top:0.15em;margin-right:0.05em;margin-left:0em;">
               <span class="fontsize-ensurer reset-size5 size5">
                <span style="font-size:0em;">
                 ​
                </span>
               </span>
               <span class="reset-textstyle scriptstyle cramped mtight">
                <span class="mord mathrm mtight">
                 2
                </span>
               </span>
              </span>
              <span class="baseline-fix">
               <span class="fontsize-ensurer reset-size5 size5">
                <span style="font-size:0em;">
                 ​
                </span>
               </span>
               ​
              </span>
             </span>
            </span>
           </span>
          </span>
         </span>
        </span>
       </span>
      </p>
     </td>
    </tr>
   </tbody>
  </table>
 </div>
 <p>
  Table: La représentation binaires des chiffres
 </p>
</div>
<p>
 D’après ce tableau, si on veut le chiffre 8, on doit allumer le segment D, car 8 s’écrit
 <span class="inlineMath">
  <span class="katex">
   <span class="katex-mathml">
    <math>
     <semantics>
      <mrow>
       <mo>
        (
       </mo>
       <mn>
        1
       </mn>
       <mn>
        0
       </mn>
       <mn>
        0
       </mn>
       <mn>
        0
       </mn>
       <msub>
        <mo>
         )
        </mo>
        <mn>
         2
        </mn>
       </msub>
      </mrow>
      <annotation encoding="application/x-tex">
       (1000)_2
      </annotation>
     </semantics>
    </math>
   </span>
   <span aria-hidden="true" class="katex-html">
    <span class="strut" style="height:0.75em;">
    </span>
    <span class="strut bottom" style="height:1em;vertical-align:-0.25em;">
    </span>
    <span class="base textstyle uncramped">
     <span class="mopen">
      (
     </span>
     <span class="mord mathrm">
      1
     </span>
     <span class="mord mathrm">
      0
     </span>
     <span class="mord mathrm">
      0
     </span>
     <span class="mord mathrm">
      0
     </span>
     <span class="mclose">
      <span class="mclose">
       )
      </span>
      <span class="msupsub">
       <span class="vlist">
        <span style="top:0.15em;margin-right:0.05em;margin-left:0em;">
         <span class="fontsize-ensurer reset-size5 size5">
          <span style="font-size:0em;">
           ​
          </span>
         </span>
         <span class="reset-textstyle scriptstyle cramped mtight">
          <span class="mord mathrm mtight">
           2
          </span>
         </span>
        </span>
        <span class="baseline-fix">
         <span class="fontsize-ensurer reset-size5 size5">
          <span style="font-size:0em;">
           ​
          </span>
         </span>
         ​
        </span>
       </span>
      </span>
     </span>
    </span>
   </span>
  </span>
 </span>
 ayant pour segment respectif DCBA.
Soit D=1, C=0, B=0 et A=0.
En suivant cette logique, on arrive à déterminer les entrées du décodeur qui sont à mettre à l’état HAUT ou BAS.
D’une manière plus lourde, on aurait pu écrire un code ressemblant à ça :
</p>
<figure>
 <div class="hljs-code-div">
  <div class="hljs-line-numbers">
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
  </div>
  <pre><code class="hljs language-cpp"><span class="hljs-comment">// fonction écrivant sur un seul afficheur</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">afficher</span><span class="hljs-params">(<span class="hljs-keyword">char</span> chiffre)</span>
</span>{
    <span class="hljs-keyword">switch</span>(chiffre)
    {
    <span class="hljs-keyword">case</span> <span class="hljs-number">0</span> :
        digitalWrite(bit_A, LOW);
        digitalWrite(bit_B, LOW);
        digitalWrite(bit_C, LOW);
        digitalWrite(bit_D, LOW);
        <span class="hljs-keyword">break</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-number">1</span> :
        digitalWrite(bit_A, HIGH);
        digitalWrite(bit_B, LOW);
        digitalWrite(bit_C, LOW);
        digitalWrite(bit_D, LOW);
        <span class="hljs-keyword">break</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-number">2</span> :
        digitalWrite(bit_A, LOW);
        digitalWrite(bit_B, HIGH);
        digitalWrite(bit_C, LOW);
        digitalWrite(bit_D, LOW);
        <span class="hljs-keyword">break</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-number">3</span> :
        digitalWrite(bit_A, HIGH);
        digitalWrite(bit_B, HIGH);
        digitalWrite(bit_C, LOW);
        digitalWrite(bit_D, LOW);
        <span class="hljs-keyword">break</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-number">4</span> :
        digitalWrite(bit_A, LOW);
        digitalWrite(bit_B, LOW);
        digitalWrite(bit_C, HIGH);
        digitalWrite(bit_D, LOW);
        <span class="hljs-keyword">break</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-number">5</span> :
        digitalWrite(bit_A, HIGH);
        digitalWrite(bit_B, LOW);
        digitalWrite(bit_C, HIGH);
        digitalWrite(bit_D, LOW);
        <span class="hljs-keyword">break</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-number">6</span> :
        digitalWrite(bit_A, LOW);
        digitalWrite(bit_B, HIGH);
        digitalWrite(bit_C, HIGH);
        digitalWrite(bit_D, LOW);
        <span class="hljs-keyword">break</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-number">7</span> :
        digitalWrite(bit_A, HIGH);
        digitalWrite(bit_B, HIGH);
        digitalWrite(bit_C, HIGH);
        digitalWrite(bit_D, LOW);
        <span class="hljs-keyword">break</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-number">8</span> :
        digitalWrite(bit_A, LOW);
        digitalWrite(bit_B, LOW);
        digitalWrite(bit_C, LOW);
        digitalWrite(bit_D, HIGH);
        <span class="hljs-keyword">break</span>;
    <span class="hljs-keyword">case</span> <span class="hljs-number">9</span> :
        digitalWrite(bit_A, HIGH);
        digitalWrite(bit_B, LOW);
        digitalWrite(bit_C, LOW);
        digitalWrite(bit_D, HIGH);
        <span class="hljs-keyword">break</span>;
    }
}
</code></pre>
 </div>
 <figcaption>
  L’affichage DCBA version longue
 </figcaption>
</figure>
<p>
 Mais, c’est bien trop lourd à écrire. Enfin c’est vous qui voyez.
 <img alt=";)" class="smiley" src="./static/smileys/clin.png"/>
</p>
<h3 id="utiliser-plusieurs-afficheurs">
 <a aria-hidden="true" href="#utiliser-plusieurs-afficheurs">
  <span class="es-autolink-heading">
  </span>
 </a>
 Utiliser plusieurs afficheurs
</h3>
<p>
 Maintenant que nous avons affiché un chiffre sur un seul afficheur, nous allons pouvoir apprendre à en utiliser plusieurs (avec un minimum de composants en plus !). Comme expliqué précédemment, la méthode employée ici va reposer sur le principe de la persistance rétinienne, qui donnera
 <em>
  l’impression
 </em>
 que les deux afficheurs fonctionnent en
 <em>
  même temps
 </em>
 .
</p>
<h4 id="problématique">
 <a aria-hidden="true" href="#problématique">
  <span class="es-autolink-heading">
  </span>
 </a>
 Problématique
</h4>
<p>
 Nous souhaiterions utiliser deux afficheurs, mais nous ne disposons que de seulement 6 broches sur notre Arduino, le reste des broches étant utilisé pour une autre application.
Pour réduire le nombre de broches, on peut d’ores et déjà utilisé un décodeur
 <abbr title="Binary Coded Decimal ou Binaire Codé Décimal">
  BCD
 </abbr>
 , ce qui nous ferait 4 broches par afficheurs, soit 8 broches au total. Bon, ce n’est toujours pas ce que l’on veut.
Et si on connectait les deux afficheurs ensemble, en parallèle, sur les sorties du décodeur ?
Oui mais dans ce cas, on ne pourrait pas afficher des chiffres différents sur chaque afficheur.
Tout à l’heure, je vous ai parlé de
 <em>
  commutation
 </em>
 . Oui, la seule solution qui soit envisageable est d’allumer un afficheur et d’éteindre l’autre tout en les connectant ensemble sur le même décodeur.
Ainsi un afficheur s’allume, il affiche le chiffre voulu, puis il s’éteint pour que l’autre puisse s’allumer à son tour.
Cette opération est en fait un clignotement de chaque afficheur par alternance.
</p>
<h4 id="un-peu-délectronique">
 <a aria-hidden="true" href="#un-peu-délectronique">
  <span class="es-autolink-heading">
  </span>
 </a>
 Un peu d’électronique…
</h4>
<p>
 Pour faire commuter nos deux afficheurs, vous allez avoir besoin d’un nouveau composant, j’ai nommé : le
 <strong>
  transistor
 </strong>
 !
</p>
<div class="custom-block alert alert-info">
 <div class="custom-block-body">
  <p>
   Transistor ? J’ai entendu dire qu’il y en avait plusieurs milliards dans nos ordinateurs ?
  </p>
 </div>
</div>
<p>
 Et c’est tout à fait vrai.
Des transistors, il en existe de différents types et pour différentes applications :
amplification de courant/tension, commutation, etc. répartis dans plusieurs familles.
Bon je ne vais pas faire trop de détails, si vous voulez en savoir plus, allez lire la première partie de
 <strong>
  ce chapitre
 </strong>
 <sub>
  (
  <em>
   lien à rajouter, en attente de la validation du chapitre en question
  </em>
  )
 </sub>
 .
</p>
<h5 id="le-transistor-bipolaire-présentation">
 <a aria-hidden="true" href="#le-transistor-bipolaire-présentation">
  <span class="es-autolink-heading">
  </span>
 </a>
 Le transistor bipolaire : présentation
</h5>
<p>
 Je le disais, je ne vais pas faire de détails. On va voir comment fonctionne un transistor bipolaire selon les besoins de notre application, à savoir, faire commuter les afficheurs.
Un transistor, cela ressemble à ça :
</p>
<p>
 <figure>
  <img alt="Photo d'un transistor" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/photo-dun-transistor.jpg"/>
  <figcaption>
   Photo d’un transistor - (CC-BY-SA,
   <a href="http://commons.wikimedia.org/wiki/File:BC548.jpg">
    Marvelshine
   </a>
   )
  </figcaption>
 </figure>
</p>
<p>
 Pour notre application, nous allons utiliser des
 <strong>
  transistors bipolaires
 </strong>
 .
Je vais vous expliquer comment cela fonctionne.
Déjà, vous pouvez observer qu’un transistor possède trois pattes.
Cela n’est pas de la moindre importance, au contraire il s’agit là d’une chose essentielle !
En fait, le transistor bipolaire à une
 <em>
  broche d’entrée
 </em>
 (
 <strong>
  collecteur
 </strong>
 ), une
 <em>
  broche de sortie
 </em>
 (
 <strong>
  émetteur
 </strong>
 ) et une
 <em>
  broche de commande
 </em>
 (
 <strong>
  base
 </strong>
 ).
Son symbole est le suivant :
</p>
<p>
 <img alt="Symbole du transistor bipôlaire" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/symbole-du-transistor-bipolaire.png"/>
</p>
<div class="custom-block alert alert-primary">
 <div class="custom-block-body">
  <p>
   Ce symbole est celui d’un transistor bipolaire de
   <strong>
    type NPN
   </strong>
   .
  </p>
 </div>
</div>
<p>
 Il en existe qui sont de
 <strong>
  type PNP
 </strong>
 , mais ils sont beaucoup moins utilisés que les NPN.
Quoi qu’il en soit, nous n’utiliserons que des transistors NPN dans ce chapitre.
</p>
<h5 id="fonctionnement-en-commutation-du-transistor-bipolaire">
 <a aria-hidden="true" href="#fonctionnement-en-commutation-du-transistor-bipolaire">
  <span class="es-autolink-heading">
  </span>
 </a>
 Fonctionnement en commutation du transistor bipolaire
</h5>
<p>
 Pour faire simple,
 <strong>
  le transistor bipolaire NPN
 </strong>
 (c’est la dernière fois que je précise ce point) est un
 <strong>
  interrupteur commandé en courant
 </strong>
 .
</p>
<div class="custom-block alert alert-warning">
 <div class="custom-block-body">
  <p>
   Ceci est une présentation très vulgarisée et simplifiée sur le transistor pour l’utilisation que nous en ferons ici.
Les usages et possibilités des transistors sont très nombreux et ils mériteraient un grand livre à eux seuls !
Si vous voulez plus d’informations, rendez-vous sur le cours sur l’électronique ou approfondissez en cherchant des tutoriels sur le web.
   <img alt=";)" class="smiley" src="./static/smileys/clin.png"/>
  </p>
 </div>
</div>
<p>
 C’est tout ce qu’il faut savoir, pour ce qui est du fonctionnement.
Après, on va voir ensemble comment l’utiliser et sans le faire griller !
 <img alt="^^" class="smiley" src="./static/smileys/hihi.png"/>
</p>
<h5 id="utilisation-générale">
 <a aria-hidden="true" href="#utilisation-générale">
  <span class="es-autolink-heading">
  </span>
 </a>
 Utilisation générale
</h5>
<p>
 On peut utiliser notre transistor de deux manières différentes (pour notre application toujours, mais on peut bien évidemment utiliser le transistor avec beaucoup plus de flexibilités).
A commencer par le câblage :
</p>
<p>
 <img alt="Câblage du transistor en commutation" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/cablage-du-transistor-en-commutation.jpg"/>
</p>
<p>
 Dans le cas présent, le collecteur (qui est l’entrée du transistor) se trouve être après l’ampoule, elle-même connectée à l’alimentation.
L’émetteur (broche où il y a la flèche) est relié à la masse du montage.
Cette disposition est "universelle", on ne peut pas inverser le sens de ces broches et mettre le collecteur à la place de l’émetteur et vice versa.
Sans quoi, le montage ne fonctionnerait pas. Pour le moment, l’ampoule est éteinte car le transistor ne conduit pas.
On dit qu’il est
 <strong>
  bloqué
 </strong>
 et empêche donc le courant
 <span class="inlineMath">
  <span class="katex">
   <span class="katex-mathml">
    <math>
     <semantics>
      <mrow>
       <msub>
        <mi>
         I
        </mi>
        <mi>
         C
        </mi>
       </msub>
      </mrow>
      <annotation encoding="application/x-tex">
       I_C
      </annotation>
     </semantics>
    </math>
   </span>
   <span aria-hidden="true" class="katex-html">
    <span class="strut" style="height:0.68333em;">
    </span>
    <span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;">
    </span>
    <span class="base textstyle uncramped">
     <span class="mord">
      <span class="mord mathit" style="margin-right:0.07847em;">
       I
      </span>
      <span class="msupsub">
       <span class="vlist">
        <span style="top:0.15em;margin-right:0.05em;margin-left:-0.07847em;">
         <span class="fontsize-ensurer reset-size5 size5">
          <span style="font-size:0em;">
           ​
          </span>
         </span>
         <span class="reset-textstyle scriptstyle cramped mtight">
          <span class="mord mathit mtight" style="margin-right:0.07153em;">
           C
          </span>
         </span>
        </span>
        <span class="baseline-fix">
         <span class="fontsize-ensurer reset-size5 size5">
          <span style="font-size:0em;">
           ​
          </span>
         </span>
         ​
        </span>
       </span>
      </span>
     </span>
    </span>
   </span>
  </span>
 </span>
 de circuler à travers l’ampoule.
Soit
 <span class="inlineMath">
  <span class="katex">
   <span class="katex-mathml">
    <math>
     <semantics>
      <mrow>
       <msub>
        <mi>
         I
        </mi>
        <mi>
         C
        </mi>
       </msub>
       <mo>
        =
       </mo>
       <mn>
        0
       </mn>
      </mrow>
      <annotation encoding="application/x-tex">
       I_C = 0
      </annotation>
     </semantics>
    </math>
   </span>
   <span aria-hidden="true" class="katex-html">
    <span class="strut" style="height:0.68333em;">
    </span>
    <span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;">
    </span>
    <span class="base textstyle uncramped">
     <span class="mord">
      <span class="mord mathit" style="margin-right:0.07847em;">
       I
      </span>
      <span class="msupsub">
       <span class="vlist">
        <span style="top:0.15em;margin-right:0.05em;margin-left:-0.07847em;">
         <span class="fontsize-ensurer reset-size5 size5">
          <span style="font-size:0em;">
           ​
          </span>
         </span>
         <span class="reset-textstyle scriptstyle cramped mtight">
          <span class="mord mathit mtight" style="margin-right:0.07153em;">
           C
          </span>
         </span>
        </span>
        <span class="baseline-fix">
         <span class="fontsize-ensurer reset-size5 size5">
          <span style="font-size:0em;">
           ​
          </span>
         </span>
         ​
        </span>
       </span>
      </span>
     </span>
     <span class="mrel">
      =
     </span>
     <span class="mord mathrm">
      0
     </span>
    </span>
   </span>
  </span>
 </span>
 car
 <span class="inlineMath">
  <span class="katex">
   <span class="katex-mathml">
    <math>
     <semantics>
      <mrow>
       <msub>
        <mi>
         I
        </mi>
        <mi>
         B
        </mi>
       </msub>
       <mo>
        =
       </mo>
       <mn>
        0
       </mn>
      </mrow>
      <annotation encoding="application/x-tex">
       I_B = 0
      </annotation>
     </semantics>
    </math>
   </span>
   <span aria-hidden="true" class="katex-html">
    <span class="strut" style="height:0.68333em;">
    </span>
    <span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;">
    </span>
    <span class="base textstyle uncramped">
     <span class="mord">
      <span class="mord mathit" style="margin-right:0.07847em;">
       I
      </span>
      <span class="msupsub">
       <span class="vlist">
        <span style="top:0.15em;margin-right:0.05em;margin-left:-0.07847em;">
         <span class="fontsize-ensurer reset-size5 size5">
          <span style="font-size:0em;">
           ​
          </span>
         </span>
         <span class="reset-textstyle scriptstyle cramped mtight">
          <span class="mord mathit mtight" style="margin-right:0.05017em;">
           B
          </span>
         </span>
        </span>
        <span class="baseline-fix">
         <span class="fontsize-ensurer reset-size5 size5">
          <span style="font-size:0em;">
           ​
          </span>
         </span>
         ​
        </span>
       </span>
      </span>
     </span>
     <span class="mrel">
      =
     </span>
     <span class="mord mathrm">
      0
     </span>
    </span>
   </span>
  </span>
 </span>
 . A présent, appuyons sur l’interrupteur :
</p>
<p>
 <img alt="Allumage de la lampe" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/allumage-de-la-lampe.jpg"/>
</p>
<p>
 Que se passe-t-il ? Eh bien la base du transistor, qui était jusqu’à présent "en l’air", est parcourue par un courant électrique. Cette cause à pour conséquence de rendre le transistor
 <strong>
  passant
 </strong>
 ou
 <strong>
  saturé
 </strong>
 et permet au courant de s’établir à travers l’ampoule. Soit
 <span class="inlineMath">
  <span class="katex">
   <span class="katex-mathml">
    <math>
     <semantics>
      <mrow>
       <msub>
        <mi>
         I
        </mi>
        <mi>
         C
        </mi>
       </msub>
       <mo>
        ≠
       </mo>
       <mn>
        0
       </mn>
      </mrow>
      <annotation encoding="application/x-tex">
       I_C \ne 0
      </annotation>
     </semantics>
    </math>
   </span>
   <span aria-hidden="true" class="katex-html">
    <span class="strut" style="height:0.716em;">
    </span>
    <span class="strut bottom" style="height:0.9309999999999999em;vertical-align:-0.215em;">
    </span>
    <span class="base textstyle uncramped">
     <span class="mord">
      <span class="mord mathit" style="margin-right:0.07847em;">
       I
      </span>
      <span class="msupsub">
       <span class="vlist">
        <span style="top:0.15em;margin-right:0.05em;margin-left:-0.07847em;">
         <span class="fontsize-ensurer reset-size5 size5">
          <span style="font-size:0em;">
           ​
          </span>
         </span>
         <span class="reset-textstyle scriptstyle cramped mtight">
          <span class="mord mathit mtight" style="margin-right:0.07153em;">
           C
          </span>
         </span>
        </span>
        <span class="baseline-fix">
         <span class="fontsize-ensurer reset-size5 size5">
          <span style="font-size:0em;">
           ​
          </span>
         </span>
         ​
        </span>
       </span>
      </span>
     </span>
     <span class="mrel">
      ≠
     </span>
     <span class="mord mathrm">
      0
     </span>
    </span>
   </span>
  </span>
 </span>
 car
 <span class="inlineMath">
  <span class="katex">
   <span class="katex-mathml">
    <math>
     <semantics>
      <mrow>
       <msub>
        <mi>
         I
        </mi>
        <mi>
         B
        </mi>
       </msub>
       <mo>
        ≠
       </mo>
       <mn>
        0
       </mn>
      </mrow>
      <annotation encoding="application/x-tex">
       I_B \ne 0
      </annotation>
     </semantics>
    </math>
   </span>
   <span aria-hidden="true" class="katex-html">
    <span class="strut" style="height:0.716em;">
    </span>
    <span class="strut bottom" style="height:0.9309999999999999em;vertical-align:-0.215em;">
    </span>
    <span class="base textstyle uncramped">
     <span class="mord">
      <span class="mord mathit" style="margin-right:0.07847em;">
       I
      </span>
      <span class="msupsub">
       <span class="vlist">
        <span style="top:0.15em;margin-right:0.05em;margin-left:-0.07847em;">
         <span class="fontsize-ensurer reset-size5 size5">
          <span style="font-size:0em;">
           ​
          </span>
         </span>
         <span class="reset-textstyle scriptstyle cramped mtight">
          <span class="mord mathit mtight" style="margin-right:0.05017em;">
           B
          </span>
         </span>
        </span>
        <span class="baseline-fix">
         <span class="fontsize-ensurer reset-size5 size5">
          <span style="font-size:0em;">
           ​
          </span>
         </span>
         ​
        </span>
       </span>
      </span>
     </span>
     <span class="mrel">
      ≠
     </span>
     <span class="mord mathrm">
      0
     </span>
    </span>
   </span>
  </span>
 </span>
 .
</p>
<div class="custom-block alert alert-primary">
 <div class="custom-block-body">
  <p>
   La résistance sur la base du transistor permet de le protéger des courants trop forts.
Plus la résistance est de faible valeur, plus l’ampoule sera lumineuse.
A l’inverse, une résistance trop forte sur la base du transistor pourra l’empêcher de conduire et de faire s’allumer l’ampoule.
Rassurez_vous, je vous donnerais les valeurs de résistances à utiliser.
   <img alt=";)" class="smiley" src="./static/smileys/clin.png"/>
  </p>
 </div>
</div>
<h5 id="utilisation-avec-nos-afficheurs">
 <a aria-hidden="true" href="#utilisation-avec-nos-afficheurs">
  <span class="es-autolink-heading">
  </span>
 </a>
 Utilisation avec nos afficheurs
</h5>
<p>
 Voyons un peu comment on va pouvoir utiliser ce transistor avec notre Arduino.
La carte Arduino est en fait le générateur de tension (schéma précédent) du montage.
Elle va définir si sa sortie est de 0V (transistor bloqué) ou de 5V (transistor saturé).
Ainsi, on va pouvoir allumer ou éteindre les afficheurs.
Voilà le modèle équivalent de la carte Arduino et de la commande de l’afficheur :
</p>
<p>
 <img alt="Montage de la commande" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/montage-de-la-commande.png"/>
</p>
<p>
 La carte Arduino va soit mettre à la masse la base du transistor, soit la mettre à +5V.
Dans le premier cas, il sera bloqué et l’afficheur sera éteint, dans le second il sera saturé et l’afficheur allumé.
Il en est de même pour chaque broche de l’afficheur. Elles seront au +5V ou à la masse selon la configuration que l’on aura définie dans le programme.
</p>
<h5 id="schéma-final">
 <a aria-hidden="true" href="#schéma-final">
  <span class="es-autolink-heading">
  </span>
 </a>
 Schéma final
</h5>
<p>
 Et comme vous l’attendez surement depuis tout à l’heure, voici le schéma tant attendu (nous verrons juste après comment programmer ce nouveau montage) !
</p>
<p>
 <img alt="2*7 segments - Schéma" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/27-segments-schema.png"/>
</p>
<p>
 <img alt="2*7 segments - Montage" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/27-segments-montage.png"/>
</p>
<h4 id="quelques-détails-techniques">
 <a aria-hidden="true" href="#quelques-détails-techniques">
  <span class="es-autolink-heading">
  </span>
 </a>
 Quelques détails techniques
</h4>
<ul>
 <li>
  Dans notre cas (et je vous passe les détails vraiment techniques et calculatoires), la résistance sur la base du transistor sera de
  <span class="inlineMath">
   <span class="katex">
    <span class="katex-mathml">
     <math>
      <semantics>
       <mrow>
        <mn>
         2
        </mn>
        <mi mathvariant="normal">
         .
        </mi>
        <mn>
         2
        </mn>
        <mi>
         k
        </mi>
        <mi mathvariant="normal">
         Ω
        </mi>
       </mrow>
       <annotation encoding="application/x-tex">
        2.2k\Omega
       </annotation>
      </semantics>
     </math>
    </span>
    <span aria-hidden="true" class="katex-html">
     <span class="strut" style="height:0.69444em;">
     </span>
     <span class="strut bottom" style="height:0.69444em;vertical-align:0em;">
     </span>
     <span class="base textstyle uncramped">
      <span class="mord mathrm">
       2
      </span>
      <span class="mord mathrm">
       .
      </span>
      <span class="mord mathrm">
       2
      </span>
      <span class="mord mathit" style="margin-right:0.03148em;">
       k
      </span>
      <span class="mord mathrm">
       Ω
      </span>
     </span>
    </span>
   </span>
  </span>
  (si vous n’avez pas cette valeur, elle pourra être de
  <span class="inlineMath">
   <span class="katex">
    <span class="katex-mathml">
     <math>
      <semantics>
       <mrow>
        <mn>
         3
        </mn>
        <mi mathvariant="normal">
         .
        </mi>
        <mn>
         3
        </mn>
        <mi>
         k
        </mi>
        <mi mathvariant="normal">
         Ω
        </mi>
       </mrow>
       <annotation encoding="application/x-tex">
        3.3k\Omega
       </annotation>
      </semantics>
     </math>
    </span>
    <span aria-hidden="true" class="katex-html">
     <span class="strut" style="height:0.69444em;">
     </span>
     <span class="strut bottom" style="height:0.69444em;vertical-align:0em;">
     </span>
     <span class="base textstyle uncramped">
      <span class="mord mathrm">
       3
      </span>
      <span class="mord mathrm">
       .
      </span>
      <span class="mord mathrm">
       3
      </span>
      <span class="mord mathit" style="margin-right:0.03148em;">
       k
      </span>
      <span class="mord mathrm">
       Ω
      </span>
     </span>
    </span>
   </span>
  </span>
  , ou encore de
  <span class="inlineMath">
   <span class="katex">
    <span class="katex-mathml">
     <math>
      <semantics>
       <mrow>
        <mn>
         3
        </mn>
        <mi mathvariant="normal">
         .
        </mi>
        <mn>
         9
        </mn>
        <mi>
         k
        </mi>
        <mi mathvariant="normal">
         Ω
        </mi>
       </mrow>
       <annotation encoding="application/x-tex">
        3.9k\Omega
       </annotation>
      </semantics>
     </math>
    </span>
    <span aria-hidden="true" class="katex-html">
     <span class="strut" style="height:0.69444em;">
     </span>
     <span class="strut bottom" style="height:0.69444em;vertical-align:0em;">
     </span>
     <span class="base textstyle uncramped">
      <span class="mord mathrm">
       3
      </span>
      <span class="mord mathrm">
       .
      </span>
      <span class="mord mathrm">
       9
      </span>
      <span class="mord mathit" style="margin-right:0.03148em;">
       k
      </span>
      <span class="mord mathrm">
       Ω
      </span>
     </span>
    </span>
   </span>
  </span>
  , voir même de
  <span class="inlineMath">
   <span class="katex">
    <span class="katex-mathml">
     <math>
      <semantics>
       <mrow>
        <mn>
         4
        </mn>
        <mi mathvariant="normal">
         .
        </mi>
        <mn>
         7
        </mn>
        <mi>
         k
        </mi>
        <mi mathvariant="normal">
         Ω
        </mi>
       </mrow>
       <annotation encoding="application/x-tex">
        4.7k\Omega
       </annotation>
      </semantics>
     </math>
    </span>
    <span aria-hidden="true" class="katex-html">
     <span class="strut" style="height:0.69444em;">
     </span>
     <span class="strut bottom" style="height:0.69444em;vertical-align:0em;">
     </span>
     <span class="base textstyle uncramped">
      <span class="mord mathrm">
       4
      </span>
      <span class="mord mathrm">
       .
      </span>
      <span class="mord mathrm">
       7
      </span>
      <span class="mord mathit" style="margin-right:0.03148em;">
       k
      </span>
      <span class="mord mathrm">
       Ω
      </span>
     </span>
    </span>
   </span>
  </span>
  ).
 </li>
 <li>
  Les transistors seront des transistors bipolaires NPN de référence 2N2222, ou bien un équivalent qui est le BC547. Il en faudra deux donc.
 </li>
 <li>
  Le décodeur
  <abbr title="Binary Coded Decimal ou Binaire Codé Décimal">
   BCD
  </abbr>
  est le même que précédemment (ou équivalent).
 </li>
</ul>
<p>
 Et avec tout ça, on est prêt pour programmer !
 <img alt=":)" class="smiley" src="./static/smileys/smile.png"/>
</p>
<h4 id="et-de-programmation">
 <a aria-hidden="true" href="#et-de-programmation">
  <span class="es-autolink-heading">
  </span>
 </a>
 …et de programmation
</h4>
<p>
 Nous utilisons deux nouvelles broches servant à piloter chacun des interrupteurs (transistors).
Chacune de ces broches doivent donc être déclarées en global (pour son numéro) puis régler comme sortie.
Ensuite, il ne vous restera plus qu’à alimenter chacun des transistors au bon moment pour allumer l’afficheur souhaité.
En synchronisant l’allumage avec la valeur envoyé au décodeur, vous afficherez les nombres souhaités comme bon vous semble.
Voici un exemple de code complet, de la fonction setup() jusqu’à la fonction d’affichage.
Ce code est commenté et vous ne devriez donc avoir aucun mal à le comprendre !
Ce programme est un compteur sur 2 segments, il compte donc de 0 à 99 et recommence au début dès qu’il a atteint 99.
La vidéo se trouve juste après ce code.
</p>
<figure>
 <div class="hljs-code-div">
  <div class="hljs-line-numbers">
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
  </div>
  <pre><code class="hljs language-cpp"><span class="hljs-comment">// définition des broches du décodeur 7 segments</span>
<span class="hljs-comment">// (vous pouvez changer les numéros si vous voulez)</span>
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> bit_A = <span class="hljs-number">2</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> bit_B = <span class="hljs-number">3</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> bit_C = <span class="hljs-number">4</span>;
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> bit_D = <span class="hljs-number">5</span>;

<span class="hljs-comment">// définitions des broches des transistors pour chaque afficheur</span>
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> alim_dizaine = <span class="hljs-number">6</span>; <span class="hljs-comment">// les dizaines</span>
<span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> alim_unite = <span class="hljs-number">7</span>;   <span class="hljs-comment">// les unites</span>

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">setup</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-comment">// Les broches sont toutes des sorties</span>
    pinMode(bit_A, OUTPUT);
    pinMode(bit_B, OUTPUT);
    pinMode(bit_C, OUTPUT);
    pinMode(bit_D, OUTPUT);
    pinMode(alim_dizaine, OUTPUT);
    pinMode(alim_unite, OUTPUT);

    <span class="hljs-comment">// Les broches sont toutes mises à l'état bas</span>
    digitalWrite(bit_A, LOW);
    digitalWrite(bit_B, LOW);
    digitalWrite(bit_C, LOW);
    digitalWrite(bit_D, LOW);
    digitalWrite(alim_dizaine, LOW);
    digitalWrite(alim_unite, LOW);
}

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span> <span class="hljs-comment">// fonction principale</span>
</span>{
    <span class="hljs-comment">// boucle qui permet de compter de 0 à 99 (= 100 valeurs)</span>
    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">char</span> i = <span class="hljs-number">0</span>; i&lt;<span class="hljs-number">100</span>; i++)
    {
        <span class="hljs-comment">// appel de la fonction affichage avec envoi du nombre à afficher</span>
        afficher_nombre(i);
    }
}

<span class="hljs-comment">// fonction permettant d'afficher un nombre sur deux afficheurs</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">afficher_nombre</span><span class="hljs-params">(<span class="hljs-keyword">char</span> nombre)</span>
</span>{
    <span class="hljs-keyword">long</span> temps; <span class="hljs-comment">// variable utilisée pour savoir le temps écoulé...</span>
    <span class="hljs-keyword">char</span> unite = <span class="hljs-number">0</span>, dizaine = <span class="hljs-number">0</span>; <span class="hljs-comment">// variable pour chaque afficheur</span>

    <span class="hljs-keyword">if</span>(nombre &gt; <span class="hljs-number">9</span>) <span class="hljs-comment">// si le nombre reçu dépasse 9</span>
    {
        dizaine = nombre / <span class="hljs-number">10</span>; <span class="hljs-comment">// on récupère les dizaines</span>
    }

    unite = nombre - (dizaine*<span class="hljs-number">10</span>); <span class="hljs-comment">// on récupère les unités</span>

    temps = millis(); <span class="hljs-comment">// on récupère le temps courant</span>

    <span class="hljs-comment">// tant qu'on a pas affiché ce chiffre pendant au moins 500 millisecondes</span>
    <span class="hljs-comment">// permet donc de pouvoir lire le nombre affiché</span>
    <span class="hljs-keyword">while</span>((millis()-temps) &lt; <span class="hljs-number">500</span>)
    {
        <span class="hljs-comment">// on affiche le nombre</span>

        <span class="hljs-comment">// d'abord les dizaines pendant 10 ms</span>

        <span class="hljs-comment">// le transistor de l'afficheur des dizaines est saturé,</span>
        <span class="hljs-comment">// donc l'afficheur est allumé</span>
        digitalWrite(alim_dizaine, HIGH);
        <span class="hljs-comment">// on appel la fonction qui permet d'afficher le chiffre dizaine</span>
        afficher(dizaine);
        <span class="hljs-comment">// l'autre transistor est bloqué et l'afficheur éteint</span>
        digitalWrite(alim_unite, LOW);
        delay(<span class="hljs-number">10</span>);

        <span class="hljs-comment">// puis les unités pendant 10 ms</span>

        <span class="hljs-comment">// on éteint le transistor allumé</span>
        digitalWrite(alim_dizaine, LOW);
        <span class="hljs-comment">// on appel la fonction qui permet d'afficher le chiffre unité</span>
        afficher(unite);
        <span class="hljs-comment">// et on allume l'autre</span>
        digitalWrite(alim_unite, HIGH);
        delay(<span class="hljs-number">10</span>);
    }
}

<span class="hljs-comment">// fonction écrivant sur un seul afficheur</span>
<span class="hljs-comment">// on utilise le même principe que vu plus haut</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">afficher</span><span class="hljs-params">(<span class="hljs-keyword">char</span> chiffre)</span>
</span>{
    digitalWrite(bit_A, LOW);
    digitalWrite(bit_B, LOW);
    digitalWrite(bit_C, LOW);
    digitalWrite(bit_D, LOW);

    <span class="hljs-keyword">if</span>(chiffre &gt;= <span class="hljs-number">8</span>)
    {
        digitalWrite(bit_D, HIGH);
        chiffre = chiffre - <span class="hljs-number">8</span>;
    }
    <span class="hljs-keyword">if</span>(chiffre &gt;= <span class="hljs-number">4</span>)
    {
        digitalWrite(bit_C, HIGH);
        chiffre = chiffre - <span class="hljs-number">4</span>;
    }
    <span class="hljs-keyword">if</span>(chiffre &gt;= <span class="hljs-number">2</span>)
    {
        digitalWrite(bit_B, HIGH);
        chiffre = chiffre - <span class="hljs-number">2</span>;
    }
    <span class="hljs-keyword">if</span>(chiffre &gt;= <span class="hljs-number">1</span>)
    {
        digitalWrite(bit_A, HIGH);
        chiffre = chiffre - <span class="hljs-number">1</span>;
    }
}
</code></pre>
 </div>
 <figcaption>
  Le compteur de 0 à 99
 </figcaption>
</figure>
<p>
 Voilà donc la vidéo présentant le résultat final :
</p>
<div class="text-center">
 <div class="video-container">
  <div class="video-wrapper">
   <iframe allowfullscreen="" frameborder="0" height="315" src="https://www.youtube.com/embed/zgvV25s_ilQ" width="560">
   </iframe>
  </div>
 </div>
</div>
<h3 id="contraintes-des-évènements">
 <a aria-hidden="true" href="#contraintes-des-évènements">
  <span class="es-autolink-heading">
  </span>
 </a>
 Contraintes des évènements
</h3>
<p>
 Comme vous l’avez vu juste avant, afficher de manière alternative n’est pas trop difficile.
Cependant, vous avez surement remarqué, nous avons utilisé des fonctions bloquantes (delay).
Si jamais un évènement devait arriver pendant ce temps, nous aurions beaucoup de chance de le rater car il pourrait arriver "pendant" un délai d’attente pour l’affichage.
Pour parer à cela, je vais maintenant vous expliquer une autre méthode, préférable, pour faire de l’affichage.
Elle s’appuiera sur l’utilisation de la fonction millis(), qui nous permettra de générer une boucle de rafraîchissement de l’affichage.
Voici un organigramme qui explique le principe :
</p>
<div class="text-center">
 <p>
  <img alt="organigramme de rafraichissement" src="./images/uploaded/tuto-arduino-205-afficheurs-7-segments/organigramme-de-rafraichissement.jpg"/>
 </p>
</div>
<p>
 Comme vous pouvez le voir, il n’y a plus de fonction qui "attend".
Tout se passe de manière continue, sans qu’il n’y ai jamais de pause.
Ainsi, aucun évènement ne sera raté (en théorie, un évènement trèèèèèès rapide pourra toujours passer inaperçu).
Voici un exemple de programmation de la boucle principal (suivi de ses fonctions annexes) :
</p>
<figure>
 <div class="hljs-code-div">
  <div class="hljs-line-numbers">
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
   <span>
   </span>
  </div>
  <pre><code class="hljs language-cpp"><span class="hljs-keyword">bool</span> afficheur = <span class="hljs-literal">false</span>; <span class="hljs-comment">// variable pour le choix de l'afficheur</span>

<span class="hljs-comment">// --- setup() ---</span>

<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">loop</span><span class="hljs-params">()</span>
</span>{
    <span class="hljs-comment">// gestion du rafraichissement</span>
    <span class="hljs-comment">// si ça fait plus de 10 ms qu'on affiche,</span>
    <span class="hljs-comment">// on change de 7 segments (alternance unité &lt;-&gt; dizaine)</span>
    <span class="hljs-keyword">if</span>((millis() - temps) &gt; <span class="hljs-number">10</span>)
    {
        <span class="hljs-comment">// on inverse la valeur de "afficheur"</span>
        <span class="hljs-comment">// pour changer d'afficheur (unité ou dizaine)</span>
        afficheur = !afficheur;
        <span class="hljs-comment">// on affiche la valeur sur l'afficheur</span>
        <span class="hljs-comment">// afficheur : true-&gt;dizaines, false-&gt;unités</span>
        afficher_nombre(valeur, afficheur);
        temps = millis(); <span class="hljs-comment">// on met à jour le temps</span>
    }

    <span class="hljs-comment">// ici, on peut traiter les évènements (bouton...)</span>
}

<span class="hljs-comment">// fonction permettant d'afficher un nombre</span>
<span class="hljs-comment">// elle affiche soit les dizaines soit les unités</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">afficher_nombre</span><span class="hljs-params">(<span class="hljs-keyword">char</span> nombre, <span class="hljs-keyword">bool</span> afficheur)</span>
</span>{
    <span class="hljs-keyword">char</span> unite = <span class="hljs-number">0</span>, dizaine = <span class="hljs-number">0</span>;
    <span class="hljs-keyword">if</span>(nombre &gt; <span class="hljs-number">9</span>)
        dizaine = nombre / <span class="hljs-number">10</span>; <span class="hljs-comment">// on recupere les dizaines</span>
    unite = nombre - (dizaine*<span class="hljs-number">10</span>); <span class="hljs-comment">// on recupere les unités</span>

    <span class="hljs-comment">// si "</span>
    <span class="hljs-keyword">if</span>(afficheur)
    {
        <span class="hljs-comment">// on affiche les dizaines</span>
        digitalWrite(alim_unite, LOW);
        afficher(dizaine);
        digitalWrite(alim_dizaine, HIGH);
    }
    <span class="hljs-keyword">else</span> <span class="hljs-comment">// égal à : else if(!afficheur)</span>
    {
        <span class="hljs-comment">// on affiche les unités</span>
        digitalWrite(alim_dizaine, LOW);
        afficher(unite);
        digitalWrite(alim_unite, HIGH);
    }
}

<span class="hljs-comment">// fonction écrivant sur un seul afficheur</span>
<span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">afficher</span><span class="hljs-params">(<span class="hljs-keyword">char</span> chiffre)</span>
</span>{
    digitalWrite(bit_A, LOW);
    digitalWrite(bit_B, LOW);
    digitalWrite(bit_C, LOW);
    digitalWrite(bit_D, LOW);

    <span class="hljs-keyword">if</span>(chiffre &gt;= <span class="hljs-number">8</span>)
    {
        digitalWrite(bit_D, HIGH);
        chiffre = chiffre - <span class="hljs-number">8</span>;
    }
    <span class="hljs-keyword">if</span>(chiffre &gt;= <span class="hljs-number">4</span>)
    {
        digitalWrite(bit_C, HIGH);
        chiffre = chiffre - <span class="hljs-number">4</span>;
    }
    <span class="hljs-keyword">if</span>(chiffre &gt;= <span class="hljs-number">2</span>)
    {
        digitalWrite(bit_B, HIGH);
        chiffre = chiffre - <span class="hljs-number">2</span>;
    }
    <span class="hljs-keyword">if</span>(chiffre &gt;= <span class="hljs-number">1</span>)
    {
        digitalWrite(bit_A, HIGH);
        chiffre = chiffre - <span class="hljs-number">1</span>;
    }
}
</code></pre>
 </div>
 <figcaption>
  L’affichage de deux chiffres en utilisant
  <code>
   millis
  </code>
 </figcaption>
</figure>
<div class="custom-block alert alert-primary">
 <div class="custom-block-body">
  <p>
   Si vous voulez tester le phénomène de persistance rétinienne, vous pouvez changer le temps de la boucle de rafraichissement (ligne 9). Si vous l’augmenter, vous commencerez à vois les afficheurs clignoter.
En mettant une valeur d’un peu moins de une seconde vous verrez les afficheurs s’illuminer l’un après l’autre.
  </p>
 </div>
</div>
<p>
 Ce chapitre vous a appris à utiliser un nouveau moyen pour afficher des informations avec votre carte Arduino. L’afficheur peut sembler peu utilisé mais en fait de nombreuses applications existe ! (chronomètre, réveil, horloge, compteur de passage, afficheur de score, etc.). Par exemple, il pourra vous servir pour déboguer votre code et afficher la valeur des variables souhaitées…
</p>
            </div>
            <!-- /.entry-content -->
            <hr>
            <div class="row bg-light my-2 py-2 rounded">
                <div class="col mr-auto">
                    <a class="" href="/tuto-arduino-204-un-simple-bouton.html" rel="prev">
                        <i class="fas fa-chevron-left fa-lg"></i>
                        tuto-arduino-204-un-simple-bouton
                    </a>
                </div>
                <div class="col-auto">
                    <a class="" href="/tuto-arduino-206-tp-parking.html" rel="next">
                        tuto-arduino-206-tp-parking
                        <i class="fas fa-chevron-right fa-lg"></i>
                    </a>
                </div>
            </div>
            <div class="mb-3 text-center">
                <a class="btn btn-outline-dark mx-1" href="https://twitter.com/share?url=https://eskimon.fr/tuto-arduino-205-afficheurs-7-segments&amp;text=Afficheurs 7 segments - https://eskimon.fr/tuto-arduino-205-afficheurs-7-segments" rel="nofollow" title="Partager cet article sur Twitter" role="button" data-toggle="tooltip" data-placement="top">
                    <i class="fab fa-twitter fa-lg"></i>
                </a>
                <a class="btn btn-outline-dark mx-1" href="https://www.facebook.com/sharer.php?u=https://eskimon.fr/tuto-arduino-205-afficheurs-7-segments&amp;t=Afficheurs 7 segments - https://eskimon.fr/tuto-arduino-205-afficheurs-7-segments" rel="nofollow" title="Partager cet article sur Facebook" role="button" data-toggle="tooltip" data-placement="top">
                    <i class="fab fa-facebook-f fa-lg"></i>
                </a>
                <a class="btn btn-outline-dark mx-1" href="https://plus.google.com/share?url=https://eskimon.fr/tuto-arduino-205-afficheurs-7-segments&amp;hl=fr" rel="nofollow" title="Partager cet article sur Google +" role="button" data-toggle="tooltip" data-placement="top">
                    <i class="fab fa-google-plus fa-lg"></i>
                </a>
                <!--<a class="btn btn-outline-dark mx-1" href="http://sharetodiaspora.github.io/?url=https://eskimon.fr/tuto-arduino-205-afficheurs-7-segments&amp;title=Afficheurs 7 segments - https://eskimon.fr/tuto-arduino-205-afficheurs-7-segments" rel="nofollow"  title="Partager cet article sur Diaspora" role="button" data-toggle="tooltip" data-placement="top">
                    <i class="fab fa-google-plus fa-lg"></i>
                </a>-->
                <a class="btn btn-outline-dark mx-1" href="mailto:?subject=Afficheurs 7 segments&amp;body=https://eskimon.fr/tuto-arduino-205-afficheurs-7-segments"rel="nofollow" title="Partager cet article par email" role="button" data-toggle="tooltip" data-placement="top">
                    <i class="far fa-envelope fa-lg"></i>
                </a>
            </div>
        </article>
    </div>
</div>
    </div>
<footer class="container-fluid bg-dark small text-white px-3">
<div class="row">
    <div class="col align-self-start">

    </div>
    <div class="col align-self-center text-center">
        © Eskimon -
        Blog propulsé par <a class="bold text-white" href="https://blog.getpelican.com/" rel="nofollow">Pelican</a> -
        Thème fait maison
    </div>
    <div class="col align-self-end text-right">
        <a class="btn btn-lg text-light" href="https://github.com/Eskimon" rel="nofollow" title="Mon profil Github">
            <i class="fab fa-github fa-lg"></i>
        </a>
        <a class="btn btn-lg text-light" href="https://twitter.com/Eskimon_fr" rel="nofollow" title="Me suivre sur Linkedin">
            <i class="fab fa-twitter fa-lg"></i>
        </a>
    </div>
  </div>
</footer>

    <!-- For formula -->
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.2/MathJax.js?config=TeX-AMS-MML_HTMLorMML"></script>
    <!-- Font awesome -->
    <script src="https://use.fontawesome.com/releases/v5.0.0/js/all.js"></script>
    <!-- JQuery first -->
    <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>
    <!-- Popper.js -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js" integrity="sha384-ApNbgh9B+Y1QKtv3Rn7W3mgPxhU9K/ScQsAP7hUibX39j7fakFPskvXusvfa0b4Q" crossorigin="anonymous"></script>
    <!-- Bootstrap -->
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>
    <!-- For tooltips -->
    <script>$(function () {  $('[data-toggle="tooltip"]').tooltip()})</script>
    <script src="/static/js/my-scripts.js"></script>
<script>
function create_side_summary() {
    // Duplicate summary
    var main_summary = $('#sommaire').next();
    if(main_summary.length === 0)
        return
    var side_summary = main_summary.clone();
    side_summary.addClass('pl-0');
    var all_p = side_summary.find('p');
    all_p.contents().unwrap();
    var all_li = side_summary.find('li');
    all_li.addClass('pl-1');

    // scrollspy - in
    side_summary.attr('id', 'es-side-summary-mainlist');
    //side_summary.addClass('nav');
    //all_li.addClass('nav-item');
    var all_a = side_summary.find('a');
    all_a.addClass('nav-link');
    var all_ul = side_summary.find('ul');
    all_ul.addClass('pl-1');
    $('body').scrollspy({ target: '#es-side-summary-mainlist' });
    // scrollspy - out

    var summary_title = document.createElement("h4");
    summary_title.className = 'navbar-brand';
    summary_title.innerHTML = 'Sommaire';
    $(summary_title).prependTo('#es-side-summary-content');
    side_summary.appendTo('#es-side-summary-content');
    main_summary.addClass('es-subul-collapse');
}

function generate_spoilers() {
    all_secret = $('.custom-block-spoiler');
    all_secret.each(function( index ) {
    let content = $(this).html();
    $(this).html('');
    $(this).addClass('card');
    var headerText = document.createElement("button");
    var cardHeader = document.createElement("div");
    var cardBodyWrapper = document.createElement("div");
    var cardBody = document.createElement("div");
    $(headerText).text('Contenu masqué, cliquez pour afficher');
    $(headerText).addClass('btn btn-link btn-sm');
    $(headerText).attr('data-toggle', 'collapse');
    $(headerText).attr('data-target', '#collapse-' + index);
    $(headerText).attr('aria-controls', 'collapse-' + index);
    $(headerText).attr('aria-expanded', 'false');
    $(cardHeader).append(headerText);
    $(cardHeader).addClass('card-header');
    $(cardHeader).attr('id', 'spoiler-' + index);
    $(cardBody).html(content);
    $(cardBody).addClass('card-body');
    $(cardBodyWrapper).append(cardBody);
    $(cardBodyWrapper).addClass('collapse hide');
    $(cardBodyWrapper).attr('id', 'collapse-' + index)
    $(cardBodyWrapper).attr('aria-labelledby', 'spoiler-' + index)
    $(this).prepend(cardHeader);
    $(this).append(cardBodyWrapper);
    });

    $('.collapse').collapse({toggle: false});
}

create_side_summary();
generate_spoilers();
</script>
</body>

</html>
